/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["/js/app"],{

/***/ "./node_modules/@popperjs/core/lib/createPopper.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/createPopper.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createPopper\": () => (/* binding */ createPopper),\n/* harmony export */   \"detectOverflow\": () => (/* reexport safe */ _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"]),\n/* harmony export */   \"popperGenerator\": () => (/* binding */ popperGenerator)\n/* harmony export */ });\n/* harmony import */ var _dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dom-utils/getCompositeRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js\");\n/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dom-utils/getLayoutRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js\");\n/* harmony import */ var _dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-utils/listScrollParents.js */ \"./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js\");\n/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom-utils/getOffsetParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js\");\n/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom-utils/getComputedStyle.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\");\n/* harmony import */ var _utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/orderModifiers.js */ \"./node_modules/@popperjs/core/lib/utils/orderModifiers.js\");\n/* harmony import */ var _utils_debounce_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/debounce.js */ \"./node_modules/@popperjs/core/lib/utils/debounce.js\");\n/* harmony import */ var _utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/validateModifiers.js */ \"./node_modules/@popperjs/core/lib/utils/validateModifiers.js\");\n/* harmony import */ var _utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/uniqueBy.js */ \"./node_modules/@popperjs/core/lib/utils/uniqueBy.js\");\n/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/getBasePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\");\n/* harmony import */ var _utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/mergeByName.js */ \"./node_modules/@popperjs/core/lib/utils/mergeByName.js\");\n/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/detectOverflow.js */ \"./node_modules/@popperjs/core/lib/utils/detectOverflow.js\");\n/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-utils/instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';\nvar INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';\nvar DEFAULT_OPTIONS = {\n  placement: 'bottom',\n  modifiers: [],\n  strategy: 'absolute'\n};\n\nfunction areValidElements() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return !args.some(function (element) {\n    return !(element && typeof element.getBoundingClientRect === 'function');\n  });\n}\n\nfunction popperGenerator(generatorOptions) {\n  if (generatorOptions === void 0) {\n    generatorOptions = {};\n  }\n\n  var _generatorOptions = generatorOptions,\n      _generatorOptions$def = _generatorOptions.defaultModifiers,\n      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,\n      _generatorOptions$def2 = _generatorOptions.defaultOptions,\n      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n  return function createPopper(reference, popper, options) {\n    if (options === void 0) {\n      options = defaultOptions;\n    }\n\n    var state = {\n      placement: 'bottom',\n      orderedModifiers: [],\n      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n      modifiersData: {},\n      elements: {\n        reference: reference,\n        popper: popper\n      },\n      attributes: {},\n      styles: {}\n    };\n    var effectCleanupFns = [];\n    var isDestroyed = false;\n    var instance = {\n      state: state,\n      setOptions: function setOptions(setOptionsAction) {\n        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;\n        cleanupModifierEffects();\n        state.options = Object.assign({}, defaultOptions, state.options, options);\n        state.scrollParents = {\n          reference: (0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(reference) ? (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(reference) : reference.contextElement ? (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(reference.contextElement) : [],\n          popper: (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(popper)\n        }; // Orders the modifiers based on their dependencies and `phase`\n        // properties\n\n        var orderedModifiers = (0,_utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,_utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n\n        state.orderedModifiers = orderedModifiers.filter(function (m) {\n          return m.enabled;\n        }); // Validate the provided modifiers so that the consumer will get warned\n        // if one of the modifiers is invalid for any reason\n\n        if (true) {\n          var modifiers = (0,_utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])([].concat(orderedModifiers, state.options.modifiers), function (_ref) {\n            var name = _ref.name;\n            return name;\n          });\n          (0,_utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(modifiers);\n\n          if ((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(state.options.placement) === _enums_js__WEBPACK_IMPORTED_MODULE_7__.auto) {\n            var flipModifier = state.orderedModifiers.find(function (_ref2) {\n              var name = _ref2.name;\n              return name === 'flip';\n            });\n\n            if (!flipModifier) {\n              console.error(['Popper: \"auto\" placements require the \"flip\" modifier be', 'present and enabled to work.'].join(' '));\n            }\n          }\n\n          var _getComputedStyle = (0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(popper),\n              marginTop = _getComputedStyle.marginTop,\n              marginRight = _getComputedStyle.marginRight,\n              marginBottom = _getComputedStyle.marginBottom,\n              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can\n          // cause bugs with positioning, so we'll warn the consumer\n\n\n          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {\n            return parseFloat(margin);\n          })) {\n            console.warn(['Popper: CSS \"margin\" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));\n          }\n        }\n\n        runModifierEffects();\n        return instance.update();\n      },\n      // Sync update – it will always be executed, even if not necessary. This\n      // is useful for low frequency updates where sync behavior simplifies the\n      // logic.\n      // For high frequency updates (e.g. `resize` and `scroll` events), always\n      // prefer the async Popper#update method\n      forceUpdate: function forceUpdate() {\n        if (isDestroyed) {\n          return;\n        }\n\n        var _state$elements = state.elements,\n            reference = _state$elements.reference,\n            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n        // anymore\n\n        if (!areValidElements(reference, popper)) {\n          if (true) {\n            console.error(INVALID_ELEMENT_ERROR);\n          }\n\n          return;\n        } // Store the reference and popper rects to be read by modifiers\n\n\n        state.rects = {\n          reference: (0,_dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(reference, (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(popper), state.options.strategy === 'fixed'),\n          popper: (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(popper)\n        }; // Modifiers have the ability to reset the current update cycle. The\n        // most common use case for this is the `flip` modifier changing the\n        // placement, which then needs to re-run all the modifiers, because the\n        // logic was previously ran for the previous placement and is therefore\n        // stale/incorrect\n\n        state.reset = false;\n        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n        // is filled with the initial data specified by the modifier. This means\n        // it doesn't persist and is fresh on each update.\n        // To ensure persistent data, use `${name}#persistent`\n\n        state.orderedModifiers.forEach(function (modifier) {\n          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n        });\n        var __debug_loops__ = 0;\n\n        for (var index = 0; index < state.orderedModifiers.length; index++) {\n          if (true) {\n            __debug_loops__ += 1;\n\n            if (__debug_loops__ > 100) {\n              console.error(INFINITE_LOOP_ERROR);\n              break;\n            }\n          }\n\n          if (state.reset === true) {\n            state.reset = false;\n            index = -1;\n            continue;\n          }\n\n          var _state$orderedModifie = state.orderedModifiers[index],\n              fn = _state$orderedModifie.fn,\n              _state$orderedModifie2 = _state$orderedModifie.options,\n              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,\n              name = _state$orderedModifie.name;\n\n          if (typeof fn === 'function') {\n            state = fn({\n              state: state,\n              options: _options,\n              name: name,\n              instance: instance\n            }) || state;\n          }\n        }\n      },\n      // Async and optimistically optimized update – it will not be executed if\n      // not necessary (debounced to run at most once-per-tick)\n      update: (0,_utils_debounce_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(function () {\n        return new Promise(function (resolve) {\n          instance.forceUpdate();\n          resolve(state);\n        });\n      }),\n      destroy: function destroy() {\n        cleanupModifierEffects();\n        isDestroyed = true;\n      }\n    };\n\n    if (!areValidElements(reference, popper)) {\n      if (true) {\n        console.error(INVALID_ELEMENT_ERROR);\n      }\n\n      return instance;\n    }\n\n    instance.setOptions(options).then(function (state) {\n      if (!isDestroyed && options.onFirstUpdate) {\n        options.onFirstUpdate(state);\n      }\n    }); // Modifiers have the ability to execute arbitrary code before the first\n    // update cycle runs. They will be executed in the same order as the update\n    // cycle. This is useful when a modifier adds some persistent data that\n    // other modifiers need to use, but the modifier is run after the dependent\n    // one.\n\n    function runModifierEffects() {\n      state.orderedModifiers.forEach(function (_ref3) {\n        var name = _ref3.name,\n            _ref3$options = _ref3.options,\n            options = _ref3$options === void 0 ? {} : _ref3$options,\n            effect = _ref3.effect;\n\n        if (typeof effect === 'function') {\n          var cleanupFn = effect({\n            state: state,\n            name: name,\n            instance: instance,\n            options: options\n          });\n\n          var noopFn = function noopFn() {};\n\n          effectCleanupFns.push(cleanupFn || noopFn);\n        }\n      });\n    }\n\n    function cleanupModifierEffects() {\n      effectCleanupFns.forEach(function (fn) {\n        return fn();\n      });\n      effectCleanupFns = [];\n    }\n\n    return instance;\n  };\n}\nvar createPopper = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/createPopper.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/contains.js":
/*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/contains.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ contains)\n/* harmony export */ });\n/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n\nfunction contains(parent, child) {\n  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method\n\n  if (parent.contains(child)) {\n    return true;\n  } // then fallback to custom implementation with Shadow DOM support\n  else if (rootNode && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isShadowRoot)(rootNode)) {\n      var next = child;\n\n      do {\n        if (next && parent.isSameNode(next)) {\n          return true;\n        } // $FlowFixMe[prop-missing]: need a better way to handle this...\n\n\n        next = next.parentNode || next.host;\n      } while (next);\n    } // Give up, the result is false\n\n\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9jb250YWlucy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErQztBQUNoQztBQUNmLDJEQUEyRDs7QUFFM0Q7QUFDQTtBQUNBLElBQUk7QUFDSix1QkFBdUIsNERBQVk7QUFDbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTs7O0FBR1Y7QUFDQSxRQUFRO0FBQ1IsTUFBTTs7O0FBR047QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2NvbnRhaW5zLmpzP2EyMTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGFpbnMocGFyZW50LCBjaGlsZCkge1xuICB2YXIgcm9vdE5vZGUgPSBjaGlsZC5nZXRSb290Tm9kZSAmJiBjaGlsZC5nZXRSb290Tm9kZSgpOyAvLyBGaXJzdCwgYXR0ZW1wdCB3aXRoIGZhc3RlciBuYXRpdmUgbWV0aG9kXG5cbiAgaWYgKHBhcmVudC5jb250YWlucyhjaGlsZCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyB0aGVuIGZhbGxiYWNrIHRvIGN1c3RvbSBpbXBsZW1lbnRhdGlvbiB3aXRoIFNoYWRvdyBET00gc3VwcG9ydFxuICBlbHNlIGlmIChyb290Tm9kZSAmJiBpc1NoYWRvd1Jvb3Qocm9vdE5vZGUpKSB7XG4gICAgICB2YXIgbmV4dCA9IGNoaWxkO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuZXh0ICYmIHBhcmVudC5pc1NhbWVOb2RlKG5leHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddOiBuZWVkIGEgYmV0dGVyIHdheSB0byBoYW5kbGUgdGhpcy4uLlxuXG5cbiAgICAgICAgbmV4dCA9IG5leHQucGFyZW50Tm9kZSB8fCBuZXh0Lmhvc3Q7XG4gICAgICB9IHdoaWxlIChuZXh0KTtcbiAgICB9IC8vIEdpdmUgdXAsIHRoZSByZXN1bHQgaXMgZmFsc2VcblxuXG4gIHJldHVybiBmYWxzZTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/contains.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getBoundingClientRect)\n/* harmony export */ });\n/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/math.js */ \"./node_modules/@popperjs/core/lib/utils/math.js\");\n/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n/* harmony import */ var _isLayoutViewport_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isLayoutViewport.js */ \"./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js\");\n\n\n\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n\n  var clientRect = element.getBoundingClientRect();\n  var scaleX = 1;\n  var scaleY = 1;\n\n  if (includeScale && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element)) {\n    scaleX = element.offsetWidth > 0 ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_1__.round)(clientRect.width) / element.offsetWidth || 1 : 1;\n    scaleY = element.offsetHeight > 0 ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_1__.round)(clientRect.height) / element.offsetHeight || 1 : 1;\n  }\n\n  var _ref = (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(element) ? (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(element) : window,\n      visualViewport = _ref.visualViewport;\n\n  var addVisualOffsets = !(0,_isLayoutViewport_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])() && isFixedStrategy;\n  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;\n  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;\n  var width = clientRect.width / scaleX;\n  var height = clientRect.height / scaleY;\n  return {\n    width: width,\n    height: height,\n    top: y,\n    right: x + width,\n    bottom: y + height,\n    left: x,\n    x: x,\n    y: y\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMkQ7QUFDbEI7QUFDRjtBQUNjO0FBQ3RDO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLDZEQUFhO0FBQ25DLHVDQUF1QyxxREFBSztBQUM1Qyx3Q0FBd0MscURBQUs7QUFDN0M7O0FBRUEsYUFBYSx5REFBUyxZQUFZLHlEQUFTO0FBQzNDOztBQUVBLDBCQUEwQixnRUFBZ0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzP2ZjYzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBpc0xheW91dFZpZXdwb3J0IGZyb20gXCIuL2lzTGF5b3V0Vmlld3BvcnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCBpbmNsdWRlU2NhbGUsIGlzRml4ZWRTdHJhdGVneSkge1xuICBpZiAoaW5jbHVkZVNjYWxlID09PSB2b2lkIDApIHtcbiAgICBpbmNsdWRlU2NhbGUgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc0ZpeGVkU3RyYXRlZ3kgPT09IHZvaWQgMCkge1xuICAgIGlzRml4ZWRTdHJhdGVneSA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIGNsaWVudFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgc2NhbGVYID0gMTtcbiAgdmFyIHNjYWxlWSA9IDE7XG5cbiAgaWYgKGluY2x1ZGVTY2FsZSAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgc2NhbGVYID0gZWxlbWVudC5vZmZzZXRXaWR0aCA+IDAgPyByb3VuZChjbGllbnRSZWN0LndpZHRoKSAvIGVsZW1lbnQub2Zmc2V0V2lkdGggfHwgMSA6IDE7XG4gICAgc2NhbGVZID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgPiAwID8gcm91bmQoY2xpZW50UmVjdC5oZWlnaHQpIC8gZWxlbWVudC5vZmZzZXRIZWlnaHQgfHwgMSA6IDE7XG4gIH1cblxuICB2YXIgX3JlZiA9IGlzRWxlbWVudChlbGVtZW50KSA/IGdldFdpbmRvdyhlbGVtZW50KSA6IHdpbmRvdyxcbiAgICAgIHZpc3VhbFZpZXdwb3J0ID0gX3JlZi52aXN1YWxWaWV3cG9ydDtcblxuICB2YXIgYWRkVmlzdWFsT2Zmc2V0cyA9ICFpc0xheW91dFZpZXdwb3J0KCkgJiYgaXNGaXhlZFN0cmF0ZWd5O1xuICB2YXIgeCA9IChjbGllbnRSZWN0LmxlZnQgKyAoYWRkVmlzdWFsT2Zmc2V0cyAmJiB2aXN1YWxWaWV3cG9ydCA/IHZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQgOiAwKSkgLyBzY2FsZVg7XG4gIHZhciB5ID0gKGNsaWVudFJlY3QudG9wICsgKGFkZFZpc3VhbE9mZnNldHMgJiYgdmlzdWFsVmlld3BvcnQgPyB2aXN1YWxWaWV3cG9ydC5vZmZzZXRUb3AgOiAwKSkgLyBzY2FsZVk7XG4gIHZhciB3aWR0aCA9IGNsaWVudFJlY3Qud2lkdGggLyBzY2FsZVg7XG4gIHZhciBoZWlnaHQgPSBjbGllbnRSZWN0LmhlaWdodCAvIHNjYWxlWTtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgdG9wOiB5LFxuICAgIHJpZ2h0OiB4ICsgd2lkdGgsXG4gICAgYm90dG9tOiB5ICsgaGVpZ2h0LFxuICAgIGxlZnQ6IHgsXG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getClippingRect)\n/* harmony export */ });\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _getViewportRect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getViewportRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js\");\n/* harmony import */ var _getDocumentRect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getDocumentRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js\");\n/* harmony import */ var _listScrollParents_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./listScrollParents.js */ \"./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js\");\n/* harmony import */ var _getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./getOffsetParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js\");\n/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./getComputedStyle.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\");\n/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js\");\n/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./getParentNode.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js\");\n/* harmony import */ var _contains_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./contains.js */ \"./node_modules/@popperjs/core/lib/dom-utils/contains.js\");\n/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./getNodeName.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\");\n/* harmony import */ var _utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/rectToClientRect.js */ \"./node_modules/@popperjs/core/lib/utils/rectToClientRect.js\");\n/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils/math.js */ \"./node_modules/@popperjs/core/lib/utils/math.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction getInnerBoundingClientRect(element, strategy) {\n  var rect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element, false, strategy === 'fixed');\n  rect.top = rect.top + element.clientTop;\n  rect.left = rect.left + element.clientLeft;\n  rect.bottom = rect.top + element.clientHeight;\n  rect.right = rect.left + element.clientWidth;\n  rect.width = element.clientWidth;\n  rect.height = element.clientHeight;\n  rect.x = rect.left;\n  rect.y = rect.top;\n  return rect;\n}\n\nfunction getClientRectFromMixedType(element, clippingParent, strategy) {\n  return clippingParent === _enums_js__WEBPACK_IMPORTED_MODULE_1__.viewport ? (0,_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,_getViewportRect_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(element, strategy)) : (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : (0,_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,_getDocumentRect_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])((0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(element)));\n} // A \"clipping parent\" is an overflowable container with the characteristic of\n// clipping (or hiding) overflowing elements with a position different from\n// `initial`\n\n\nfunction getClippingParents(element) {\n  var clippingParents = (0,_listScrollParents_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(element));\n  var canEscapeClipping = ['absolute', 'fixed'].indexOf((0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(element).position) >= 0;\n  var clipperElement = canEscapeClipping && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(element) ? (0,_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(element) : element;\n\n  if (!(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(clipperElement)) {\n    return [];\n  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n\n\n  return clippingParents.filter(function (clippingParent) {\n    return (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(clippingParent) && (0,_contains_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(clippingParent, clipperElement) && (0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(clippingParent) !== 'body';\n  });\n} // Gets the maximum area that the element is visible in due to any number of\n// clipping parents\n\n\nfunction getClippingRect(element, boundary, rootBoundary, strategy) {\n  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);\n  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);\n  var firstClippingParent = clippingParents[0];\n  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {\n    var rect = getClientRectFromMixedType(element, clippingParent, strategy);\n    accRect.top = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.max)(rect.top, accRect.top);\n    accRect.right = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.min)(rect.right, accRect.right);\n    accRect.bottom = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.min)(rect.bottom, accRect.bottom);\n    accRect.left = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.max)(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromMixedType(element, firstClippingParent, strategy));\n  clippingRect.width = clippingRect.right - clippingRect.left;\n  clippingRect.height = clippingRect.bottom - clippingRect.top;\n  clippingRect.x = clippingRect.left;\n  clippingRect.y = clippingRect.top;\n  return clippingRect;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDbGlwcGluZ1JlY3QuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXVDO0FBQ1k7QUFDQTtBQUNJO0FBQ0o7QUFDTTtBQUNKO0FBQ007QUFDSTtBQUNoQjtBQUNWO0FBQ007QUFDaUI7QUFDaEI7O0FBRTVDO0FBQ0EsYUFBYSxxRUFBcUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0QkFBNEIsK0NBQVEsR0FBRyxzRUFBZ0IsQ0FBQywrREFBZSx1QkFBdUIseURBQVMsMEVBQTBFLHNFQUFnQixDQUFDLCtEQUFlLENBQUMsa0VBQWtCO0FBQ3BPLEVBQUU7QUFDRjtBQUNBOzs7QUFHQTtBQUNBLHdCQUF3QixpRUFBaUIsQ0FBQyw2REFBYTtBQUN2RCx3REFBd0QsZ0VBQWdCO0FBQ3hFLDRDQUE0Qyw2REFBYSxZQUFZLGdFQUFlOztBQUVwRixPQUFPLHlEQUFTO0FBQ2hCO0FBQ0EsSUFBSTs7O0FBR0o7QUFDQSxXQUFXLHlEQUFTLG9CQUFvQix5REFBUSxvQ0FBb0MsNERBQVc7QUFDL0YsR0FBRztBQUNILEVBQUU7QUFDRjs7O0FBR2U7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9EQUFHO0FBQ3JCLG9CQUFvQixvREFBRztBQUN2QixxQkFBcUIsb0RBQUc7QUFDeEIsbUJBQW1CLG9EQUFHO0FBQ3RCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qcz82ZGJmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHZpZXdwb3J0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0Vmlld3BvcnRSZWN0IGZyb20gXCIuL2dldFZpZXdwb3J0UmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50UmVjdCBmcm9tIFwiLi9nZXREb2N1bWVudFJlY3QuanNcIjtcbmltcG9ydCBsaXN0U2Nyb2xsUGFyZW50cyBmcm9tIFwiLi9saXN0U2Nyb2xsUGFyZW50cy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuL2NvbnRhaW5zLmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gXCIuLi91dGlscy9yZWN0VG9DbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgeyBtYXgsIG1pbiB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIHN0cmF0ZWd5KSB7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGZhbHNlLCBzdHJhdGVneSA9PT0gJ2ZpeGVkJyk7XG4gIHJlY3QudG9wID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudFRvcDtcbiAgcmVjdC5sZWZ0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRMZWZ0O1xuICByZWN0LmJvdHRvbSA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QucmlnaHQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LndpZHRoID0gZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC5oZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC54ID0gcmVjdC5sZWZ0O1xuICByZWN0LnkgPSByZWN0LnRvcDtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGNsaXBwaW5nUGFyZW50LCBzdHJhdGVneSkge1xuICByZXR1cm4gY2xpcHBpbmdQYXJlbnQgPT09IHZpZXdwb3J0ID8gcmVjdFRvQ2xpZW50UmVjdChnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpKSA6IGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgPyBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpIDogcmVjdFRvQ2xpZW50UmVjdChnZXREb2N1bWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKSk7XG59IC8vIEEgXCJjbGlwcGluZyBwYXJlbnRcIiBpcyBhbiBvdmVyZmxvd2FibGUgY29udGFpbmVyIHdpdGggdGhlIGNoYXJhY3RlcmlzdGljIG9mXG4vLyBjbGlwcGluZyAob3IgaGlkaW5nKSBvdmVyZmxvd2luZyBlbGVtZW50cyB3aXRoIGEgcG9zaXRpb24gZGlmZmVyZW50IGZyb21cbi8vIGBpbml0aWFsYFxuXG5cbmZ1bmN0aW9uIGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSB7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbiAgdmFyIGNhbkVzY2FwZUNsaXBwaW5nID0gWydhYnNvbHV0ZScsICdmaXhlZCddLmluZGV4T2YoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbikgPj0gMDtcbiAgdmFyIGNsaXBwZXJFbGVtZW50ID0gY2FuRXNjYXBlQ2xpcHBpbmcgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSA/IGdldE9mZnNldFBhcmVudChlbGVtZW50KSA6IGVsZW1lbnQ7XG5cbiAgaWYgKCFpc0VsZW1lbnQoY2xpcHBlckVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8xNDE0XG5cblxuICByZXR1cm4gY2xpcHBpbmdQYXJlbnRzLmZpbHRlcihmdW5jdGlvbiAoY2xpcHBpbmdQYXJlbnQpIHtcbiAgICByZXR1cm4gaXNFbGVtZW50KGNsaXBwaW5nUGFyZW50KSAmJiBjb250YWlucyhjbGlwcGluZ1BhcmVudCwgY2xpcHBlckVsZW1lbnQpICYmIGdldE5vZGVOYW1lKGNsaXBwaW5nUGFyZW50KSAhPT0gJ2JvZHknO1xuICB9KTtcbn0gLy8gR2V0cyB0aGUgbWF4aW11bSBhcmVhIHRoYXQgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSBpbiBkdWUgdG8gYW55IG51bWJlciBvZlxuLy8gY2xpcHBpbmcgcGFyZW50c1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENsaXBwaW5nUmVjdChlbGVtZW50LCBib3VuZGFyeSwgcm9vdEJvdW5kYXJ5LCBzdHJhdGVneSkge1xuICB2YXIgbWFpbkNsaXBwaW5nUGFyZW50cyA9IGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdQYXJlbnRzJyA/IGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBbXS5jb25jYXQobWFpbkNsaXBwaW5nUGFyZW50cywgW3Jvb3RCb3VuZGFyeV0pO1xuICB2YXIgZmlyc3RDbGlwcGluZ1BhcmVudCA9IGNsaXBwaW5nUGFyZW50c1swXTtcbiAgdmFyIGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nUGFyZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY1JlY3QsIGNsaXBwaW5nUGFyZW50KSB7XG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpO1xuICAgIGFjY1JlY3QudG9wID0gbWF4KHJlY3QudG9wLCBhY2NSZWN0LnRvcCk7XG4gICAgYWNjUmVjdC5yaWdodCA9IG1pbihyZWN0LnJpZ2h0LCBhY2NSZWN0LnJpZ2h0KTtcbiAgICBhY2NSZWN0LmJvdHRvbSA9IG1pbihyZWN0LmJvdHRvbSwgYWNjUmVjdC5ib3R0b20pO1xuICAgIGFjY1JlY3QubGVmdCA9IG1heChyZWN0LmxlZnQsIGFjY1JlY3QubGVmdCk7XG4gICAgcmV0dXJuIGFjY1JlY3Q7XG4gIH0sIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGZpcnN0Q2xpcHBpbmdQYXJlbnQsIHN0cmF0ZWd5KSk7XG4gIGNsaXBwaW5nUmVjdC53aWR0aCA9IGNsaXBwaW5nUmVjdC5yaWdodCAtIGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QuaGVpZ2h0ID0gY2xpcHBpbmdSZWN0LmJvdHRvbSAtIGNsaXBwaW5nUmVjdC50b3A7XG4gIGNsaXBwaW5nUmVjdC54ID0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC55ID0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgcmV0dXJuIGNsaXBwaW5nUmVjdDtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getCompositeRect)\n/* harmony export */ });\n/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getBoundingClientRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js\");\n/* harmony import */ var _getNodeScroll_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getNodeScroll.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js\");\n/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getNodeName.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\");\n/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js\");\n/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isScrollParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js\");\n/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/math.js */ \"./node_modules/@popperjs/core/lib/utils/math.js\");\n\n\n\n\n\n\n\n\n\nfunction isElementScaled(element) {\n  var rect = element.getBoundingClientRect();\n  var scaleX = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(rect.width) / element.offsetWidth || 1;\n  var scaleY = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(rect.height) / element.offsetHeight || 1;\n  return scaleX !== 1 || scaleY !== 1;\n} // Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n\n\nfunction getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n\n  var isOffsetParentAnElement = (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(offsetParent);\n  var offsetParentIsScaled = (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(offsetParent) && isElementScaled(offsetParent);\n  var documentElement = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(offsetParent);\n  var rect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(elementOrVirtualElement, offsetParentIsScaled, isFixed);\n  var scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  var offsets = {\n    x: 0,\n    y: 0\n  };\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n    (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(documentElement)) {\n      scroll = (0,_getNodeScroll_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(offsetParent);\n    }\n\n    if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(offsetParent)) {\n      offsets = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(offsetParent, true);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(documentElement);\n    }\n  }\n\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wb3NpdGVSZWN0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUErRDtBQUNoQjtBQUNKO0FBQ0s7QUFDVztBQUNGO0FBQ1I7QUFDUjs7QUFFekM7QUFDQTtBQUNBLGVBQWUscURBQUs7QUFDcEIsZUFBZSxxREFBSztBQUNwQjtBQUNBLEVBQUU7QUFDRjs7O0FBR2U7QUFDZjtBQUNBO0FBQ0E7O0FBRUEsZ0NBQWdDLDZEQUFhO0FBQzdDLDZCQUE2Qiw2REFBYTtBQUMxQyx3QkFBd0Isa0VBQWtCO0FBQzFDLGFBQWEscUVBQXFCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLDJEQUFXO0FBQ25CLElBQUksOERBQWM7QUFDbEIsZUFBZSw2REFBYTtBQUM1Qjs7QUFFQSxRQUFRLDZEQUFhO0FBQ3JCLGdCQUFnQixxRUFBcUI7QUFDckM7QUFDQTtBQUNBLE1BQU07QUFDTixrQkFBa0IsbUVBQW1CO0FBQ3JDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wb3NpdGVSZWN0LmpzPzZlM2QiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXROb2RlU2Nyb2xsIGZyb20gXCIuL2dldE5vZGVTY3JvbGwuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbEJhclguanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcblxuZnVuY3Rpb24gaXNFbGVtZW50U2NhbGVkKGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgc2NhbGVYID0gcm91bmQocmVjdC53aWR0aCkgLyBlbGVtZW50Lm9mZnNldFdpZHRoIHx8IDE7XG4gIHZhciBzY2FsZVkgPSByb3VuZChyZWN0LmhlaWdodCkgLyBlbGVtZW50Lm9mZnNldEhlaWdodCB8fCAxO1xuICByZXR1cm4gc2NhbGVYICE9PSAxIHx8IHNjYWxlWSAhPT0gMTtcbn0gLy8gUmV0dXJucyB0aGUgY29tcG9zaXRlIHJlY3Qgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgb2Zmc2V0UGFyZW50LlxuLy8gQ29tcG9zaXRlIG1lYW5zIGl0IHRha2VzIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zIGFzIHdlbGwgYXMgbGF5b3V0LlxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXBvc2l0ZVJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudCwgaXNGaXhlZCkge1xuICBpZiAoaXNGaXhlZCA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgb2Zmc2V0UGFyZW50SXNTY2FsZWQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgaXNFbGVtZW50U2NhbGVkKG9mZnNldFBhcmVudCk7XG4gIHZhciBkb2N1bWVudEVsZW1lbnQgPSBnZXREb2N1bWVudEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudElzU2NhbGVkLCBpc0ZpeGVkKTtcbiAgdmFyIHNjcm9sbCA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9O1xuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgfHwgIWlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ICYmICFpc0ZpeGVkKSB7XG4gICAgaWYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgIT09ICdib2R5JyB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEwNzhcbiAgICBpc1Njcm9sbFBhcmVudChkb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgb2Zmc2V0cyA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQsIHRydWUpO1xuICAgICAgb2Zmc2V0cy54ICs9IG9mZnNldFBhcmVudC5jbGllbnRMZWZ0O1xuICAgICAgb2Zmc2V0cy55ICs9IG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IHJlY3QubGVmdCArIHNjcm9sbC5zY3JvbGxMZWZ0IC0gb2Zmc2V0cy54LFxuICAgIHk6IHJlY3QudG9wICsgc2Nyb2xsLnNjcm9sbFRvcCAtIG9mZnNldHMueSxcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XG4gIH07XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getComputedStyle)\n/* harmony export */ });\n/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n\nfunction getComputedStyle(element) {\n  return (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element).getComputedStyle(element);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVDO0FBQ3hCO0FBQ2YsU0FBUyx5REFBUztBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUuanM/MDlmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB7XG4gIHJldHVybiBnZXRXaW5kb3coZWxlbWVudCkuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getDocumentElement)\n/* harmony export */ });\n/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n\nfunction getDocumentElement(element) {\n  // $FlowFixMe[incompatible-return]: assume body is always available\n  return (((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]\n  element.document) || window.document).documentElement;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEM7QUFDN0I7QUFDZjtBQUNBLFdBQVcseURBQVM7QUFDcEI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qcz8zYThjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSB7XG4gIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgcmV0dXJuICgoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudC5vd25lckRvY3VtZW50IDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gIGVsZW1lbnQuZG9jdW1lbnQpIHx8IHdpbmRvdy5kb2N1bWVudCkuZG9jdW1lbnRFbGVtZW50O1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getDocumentRect)\n/* harmony export */ });\n/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getComputedStyle.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\");\n/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js\");\n/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWindowScroll.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js\");\n/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/math.js */ \"./node_modules/@popperjs/core/lib/utils/math.js\");\n\n\n\n\n // Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\n\nfunction getDocumentRect(element) {\n  var _element$ownerDocumen;\n\n  var html = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element);\n  var winScroll = (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(element);\n  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n  var width = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  var height = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n  var x = -winScroll.scrollLeft + (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(element);\n  var y = -winScroll.scrollTop;\n\n  if ((0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(body || html).direction === 'rtl') {\n    x += (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudFJlY3QuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXlEO0FBQ0o7QUFDTTtBQUNSO0FBQ1osQ0FBQztBQUN4Qzs7QUFFZTtBQUNmOztBQUVBLGFBQWEsa0VBQWtCO0FBQy9CLGtCQUFrQiwrREFBZTtBQUNqQztBQUNBLGNBQWMsbURBQUc7QUFDakIsZUFBZSxtREFBRztBQUNsQixrQ0FBa0MsbUVBQW1CO0FBQ3JEOztBQUVBLE1BQU0sZ0VBQWdCO0FBQ3RCLFNBQVMsbURBQUc7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldERvY3VtZW50UmVjdC5qcz9iZTA3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuaW1wb3J0IHsgbWF4IH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjsgLy8gR2V0cyB0aGUgZW50aXJlIHNpemUgb2YgdGhlIHNjcm9sbGFibGUgZG9jdW1lbnQgYXJlYSwgZXZlbiBleHRlbmRpbmcgb3V0c2lkZVxuLy8gb2YgdGhlIGA8aHRtbD5gIGFuZCBgPGJvZHk+YCByZWN0IGJvdW5kcyBpZiBob3Jpem9udGFsbHkgc2Nyb2xsYWJsZVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREb2N1bWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgX2VsZW1lbnQkb3duZXJEb2N1bWVuO1xuXG4gIHZhciBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICB2YXIgd2luU2Nyb2xsID0gZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpO1xuICB2YXIgYm9keSA9IChfZWxlbWVudCRvd25lckRvY3VtZW4gPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZWxlbWVudCRvd25lckRvY3VtZW4uYm9keTtcbiAgdmFyIHdpZHRoID0gbWF4KGh0bWwuc2Nyb2xsV2lkdGgsIGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LnNjcm9sbFdpZHRoIDogMCwgYm9keSA/IGJvZHkuY2xpZW50V2lkdGggOiAwKTtcbiAgdmFyIGhlaWdodCA9IG1heChodG1sLnNjcm9sbEhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQsIGJvZHkgPyBib2R5LnNjcm9sbEhlaWdodCA6IDAsIGJvZHkgPyBib2R5LmNsaWVudEhlaWdodCA6IDApO1xuICB2YXIgeCA9IC13aW5TY3JvbGwuc2Nyb2xsTGVmdCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCk7XG4gIHZhciB5ID0gLXdpblNjcm9sbC5zY3JvbGxUb3A7XG5cbiAgaWYgKGdldENvbXB1dGVkU3R5bGUoYm9keSB8fCBodG1sKS5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgeCArPSBtYXgoaHRtbC5jbGllbnRXaWR0aCwgYm9keSA/IGJvZHkuY2xpZW50V2lkdGggOiAwKSAtIHdpZHRoO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getHTMLElementScroll)\n/* harmony export */ });\nfunction getHTMLElementScroll(element) {\n  return {\n    scrollLeft: element.scrollLeft,\n    scrollTop: element.scrollTop\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRIVE1MRWxlbWVudFNjcm9sbC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanM/NTUxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRIVE1MRWxlbWVudFNjcm9sbChlbGVtZW50KSB7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogZWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogZWxlbWVudC5zY3JvbGxUb3BcbiAgfTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getLayoutRect)\n/* harmony export */ });\n/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js\");\n // Returns the layout rect of an element relative to its offsetParent. Layout\n// means it doesn't take into account transforms.\n\nfunction getLayoutRect(element) {\n  var clientRect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element); // Use the clientRect sizes if it's not been transformed.\n  // Fixes https://github.com/popperjs/popper-core/issues/1223\n\n  var width = element.offsetWidth;\n  var height = element.offsetHeight;\n\n  if (Math.abs(clientRect.width - width) <= 1) {\n    width = clientRect.width;\n  }\n\n  if (Math.abs(clientRect.height - height) <= 1) {\n    height = clientRect.height;\n  }\n\n  return {\n    x: element.offsetLeft,\n    y: element.offsetTop,\n    width: width,\n    height: height\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStELENBQUM7QUFDaEU7O0FBRWU7QUFDZixtQkFBbUIscUVBQXFCLFdBQVc7QUFDbkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qcz8wYzRhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7IC8vIFJldHVybnMgdGhlIGxheW91dCByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC4gTGF5b3V0XG4vLyBtZWFucyBpdCBkb2Vzbid0IHRha2UgaW50byBhY2NvdW50IHRyYW5zZm9ybXMuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldExheW91dFJlY3QoZWxlbWVudCkge1xuICB2YXIgY2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KTsgLy8gVXNlIHRoZSBjbGllbnRSZWN0IHNpemVzIGlmIGl0J3Mgbm90IGJlZW4gdHJhbnNmb3JtZWQuXG4gIC8vIEZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTIyM1xuXG4gIHZhciB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcblxuICBpZiAoTWF0aC5hYnMoY2xpZW50UmVjdC53aWR0aCAtIHdpZHRoKSA8PSAxKSB7XG4gICAgd2lkdGggPSBjbGllbnRSZWN0LndpZHRoO1xuICB9XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3QuaGVpZ2h0IC0gaGVpZ2h0KSA8PSAxKSB7XG4gICAgaGVpZ2h0ID0gY2xpZW50UmVjdC5oZWlnaHQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IGVsZW1lbnQub2Zmc2V0TGVmdCxcbiAgICB5OiBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getNodeName)\n/* harmony export */ });\nfunction getNodeName(element) {\n  return element ? (element.nodeName || '').toLowerCase() : null;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlTmFtZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWU7QUFDZjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanM/NzdjYiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlTmFtZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50ID8gKGVsZW1lbnQubm9kZU5hbWUgfHwgJycpLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getNodeScroll)\n/* harmony export */ });\n/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScroll.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js\");\n/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n/* harmony import */ var _getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getHTMLElementScroll.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js\");\n\n\n\n\nfunction getNodeScroll(node) {\n  if (node === (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(node) || !(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(node)) {\n    return (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(node);\n  } else {\n    return (0,_getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(node);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlU2Nyb2xsLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW1EO0FBQ1o7QUFDUztBQUNhO0FBQzlDO0FBQ2YsZUFBZSx5REFBUyxXQUFXLDZEQUFhO0FBQ2hELFdBQVcsK0RBQWU7QUFDMUIsSUFBSTtBQUNKLFdBQVcsb0VBQW9CO0FBQy9CO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlU2Nyb2xsLmpzPzI4MjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEhUTUxFbGVtZW50U2Nyb2xsIGZyb20gXCIuL2dldEhUTUxFbGVtZW50U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlU2Nyb2xsKG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IGdldFdpbmRvdyhub2RlKSB8fCAhaXNIVE1MRWxlbWVudChub2RlKSkge1xuICAgIHJldHVybiBnZXRXaW5kb3dTY3JvbGwobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldEhUTUxFbGVtZW50U2Nyb2xsKG5vZGUpO1xuICB9XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getOffsetParent)\n/* harmony export */ });\n/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getNodeName.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\");\n/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getComputedStyle.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\");\n/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n/* harmony import */ var _isTableElement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./isTableElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js\");\n/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getParentNode.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js\");\n/* harmony import */ var _utils_userAgent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/userAgent.js */ \"./node_modules/@popperjs/core/lib/utils/userAgent.js\");\n\n\n\n\n\n\n\n\nfunction getTrueOffsetParent(element) {\n  if (!(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || // https://github.com/popperjs/popper-core/issues/837\n  (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(element).position === 'fixed') {\n    return null;\n  }\n\n  return element.offsetParent;\n} // `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\n\n\nfunction getContainingBlock(element) {\n  var isFirefox = /firefox/i.test((0,_utils_userAgent_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])());\n  var isIE = /Trident/i.test((0,_utils_userAgent_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])());\n\n  if (isIE && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element)) {\n    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport\n    var elementCss = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(element);\n\n    if (elementCss.position === 'fixed') {\n      return null;\n    }\n  }\n\n  var currentNode = (0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(element);\n\n  if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isShadowRoot)(currentNode)) {\n    currentNode = currentNode.host;\n  }\n\n  while ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(currentNode) && ['html', 'body'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(currentNode)) < 0) {\n    var css = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n    // create a containing block.\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n\n    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {\n      return currentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return null;\n} // Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\n\n\nfunction getOffsetParent(element) {\n  var window = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(element);\n  var offsetParent = getTrueOffsetParent(element);\n\n  while (offsetParent && (0,_isTableElement_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(offsetParent) && (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n\n  if (offsetParent && ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(offsetParent) === 'html' || (0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(offsetParent) === 'body' && (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(offsetParent).position === 'static')) {\n    return window;\n  }\n\n  return offsetParent || getContainingBlock(element) || window;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBdUM7QUFDSTtBQUNVO0FBQ1M7QUFDYjtBQUNGO0FBQ0M7O0FBRWhEO0FBQ0EsT0FBTyw2REFBYTtBQUNwQixFQUFFLGdFQUFnQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGOzs7QUFHQTtBQUNBLGtDQUFrQywrREFBVztBQUM3Qyw2QkFBNkIsK0RBQVc7O0FBRXhDLGNBQWMsNkRBQWE7QUFDM0I7QUFDQSxxQkFBcUIsZ0VBQWdCOztBQUVyQztBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsNkRBQWE7O0FBRWpDLE1BQU0sNERBQVk7QUFDbEI7QUFDQTs7QUFFQSxTQUFTLDZEQUFhLDBDQUEwQywyREFBVztBQUMzRSxjQUFjLGdFQUFnQixlQUFlO0FBQzdDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7OztBQUdlO0FBQ2YsZUFBZSx5REFBUztBQUN4Qjs7QUFFQSx5QkFBeUIsOERBQWMsa0JBQWtCLGdFQUFnQjtBQUN6RTtBQUNBOztBQUVBLHVCQUF1QiwyREFBVyw2QkFBNkIsMkRBQVcsNkJBQTZCLGdFQUFnQjtBQUN2SDtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanM/M2MwMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50LCBpc1NoYWRvd1Jvb3QgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgaXNUYWJsZUVsZW1lbnQgZnJvbSBcIi4vaXNUYWJsZUVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBnZXRVQVN0cmluZyBmcm9tIFwiLi4vdXRpbHMvdXNlckFnZW50LmpzXCI7XG5cbmZ1bmN0aW9uIGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy84MzdcbiAgZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0UGFyZW50O1xufSAvLyBgLm9mZnNldFBhcmVudGAgcmVwb3J0cyBgbnVsbGAgZm9yIGZpeGVkIGVsZW1lbnRzLCB3aGlsZSBhYnNvbHV0ZSBlbGVtZW50c1xuLy8gcmV0dXJuIHRoZSBjb250YWluaW5nIGJsb2NrXG5cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHtcbiAgdmFyIGlzRmlyZWZveCA9IC9maXJlZm94L2kudGVzdChnZXRVQVN0cmluZygpKTtcbiAgdmFyIGlzSUUgPSAvVHJpZGVudC9pLnRlc3QoZ2V0VUFTdHJpbmcoKSk7XG5cbiAgaWYgKGlzSUUgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSkge1xuICAgIC8vIEluIElFIDksIDEwIGFuZCAxMSBmaXhlZCBlbGVtZW50cyBjb250YWluaW5nIGJsb2NrIGlzIGFsd2F5cyBlc3RhYmxpc2hlZCBieSB0aGUgdmlld3BvcnRcbiAgICB2YXIgZWxlbWVudENzcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICBpZiAoZWxlbWVudENzcy5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgdmFyIGN1cnJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcblxuICBpZiAoaXNTaGFkb3dSb290KGN1cnJlbnROb2RlKSkge1xuICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUuaG9zdDtcbiAgfVxuXG4gIHdoaWxlIChpc0hUTUxFbGVtZW50KGN1cnJlbnROb2RlKSAmJiBbJ2h0bWwnLCAnYm9keSddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoY3VycmVudE5vZGUpKSA8IDApIHtcbiAgICB2YXIgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50Tm9kZSk7IC8vIFRoaXMgaXMgbm9uLWV4aGF1c3RpdmUgYnV0IGNvdmVycyB0aGUgbW9zdCBjb21tb24gQ1NTIHByb3BlcnRpZXMgdGhhdFxuICAgIC8vIGNyZWF0ZSBhIGNvbnRhaW5pbmcgYmxvY2suXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0NvbnRhaW5pbmdfYmxvY2sjaWRlbnRpZnlpbmdfdGhlX2NvbnRhaW5pbmdfYmxvY2tcblxuICAgIGlmIChjc3MudHJhbnNmb3JtICE9PSAnbm9uZScgfHwgY3NzLnBlcnNwZWN0aXZlICE9PSAnbm9uZScgfHwgY3NzLmNvbnRhaW4gPT09ICdwYWludCcgfHwgWyd0cmFuc2Zvcm0nLCAncGVyc3BlY3RpdmUnXS5pbmRleE9mKGNzcy53aWxsQ2hhbmdlKSAhPT0gLTEgfHwgaXNGaXJlZm94ICYmIGNzcy53aWxsQ2hhbmdlID09PSAnZmlsdGVyJyB8fCBpc0ZpcmVmb3ggJiYgY3NzLmZpbHRlciAmJiBjc3MuZmlsdGVyICE9PSAnbm9uZScpIHtcbiAgICAgIHJldHVybiBjdXJyZW50Tm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSAvLyBHZXRzIHRoZSBjbG9zZXN0IGFuY2VzdG9yIHBvc2l0aW9uZWQgZWxlbWVudC4gSGFuZGxlcyBzb21lIGVkZ2UgY2FzZXMsXG4vLyBzdWNoIGFzIHRhYmxlIGFuY2VzdG9ycyBhbmQgY3Jvc3MgYnJvd3NlciBidWdzLlxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpO1xuXG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgaXNUYWJsZUVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgaWYgKG9mZnNldFBhcmVudCAmJiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2h0bWwnIHx8IGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdib2R5JyAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSkge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB8fCB3aW5kb3c7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getParentNode)\n/* harmony export */ });\n/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\");\n/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n\n\n\nfunction getParentNode(element) {\n  if ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element) === 'html') {\n    return element;\n  }\n\n  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle\n    // $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    element.parentNode || ( // DOM Element detected\n    (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isShadowRoot)(element) ? element.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(element) // fallback\n\n  );\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRQYXJlbnROb2RlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMkM7QUFDYztBQUNWO0FBQ2hDO0FBQ2YsTUFBTSwyREFBVztBQUNqQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLDREQUFZO0FBQ2hCO0FBQ0EsSUFBSSxrRUFBa0I7O0FBRXRCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRQYXJlbnROb2RlLmpzPzVjYmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChnZXROb2RlTmFtZShlbGVtZW50KSA9PT0gJ2h0bWwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gKC8vIHRoaXMgaXMgYSBxdWlja2VyIChidXQgbGVzcyB0eXBlIHNhZmUpIHdheSB0byBzYXZlIHF1aXRlIHNvbWUgYnl0ZXMgZnJvbSB0aGUgYnVuZGxlXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIGVsZW1lbnQuYXNzaWduZWRTbG90IHx8IC8vIHN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlXG4gICAgZWxlbWVudC5wYXJlbnROb2RlIHx8ICggLy8gRE9NIEVsZW1lbnQgZGV0ZWN0ZWRcbiAgICBpc1NoYWRvd1Jvb3QoZWxlbWVudCkgPyBlbGVtZW50Lmhvc3QgOiBudWxsKSB8fCAvLyBTaGFkb3dSb290IGRldGVjdGVkXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IEhUTUxFbGVtZW50IGlzIGEgTm9kZVxuICAgIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSAvLyBmYWxsYmFja1xuXG4gICk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getScrollParent)\n/* harmony export */ });\n/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getParentNode.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js\");\n/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isScrollParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js\");\n/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\");\n/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n\n\n\n\nfunction getScrollParent(node) {\n  if (['html', 'body', '#document'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(node)) >= 0) {\n    // $FlowFixMe[incompatible-return]: assume body is always available\n    return node.ownerDocument.body;\n  }\n\n  if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(node) && (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(node)) {\n    return node;\n  }\n\n  return getScrollParent((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(node));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRTY3JvbGxQYXJlbnQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0M7QUFDRTtBQUNOO0FBQ0s7QUFDakM7QUFDZiw0Q0FBNEMsMkRBQVc7QUFDdkQ7QUFDQTtBQUNBOztBQUVBLE1BQU0sNkRBQWEsVUFBVSw4REFBYztBQUMzQztBQUNBOztBQUVBLHlCQUF5Qiw2REFBYTtBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFNjcm9sbFBhcmVudC5qcz8xNzI0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KG5vZGUpIHtcbiAgaWYgKFsnaHRtbCcsICdib2R5JywgJyNkb2N1bWVudCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUobm9kZSkpID49IDApIHtcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgaWYgKGlzSFRNTEVsZW1lbnQobm9kZSkgJiYgaXNTY3JvbGxQYXJlbnQobm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShub2RlKSk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getViewportRect)\n/* harmony export */ });\n/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js\");\n/* harmony import */ var _isLayoutViewport_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isLayoutViewport.js */ \"./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js\");\n\n\n\n\nfunction getViewportRect(element, strategy) {\n  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element);\n  var html = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(element);\n  var visualViewport = win.visualViewport;\n  var width = html.clientWidth;\n  var height = html.clientHeight;\n  var x = 0;\n  var y = 0;\n\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    var layoutViewport = (0,_isLayoutViewport_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n\n    if (layoutViewport || !layoutViewport && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x + (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(element),\n    y: y\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRWaWV3cG9ydFJlY3QuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBdUM7QUFDa0I7QUFDRTtBQUNOO0FBQ3RDO0FBQ2YsWUFBWSx5REFBUztBQUNyQixhQUFhLGtFQUFrQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixnRUFBZ0I7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtRUFBbUI7QUFDOUI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Vmlld3BvcnRSZWN0LmpzPzljYzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgaXNMYXlvdXRWaWV3cG9ydCBmcm9tIFwiLi9pc0xheW91dFZpZXdwb3J0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB2aXN1YWxWaWV3cG9ydCA9IHdpbi52aXN1YWxWaWV3cG9ydDtcbiAgdmFyIHdpZHRoID0gaHRtbC5jbGllbnRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGh0bWwuY2xpZW50SGVpZ2h0O1xuICB2YXIgeCA9IDA7XG4gIHZhciB5ID0gMDtcblxuICBpZiAodmlzdWFsVmlld3BvcnQpIHtcbiAgICB3aWR0aCA9IHZpc3VhbFZpZXdwb3J0LndpZHRoO1xuICAgIGhlaWdodCA9IHZpc3VhbFZpZXdwb3J0LmhlaWdodDtcbiAgICB2YXIgbGF5b3V0Vmlld3BvcnQgPSBpc0xheW91dFZpZXdwb3J0KCk7XG5cbiAgICBpZiAobGF5b3V0Vmlld3BvcnQgfHwgIWxheW91dFZpZXdwb3J0ICYmIHN0cmF0ZWd5ID09PSAnZml4ZWQnKSB7XG4gICAgICB4ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdDtcbiAgICAgIHkgPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRUb3A7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogeCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCksXG4gICAgeTogeVxuICB9O1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js":
/*!****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getWindow)\n/* harmony export */ });\nfunction getWindow(node) {\n  if (node == null) {\n    return window;\n  }\n\n  if (node.toString() !== '[object Window]') {\n    var ownerDocument = node.ownerDocument;\n    return ownerDocument ? ownerDocument.defaultView || window : window;\n  }\n\n  return node;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3cuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3cuanM/NjE5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIGlmIChub2RlLnRvU3RyaW5nKCkgIT09ICdbb2JqZWN0IFdpbmRvd10nKSB7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdyA6IHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getWindowScroll)\n/* harmony export */ });\n/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n\nfunction getWindowScroll(node) {\n  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(node);\n  var scrollLeft = win.pageXOffset;\n  var scrollTop = win.pageYOffset;\n  return {\n    scrollLeft: scrollLeft,\n    scrollTop: scrollTop\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGwuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUM7QUFDeEI7QUFDZixZQUFZLHlEQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93U2Nyb2xsLmpzPzkyNTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbChub2RlKSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3cobm9kZSk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gd2luLnBhZ2VYT2Zmc2V0O1xuICB2YXIgc2Nyb2xsVG9wID0gd2luLnBhZ2VZT2Zmc2V0O1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3BcbiAgfTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getWindowScrollBarX)\n/* harmony export */ });\n/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js\");\n/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScroll.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js\");\n\n\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  // Popper 1 is broken in this case and never had a bug report so let's assume\n  // it's not an issue. I don't think anyone ever specifies width on <html>\n  // anyway.\n  // Browsers where the left scrollbar doesn't cause an issue report `0` for\n  // this (e.g. Edge 2019, IE11, Safari)\n  return (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(element)).left + (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(element).scrollLeft;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBK0Q7QUFDTjtBQUNOO0FBQ3BDO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHFFQUFxQixDQUFDLGtFQUFrQixrQkFBa0IsK0RBQWU7QUFDbEYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzP2UzZDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSB7XG4gIC8vIElmIDxodG1sPiBoYXMgYSBDU1Mgd2lkdGggZ3JlYXRlciB0aGFuIHRoZSB2aWV3cG9ydCwgdGhlbiB0aGlzIHdpbGwgYmVcbiAgLy8gaW5jb3JyZWN0IGZvciBSVEwuXG4gIC8vIFBvcHBlciAxIGlzIGJyb2tlbiBpbiB0aGlzIGNhc2UgYW5kIG5ldmVyIGhhZCBhIGJ1ZyByZXBvcnQgc28gbGV0J3MgYXNzdW1lXG4gIC8vIGl0J3Mgbm90IGFuIGlzc3VlLiBJIGRvbid0IHRoaW5rIGFueW9uZSBldmVyIHNwZWNpZmllcyB3aWR0aCBvbiA8aHRtbD5cbiAgLy8gYW55d2F5LlxuICAvLyBCcm93c2VycyB3aGVyZSB0aGUgbGVmdCBzY3JvbGxiYXIgZG9lc24ndCBjYXVzZSBhbiBpc3N1ZSByZXBvcnQgYDBgIGZvclxuICAvLyB0aGlzIChlLmcuIEVkZ2UgMjAxOSwgSUUxMSwgU2FmYXJpKVxuICByZXR1cm4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkubGVmdCArIGdldFdpbmRvd1Njcm9sbChlbGVtZW50KS5zY3JvbGxMZWZ0O1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isElement\": () => (/* binding */ isElement),\n/* harmony export */   \"isHTMLElement\": () => (/* binding */ isHTMLElement),\n/* harmony export */   \"isShadowRoot\": () => (/* binding */ isShadowRoot)\n/* harmony export */ });\n/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n\n\nfunction isElement(node) {\n  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(node).Element;\n  return node instanceof OwnElement || node instanceof Element;\n}\n\nfunction isHTMLElement(node) {\n  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(node).HTMLElement;\n  return node instanceof OwnElement || node instanceof HTMLElement;\n}\n\nfunction isShadowRoot(node) {\n  // IE 11 has no ShadowRoot\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n\n  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(node).ShadowRoot;\n  return node instanceof OwnElement || node instanceof ShadowRoot;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBdUM7O0FBRXZDO0FBQ0EsbUJBQW1CLHlEQUFTO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIseURBQVM7QUFDNUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQix5REFBUztBQUM1QjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qcz9hOTRlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5cbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaXNIVE1MRWxlbWVudChub2RlKSB7XG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkhUTUxFbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc1NoYWRvd1Jvb3Qobm9kZSkge1xuICAvLyBJRSAxMSBoYXMgbm8gU2hhZG93Um9vdFxuICBpZiAodHlwZW9mIFNoYWRvd1Jvb3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuU2hhZG93Um9vdDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBTaGFkb3dSb290O1xufVxuXG5leHBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQsIGlzU2hhZG93Um9vdCB9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ isLayoutViewport)\n/* harmony export */ });\n/* harmony import */ var _utils_userAgent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/userAgent.js */ \"./node_modules/@popperjs/core/lib/utils/userAgent.js\");\n\nfunction isLayoutViewport() {\n  return !/^((?!chrome|android).)*safari/i.test((0,_utils_userAgent_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])());\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc0xheW91dFZpZXdwb3J0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWdEO0FBQ2pDO0FBQ2YsZ0RBQWdELCtEQUFXO0FBQzNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNMYXlvdXRWaWV3cG9ydC5qcz8xMGExIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRVQVN0cmluZyBmcm9tIFwiLi4vdXRpbHMvdXNlckFnZW50LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0xheW91dFZpZXdwb3J0KCkge1xuICByZXR1cm4gIS9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QoZ2V0VUFTdHJpbmcoKSk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ isScrollParent)\n/* harmony export */ });\n/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getComputedStyle.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\");\n\nfunction isScrollParent(element) {\n  // Firefox wants us to check `-x` and `-y` variations as well\n  var _getComputedStyle = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element),\n      overflow = _getComputedStyle.overflow,\n      overflowX = _getComputedStyle.overflowX,\n      overflowY = _getComputedStyle.overflowY;\n\n  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1Njcm9sbFBhcmVudC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRDtBQUN0QztBQUNmO0FBQ0EsMEJBQTBCLGdFQUFnQjtBQUMxQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzU2Nyb2xsUGFyZW50LmpzPzQ2MDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBGaXJlZm94IHdhbnRzIHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG4gIHZhciBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3dYID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3dZO1xuXG4gIHJldHVybiAvYXV0b3xzY3JvbGx8b3ZlcmxheXxoaWRkZW4vLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ isTableElement)\n/* harmony export */ });\n/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\");\n\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element)) >= 0;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1RhYmxlRWxlbWVudC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyQztBQUM1QjtBQUNmLHVDQUF1QywyREFBVztBQUNsRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzVGFibGVFbGVtZW50LmpzPzU2NDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1RhYmxlRWxlbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBbJ3RhYmxlJywgJ3RkJywgJ3RoJ10uaW5kZXhPZihnZXROb2RlTmFtZShlbGVtZW50KSkgPj0gMDtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js":
/*!************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ listScrollParents)\n/* harmony export */ });\n/* harmony import */ var _getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getScrollParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js\");\n/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getParentNode.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js\");\n/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isScrollParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js\");\n\n\n\n\n/*\ngiven a DOM element, return the list of all scroll parents, up the list of ancesors\nuntil we get to the top window object. This list is what we attach scroll listeners\nto, because if any of these parent elements scroll, we'll need to re-calculate the\nreference element's position.\n*/\n\nfunction listScrollParents(element, list) {\n  var _element$ownerDocumen;\n\n  if (list === void 0) {\n    list = [];\n  }\n\n  var scrollParent = (0,_getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element);\n  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scrollParent);\n  var target = isBody ? [win].concat(win.visualViewport || [], (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(scrollParent) ? scrollParent : []) : scrollParent;\n  var updatedList = list.concat(target);\n  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n  updatedList.concat(listScrollParents((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(target)));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9saXN0U2Nyb2xsUGFyZW50cy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFtRDtBQUNKO0FBQ1I7QUFDVTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLCtEQUFlO0FBQ3BDO0FBQ0EsWUFBWSx5REFBUztBQUNyQiwrREFBK0QsOERBQWM7QUFDN0U7QUFDQTtBQUNBLHVDQUF1Qyw2REFBYTtBQUNwRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzP2Q2NmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldFNjcm9sbFBhcmVudCBmcm9tIFwiLi9nZXRTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcbi8qXG5naXZlbiBhIERPTSBlbGVtZW50LCByZXR1cm4gdGhlIGxpc3Qgb2YgYWxsIHNjcm9sbCBwYXJlbnRzLCB1cCB0aGUgbGlzdCBvZiBhbmNlc29yc1xudW50aWwgd2UgZ2V0IHRvIHRoZSB0b3Agd2luZG93IG9iamVjdC4gVGhpcyBsaXN0IGlzIHdoYXQgd2UgYXR0YWNoIHNjcm9sbCBsaXN0ZW5lcnNcbnRvLCBiZWNhdXNlIGlmIGFueSBvZiB0aGVzZSBwYXJlbnQgZWxlbWVudHMgc2Nyb2xsLCB3ZSdsbCBuZWVkIHRvIHJlLWNhbGN1bGF0ZSB0aGVcbnJlZmVyZW5jZSBlbGVtZW50J3MgcG9zaXRpb24uXG4qL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaXN0U2Nyb2xsUGFyZW50cyhlbGVtZW50LCBsaXN0KSB7XG4gIHZhciBfZWxlbWVudCRvd25lckRvY3VtZW47XG5cbiAgaWYgKGxpc3QgPT09IHZvaWQgMCkge1xuICAgIGxpc3QgPSBbXTtcbiAgfVxuXG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCk7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQgPT09ICgoX2VsZW1lbnQkb3duZXJEb2N1bWVuID0gZWxlbWVudC5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2VsZW1lbnQkb3duZXJEb2N1bWVuLmJvZHkpO1xuICB2YXIgd2luID0gZ2V0V2luZG93KHNjcm9sbFBhcmVudCk7XG4gIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBbd2luXS5jb25jYXQod2luLnZpc3VhbFZpZXdwb3J0IHx8IFtdLCBpc1Njcm9sbFBhcmVudChzY3JvbGxQYXJlbnQpID8gc2Nyb2xsUGFyZW50IDogW10pIDogc2Nyb2xsUGFyZW50O1xuICB2YXIgdXBkYXRlZExpc3QgPSBsaXN0LmNvbmNhdCh0YXJnZXQpO1xuICByZXR1cm4gaXNCb2R5ID8gdXBkYXRlZExpc3QgOiAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXTogaXNCb2R5IHRlbGxzIHVzIHRhcmdldCB3aWxsIGJlIGFuIEhUTUxFbGVtZW50IGhlcmVcbiAgdXBkYXRlZExpc3QuY29uY2F0KGxpc3RTY3JvbGxQYXJlbnRzKGdldFBhcmVudE5vZGUodGFyZ2V0KSkpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/enums.js":
/*!**************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/enums.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"afterMain\": () => (/* binding */ afterMain),\n/* harmony export */   \"afterRead\": () => (/* binding */ afterRead),\n/* harmony export */   \"afterWrite\": () => (/* binding */ afterWrite),\n/* harmony export */   \"auto\": () => (/* binding */ auto),\n/* harmony export */   \"basePlacements\": () => (/* binding */ basePlacements),\n/* harmony export */   \"beforeMain\": () => (/* binding */ beforeMain),\n/* harmony export */   \"beforeRead\": () => (/* binding */ beforeRead),\n/* harmony export */   \"beforeWrite\": () => (/* binding */ beforeWrite),\n/* harmony export */   \"bottom\": () => (/* binding */ bottom),\n/* harmony export */   \"clippingParents\": () => (/* binding */ clippingParents),\n/* harmony export */   \"end\": () => (/* binding */ end),\n/* harmony export */   \"left\": () => (/* binding */ left),\n/* harmony export */   \"main\": () => (/* binding */ main),\n/* harmony export */   \"modifierPhases\": () => (/* binding */ modifierPhases),\n/* harmony export */   \"placements\": () => (/* binding */ placements),\n/* harmony export */   \"popper\": () => (/* binding */ popper),\n/* harmony export */   \"read\": () => (/* binding */ read),\n/* harmony export */   \"reference\": () => (/* binding */ reference),\n/* harmony export */   \"right\": () => (/* binding */ right),\n/* harmony export */   \"start\": () => (/* binding */ start),\n/* harmony export */   \"top\": () => (/* binding */ top),\n/* harmony export */   \"variationPlacements\": () => (/* binding */ variationPlacements),\n/* harmony export */   \"viewport\": () => (/* binding */ viewport),\n/* harmony export */   \"write\": () => (/* binding */ write)\n/* harmony export */ });\nvar top = 'top';\nvar bottom = 'bottom';\nvar right = 'right';\nvar left = 'left';\nvar auto = 'auto';\nvar basePlacements = [top, bottom, right, left];\nvar start = 'start';\nvar end = 'end';\nvar clippingParents = 'clippingParents';\nvar viewport = 'viewport';\nvar popper = 'popper';\nvar reference = 'reference';\nvar variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {\n  return acc.concat([placement + \"-\" + start, placement + \"-\" + end]);\n}, []);\nvar placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {\n  return acc.concat([placement, placement + \"-\" + start, placement + \"-\" + end]);\n}, []); // modifiers that need to read the DOM\n\nvar beforeRead = 'beforeRead';\nvar read = 'read';\nvar afterRead = 'afterRead'; // pure-logic modifiers\n\nvar beforeMain = 'beforeMain';\nvar main = 'main';\nvar afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)\n\nvar beforeWrite = 'beforeWrite';\nvar write = 'write';\nvar afterWrite = 'afterWrite';\nvar modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2VudW1zLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFPO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1A7QUFDQSxDQUFDO0FBQ007QUFDUDtBQUNBLENBQUMsT0FBTzs7QUFFRDtBQUNBO0FBQ0EsNkJBQTZCOztBQUU3QjtBQUNBO0FBQ0EsNkJBQTZCOztBQUU3QjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZW51bXMuanM/MzU5NyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIHRvcCA9ICd0b3AnO1xuZXhwb3J0IHZhciBib3R0b20gPSAnYm90dG9tJztcbmV4cG9ydCB2YXIgcmlnaHQgPSAncmlnaHQnO1xuZXhwb3J0IHZhciBsZWZ0ID0gJ2xlZnQnO1xuZXhwb3J0IHZhciBhdXRvID0gJ2F1dG8nO1xuZXhwb3J0IHZhciBiYXNlUGxhY2VtZW50cyA9IFt0b3AsIGJvdHRvbSwgcmlnaHQsIGxlZnRdO1xuZXhwb3J0IHZhciBzdGFydCA9ICdzdGFydCc7XG5leHBvcnQgdmFyIGVuZCA9ICdlbmQnO1xuZXhwb3J0IHZhciBjbGlwcGluZ1BhcmVudHMgPSAnY2xpcHBpbmdQYXJlbnRzJztcbmV4cG9ydCB2YXIgdmlld3BvcnQgPSAndmlld3BvcnQnO1xuZXhwb3J0IHZhciBwb3BwZXIgPSAncG9wcGVyJztcbmV4cG9ydCB2YXIgcmVmZXJlbmNlID0gJ3JlZmVyZW5jZSc7XG5leHBvcnQgdmFyIHZhcmlhdGlvblBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovYmFzZVBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICByZXR1cm4gYWNjLmNvbmNhdChbcGxhY2VtZW50ICsgXCItXCIgKyBzdGFydCwgcGxhY2VtZW50ICsgXCItXCIgKyBlbmRdKTtcbn0sIFtdKTtcbmV4cG9ydCB2YXIgcGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9bXS5jb25jYXQoYmFzZVBsYWNlbWVudHMsIFthdXRvXSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICByZXR1cm4gYWNjLmNvbmNhdChbcGxhY2VtZW50LCBwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pOyAvLyBtb2RpZmllcnMgdGhhdCBuZWVkIHRvIHJlYWQgdGhlIERPTVxuXG5leHBvcnQgdmFyIGJlZm9yZVJlYWQgPSAnYmVmb3JlUmVhZCc7XG5leHBvcnQgdmFyIHJlYWQgPSAncmVhZCc7XG5leHBvcnQgdmFyIGFmdGVyUmVhZCA9ICdhZnRlclJlYWQnOyAvLyBwdXJlLWxvZ2ljIG1vZGlmaWVyc1xuXG5leHBvcnQgdmFyIGJlZm9yZU1haW4gPSAnYmVmb3JlTWFpbic7XG5leHBvcnQgdmFyIG1haW4gPSAnbWFpbic7XG5leHBvcnQgdmFyIGFmdGVyTWFpbiA9ICdhZnRlck1haW4nOyAvLyBtb2RpZmllciB3aXRoIHRoZSBwdXJwb3NlIHRvIHdyaXRlIHRvIHRoZSBET00gKG9yIHdyaXRlIGludG8gYSBmcmFtZXdvcmsgc3RhdGUpXG5cbmV4cG9ydCB2YXIgYmVmb3JlV3JpdGUgPSAnYmVmb3JlV3JpdGUnO1xuZXhwb3J0IHZhciB3cml0ZSA9ICd3cml0ZSc7XG5leHBvcnQgdmFyIGFmdGVyV3JpdGUgPSAnYWZ0ZXJXcml0ZSc7XG5leHBvcnQgdmFyIG1vZGlmaWVyUGhhc2VzID0gW2JlZm9yZVJlYWQsIHJlYWQsIGFmdGVyUmVhZCwgYmVmb3JlTWFpbiwgbWFpbiwgYWZ0ZXJNYWluLCBiZWZvcmVXcml0ZSwgd3JpdGUsIGFmdGVyV3JpdGVdOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/enums.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"afterMain\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.afterMain),\n/* harmony export */   \"afterRead\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.afterRead),\n/* harmony export */   \"afterWrite\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.afterWrite),\n/* harmony export */   \"applyStyles\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.applyStyles),\n/* harmony export */   \"arrow\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.arrow),\n/* harmony export */   \"auto\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.auto),\n/* harmony export */   \"basePlacements\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements),\n/* harmony export */   \"beforeMain\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.beforeMain),\n/* harmony export */   \"beforeRead\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.beforeRead),\n/* harmony export */   \"beforeWrite\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.beforeWrite),\n/* harmony export */   \"bottom\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom),\n/* harmony export */   \"clippingParents\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.clippingParents),\n/* harmony export */   \"computeStyles\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.computeStyles),\n/* harmony export */   \"createPopper\": () => (/* reexport safe */ _popper_js__WEBPACK_IMPORTED_MODULE_4__.createPopper),\n/* harmony export */   \"createPopperBase\": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_2__.createPopper),\n/* harmony export */   \"createPopperLite\": () => (/* reexport safe */ _popper_lite_js__WEBPACK_IMPORTED_MODULE_5__.createPopper),\n/* harmony export */   \"detectOverflow\": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   \"end\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.end),\n/* harmony export */   \"eventListeners\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.eventListeners),\n/* harmony export */   \"flip\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.flip),\n/* harmony export */   \"hide\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.hide),\n/* harmony export */   \"left\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.left),\n/* harmony export */   \"main\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.main),\n/* harmony export */   \"modifierPhases\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.modifierPhases),\n/* harmony export */   \"offset\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.offset),\n/* harmony export */   \"placements\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.placements),\n/* harmony export */   \"popper\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper),\n/* harmony export */   \"popperGenerator\": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_2__.popperGenerator),\n/* harmony export */   \"popperOffsets\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.popperOffsets),\n/* harmony export */   \"preventOverflow\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.preventOverflow),\n/* harmony export */   \"read\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.read),\n/* harmony export */   \"reference\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.reference),\n/* harmony export */   \"right\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.right),\n/* harmony export */   \"start\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.start),\n/* harmony export */   \"top\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.top),\n/* harmony export */   \"variationPlacements\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements),\n/* harmony export */   \"viewport\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.viewport),\n/* harmony export */   \"write\": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.write)\n/* harmony export */ });\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/index.js */ \"./node_modules/@popperjs/core/lib/modifiers/index.js\");\n/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createPopper.js */ \"./node_modules/@popperjs/core/lib/createPopper.js\");\n/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./createPopper.js */ \"./node_modules/@popperjs/core/lib/utils/detectOverflow.js\");\n/* harmony import */ var _popper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./popper.js */ \"./node_modules/@popperjs/core/lib/popper.js\");\n/* harmony import */ var _popper_lite_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./popper-lite.js */ \"./node_modules/@popperjs/core/lib/popper-lite.js\");\n\n // eslint-disable-next-line import/no-unused-modules\n\n // eslint-disable-next-line import/no-unused-modules\n\n // eslint-disable-next-line import/no-unused-modules\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTJCO0FBQ1UsQ0FBQzs7QUFFZ0UsQ0FBQzs7QUFFNUQsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvaW5kZXguanM/ZGIwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9lbnVtcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbW9kaWZpZXJzL2luZGV4LmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgcG9wcGVyR2VuZXJhdG9yLCBkZXRlY3RPdmVyZmxvdywgY3JlYXRlUG9wcGVyIGFzIGNyZWF0ZVBvcHBlckJhc2UgfSBmcm9tIFwiLi9jcmVhdGVQb3BwZXIuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIgfSBmcm9tIFwiLi9wb3BwZXIuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIgYXMgY3JlYXRlUG9wcGVyTGl0ZSB9IGZyb20gXCIuL3BvcHBlci1saXRlLmpzXCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/index.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/applyStyles.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/getNodeName.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\");\n/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n\n // This modifier takes the styles prepared by the `computeStyles` modifier\n// and applies them to the HTMLElements such as popper and arrow\n\nfunction applyStyles(_ref) {\n  var state = _ref.state;\n  Object.keys(state.elements).forEach(function (name) {\n    var style = state.styles[name] || {};\n    var attributes = state.attributes[name] || {};\n    var element = state.elements[name]; // arrow is optional + virtual elements\n\n    if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || !(0,_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(element)) {\n      return;\n    } // Flow doesn't support to extend this property, but it's the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe[cannot-write]\n\n\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(function (name) {\n      var value = attributes[name];\n\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? '' : value);\n      }\n    });\n  });\n}\n\nfunction effect(_ref2) {\n  var state = _ref2.state;\n  var initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: '0',\n      top: '0',\n      margin: '0'\n    },\n    arrow: {\n      position: 'absolute'\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n  state.styles = initialStyles;\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return function () {\n    Object.keys(state.elements).forEach(function (name) {\n      var element = state.elements[name];\n      var attributes = state.attributes[name] || {};\n      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n      var style = styleProperties.reduce(function (style, property) {\n        style[property] = '';\n        return style;\n      }, {}); // arrow is optional + virtual elements\n\n      if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || !(0,_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(element)) {\n        return;\n      }\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (attribute) {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'applyStyles',\n  enabled: true,\n  phase: 'write',\n  fn: applyStyles,\n  effect: effect,\n  requires: ['computeStyles']\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9hcHBseVN0eWxlcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBc0Q7QUFDSyxDQUFDO0FBQzVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7O0FBRXhDLFNBQVMsdUVBQWEsY0FBYyxxRUFBVztBQUMvQztBQUNBLE1BQU07QUFDTjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUhBQXVIOztBQUV2SDtBQUNBO0FBQ0E7QUFDQSxPQUFPLElBQUksR0FBRzs7QUFFZCxXQUFXLHVFQUFhLGNBQWMscUVBQVc7QUFDakQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsRUFBRTs7O0FBR0YsaUVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanM/ZjJlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4uL2RvbS11dGlscy9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiOyAvLyBUaGlzIG1vZGlmaWVyIHRha2VzIHRoZSBzdHlsZXMgcHJlcGFyZWQgYnkgdGhlIGBjb21wdXRlU3R5bGVzYCBtb2RpZmllclxuLy8gYW5kIGFwcGxpZXMgdGhlbSB0byB0aGUgSFRNTEVsZW1lbnRzIHN1Y2ggYXMgcG9wcGVyIGFuZCBhcnJvd1xuXG5mdW5jdGlvbiBhcHBseVN0eWxlcyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGU7XG4gIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHN0eWxlID0gc3RhdGUuc3R5bGVzW25hbWVdIHx8IHt9O1xuICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZsb3cgZG9lc24ndCBzdXBwb3J0IHRvIGV4dGVuZCB0aGlzIHByb3BlcnR5LCBidXQgaXQncyB0aGUgbW9zdFxuICAgIC8vIGVmZmVjdGl2ZSB3YXkgdG8gYXBwbHkgc3R5bGVzIHRvIGFuIEhUTUxFbGVtZW50XG4gICAgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG5cblxuICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlO1xuICB2YXIgaW5pdGlhbFN0eWxlcyA9IHtcbiAgICBwb3BwZXI6IHtcbiAgICAgIHBvc2l0aW9uOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgbGVmdDogJzAnLFxuICAgICAgdG9wOiAnMCcsXG4gICAgICBtYXJnaW46ICcwJ1xuICAgIH0sXG4gICAgYXJyb3c6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgfSxcbiAgICByZWZlcmVuY2U6IHt9XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMucG9wcGVyLnN0eWxlLCBpbml0aWFsU3R5bGVzLnBvcHBlcik7XG4gIHN0YXRlLnN0eWxlcyA9IGluaXRpYWxTdHlsZXM7XG5cbiAgaWYgKHN0YXRlLmVsZW1lbnRzLmFycm93KSB7XG4gICAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5hcnJvdy5zdHlsZSwgaW5pdGlhbFN0eWxlcy5hcnJvdyk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdO1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuICAgICAgdmFyIHN0eWxlUHJvcGVydGllcyA9IE9iamVjdC5rZXlzKHN0YXRlLnN0eWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IHN0YXRlLnN0eWxlc1tuYW1lXSA6IGluaXRpYWxTdHlsZXNbbmFtZV0pOyAvLyBTZXQgYWxsIHZhbHVlcyB0byBhbiBlbXB0eSBzdHJpbmcgdG8gdW5zZXQgdGhlbVxuXG4gICAgICB2YXIgc3R5bGUgPSBzdHlsZVByb3BlcnRpZXMucmVkdWNlKGZ1bmN0aW9uIChzdHlsZSwgcHJvcGVydHkpIHtcbiAgICAgICAgc3R5bGVbcHJvcGVydHldID0gJyc7XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH0sIHt9KTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcHBseVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogYXBwbHlTdHlsZXMsXG4gIGVmZmVjdDogZWZmZWN0LFxuICByZXF1aXJlczogWydjb21wdXRlU3R5bGVzJ11cbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/applyStyles.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/arrow.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/arrow.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\");\n/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js\");\n/* harmony import */ var _dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom-utils/contains.js */ \"./node_modules/@popperjs/core/lib/dom-utils/contains.js\");\n/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js\");\n/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js\");\n/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/within.js */ \"./node_modules/@popperjs/core/lib/utils/within.js\");\n/* harmony import */ var _utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/mergePaddingObject.js */ \"./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js\");\n/* harmony import */ var _utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/expandToHashMap.js */ \"./node_modules/@popperjs/core/lib/utils/expandToHashMap.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n\n\n\n\n\n\n\n\n\n // eslint-disable-next-line import/no-unused-modules\n\nvar toPaddingObject = function toPaddingObject(padding, state) {\n  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : padding;\n  return (0,_utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(typeof padding !== 'number' ? padding : (0,_utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_2__.basePlacements));\n};\n\nfunction arrow(_ref) {\n  var _state$modifiersData$;\n\n  var state = _ref.state,\n      name = _ref.name,\n      options = _ref.options;\n  var arrowElement = state.elements.arrow;\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(state.placement);\n  var axis = (0,_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(basePlacement);\n  var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_2__.left, _enums_js__WEBPACK_IMPORTED_MODULE_2__.right].indexOf(basePlacement) >= 0;\n  var len = isVertical ? 'height' : 'width';\n\n  if (!arrowElement || !popperOffsets) {\n    return;\n  }\n\n  var paddingObject = toPaddingObject(options.padding, state);\n  var arrowRect = (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(arrowElement);\n  var minProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_2__.top : _enums_js__WEBPACK_IMPORTED_MODULE_2__.left;\n  var maxProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_2__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_2__.right;\n  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n  var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n  var arrowOffsetParent = (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(arrowElement);\n  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n  // outside of the popper bounds\n\n  var min = paddingObject[minProp];\n  var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n  var offset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_7__.within)(min, center, max); // Prevents breaking syntax highlighting...\n\n  var axisProp = axis;\n  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n}\n\nfunction effect(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options;\n  var _options$element = options.element,\n      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;\n\n  if (arrowElement == null) {\n    return;\n  } // CSS selector\n\n\n  if (typeof arrowElement === 'string') {\n    arrowElement = state.elements.popper.querySelector(arrowElement);\n\n    if (!arrowElement) {\n      return;\n    }\n  }\n\n  if (true) {\n    if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_8__.isHTMLElement)(arrowElement)) {\n      console.error(['Popper: \"arrow\" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));\n    }\n  }\n\n  if (!(0,_dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(state.elements.popper, arrowElement)) {\n    if (true) {\n      console.error(['Popper: \"arrow\" modifier\\'s `element` must be a child of the popper', 'element.'].join(' '));\n    }\n\n    return;\n  }\n\n  state.elements.arrow = arrowElement;\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'arrow',\n  enabled: true,\n  phase: 'main',\n  fn: arrow,\n  effect: effect,\n  requires: ['popperOffsets'],\n  requiresIfExists: ['preventOverflow']\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9hcnJvdy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUE0RDtBQUNGO0FBQ1Y7QUFDYztBQUNjO0FBQ2hDO0FBQ29CO0FBQ047QUFDYTtBQUNaLENBQUM7O0FBRTVEO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0EsR0FBRztBQUNILFNBQVMsd0VBQWtCLHlDQUF5QyxxRUFBZSxVQUFVLHFEQUFjO0FBQzNHOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzRUFBZ0I7QUFDdEMsYUFBYSw4RUFBd0I7QUFDckMsb0JBQW9CLDJDQUFJLEVBQUUsNENBQUs7QUFDL0I7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLHVFQUFhO0FBQy9CLCtCQUErQiwwQ0FBRyxHQUFHLDJDQUFJO0FBQ3pDLCtCQUErQiw2Q0FBTSxHQUFHLDRDQUFLO0FBQzdDO0FBQ0E7QUFDQSwwQkFBMEIseUVBQWU7QUFDekM7QUFDQSx1REFBdUQ7QUFDdkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSx3REFBTSxvQkFBb0I7O0FBRXpDO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7OztBQUdKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTSxJQUFxQztBQUMzQyxTQUFTLHVFQUFhO0FBQ3RCO0FBQ0E7QUFDQTs7QUFFQSxPQUFPLGtFQUFRO0FBQ2YsUUFBUSxJQUFxQztBQUM3QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOzs7QUFHRixpRUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2Fycm93LmpzPzdlZDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuLi9kb20tdXRpbHMvY29udGFpbnMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgd2l0aGluIH0gZnJvbSBcIi4uL3V0aWxzL3dpdGhpbi5qc1wiO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tIFwiLi4vdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuLi91dGlscy9leHBhbmRUb0hhc2hNYXAuanNcIjtcbmltcG9ydCB7IGxlZnQsIHJpZ2h0LCBiYXNlUGxhY2VtZW50cywgdG9wLCBib3R0b20gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgdG9QYWRkaW5nT2JqZWN0ID0gZnVuY3Rpb24gdG9QYWRkaW5nT2JqZWN0KHBhZGRpbmcsIHN0YXRlKSB7XG4gIHBhZGRpbmcgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ2Z1bmN0aW9uJyA/IHBhZGRpbmcoT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiBwYWRkaW5nO1xuICByZXR1cm4gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbn07XG5cbmZ1bmN0aW9uIGFycm93KF9yZWYpIHtcbiAgdmFyIF9zdGF0ZSRtb2RpZmllcnNEYXRhJDtcblxuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgYXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGlzVmVydGljYWwgPSBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgaWYgKCFhcnJvd0VsZW1lbnQgfHwgIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcGFkZGluZ09iamVjdCA9IHRvUGFkZGluZ09iamVjdChvcHRpb25zLnBhZGRpbmcsIHN0YXRlKTtcbiAgdmFyIGFycm93UmVjdCA9IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KTtcbiAgdmFyIG1pblByb3AgPSBheGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICB2YXIgbWF4UHJvcCA9IGF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICB2YXIgZW5kRGlmZiA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtsZW5dICsgc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdIC0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnBvcHBlcltsZW5dO1xuICB2YXIgc3RhcnREaWZmID0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtheGlzXTtcbiAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGFycm93RWxlbWVudCk7XG4gIHZhciBjbGllbnRTaXplID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBheGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoIHx8IDAgOiAwO1xuICB2YXIgY2VudGVyVG9SZWZlcmVuY2UgPSBlbmREaWZmIC8gMiAtIHN0YXJ0RGlmZiAvIDI7IC8vIE1ha2Ugc3VyZSB0aGUgYXJyb3cgZG9lc24ndCBvdmVyZmxvdyB0aGUgcG9wcGVyIGlmIHRoZSBjZW50ZXIgcG9pbnQgaXNcbiAgLy8gb3V0c2lkZSBvZiB0aGUgcG9wcGVyIGJvdW5kc1xuXG4gIHZhciBtaW4gPSBwYWRkaW5nT2JqZWN0W21pblByb3BdO1xuICB2YXIgbWF4ID0gY2xpZW50U2l6ZSAtIGFycm93UmVjdFtsZW5dIC0gcGFkZGluZ09iamVjdFttYXhQcm9wXTtcbiAgdmFyIGNlbnRlciA9IGNsaWVudFNpemUgLyAyIC0gYXJyb3dSZWN0W2xlbl0gLyAyICsgY2VudGVyVG9SZWZlcmVuY2U7XG4gIHZhciBvZmZzZXQgPSB3aXRoaW4obWluLCBjZW50ZXIsIG1heCk7IC8vIFByZXZlbnRzIGJyZWFraW5nIHN5bnRheCBoaWdobGlnaHRpbmcuLi5cblxuICB2YXIgYXhpc1Byb3AgPSBheGlzO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gKF9zdGF0ZSRtb2RpZmllcnNEYXRhJCA9IHt9LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSRbYXhpc1Byb3BdID0gb2Zmc2V0LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQuY2VudGVyT2Zmc2V0ID0gb2Zmc2V0IC0gY2VudGVyLCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQpO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGVsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQsXG4gICAgICBhcnJvd0VsZW1lbnQgPSBfb3B0aW9ucyRlbGVtZW50ID09PSB2b2lkIDAgPyAnW2RhdGEtcG9wcGVyLWFycm93XScgOiBfb3B0aW9ucyRlbGVtZW50O1xuXG4gIGlmIChhcnJvd0VsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBDU1Mgc2VsZWN0b3JcblxuXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIGVsZW1lbnQgbXVzdCBiZSBhbiBIVE1MRWxlbWVudCAobm90IGFuIFNWR0VsZW1lbnQpLicsICdUbyB1c2UgYW4gU1ZHIGFycm93LCB3cmFwIGl0IGluIGFuIEhUTUxFbGVtZW50IHRoYXQgd2lsbCBiZSB1c2VkIGFzJywgJ3RoZSBhcnJvdy4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29udGFpbnMoc3RhdGUuZWxlbWVudHMucG9wcGVyLCBhcnJvd0VsZW1lbnQpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIG1vZGlmaWVyXFwncyBgZWxlbWVudGAgbXVzdCBiZSBhIGNoaWxkIG9mIHRoZSBwb3BwZXInLCAnZWxlbWVudC4nXS5qb2luKCcgJykpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHN0YXRlLmVsZW1lbnRzLmFycm93ID0gYXJyb3dFbGVtZW50O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnYXJyb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogYXJyb3csXG4gIGVmZmVjdDogZWZmZWN0LFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J11cbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/arrow.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/computeStyles.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"mapToStyles\": () => (/* binding */ mapToStyles)\n/* harmony export */ });\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js\");\n/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getComputedStyle.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\");\n/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\");\n/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/getVariation.js */ \"./node_modules/@popperjs/core/lib/utils/getVariation.js\");\n/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/math.js */ \"./node_modules/@popperjs/core/lib/utils/math.js\");\n\n\n\n\n\n\n\n // eslint-disable-next-line import/no-unused-modules\n\nvar unsetSides = {\n  top: 'auto',\n  right: 'auto',\n  bottom: 'auto',\n  left: 'auto'\n}; // Round the offsets to the nearest suitable subpixel based on the DPR.\n// Zooming can change the DPR, but it seems to report a value that will\n// cleanly divide the values into the appropriate subpixels.\n\nfunction roundOffsetsByDPR(_ref) {\n  var x = _ref.x,\n      y = _ref.y;\n  var win = window;\n  var dpr = win.devicePixelRatio || 1;\n  return {\n    x: (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(x * dpr) / dpr || 0,\n    y: (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(y * dpr) / dpr || 0\n  };\n}\n\nfunction mapToStyles(_ref2) {\n  var _Object$assign2;\n\n  var popper = _ref2.popper,\n      popperRect = _ref2.popperRect,\n      placement = _ref2.placement,\n      variation = _ref2.variation,\n      offsets = _ref2.offsets,\n      position = _ref2.position,\n      gpuAcceleration = _ref2.gpuAcceleration,\n      adaptive = _ref2.adaptive,\n      roundOffsets = _ref2.roundOffsets,\n      isFixed = _ref2.isFixed;\n  var _offsets$x = offsets.x,\n      x = _offsets$x === void 0 ? 0 : _offsets$x,\n      _offsets$y = offsets.y,\n      y = _offsets$y === void 0 ? 0 : _offsets$y;\n\n  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({\n    x: x,\n    y: y\n  }) : {\n    x: x,\n    y: y\n  };\n\n  x = _ref3.x;\n  y = _ref3.y;\n  var hasX = offsets.hasOwnProperty('x');\n  var hasY = offsets.hasOwnProperty('y');\n  var sideX = _enums_js__WEBPACK_IMPORTED_MODULE_1__.left;\n  var sideY = _enums_js__WEBPACK_IMPORTED_MODULE_1__.top;\n  var win = window;\n\n  if (adaptive) {\n    var offsetParent = (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(popper);\n    var heightProp = 'clientHeight';\n    var widthProp = 'clientWidth';\n\n    if (offsetParent === (0,_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(popper)) {\n      offsetParent = (0,_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(popper);\n\n      if ((0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(offsetParent).position !== 'static' && position === 'absolute') {\n        heightProp = 'scrollHeight';\n        widthProp = 'scrollWidth';\n      }\n    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n\n\n    offsetParent = offsetParent;\n\n    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.top || (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.left || placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.right) && variation === _enums_js__WEBPACK_IMPORTED_MODULE_1__.end) {\n      sideY = _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom;\n      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]\n      offsetParent[heightProp];\n      y -= offsetY - popperRect.height;\n      y *= gpuAcceleration ? 1 : -1;\n    }\n\n    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.left || (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.top || placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom) && variation === _enums_js__WEBPACK_IMPORTED_MODULE_1__.end) {\n      sideX = _enums_js__WEBPACK_IMPORTED_MODULE_1__.right;\n      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]\n      offsetParent[widthProp];\n      x -= offsetX - popperRect.width;\n      x *= gpuAcceleration ? 1 : -1;\n    }\n  }\n\n  var commonStyles = Object.assign({\n    position: position\n  }, adaptive && unsetSides);\n\n  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({\n    x: x,\n    y: y\n  }) : {\n    x: x,\n    y: y\n  };\n\n  x = _ref4.x;\n  y = _ref4.y;\n\n  if (gpuAcceleration) {\n    var _Object$assign;\n\n    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n  }\n\n  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : '', _Object$assign2[sideX] = hasX ? x + \"px\" : '', _Object$assign2.transform = '', _Object$assign2));\n}\n\nfunction computeStyles(_ref5) {\n  var state = _ref5.state,\n      options = _ref5.options;\n  var _options$gpuAccelerat = options.gpuAcceleration,\n      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,\n      _options$adaptive = options.adaptive,\n      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,\n      _options$roundOffsets = options.roundOffsets,\n      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n\n  if (true) {\n    var transitionProperty = (0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(state.elements.popper).transitionProperty || '';\n\n    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {\n      return transitionProperty.indexOf(property) >= 0;\n    })) {\n      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: \"transform\", \"top\", \"right\", \"bottom\", \"left\".', '\\n\\n', 'Disable the \"computeStyles\" modifier\\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\\n\\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));\n    }\n  }\n\n  var commonStyles = {\n    placement: (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(state.placement),\n    variation: (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(state.placement),\n    popper: state.elements.popper,\n    popperRect: state.rects.popper,\n    gpuAcceleration: gpuAcceleration,\n    isFixed: state.options.strategy === 'fixed'\n  };\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.popperOffsets,\n      position: state.options.strategy,\n      adaptive: adaptive,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  if (state.modifiersData.arrow != null) {\n    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.arrow,\n      position: 'absolute',\n      adaptive: false,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    'data-popper-placement': state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'computeStyles',\n  enabled: true,\n  phase: 'beforeWrite',\n  fn: computeStyles,\n  data: {}\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/computeStyles.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/eventListeners.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\");\n // eslint-disable-next-line import/no-unused-modules\n\nvar passive = {\n  passive: true\n};\n\nfunction effect(_ref) {\n  var state = _ref.state,\n      instance = _ref.instance,\n      options = _ref.options;\n  var _options$scroll = options.scroll,\n      scroll = _options$scroll === void 0 ? true : _options$scroll,\n      _options$resize = options.resize,\n      resize = _options$resize === void 0 ? true : _options$resize;\n  var window = (0,_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(state.elements.popper);\n  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n\n  if (scroll) {\n    scrollParents.forEach(function (scrollParent) {\n      scrollParent.addEventListener('scroll', instance.update, passive);\n    });\n  }\n\n  if (resize) {\n    window.addEventListener('resize', instance.update, passive);\n  }\n\n  return function () {\n    if (scroll) {\n      scrollParents.forEach(function (scrollParent) {\n        scrollParent.removeEventListener('scroll', instance.update, passive);\n      });\n    }\n\n    if (resize) {\n      window.removeEventListener('resize', instance.update, passive);\n    }\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'eventListeners',\n  enabled: true,\n  phase: 'write',\n  fn: function fn() {},\n  effect: effect,\n  data: {}\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrRCxDQUFDOztBQUVuRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUVBQVM7QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7OztBQUdGLGlFQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanM/OTFjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0V2luZG93LmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHBhc3NpdmUgPSB7XG4gIHBhc3NpdmU6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2UsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkc2Nyb2xsID0gb3B0aW9ucy5zY3JvbGwsXG4gICAgICBzY3JvbGwgPSBfb3B0aW9ucyRzY3JvbGwgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRzY3JvbGwsXG4gICAgICBfb3B0aW9ucyRyZXNpemUgPSBvcHRpb25zLnJlc2l6ZSxcbiAgICAgIHJlc2l6ZSA9IF9vcHRpb25zJHJlc2l6ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJlc2l6ZTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIpO1xuICB2YXIgc2Nyb2xsUGFyZW50cyA9IFtdLmNvbmNhdChzdGF0ZS5zY3JvbGxQYXJlbnRzLnJlZmVyZW5jZSwgc3RhdGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIpO1xuXG4gIGlmIChzY3JvbGwpIHtcbiAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgc2Nyb2xsUGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocmVzaXplKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChzY3JvbGwpIHtcbiAgICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2Nyb2xsUGFyZW50KSB7XG4gICAgICAgIHNjcm9sbFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlc2l6ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfVxuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZXZlbnRMaXN0ZW5lcnMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGZ1bmN0aW9uIGZuKCkge30sXG4gIGVmZmVjdDogZWZmZWN0LFxuICBkYXRhOiB7fVxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/eventListeners.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/flip.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/flip.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getOppositePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js\");\n/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\");\n/* harmony import */ var _utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getOppositeVariationPlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js\");\n/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/detectOverflow.js */ \"./node_modules/@popperjs/core/lib/utils/detectOverflow.js\");\n/* harmony import */ var _utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/computeAutoPlacement.js */ \"./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/getVariation.js */ \"./node_modules/@popperjs/core/lib/utils/getVariation.js\");\n\n\n\n\n\n\n // eslint-disable-next-line import/no-unused-modules\n\nfunction getExpandedFallbackPlacements(placement) {\n  if ((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.auto) {\n    return [];\n  }\n\n  var oppositePlacement = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(placement);\n  return [(0,_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(placement), oppositePlacement, (0,_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(oppositePlacement)];\n}\n\nfunction flip(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n\n  if (state.modifiersData[name]._skip) {\n    return;\n  }\n\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,\n      specifiedFallbackPlacements = options.fallbackPlacements,\n      padding = options.padding,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      _options$flipVariatio = options.flipVariations,\n      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,\n      allowedAutoPlacements = options.allowedAutoPlacements;\n  var preferredPlacement = state.options.placement;\n  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(preferredPlacement);\n  var isBasePlacement = basePlacement === preferredPlacement;\n  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [(0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {\n    return acc.concat((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.auto ? (0,_utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding,\n      flipVariations: flipVariations,\n      allowedAutoPlacements: allowedAutoPlacements\n    }) : placement);\n  }, []);\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var checksMap = new Map();\n  var makeFallbackChecks = true;\n  var firstFittingPlacement = placements[0];\n\n  for (var i = 0; i < placements.length; i++) {\n    var placement = placements[i];\n\n    var _basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(placement);\n\n    var isStartVariation = (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.start;\n    var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_1__.top, _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom].indexOf(_basePlacement) >= 0;\n    var len = isVertical ? 'width' : 'height';\n    var overflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      altBoundary: altBoundary,\n      padding: padding\n    });\n    var mainVariationSide = isVertical ? isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_1__.right : _enums_js__WEBPACK_IMPORTED_MODULE_1__.left : isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_1__.top;\n\n    if (referenceRect[len] > popperRect[len]) {\n      mainVariationSide = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(mainVariationSide);\n    }\n\n    var altVariationSide = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(mainVariationSide);\n    var checks = [];\n\n    if (checkMainAxis) {\n      checks.push(overflow[_basePlacement] <= 0);\n    }\n\n    if (checkAltAxis) {\n      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n    }\n\n    if (checks.every(function (check) {\n      return check;\n    })) {\n      firstFittingPlacement = placement;\n      makeFallbackChecks = false;\n      break;\n    }\n\n    checksMap.set(placement, checks);\n  }\n\n  if (makeFallbackChecks) {\n    // `2` may be desired in some cases – research later\n    var numberOfChecks = flipVariations ? 3 : 1;\n\n    var _loop = function _loop(_i) {\n      var fittingPlacement = placements.find(function (placement) {\n        var checks = checksMap.get(placement);\n\n        if (checks) {\n          return checks.slice(0, _i).every(function (check) {\n            return check;\n          });\n        }\n      });\n\n      if (fittingPlacement) {\n        firstFittingPlacement = fittingPlacement;\n        return \"break\";\n      }\n    };\n\n    for (var _i = numberOfChecks; _i > 0; _i--) {\n      var _ret = _loop(_i);\n\n      if (_ret === \"break\") break;\n    }\n  }\n\n  if (state.placement !== firstFittingPlacement) {\n    state.modifiersData[name]._skip = true;\n    state.placement = firstFittingPlacement;\n    state.reset = true;\n  }\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'flip',\n  enabled: true,\n  phase: 'main',\n  fn: flip,\n  requiresIfExists: ['offset'],\n  data: {\n    _skip: false\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/flip.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/hide.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/hide.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/detectOverflow.js */ \"./node_modules/@popperjs/core/lib/utils/detectOverflow.js\");\n\n\n\nfunction getSideOffsets(overflow, rect, preventedOffsets) {\n  if (preventedOffsets === void 0) {\n    preventedOffsets = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  return {\n    top: overflow.top - rect.height - preventedOffsets.y,\n    right: overflow.right - rect.width + preventedOffsets.x,\n    bottom: overflow.bottom - rect.height + preventedOffsets.y,\n    left: overflow.left - rect.width - preventedOffsets.x\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return [_enums_js__WEBPACK_IMPORTED_MODULE_0__.top, _enums_js__WEBPACK_IMPORTED_MODULE_0__.right, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom, _enums_js__WEBPACK_IMPORTED_MODULE_0__.left].some(function (side) {\n    return overflow[side] >= 0;\n  });\n}\n\nfunction hide(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var preventedOffsets = state.modifiersData.preventOverflow;\n  var referenceOverflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(state, {\n    elementContext: 'reference'\n  });\n  var popperAltOverflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(state, {\n    altBoundary: true\n  });\n  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n  state.modifiersData[name] = {\n    referenceClippingOffsets: referenceClippingOffsets,\n    popperEscapeOffsets: popperEscapeOffsets,\n    isReferenceHidden: isReferenceHidden,\n    hasPopperEscaped: hasPopperEscaped\n  };\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    'data-popper-reference-hidden': isReferenceHidden,\n    'data-popper-escaped': hasPopperEscaped\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'hide',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['preventOverflow'],\n  fn: hide\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9oaWRlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1RDtBQUNDOztBQUV4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVUsMENBQUcsRUFBRSw0Q0FBSyxFQUFFLDZDQUFNLEVBQUUsMkNBQUk7QUFDbEM7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLG9FQUFjO0FBQ3hDO0FBQ0EsR0FBRztBQUNILDBCQUEwQixvRUFBYztBQUN4QztBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7OztBQUdGLGlFQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9oaWRlLmpzPzM2ZjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5cbmZ1bmN0aW9uIGdldFNpZGVPZmZzZXRzKG92ZXJmbG93LCByZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKSB7XG4gIGlmIChwcmV2ZW50ZWRPZmZzZXRzID09PSB2b2lkIDApIHtcbiAgICBwcmV2ZW50ZWRPZmZzZXRzID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDBcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IG92ZXJmbG93LnRvcCAtIHJlY3QuaGVpZ2h0IC0gcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIHJpZ2h0OiBvdmVyZmxvdy5yaWdodCAtIHJlY3Qud2lkdGggKyBwcmV2ZW50ZWRPZmZzZXRzLngsXG4gICAgYm90dG9tOiBvdmVyZmxvdy5ib3R0b20gLSByZWN0LmhlaWdodCArIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICBsZWZ0OiBvdmVyZmxvdy5sZWZ0IC0gcmVjdC53aWR0aCAtIHByZXZlbnRlZE9mZnNldHMueFxuICB9O1xufVxuXG5mdW5jdGlvbiBpc0FueVNpZGVGdWxseUNsaXBwZWQob3ZlcmZsb3cpIHtcbiAgcmV0dXJuIFt0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnRdLnNvbWUoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dbc2lkZV0gPj0gMDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhpZGUoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgcHJldmVudGVkT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucHJldmVudE92ZXJmbG93O1xuICB2YXIgcmVmZXJlbmNlT3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGVsZW1lbnRDb250ZXh0OiAncmVmZXJlbmNlJ1xuICB9KTtcbiAgdmFyIHBvcHBlckFsdE92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBhbHRCb3VuZGFyeTogdHJ1ZVxuICB9KTtcbiAgdmFyIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHJlZmVyZW5jZU92ZXJmbG93LCByZWZlcmVuY2VSZWN0KTtcbiAgdmFyIHBvcHBlckVzY2FwZU9mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhwb3BwZXJBbHRPdmVyZmxvdywgcG9wcGVyUmVjdCwgcHJldmVudGVkT2Zmc2V0cyk7XG4gIHZhciBpc1JlZmVyZW5jZUhpZGRlbiA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMpO1xuICB2YXIgaGFzUG9wcGVyRXNjYXBlZCA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChwb3BwZXJFc2NhcGVPZmZzZXRzKTtcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IHtcbiAgICByZWZlcmVuY2VDbGlwcGluZ09mZnNldHM6IHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyxcbiAgICBwb3BwZXJFc2NhcGVPZmZzZXRzOiBwb3BwZXJFc2NhcGVPZmZzZXRzLFxuICAgIGlzUmVmZXJlbmNlSGlkZGVuOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICBoYXNQb3BwZXJFc2NhcGVkOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH07XG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlbic6IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgICdkYXRhLXBvcHBlci1lc2NhcGVkJzogaGFzUG9wcGVyRXNjYXBlZFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2hpZGUnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddLFxuICBmbjogaGlkZVxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/hide.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyStyles\": () => (/* reexport safe */ _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   \"arrow\": () => (/* reexport safe */ _arrow_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   \"computeStyles\": () => (/* reexport safe */ _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   \"eventListeners\": () => (/* reexport safe */ _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   \"flip\": () => (/* reexport safe */ _flip_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   \"hide\": () => (/* reexport safe */ _hide_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]),\n/* harmony export */   \"offset\": () => (/* reexport safe */ _offset_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n/* harmony export */   \"popperOffsets\": () => (/* reexport safe */ _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]),\n/* harmony export */   \"preventOverflow\": () => (/* reexport safe */ _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./applyStyles.js */ \"./node_modules/@popperjs/core/lib/modifiers/applyStyles.js\");\n/* harmony import */ var _arrow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./arrow.js */ \"./node_modules/@popperjs/core/lib/modifiers/arrow.js\");\n/* harmony import */ var _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./computeStyles.js */ \"./node_modules/@popperjs/core/lib/modifiers/computeStyles.js\");\n/* harmony import */ var _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eventListeners.js */ \"./node_modules/@popperjs/core/lib/modifiers/eventListeners.js\");\n/* harmony import */ var _flip_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./flip.js */ \"./node_modules/@popperjs/core/lib/modifiers/flip.js\");\n/* harmony import */ var _hide_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hide.js */ \"./node_modules/@popperjs/core/lib/modifiers/hide.js\");\n/* harmony import */ var _offset_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./offset.js */ \"./node_modules/@popperjs/core/lib/modifiers/offset.js\");\n/* harmony import */ var _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./popperOffsets.js */ \"./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js\");\n/* harmony import */ var _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./preventOverflow.js */ \"./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js\");\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMEQ7QUFDWjtBQUNnQjtBQUNFO0FBQ3BCO0FBQ0E7QUFDSTtBQUNjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvaW5kZXguanM/NGY2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBkZWZhdWx0IGFzIGFwcGx5U3R5bGVzIH0gZnJvbSBcIi4vYXBwbHlTdHlsZXMuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgYXJyb3cgfSBmcm9tIFwiLi9hcnJvdy5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjb21wdXRlU3R5bGVzIH0gZnJvbSBcIi4vY29tcHV0ZVN0eWxlcy5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBldmVudExpc3RlbmVycyB9IGZyb20gXCIuL2V2ZW50TGlzdGVuZXJzLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZsaXAgfSBmcm9tIFwiLi9mbGlwLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGhpZGUgfSBmcm9tIFwiLi9oaWRlLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG9mZnNldCB9IGZyb20gXCIuL29mZnNldC5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwb3BwZXJPZmZzZXRzIH0gZnJvbSBcIi4vcG9wcGVyT2Zmc2V0cy5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwcmV2ZW50T3ZlcmZsb3cgfSBmcm9tIFwiLi9wcmV2ZW50T3ZlcmZsb3cuanNcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/index.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/offset.js":
/*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/offset.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"distanceAndSkiddingToXY\": () => (/* binding */ distanceAndSkiddingToXY)\n/* harmony export */ });\n/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n\n // eslint-disable-next-line import/no-unused-modules\n\nfunction distanceAndSkiddingToXY(placement, rects, offset) {\n  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(placement);\n  var invertDistance = [_enums_js__WEBPACK_IMPORTED_MODULE_1__.left, _enums_js__WEBPACK_IMPORTED_MODULE_1__.top].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {\n    placement: placement\n  })) : offset,\n      skidding = _ref[0],\n      distance = _ref[1];\n\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n  return [_enums_js__WEBPACK_IMPORTED_MODULE_1__.left, _enums_js__WEBPACK_IMPORTED_MODULE_1__.right].indexOf(basePlacement) >= 0 ? {\n    x: distance,\n    y: skidding\n  } : {\n    x: skidding,\n    y: distance\n  };\n}\n\nfunction offset(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options,\n      name = _ref2.name;\n  var _options$offset = options.offset,\n      offset = _options$offset === void 0 ? [0, 0] : _options$offset;\n  var data = _enums_js__WEBPACK_IMPORTED_MODULE_1__.placements.reduce(function (acc, placement) {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n    return acc;\n  }, {});\n  var _data$state$placement = data[state.placement],\n      x = _data$state$placement.x,\n      y = _data$state$placement.y;\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'offset',\n  enabled: true,\n  phase: 'main',\n  requires: ['popperOffsets'],\n  fn: offset\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9vZmZzZXQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0RDtBQUNELENBQUM7O0FBRXJEO0FBQ1Asc0JBQXNCLHNFQUFnQjtBQUN0Qyx3QkFBd0IsMkNBQUksRUFBRSwwQ0FBRzs7QUFFakMsbUVBQW1FO0FBQ25FO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVUsMkNBQUksRUFBRSw0Q0FBSztBQUNyQjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsd0RBQWlCO0FBQzlCO0FBQ0E7QUFDQSxHQUFHLElBQUk7QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOzs7QUFHRixpRUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvb2Zmc2V0LmpzPzg4MjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIHBsYWNlbWVudHMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCByZWN0cywgb2Zmc2V0KSB7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICB2YXIgaW52ZXJ0RGlzdGFuY2UgPSBbbGVmdCwgdG9wXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyAtMSA6IDE7XG5cbiAgdmFyIF9yZWYgPSB0eXBlb2Ygb2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gb2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSkpIDogb2Zmc2V0LFxuICAgICAgc2tpZGRpbmcgPSBfcmVmWzBdLFxuICAgICAgZGlzdGFuY2UgPSBfcmVmWzFdO1xuXG4gIHNraWRkaW5nID0gc2tpZGRpbmcgfHwgMDtcbiAgZGlzdGFuY2UgPSAoZGlzdGFuY2UgfHwgMCkgKiBpbnZlcnREaXN0YW5jZTtcbiAgcmV0dXJuIFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8ge1xuICAgIHg6IGRpc3RhbmNlLFxuICAgIHk6IHNraWRkaW5nXG4gIH0gOiB7XG4gICAgeDogc2tpZGRpbmcsXG4gICAgeTogZGlzdGFuY2VcbiAgfTtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcbiAgdmFyIF9vcHRpb25zJG9mZnNldCA9IG9wdGlvbnMub2Zmc2V0LFxuICAgICAgb2Zmc2V0ID0gX29wdGlvbnMkb2Zmc2V0ID09PSB2b2lkIDAgPyBbMCwgMF0gOiBfb3B0aW9ucyRvZmZzZXQ7XG4gIHZhciBkYXRhID0gcGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHN0YXRlLnJlY3RzLCBvZmZzZXQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgdmFyIF9kYXRhJHN0YXRlJHBsYWNlbWVudCA9IGRhdGFbc3RhdGUucGxhY2VtZW50XSxcbiAgICAgIHggPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueCxcbiAgICAgIHkgPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueCArPSB4O1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy55ICs9IHk7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ29mZnNldCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgZm46IG9mZnNldFxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/offset.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/computeOffsets.js */ \"./node_modules/@popperjs/core/lib/utils/computeOffsets.js\");\n\n\nfunction popperOffsets(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  // Offsets are the actual position the popper needs to have to be\n  // properly positioned near its reference element\n  // This is the most basic placement, and will be adjusted by\n  // the modifiers in the next step\n  state.modifiersData[name] = (0,_utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n    reference: state.rects.reference,\n    element: state.rects.popper,\n    strategy: 'absolute',\n    placement: state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'popperOffsets',\n  enabled: true,\n  phase: 'read',\n  fn: popperOffsets,\n  data: {}\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdEOztBQUV4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixvRUFBYztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOzs7QUFHRixpRUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cy5qcz9mZGE2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb21wdXRlT2Zmc2V0cyBmcm9tIFwiLi4vdXRpbHMvY29tcHV0ZU9mZnNldHMuanNcIjtcblxuZnVuY3Rpb24gcG9wcGVyT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICAvLyBPZmZzZXRzIGFyZSB0aGUgYWN0dWFsIHBvc2l0aW9uIHRoZSBwb3BwZXIgbmVlZHMgdG8gaGF2ZSB0byBiZVxuICAvLyBwcm9wZXJseSBwb3NpdGlvbmVkIG5lYXIgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgYmFzaWMgcGxhY2VtZW50LCBhbmQgd2lsbCBiZSBhZGp1c3RlZCBieVxuICAvLyB0aGUgbW9kaWZpZXJzIGluIHRoZSBuZXh0IHN0ZXBcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHN0YXRlLnJlY3RzLnJlZmVyZW5jZSxcbiAgICBlbGVtZW50OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdwb3BwZXJPZmZzZXRzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdyZWFkJyxcbiAgZm46IHBvcHBlck9mZnNldHMsXG4gIGRhdGE6IHt9XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\");\n/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js\");\n/* harmony import */ var _utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/getAltAxis.js */ \"./node_modules/@popperjs/core/lib/utils/getAltAxis.js\");\n/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/within.js */ \"./node_modules/@popperjs/core/lib/utils/within.js\");\n/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js\");\n/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js\");\n/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/detectOverflow.js */ \"./node_modules/@popperjs/core/lib/utils/detectOverflow.js\");\n/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getVariation.js */ \"./node_modules/@popperjs/core/lib/utils/getVariation.js\");\n/* harmony import */ var _utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/getFreshSideObject.js */ \"./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js\");\n/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/math.js */ \"./node_modules/@popperjs/core/lib/utils/math.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nfunction preventOverflow(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      padding = options.padding,\n      _options$tether = options.tether,\n      tether = _options$tether === void 0 ? true : _options$tether,\n      _options$tetherOffset = options.tetherOffset,\n      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n  var overflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(state, {\n    boundary: boundary,\n    rootBoundary: rootBoundary,\n    padding: padding,\n    altBoundary: altBoundary\n  });\n  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(state.placement);\n  var variation = (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.placement);\n  var isBasePlacement = !variation;\n  var mainAxis = (0,_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(basePlacement);\n  var altAxis = (0,_utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(mainAxis);\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : tetherOffset;\n  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {\n    mainAxis: tetherOffsetValue,\n    altAxis: tetherOffsetValue\n  } : Object.assign({\n    mainAxis: 0,\n    altAxis: 0\n  }, tetherOffsetValue);\n  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;\n  var data = {\n    x: 0,\n    y: 0\n  };\n\n  if (!popperOffsets) {\n    return;\n  }\n\n  if (checkMainAxis) {\n    var _offsetModifierState$;\n\n    var mainSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.top : _enums_js__WEBPACK_IMPORTED_MODULE_5__.left;\n    var altSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_5__.right;\n    var len = mainAxis === 'y' ? 'height' : 'width';\n    var offset = popperOffsets[mainAxis];\n    var min = offset + overflow[mainSide];\n    var max = offset - overflow[altSide];\n    var additive = tether ? -popperRect[len] / 2 : 0;\n    var minLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_5__.start ? referenceRect[len] : popperRect[len];\n    var maxLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_5__.start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n    // outside the reference bounds\n\n    var arrowElement = state.elements.arrow;\n    var arrowRect = tether && arrowElement ? (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(arrowElement) : {\n      width: 0,\n      height: 0\n    };\n    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : (0,_utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])();\n    var arrowPaddingMin = arrowPaddingObject[mainSide];\n    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n    // to include its full size in the calculation. If the reference is small\n    // and near the edge of a boundary, the popper can overflow even if the\n    // reference is not overflowing as well (e.g. virtual elements with no\n    // width or height)\n\n    var arrowLen = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__.within)(0, referenceRect[len], arrowRect[len]);\n    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;\n    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;\n    var arrowOffsetParent = state.elements.arrow && (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(state.elements.arrow);\n    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;\n    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;\n    var tetherMax = offset + maxOffset - offsetModifierValue;\n    var preventedOffset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__.within)(tether ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_10__.min)(min, tetherMin) : min, offset, tether ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_10__.max)(max, tetherMax) : max);\n    popperOffsets[mainAxis] = preventedOffset;\n    data[mainAxis] = preventedOffset - offset;\n  }\n\n  if (checkAltAxis) {\n    var _offsetModifierState$2;\n\n    var _mainSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.top : _enums_js__WEBPACK_IMPORTED_MODULE_5__.left;\n\n    var _altSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_5__.right;\n\n    var _offset = popperOffsets[altAxis];\n\n    var _len = altAxis === 'y' ? 'height' : 'width';\n\n    var _min = _offset + overflow[_mainSide];\n\n    var _max = _offset - overflow[_altSide];\n\n    var isOriginSide = [_enums_js__WEBPACK_IMPORTED_MODULE_5__.top, _enums_js__WEBPACK_IMPORTED_MODULE_5__.left].indexOf(basePlacement) !== -1;\n\n    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;\n\n    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;\n\n    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;\n\n    var _preventedOffset = tether && isOriginSide ? (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__.withinMaxClamp)(_tetherMin, _offset, _tetherMax) : (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__.within)(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);\n\n    popperOffsets[altAxis] = _preventedOffset;\n    data[altAxis] = _preventedOffset - _offset;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'preventOverflow',\n  enabled: true,\n  phase: 'main',\n  fn: preventOverflow,\n  requiresIfExists: ['offset']\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/popper-lite.js":
/*!********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper-lite.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createPopper\": () => (/* binding */ createPopper),\n/* harmony export */   \"defaultModifiers\": () => (/* binding */ defaultModifiers),\n/* harmony export */   \"detectOverflow\": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]),\n/* harmony export */   \"popperGenerator\": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_4__.popperGenerator)\n/* harmony export */ });\n/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./createPopper.js */ \"./node_modules/@popperjs/core/lib/createPopper.js\");\n/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./createPopper.js */ \"./node_modules/@popperjs/core/lib/utils/detectOverflow.js\");\n/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modifiers/eventListeners.js */ \"./node_modules/@popperjs/core/lib/modifiers/eventListeners.js\");\n/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/popperOffsets.js */ \"./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js\");\n/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/computeStyles.js */ \"./node_modules/@popperjs/core/lib/modifiers/computeStyles.js\");\n/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/applyStyles.js */ \"./node_modules/@popperjs/core/lib/modifiers/applyStyles.js\");\n\n\n\n\n\nvar defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]];\nvar createPopper = /*#__PURE__*/(0,_createPopper_js__WEBPACK_IMPORTED_MODULE_4__.popperGenerator)({\n  defaultModifiers: defaultModifiers\n}); // eslint-disable-next-line import/no-unused-modules\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3BvcHBlci1saXRlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBb0U7QUFDVDtBQUNGO0FBQ0E7QUFDSjtBQUNyRCx3QkFBd0Isb0VBQWMsRUFBRSxtRUFBYSxFQUFFLG1FQUFhLEVBQUUsaUVBQVc7QUFDakYsZ0NBQWdDLGlFQUFlO0FBQy9DO0FBQ0EsQ0FBQyxHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9wb3BwZXItbGl0ZS5qcz9mODM3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBvcHBlckdlbmVyYXRvciwgZGV0ZWN0T3ZlcmZsb3cgfSBmcm9tIFwiLi9jcmVhdGVQb3BwZXIuanNcIjtcbmltcG9ydCBldmVudExpc3RlbmVycyBmcm9tIFwiLi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanNcIjtcbmltcG9ydCBwb3BwZXJPZmZzZXRzIGZyb20gXCIuL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzXCI7XG5pbXBvcnQgY29tcHV0ZVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qc1wiO1xuaW1wb3J0IGFwcGx5U3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9hcHBseVN0eWxlcy5qc1wiO1xudmFyIGRlZmF1bHRNb2RpZmllcnMgPSBbZXZlbnRMaXN0ZW5lcnMsIHBvcHBlck9mZnNldHMsIGNvbXB1dGVTdHlsZXMsIGFwcGx5U3R5bGVzXTtcbnZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKHtcbiAgZGVmYXVsdE1vZGlmaWVyczogZGVmYXVsdE1vZGlmaWVyc1xufSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgY3JlYXRlUG9wcGVyLCBwb3BwZXJHZW5lcmF0b3IsIGRlZmF1bHRNb2RpZmllcnMsIGRldGVjdE92ZXJmbG93IH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/popper-lite.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyStyles\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.applyStyles),\n/* harmony export */   \"arrow\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.arrow),\n/* harmony export */   \"computeStyles\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.computeStyles),\n/* harmony export */   \"createPopper\": () => (/* binding */ createPopper),\n/* harmony export */   \"createPopperLite\": () => (/* reexport safe */ _popper_lite_js__WEBPACK_IMPORTED_MODULE_11__.createPopper),\n/* harmony export */   \"defaultModifiers\": () => (/* binding */ defaultModifiers),\n/* harmony export */   \"detectOverflow\": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n/* harmony export */   \"eventListeners\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.eventListeners),\n/* harmony export */   \"flip\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.flip),\n/* harmony export */   \"hide\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.hide),\n/* harmony export */   \"offset\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.offset),\n/* harmony export */   \"popperGenerator\": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_9__.popperGenerator),\n/* harmony export */   \"popperOffsets\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.popperOffsets),\n/* harmony export */   \"preventOverflow\": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.preventOverflow)\n/* harmony export */ });\n/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./createPopper.js */ \"./node_modules/@popperjs/core/lib/createPopper.js\");\n/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./createPopper.js */ \"./node_modules/@popperjs/core/lib/utils/detectOverflow.js\");\n/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modifiers/eventListeners.js */ \"./node_modules/@popperjs/core/lib/modifiers/eventListeners.js\");\n/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/popperOffsets.js */ \"./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js\");\n/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/computeStyles.js */ \"./node_modules/@popperjs/core/lib/modifiers/computeStyles.js\");\n/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/applyStyles.js */ \"./node_modules/@popperjs/core/lib/modifiers/applyStyles.js\");\n/* harmony import */ var _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modifiers/offset.js */ \"./node_modules/@popperjs/core/lib/modifiers/offset.js\");\n/* harmony import */ var _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modifiers/flip.js */ \"./node_modules/@popperjs/core/lib/modifiers/flip.js\");\n/* harmony import */ var _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modifiers/preventOverflow.js */ \"./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js\");\n/* harmony import */ var _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modifiers/arrow.js */ \"./node_modules/@popperjs/core/lib/modifiers/arrow.js\");\n/* harmony import */ var _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modifiers/hide.js */ \"./node_modules/@popperjs/core/lib/modifiers/hide.js\");\n/* harmony import */ var _popper_lite_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./popper-lite.js */ \"./node_modules/@popperjs/core/lib/popper-lite.js\");\n/* harmony import */ var _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modifiers/index.js */ \"./node_modules/@popperjs/core/lib/modifiers/index.js\");\n\n\n\n\n\n\n\n\n\n\nvar defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"], _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"], _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"], _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"], _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"], _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]];\nvar createPopper = /*#__PURE__*/(0,_createPopper_js__WEBPACK_IMPORTED_MODULE_9__.popperGenerator)({\n  defaultModifiers: defaultModifiers\n}); // eslint-disable-next-line import/no-unused-modules\n\n // eslint-disable-next-line import/no-unused-modules\n\n // eslint-disable-next-line import/no-unused-modules\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3BvcHBlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBb0U7QUFDVDtBQUNGO0FBQ0E7QUFDSjtBQUNWO0FBQ0o7QUFDc0I7QUFDcEI7QUFDRjtBQUN2Qyx3QkFBd0Isb0VBQWMsRUFBRSxtRUFBYSxFQUFFLG1FQUFhLEVBQUUsaUVBQVcsRUFBRSw0REFBTSxFQUFFLDBEQUFJLEVBQUUscUVBQWUsRUFBRSwyREFBSyxFQUFFLDBEQUFJO0FBQzdILGdDQUFnQyxpRUFBZTtBQUMvQztBQUNBLENBQUMsR0FBRzs7QUFFdUUsQ0FBQzs7QUFFUixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9wb3BwZXIuanM/YWY1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwb3BwZXJHZW5lcmF0b3IsIGRldGVjdE92ZXJmbG93IH0gZnJvbSBcIi4vY3JlYXRlUG9wcGVyLmpzXCI7XG5pbXBvcnQgZXZlbnRMaXN0ZW5lcnMgZnJvbSBcIi4vbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzLmpzXCI7XG5pbXBvcnQgcG9wcGVyT2Zmc2V0cyBmcm9tIFwiLi9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cy5qc1wiO1xuaW1wb3J0IGNvbXB1dGVTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2NvbXB1dGVTdHlsZXMuanNcIjtcbmltcG9ydCBhcHBseVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanNcIjtcbmltcG9ydCBvZmZzZXQgZnJvbSBcIi4vbW9kaWZpZXJzL29mZnNldC5qc1wiO1xuaW1wb3J0IGZsaXAgZnJvbSBcIi4vbW9kaWZpZXJzL2ZsaXAuanNcIjtcbmltcG9ydCBwcmV2ZW50T3ZlcmZsb3cgZnJvbSBcIi4vbW9kaWZpZXJzL3ByZXZlbnRPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGFycm93IGZyb20gXCIuL21vZGlmaWVycy9hcnJvdy5qc1wiO1xuaW1wb3J0IGhpZGUgZnJvbSBcIi4vbW9kaWZpZXJzL2hpZGUuanNcIjtcbnZhciBkZWZhdWx0TW9kaWZpZXJzID0gW2V2ZW50TGlzdGVuZXJzLCBwb3BwZXJPZmZzZXRzLCBjb21wdXRlU3R5bGVzLCBhcHBseVN0eWxlcywgb2Zmc2V0LCBmbGlwLCBwcmV2ZW50T3ZlcmZsb3csIGFycm93LCBoaWRlXTtcbnZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKHtcbiAgZGVmYXVsdE1vZGlmaWVyczogZGVmYXVsdE1vZGlmaWVyc1xufSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgY3JlYXRlUG9wcGVyLCBwb3BwZXJHZW5lcmF0b3IsIGRlZmF1bHRNb2RpZmllcnMsIGRldGVjdE92ZXJmbG93IH07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgY3JlYXRlUG9wcGVyIGFzIGNyZWF0ZVBvcHBlckxpdGUgfSBmcm9tIFwiLi9wb3BwZXItbGl0ZS5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCAqIGZyb20gXCIuL21vZGlmaWVycy9pbmRleC5qc1wiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/popper.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ computeAutoPlacement)\n/* harmony export */ });\n/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getVariation.js */ \"./node_modules/@popperjs/core/lib/utils/getVariation.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./detectOverflow.js */ \"./node_modules/@popperjs/core/lib/utils/detectOverflow.js\");\n/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getBasePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\");\n\n\n\n\nfunction computeAutoPlacement(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      placement = _options.placement,\n      boundary = _options.boundary,\n      rootBoundary = _options.rootBoundary,\n      padding = _options.padding,\n      flipVariations = _options.flipVariations,\n      _options$allowedAutoP = _options.allowedAutoPlacements,\n      allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.placements : _options$allowedAutoP;\n  var variation = (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(placement);\n  var placements = variation ? flipVariations ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements : _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements.filter(function (placement) {\n    return (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(placement) === variation;\n  }) : _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements;\n  var allowedPlacements = placements.filter(function (placement) {\n    return allowedAutoPlacements.indexOf(placement) >= 0;\n  });\n\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements;\n\n    if (true) {\n      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, \"auto\" cannot be used to allow \"bottom-start\".', 'Use \"auto-start\" instead.'].join(' '));\n    }\n  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n\n\n  var overflows = allowedPlacements.reduce(function (acc, placement) {\n    acc[placement] = (0,_detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding\n    })[(0,_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(placement)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort(function (a, b) {\n    return overflows[a] - overflows[b];\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTZDO0FBQ2tEO0FBQzlDO0FBQ0k7QUFDdEM7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsaURBQWE7QUFDOUUsa0JBQWtCLDREQUFZO0FBQzlCLGdEQUFnRCwwREFBbUIsR0FBRyxpRUFBMEI7QUFDaEcsV0FBVyw0REFBWTtBQUN2QixHQUFHLElBQUkscURBQWM7QUFDckI7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQSxRQUFRLElBQXFDO0FBQzdDO0FBQ0E7QUFDQSxJQUFJOzs7QUFHSjtBQUNBLHFCQUFxQiw4REFBYztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssRUFBRSxnRUFBZ0I7QUFDdkI7QUFDQSxHQUFHLElBQUk7QUFDUDtBQUNBO0FBQ0EsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qcz9lOTI0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4vZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgeyB2YXJpYXRpb25QbGFjZW1lbnRzLCBiYXNlUGxhY2VtZW50cywgcGxhY2VtZW50cyBhcyBhbGxQbGFjZW1lbnRzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4vZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9IF9vcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9PT0gdm9pZCAwID8gYWxsUGxhY2VtZW50cyA6IF9vcHRpb25zJGFsbG93ZWRBdXRvUDtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpO1xuICB2YXIgcGxhY2VtZW50cyA9IHZhcmlhdGlvbiA/IGZsaXBWYXJpYXRpb25zID8gdmFyaWF0aW9uUGxhY2VtZW50cyA6IHZhcmlhdGlvblBsYWNlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHZhcmlhdGlvbjtcbiAgfSkgOiBiYXNlUGxhY2VtZW50cztcbiAgdmFyIGFsbG93ZWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhbGxvd2VkQXV0b1BsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpID49IDA7XG4gIH0pO1xuXG4gIGlmIChhbGxvd2VkUGxhY2VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBUaGUgYGFsbG93ZWRBdXRvUGxhY2VtZW50c2Agb3B0aW9uIGRpZCBub3QgYWxsb3cgYW55JywgJ3BsYWNlbWVudHMuIEVuc3VyZSB0aGUgYHBsYWNlbWVudGAgb3B0aW9uIG1hdGNoZXMgdGhlIHZhcmlhdGlvbicsICdvZiB0aGUgYWxsb3dlZCBwbGFjZW1lbnRzLicsICdGb3IgZXhhbXBsZSwgXCJhdXRvXCIgY2Fubm90IGJlIHVzZWQgdG8gYWxsb3cgXCJib3R0b20tc3RhcnRcIi4nLCAnVXNlIFwiYXV0by1zdGFydFwiIGluc3RlYWQuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV06IEZsb3cgc2VlbXMgdG8gaGF2ZSBwcm9ibGVtcyB3aXRoIHR3byBhcnJheSB1bmlvbnMuLi5cblxuXG4gIHZhciBvdmVyZmxvd3MgPSBhbGxvd2VkUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9KVtnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCldO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG92ZXJmbG93cykuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBvdmVyZmxvd3NbYV0gLSBvdmVyZmxvd3NbYl07XG4gIH0pO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeOffsets.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ computeOffsets)\n/* harmony export */ });\n/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBasePlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\");\n/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getVariation.js */ \"./node_modules/@popperjs/core/lib/utils/getVariation.js\");\n/* harmony import */ var _getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getMainAxisFromPlacement.js */ \"./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n\n\n\n\nfunction computeOffsets(_ref) {\n  var reference = _ref.reference,\n      element = _ref.element,\n      placement = _ref.placement;\n  var basePlacement = placement ? (0,_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(placement) : null;\n  var variation = placement ? (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(placement) : null;\n  var commonX = reference.x + reference.width / 2 - element.width / 2;\n  var commonY = reference.y + reference.height / 2 - element.height / 2;\n  var offsets;\n\n  switch (basePlacement) {\n    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.top:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n\n    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.bottom:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.right:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.left:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  var mainAxis = basePlacement ? (0,_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(basePlacement) : null;\n\n  if (mainAxis != null) {\n    var len = mainAxis === 'y' ? 'height' : 'width';\n\n    switch (variation) {\n      case _enums_js__WEBPACK_IMPORTED_MODULE_2__.start:\n        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);\n        break;\n\n      case _enums_js__WEBPACK_IMPORTED_MODULE_2__.end:\n        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);\n        break;\n\n      default:\n    }\n  }\n\n  return offsets;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2NvbXB1dGVPZmZzZXRzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXFEO0FBQ1I7QUFDd0I7QUFDRjtBQUNwRDtBQUNmO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxnRUFBZ0I7QUFDbEQsOEJBQThCLDREQUFZO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVMsMENBQUc7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVMsNkNBQU07QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVMsNENBQUs7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVMsMkNBQUk7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUMsd0VBQXdCOztBQUV6RDtBQUNBOztBQUVBO0FBQ0EsV0FBVyw0Q0FBSztBQUNoQjtBQUNBOztBQUVBLFdBQVcsMENBQUc7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlT2Zmc2V0cy5qcz9lNTYyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4vZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gXCIuL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCBzdGFydCwgZW5kIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciByZWZlcmVuY2UgPSBfcmVmLnJlZmVyZW5jZSxcbiAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQgPyBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50ID8gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgY29tbW9uWCA9IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoIC8gMiAtIGVsZW1lbnQud2lkdGggLyAyO1xuICB2YXIgY29tbW9uWSA9IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodCAvIDIgLSBlbGVtZW50LmhlaWdodCAvIDI7XG4gIHZhciBvZmZzZXRzO1xuXG4gIHN3aXRjaCAoYmFzZVBsYWNlbWVudCkge1xuICAgIGNhc2UgdG9wOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgLSBlbGVtZW50LmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBib3R0b206XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcmlnaHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBsZWZ0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggLSBlbGVtZW50LndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLngsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55XG4gICAgICB9O1xuICB9XG5cbiAgdmFyIG1haW5BeGlzID0gYmFzZVBsYWNlbWVudCA/IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KSA6IG51bGw7XG5cbiAgaWYgKG1haW5BeGlzICE9IG51bGwpIHtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHN3aXRjaCAodmFyaWF0aW9uKSB7XG4gICAgICBjYXNlIHN0YXJ0OlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdIC0gKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBlbmQ6XG4gICAgICAgIG9mZnNldHNbbWFpbkF4aXNdID0gb2Zmc2V0c1ttYWluQXhpc10gKyAocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/computeOffsets.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/debounce.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/debounce.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ debounce)\n/* harmony export */ });\nfunction debounce(fn) {\n  var pending;\n  return function () {\n    if (!pending) {\n      pending = new Promise(function (resolve) {\n        Promise.resolve().then(function () {\n          pending = undefined;\n          resolve(fn());\n        });\n      });\n    }\n\n    return pending;\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RlYm91bmNlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RlYm91bmNlLmpzPzI2MjciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVib3VuY2UoZm4pIHtcbiAgdmFyIHBlbmRpbmc7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFwZW5kaW5nKSB7XG4gICAgICBwZW5kaW5nID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcGVuZGluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICByZXNvbHZlKGZuKCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBwZW5kaW5nO1xuICB9O1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/debounce.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/detectOverflow.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ detectOverflow)\n/* harmony export */ });\n/* harmony import */ var _dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getClippingRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js\");\n/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\");\n/* harmony import */ var _dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getBoundingClientRect.js */ \"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js\");\n/* harmony import */ var _computeOffsets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./computeOffsets.js */ \"./node_modules/@popperjs/core/lib/utils/computeOffsets.js\");\n/* harmony import */ var _rectToClientRect_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rectToClientRect.js */ \"./node_modules/@popperjs/core/lib/utils/rectToClientRect.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ \"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\");\n/* harmony import */ var _mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mergePaddingObject.js */ \"./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js\");\n/* harmony import */ var _expandToHashMap_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./expandToHashMap.js */ \"./node_modules/@popperjs/core/lib/utils/expandToHashMap.js\");\n\n\n\n\n\n\n\n\n // eslint-disable-next-line import/no-unused-modules\n\nfunction detectOverflow(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$placement = _options.placement,\n      placement = _options$placement === void 0 ? state.placement : _options$placement,\n      _options$strategy = _options.strategy,\n      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,\n      _options$boundary = _options.boundary,\n      boundary = _options$boundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.clippingParents : _options$boundary,\n      _options$rootBoundary = _options.rootBoundary,\n      rootBoundary = _options$rootBoundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.viewport : _options$rootBoundary,\n      _options$elementConte = _options.elementContext,\n      elementContext = _options$elementConte === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper : _options$elementConte,\n      _options$altBoundary = _options.altBoundary,\n      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n      _options$padding = _options.padding,\n      padding = _options$padding === void 0 ? 0 : _options$padding;\n  var paddingObject = (0,_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(typeof padding !== 'number' ? padding : (0,_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements));\n  var altContext = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.reference : _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper;\n  var popperRect = state.rects.popper;\n  var element = state.elements[altBoundary ? altContext : elementContext];\n  var clippingClientRect = (0,_dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])((0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(element) ? element : element.contextElement || (0,_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(state.elements.popper), boundary, rootBoundary, strategy);\n  var referenceClientRect = (0,_dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(state.elements.reference);\n  var popperOffsets = (0,_computeOffsets_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])({\n    reference: referenceClientRect,\n    element: popperRect,\n    strategy: 'absolute',\n    placement: placement\n  });\n  var popperClientRect = (0,_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(Object.assign({}, popperRect, popperOffsets));\n  var elementClientRect = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  var overflowOffsets = {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n  if (elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper && offsetData) {\n    var offset = offsetData[placement];\n    Object.keys(overflowOffsets).forEach(function (key) {\n      var multiply = [_enums_js__WEBPACK_IMPORTED_MODULE_0__.right, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom].indexOf(key) >= 0 ? 1 : -1;\n      var axis = [_enums_js__WEBPACK_IMPORTED_MODULE_0__.top, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom].indexOf(key) >= 0 ? 'y' : 'x';\n      overflowOffsets[key] += offset[axis] * multiply;\n    });\n  }\n\n  return overflowOffsets;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBOEQ7QUFDTTtBQUNNO0FBQ3pCO0FBQ0k7QUFDMEQ7QUFDeEQ7QUFDRTtBQUNOLENBQUM7O0FBRXJDO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxzREFBZTtBQUMvRDtBQUNBLHdEQUF3RCwrQ0FBUTtBQUNoRTtBQUNBLDBEQUEwRCw2Q0FBTTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrRUFBa0IseUNBQXlDLCtEQUFlLFVBQVUscURBQWM7QUFDeEgsc0NBQXNDLDZDQUFNLEdBQUcsZ0RBQVMsR0FBRyw2Q0FBTTtBQUNqRTtBQUNBO0FBQ0EsMkJBQTJCLHlFQUFlLENBQUMsbUVBQVMsZ0RBQWdELDRFQUFrQjtBQUN0SCw0QkFBNEIsK0VBQXFCO0FBQ2pELHNCQUFzQiw4REFBYztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCx5QkFBeUIsZ0VBQWdCLGlCQUFpQjtBQUMxRCw2Q0FBNkMsNkNBQU0sMkNBQTJDO0FBQzlGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQzs7QUFFL0MseUJBQXlCLDZDQUFNO0FBQy9CO0FBQ0E7QUFDQSxzQkFBc0IsNENBQUssRUFBRSw2Q0FBTTtBQUNuQyxrQkFBa0IsMENBQUcsRUFBRSw2Q0FBTTtBQUM3QjtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9kZXRlY3RPdmVyZmxvdy5qcz8xNjE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRDbGlwcGluZ1JlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRDbGlwcGluZ1JlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBjb21wdXRlT2Zmc2V0cyBmcm9tIFwiLi9jb21wdXRlT2Zmc2V0cy5qc1wiO1xuaW1wb3J0IHJlY3RUb0NsaWVudFJlY3QgZnJvbSBcIi4vcmVjdFRvQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IHsgY2xpcHBpbmdQYXJlbnRzLCByZWZlcmVuY2UsIHBvcHBlciwgYm90dG9tLCB0b3AsIHJpZ2h0LCBiYXNlUGxhY2VtZW50cywgdmlld3BvcnQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tIFwiLi9tZXJnZVBhZGRpbmdPYmplY3QuanNcIjtcbmltcG9ydCBleHBhbmRUb0hhc2hNYXAgZnJvbSBcIi4vZXhwYW5kVG9IYXNoTWFwLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucyRwbGFjZW1lbnQgPT09IHZvaWQgMCA/IHN0YXRlLnBsYWNlbWVudCA6IF9vcHRpb25zJHBsYWNlbWVudCxcbiAgICAgIF9vcHRpb25zJHN0cmF0ZWd5ID0gX29wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBzdHJhdGVneSA9IF9vcHRpb25zJHN0cmF0ZWd5ID09PSB2b2lkIDAgPyBzdGF0ZS5zdHJhdGVneSA6IF9vcHRpb25zJHN0cmF0ZWd5LFxuICAgICAgX29wdGlvbnMkYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIGJvdW5kYXJ5ID0gX29wdGlvbnMkYm91bmRhcnkgPT09IHZvaWQgMCA/IGNsaXBwaW5nUGFyZW50cyA6IF9vcHRpb25zJGJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMkcm9vdEJvdW5kYXJ5ID09PSB2b2lkIDAgPyB2aWV3cG9ydCA6IF9vcHRpb25zJHJvb3RCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJGVsZW1lbnRDb250ZSA9IF9vcHRpb25zLmVsZW1lbnRDb250ZXh0LFxuICAgICAgZWxlbWVudENvbnRleHQgPSBfb3B0aW9ucyRlbGVtZW50Q29udGUgPT09IHZvaWQgMCA/IHBvcHBlciA6IF9vcHRpb25zJGVsZW1lbnRDb250ZSxcbiAgICAgIF9vcHRpb25zJGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IF9vcHRpb25zJGFsdEJvdW5kYXJ5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMkcGFkZGluZyA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJHBhZGRpbmc7XG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbiAgdmFyIGFsdENvbnRleHQgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcmVmZXJlbmNlIDogcG9wcGVyO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1thbHRCb3VuZGFyeSA/IGFsdENvbnRleHQgOiBlbGVtZW50Q29udGV4dF07XG4gIHZhciBjbGlwcGluZ0NsaWVudFJlY3QgPSBnZXRDbGlwcGluZ1JlY3QoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudCA6IGVsZW1lbnQuY29udGV4dEVsZW1lbnQgfHwgZ2V0RG9jdW1lbnRFbGVtZW50KHN0YXRlLmVsZW1lbnRzLnBvcHBlciksIGJvdW5kYXJ5LCByb290Qm91bmRhcnksIHN0cmF0ZWd5KTtcbiAgdmFyIHJlZmVyZW5jZUNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qoc3RhdGUuZWxlbWVudHMucmVmZXJlbmNlKTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiByZWZlcmVuY2VDbGllbnRSZWN0LFxuICAgIGVsZW1lbnQ6IHBvcHBlclJlY3QsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSk7XG4gIHZhciBwb3BwZXJDbGllbnRSZWN0ID0gcmVjdFRvQ2xpZW50UmVjdChPYmplY3QuYXNzaWduKHt9LCBwb3BwZXJSZWN0LCBwb3BwZXJPZmZzZXRzKSk7XG4gIHZhciBlbGVtZW50Q2xpZW50UmVjdCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyBwb3BwZXJDbGllbnRSZWN0IDogcmVmZXJlbmNlQ2xpZW50UmVjdDsgLy8gcG9zaXRpdmUgPSBvdmVyZmxvd2luZyB0aGUgY2xpcHBpbmcgcmVjdFxuICAvLyAwIG9yIG5lZ2F0aXZlID0gd2l0aGluIHRoZSBjbGlwcGluZyByZWN0XG5cbiAgdmFyIG92ZXJmbG93T2Zmc2V0cyA9IHtcbiAgICB0b3A6IGNsaXBwaW5nQ2xpZW50UmVjdC50b3AgLSBlbGVtZW50Q2xpZW50UmVjdC50b3AgKyBwYWRkaW5nT2JqZWN0LnRvcCxcbiAgICBib3R0b206IGVsZW1lbnRDbGllbnRSZWN0LmJvdHRvbSAtIGNsaXBwaW5nQ2xpZW50UmVjdC5ib3R0b20gKyBwYWRkaW5nT2JqZWN0LmJvdHRvbSxcbiAgICBsZWZ0OiBjbGlwcGluZ0NsaWVudFJlY3QubGVmdCAtIGVsZW1lbnRDbGllbnRSZWN0LmxlZnQgKyBwYWRkaW5nT2JqZWN0LmxlZnQsXG4gICAgcmlnaHQ6IGVsZW1lbnRDbGllbnRSZWN0LnJpZ2h0IC0gY2xpcHBpbmdDbGllbnRSZWN0LnJpZ2h0ICsgcGFkZGluZ09iamVjdC5yaWdodFxuICB9O1xuICB2YXIgb2Zmc2V0RGF0YSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0OyAvLyBPZmZzZXRzIGNhbiBiZSBhcHBsaWVkIG9ubHkgdG8gdGhlIHBvcHBlciBlbGVtZW50XG5cbiAgaWYgKGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgJiYgb2Zmc2V0RGF0YSkge1xuICAgIHZhciBvZmZzZXQgPSBvZmZzZXREYXRhW3BsYWNlbWVudF07XG4gICAgT2JqZWN0LmtleXMob3ZlcmZsb3dPZmZzZXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBtdWx0aXBseSA9IFtyaWdodCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/IDEgOiAtMTtcbiAgICAgIHZhciBheGlzID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/ICd5JyA6ICd4JztcbiAgICAgIG92ZXJmbG93T2Zmc2V0c1trZXldICs9IG9mZnNldFtheGlzXSAqIG11bHRpcGx5O1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG92ZXJmbG93T2Zmc2V0cztcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/detectOverflow.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/expandToHashMap.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ expandToHashMap)\n/* harmony export */ });\nfunction expandToHashMap(value, keys) {\n  return keys.reduce(function (hashMap, key) {\n    hashMap[key] = value;\n    return hashMap;\n  }, {});\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxHQUFHLElBQUk7QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZXhwYW5kVG9IYXNoTWFwLmpzPzlmODAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXhwYW5kVG9IYXNoTWFwKHZhbHVlLCBrZXlzKSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAoaGFzaE1hcCwga2V5KSB7XG4gICAgaGFzaE1hcFtrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIGhhc2hNYXA7XG4gIH0sIHt9KTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/expandToHashMap.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/format.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/format.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ format)\n/* harmony export */ });\nfunction format(str) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return [].concat(args).reduce(function (p, c) {\n    return p.replace(/%s/, c);\n  }, str);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2Zvcm1hdC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWU7QUFDZix5RkFBeUYsYUFBYTtBQUN0RztBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2Zvcm1hdC5qcz85NmYyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdChzdHIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIFtdLmNvbmNhdChhcmdzKS5yZWR1Y2UoZnVuY3Rpb24gKHAsIGMpIHtcbiAgICByZXR1cm4gcC5yZXBsYWNlKC8lcy8sIGMpO1xuICB9LCBzdHIpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/format.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getAltAxis.js":
/*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getAltAxis.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getAltAxis)\n/* harmony export */ });\nfunction getAltAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEFsdEF4aXMuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlO0FBQ2Y7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0QWx0QXhpcy5qcz8zMmIyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFsdEF4aXMoYXhpcykge1xuICByZXR1cm4gYXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/getAltAxis.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getBasePlacement.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getBasePlacement)\n/* harmony export */ });\n\nfunction getBasePlacement(placement) {\n  return placement.split('-')[0];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFtQztBQUNwQjtBQUNmO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanM/ZGU5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhdXRvIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getFreshSideObject)\n/* harmony export */ });\nfunction getFreshSideObject() {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEZyZXNoU2lkZU9iamVjdC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzPzdlNjkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RnJlc2hTaWRlT2JqZWN0KCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMFxuICB9O1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getMainAxisFromPlacement)\n/* harmony export */ });\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWU7QUFDZjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanM/MWUzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgPj0gMCA/ICd4JyA6ICd5Jztcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getOppositePlacement)\n/* harmony export */ });\nvar hash = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZTtBQUNmO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50LmpzP2U1ODQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGhhc2ggPSB7XG4gIGxlZnQ6ICdyaWdodCcsXG4gIHJpZ2h0OiAnbGVmdCcsXG4gIGJvdHRvbTogJ3RvcCcsXG4gIHRvcDogJ2JvdHRvbSdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getOppositeVariationPlacement)\n/* harmony export */ });\nvar hash = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeVariationPlacement(placement) {\n  return placement.replace(/start|end/g, function (matched) {\n    return hash[matched];\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNlO0FBQ2Y7QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQuanM/M2VlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaGFzaCA9IHtcbiAgc3RhcnQ6ICdlbmQnLFxuICBlbmQ6ICdzdGFydCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9zdGFydHxlbmQvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getVariation.js":
/*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getVariation.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getVariation)\n/* harmony export */ });\nfunction getVariation(placement) {\n  return placement.split('-')[1];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldFZhcmlhdGlvbi5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWU7QUFDZjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRWYXJpYXRpb24uanM/NjA5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/getVariation.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/math.js":
/*!*******************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/math.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"max\": () => (/* binding */ max),\n/* harmony export */   \"min\": () => (/* binding */ min),\n/* harmony export */   \"round\": () => (/* binding */ round)\n/* harmony export */ });\nvar max = Math.max;\nvar min = Math.min;\nvar round = Math.round;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21hdGguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU87QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tYXRoLmpzPzJhZjAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBtYXggPSBNYXRoLm1heDtcbmV4cG9ydCB2YXIgbWluID0gTWF0aC5taW47XG5leHBvcnQgdmFyIHJvdW5kID0gTWF0aC5yb3VuZDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/math.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/mergeByName.js":
/*!**************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergeByName.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ mergeByName)\n/* harmony export */ });\nfunction mergeByName(modifiers) {\n  var merged = modifiers.reduce(function (merged, current) {\n    var existing = merged[current.name];\n    merged[current.name] = existing ? Object.assign({}, existing, current, {\n      options: Object.assign({}, existing.options, current.options),\n      data: Object.assign({}, existing.data, current.data)\n    }) : current;\n    return merged;\n  }, {}); // IE11 does not support Object.values\n\n  return Object.keys(merged).map(function (key) {\n    return merged[key];\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlQnlOYW1lLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZTtBQUNmO0FBQ0E7QUFDQSxzREFBc0Q7QUFDdEQsK0JBQStCO0FBQy9CLDRCQUE0QjtBQUM1QixLQUFLO0FBQ0w7QUFDQSxHQUFHLElBQUksR0FBRzs7QUFFVjtBQUNBO0FBQ0EsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tZXJnZUJ5TmFtZS5qcz85NDgwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQnlOYW1lKG1vZGlmaWVycykge1xuICB2YXIgbWVyZ2VkID0gbW9kaWZpZXJzLnJlZHVjZShmdW5jdGlvbiAobWVyZ2VkLCBjdXJyZW50KSB7XG4gICAgdmFyIGV4aXN0aW5nID0gbWVyZ2VkW2N1cnJlbnQubmFtZV07XG4gICAgbWVyZ2VkW2N1cnJlbnQubmFtZV0gPSBleGlzdGluZyA/IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLCBjdXJyZW50LCB7XG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5vcHRpb25zLCBjdXJyZW50Lm9wdGlvbnMpLFxuICAgICAgZGF0YTogT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcuZGF0YSwgY3VycmVudC5kYXRhKVxuICAgIH0pIDogY3VycmVudDtcbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9LCB7fSk7IC8vIElFMTEgZG9lcyBub3Qgc3VwcG9ydCBPYmplY3QudmFsdWVzXG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1lcmdlZCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gbWVyZ2VkW2tleV07XG4gIH0pO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/mergeByName.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ mergePaddingObject)\n/* harmony export */ });\n/* harmony import */ var _getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getFreshSideObject.js */ \"./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js\");\n\nfunction mergePaddingObject(paddingObject) {\n  return Object.assign({}, (0,_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(), paddingObject);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlUGFkZGluZ09iamVjdC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5RDtBQUMxQztBQUNmLHlCQUF5QixFQUFFLGtFQUFrQjtBQUM3QyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzPzU3NjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldEZyZXNoU2lkZU9iamVjdCBmcm9tIFwiLi9nZXRGcmVzaFNpZGVPYmplY3QuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlUGFkZGluZ09iamVjdChwYWRkaW5nT2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBnZXRGcmVzaFNpZGVPYmplY3QoKSwgcGFkZGluZ09iamVjdCk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/orderModifiers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/orderModifiers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ orderModifiers)\n/* harmony export */ });\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n // source: https://stackoverflow.com/questions/49875255\n\nfunction order(modifiers) {\n  var map = new Map();\n  var visited = new Set();\n  var result = [];\n  modifiers.forEach(function (modifier) {\n    map.set(modifier.name, modifier);\n  }); // On visiting object, check for its dependencies and visit them recursively\n\n  function sort(modifier) {\n    visited.add(modifier.name);\n    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n    requires.forEach(function (dep) {\n      if (!visited.has(dep)) {\n        var depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n\n  modifiers.forEach(function (modifier) {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n\nfunction orderModifiers(modifiers) {\n  // order based on dependencies\n  var orderedModifiers = order(modifiers); // order based on phase\n\n  return _enums_js__WEBPACK_IMPORTED_MODULE_0__.modifierPhases.reduce(function (acc, phase) {\n    return acc.concat(orderedModifiers.filter(function (modifier) {\n      return modifier.phase === phase;\n    }));\n  }, []);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL29yZGVyTW9kaWZpZXJzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTZDLENBQUM7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsR0FBRzs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRWU7QUFDZjtBQUNBLDJDQUEyQzs7QUFFM0MsU0FBUyw0REFBcUI7QUFDOUI7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL29yZGVyTW9kaWZpZXJzLmpzPzRmMTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbW9kaWZpZXJQaGFzZXMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTg3NTI1NVxuXG5mdW5jdGlvbiBvcmRlcihtb2RpZmllcnMpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgbWFwLnNldChtb2RpZmllci5uYW1lLCBtb2RpZmllcik7XG4gIH0pOyAvLyBPbiB2aXNpdGluZyBvYmplY3QsIGNoZWNrIGZvciBpdHMgZGVwZW5kZW5jaWVzIGFuZCB2aXNpdCB0aGVtIHJlY3Vyc2l2ZWx5XG5cbiAgZnVuY3Rpb24gc29ydChtb2RpZmllcikge1xuICAgIHZpc2l0ZWQuYWRkKG1vZGlmaWVyLm5hbWUpO1xuICAgIHZhciByZXF1aXJlcyA9IFtdLmNvbmNhdChtb2RpZmllci5yZXF1aXJlcyB8fCBbXSwgbW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cyB8fCBbXSk7XG4gICAgcmVxdWlyZXMuZm9yRWFjaChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICBpZiAoIXZpc2l0ZWQuaGFzKGRlcCkpIHtcbiAgICAgICAgdmFyIGRlcE1vZGlmaWVyID0gbWFwLmdldChkZXApO1xuXG4gICAgICAgIGlmIChkZXBNb2RpZmllcikge1xuICAgICAgICAgIHNvcnQoZGVwTW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdWx0LnB1c2gobW9kaWZpZXIpO1xuICB9XG5cbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKCF2aXNpdGVkLmhhcyhtb2RpZmllci5uYW1lKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIHZpc2l0ZWQgb2JqZWN0XG4gICAgICBzb3J0KG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRlck1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgLy8gb3JkZXIgYmFzZWQgb24gZGVwZW5kZW5jaWVzXG4gIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXIobW9kaWZpZXJzKTsgLy8gb3JkZXIgYmFzZWQgb24gcGhhc2VcblxuICByZXR1cm4gbW9kaWZpZXJQaGFzZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBoYXNlKSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQob3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICByZXR1cm4gbW9kaWZpZXIucGhhc2UgPT09IHBoYXNlO1xuICAgIH0pKTtcbiAgfSwgW10pO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/orderModifiers.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/rectToClientRect.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rectToClientRect)\n/* harmony export */ });\nfunction rectToClientRect(rect) {\n  return Object.assign({}, rect, {\n    left: rect.x,\n    top: rect.y,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlO0FBQ2YseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9yZWN0VG9DbGllbnRSZWN0LmpzPzMyNDEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVjdFRvQ2xpZW50UmVjdChyZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZWN0LCB7XG4gICAgbGVmdDogcmVjdC54LFxuICAgIHRvcDogcmVjdC55LFxuICAgIHJpZ2h0OiByZWN0LnggKyByZWN0LndpZHRoLFxuICAgIGJvdHRvbTogcmVjdC55ICsgcmVjdC5oZWlnaHRcbiAgfSk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/rectToClientRect.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/uniqueBy.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/uniqueBy.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ uniqueBy)\n/* harmony export */ });\nfunction uniqueBy(arr, fn) {\n  var identifiers = new Set();\n  return arr.filter(function (item) {\n    var identifier = fn(item);\n\n    if (!identifiers.has(identifier)) {\n      identifiers.add(identifier);\n      return true;\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3VuaXF1ZUJ5LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvdW5pcXVlQnkuanM/ZWVkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bmlxdWVCeShhcnIsIGZuKSB7XG4gIHZhciBpZGVudGlmaWVycyA9IG5ldyBTZXQoKTtcbiAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgaWRlbnRpZmllciA9IGZuKGl0ZW0pO1xuXG4gICAgaWYgKCFpZGVudGlmaWVycy5oYXMoaWRlbnRpZmllcikpIHtcbiAgICAgIGlkZW50aWZpZXJzLmFkZChpZGVudGlmaWVyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/uniqueBy.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/userAgent.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/userAgent.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getUAString)\n/* harmony export */ });\nfunction getUAString() {\n  var uaData = navigator.userAgentData;\n\n  if (uaData != null && uaData.brands) {\n    return uaData.brands.map(function (item) {\n      return item.brand + \"/\" + item.version;\n    }).join(' ');\n  }\n\n  return navigator.userAgent;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3VzZXJBZ2VudC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWU7QUFDZjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvdXNlckFnZW50LmpzPzM4ZmQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VUFTdHJpbmcoKSB7XG4gIHZhciB1YURhdGEgPSBuYXZpZ2F0b3IudXNlckFnZW50RGF0YTtcblxuICBpZiAodWFEYXRhICE9IG51bGwgJiYgdWFEYXRhLmJyYW5kcykge1xuICAgIHJldHVybiB1YURhdGEuYnJhbmRzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0uYnJhbmQgKyBcIi9cIiArIGl0ZW0udmVyc2lvbjtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH1cblxuICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/userAgent.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/validateModifiers.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/validateModifiers.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ validateModifiers)\n/* harmony export */ });\n/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./format.js */ \"./node_modules/@popperjs/core/lib/utils/format.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ \"./node_modules/@popperjs/core/lib/enums.js\");\n\n\nvar INVALID_MODIFIER_ERROR = 'Popper: modifier \"%s\" provided an invalid %s property, expected %s but got %s';\nvar MISSING_DEPENDENCY_ERROR = 'Popper: modifier \"%s\" requires \"%s\", but \"%s\" modifier is not available';\nvar VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];\nfunction validateModifiers(modifiers) {\n  modifiers.forEach(function (modifier) {\n    [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`\n    .filter(function (value, index, self) {\n      return self.indexOf(value) === index;\n    }).forEach(function (key) {\n      switch (key) {\n        case 'name':\n          if (typeof modifier.name !== 'string') {\n            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(INVALID_MODIFIER_ERROR, String(modifier.name), '\"name\"', '\"string\"', \"\\\"\" + String(modifier.name) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'enabled':\n          if (typeof modifier.enabled !== 'boolean') {\n            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', \"\\\"\" + String(modifier.enabled) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'phase':\n          if (_enums_js__WEBPACK_IMPORTED_MODULE_1__.modifierPhases.indexOf(modifier.phase) < 0) {\n            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', \"either \" + _enums_js__WEBPACK_IMPORTED_MODULE_1__.modifierPhases.join(', '), \"\\\"\" + String(modifier.phase) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'fn':\n          if (typeof modifier.fn !== 'function') {\n            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', \"\\\"\" + String(modifier.fn) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'effect':\n          if (modifier.effect != null && typeof modifier.effect !== 'function') {\n            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', \"\\\"\" + String(modifier.fn) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'requires':\n          if (modifier.requires != null && !Array.isArray(modifier.requires)) {\n            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', \"\\\"\" + String(modifier.requires) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'requiresIfExists':\n          if (!Array.isArray(modifier.requiresIfExists)) {\n            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', \"\\\"\" + String(modifier.requiresIfExists) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'options':\n        case 'data':\n          break;\n\n        default:\n          console.error(\"PopperJS: an invalid property has been provided to the \\\"\" + modifier.name + \"\\\" modifier, valid properties are \" + VALID_PROPERTIES.map(function (s) {\n            return \"\\\"\" + s + \"\\\"\";\n          }).join(', ') + \"; but \\\"\" + key + \"\\\" was provided.\");\n      }\n\n      modifier.requires && modifier.requires.forEach(function (requirement) {\n        if (modifiers.find(function (mod) {\n          return mod.name === requirement;\n        }) == null) {\n          console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));\n        }\n      });\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3ZhbGlkYXRlTW9kaWZpZXJzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUNZO0FBQzdDO0FBQ0E7QUFDQTtBQUNlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHNEQUFNO0FBQ2hDOztBQUVBOztBQUVBO0FBQ0E7QUFDQSwwQkFBMEIsc0RBQU07QUFDaEM7O0FBRUE7O0FBRUE7QUFDQSxjQUFjLDZEQUFzQjtBQUNwQywwQkFBMEIsc0RBQU0sK0RBQStELDBEQUFtQjtBQUNsSDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsMEJBQTBCLHNEQUFNO0FBQ2hDOztBQUVBOztBQUVBO0FBQ0E7QUFDQSwwQkFBMEIsc0RBQU07QUFDaEM7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLDBCQUEwQixzREFBTTtBQUNoQzs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsMEJBQTBCLHNEQUFNO0FBQ2hDOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGtCQUFrQjtBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Qsd0JBQXdCLHNEQUFNO0FBQzlCO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTCxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3ZhbGlkYXRlTW9kaWZpZXJzLmpzP2RkZjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZvcm1hdCBmcm9tIFwiLi9mb3JtYXQuanNcIjtcbmltcG9ydCB7IG1vZGlmaWVyUGhhc2VzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG52YXIgSU5WQUxJRF9NT0RJRklFUl9FUlJPUiA9ICdQb3BwZXI6IG1vZGlmaWVyIFwiJXNcIiBwcm92aWRlZCBhbiBpbnZhbGlkICVzIHByb3BlcnR5LCBleHBlY3RlZCAlcyBidXQgZ290ICVzJztcbnZhciBNSVNTSU5HX0RFUEVOREVOQ1lfRVJST1IgPSAnUG9wcGVyOiBtb2RpZmllciBcIiVzXCIgcmVxdWlyZXMgXCIlc1wiLCBidXQgXCIlc1wiIG1vZGlmaWVyIGlzIG5vdCBhdmFpbGFibGUnO1xudmFyIFZBTElEX1BST1BFUlRJRVMgPSBbJ25hbWUnLCAnZW5hYmxlZCcsICdwaGFzZScsICdmbicsICdlZmZlY3QnLCAncmVxdWlyZXMnLCAnb3B0aW9ucyddO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmFsaWRhdGVNb2RpZmllcnMobW9kaWZpZXJzKSB7XG4gIG1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIFtdLmNvbmNhdChPYmplY3Qua2V5cyhtb2RpZmllciksIFZBTElEX1BST1BFUlRJRVMpIC8vIElFMTEtY29tcGF0aWJsZSByZXBsYWNlbWVudCBmb3IgYG5ldyBTZXQoaXRlcmFibGUpYFxuICAgIC5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgc2VsZikge1xuICAgICAgcmV0dXJuIHNlbGYuaW5kZXhPZih2YWx1ZSkgPT09IGluZGV4O1xuICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2RpZmllci5uYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgU3RyaW5nKG1vZGlmaWVyLm5hbWUpLCAnXCJuYW1lXCInLCAnXCJzdHJpbmdcIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLm5hbWUpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdlbmFibGVkJzpcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZGlmaWVyLmVuYWJsZWQgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgbW9kaWZpZXIubmFtZSwgJ1wiZW5hYmxlZFwiJywgJ1wiYm9vbGVhblwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIuZW5hYmxlZCkgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3BoYXNlJzpcbiAgICAgICAgICBpZiAobW9kaWZpZXJQaGFzZXMuaW5kZXhPZihtb2RpZmllci5waGFzZSkgPCAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJwaGFzZVwiJywgXCJlaXRoZXIgXCIgKyBtb2RpZmllclBoYXNlcy5qb2luKCcsICcpLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5waGFzZSkgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2ZuJzpcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZGlmaWVyLmZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJmblwiJywgJ1wiZnVuY3Rpb25cIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLmZuKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZWZmZWN0JzpcbiAgICAgICAgICBpZiAobW9kaWZpZXIuZWZmZWN0ICE9IG51bGwgJiYgdHlwZW9mIG1vZGlmaWVyLmVmZmVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgbW9kaWZpZXIubmFtZSwgJ1wiZWZmZWN0XCInLCAnXCJmdW5jdGlvblwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIuZm4pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyZXF1aXJlcyc6XG4gICAgICAgICAgaWYgKG1vZGlmaWVyLnJlcXVpcmVzICE9IG51bGwgJiYgIUFycmF5LmlzQXJyYXkobW9kaWZpZXIucmVxdWlyZXMpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJyZXF1aXJlc1wiJywgJ1wiYXJyYXlcIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLnJlcXVpcmVzKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncmVxdWlyZXNJZkV4aXN0cyc6XG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1vZGlmaWVyLnJlcXVpcmVzSWZFeGlzdHMpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJyZXF1aXJlc0lmRXhpc3RzXCInLCAnXCJhcnJheVwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cykgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ29wdGlvbnMnOlxuICAgICAgICBjYXNlICdkYXRhJzpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJQb3BwZXJKUzogYW4gaW52YWxpZCBwcm9wZXJ0eSBoYXMgYmVlbiBwcm92aWRlZCB0byB0aGUgXFxcIlwiICsgbW9kaWZpZXIubmFtZSArIFwiXFxcIiBtb2RpZmllciwgdmFsaWQgcHJvcGVydGllcyBhcmUgXCIgKyBWQUxJRF9QUk9QRVJUSUVTLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIFwiXFxcIlwiICsgcyArIFwiXFxcIlwiO1xuICAgICAgICAgIH0pLmpvaW4oJywgJykgKyBcIjsgYnV0IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgcHJvdmlkZWQuXCIpO1xuICAgICAgfVxuXG4gICAgICBtb2RpZmllci5yZXF1aXJlcyAmJiBtb2RpZmllci5yZXF1aXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1aXJlbWVudCkge1xuICAgICAgICBpZiAobW9kaWZpZXJzLmZpbmQoZnVuY3Rpb24gKG1vZCkge1xuICAgICAgICAgIHJldHVybiBtb2QubmFtZSA9PT0gcmVxdWlyZW1lbnQ7XG4gICAgICAgIH0pID09IG51bGwpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChNSVNTSU5HX0RFUEVOREVOQ1lfRVJST1IsIFN0cmluZyhtb2RpZmllci5uYW1lKSwgcmVxdWlyZW1lbnQsIHJlcXVpcmVtZW50KSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/validateModifiers.js\n");

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/within.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/within.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"within\": () => (/* binding */ within),\n/* harmony export */   \"withinMaxClamp\": () => (/* binding */ withinMaxClamp)\n/* harmony export */ });\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ \"./node_modules/@popperjs/core/lib/utils/math.js\");\n\nfunction within(min, value, max) {\n  return (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.max)(min, (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.min)(value, max));\n}\nfunction withinMaxClamp(min, value, max) {\n  var v = within(min, value, max);\n  return v > max ? max : v;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3dpdGhpbi5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkQ7QUFDcEQ7QUFDUCxTQUFTLDZDQUFPLE1BQU0sNkNBQU87QUFDN0I7QUFDTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvd2l0aGluLmpzPzM3YTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWF4IGFzIG1hdGhNYXgsIG1pbiBhcyBtYXRoTWluIH0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhpbihtaW4sIHZhbHVlLCBtYXgpIHtcbiAgcmV0dXJuIG1hdGhNYXgobWluLCBtYXRoTWluKHZhbHVlLCBtYXgpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aXRoaW5NYXhDbGFtcChtaW4sIHZhbHVlLCBtYXgpIHtcbiAgdmFyIHYgPSB3aXRoaW4obWluLCB2YWx1ZSwgbWF4KTtcbiAgcmV0dXJuIHYgPiBtYXggPyBtYXggOiB2O1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@popperjs/core/lib/utils/within.js\n");

/***/ }),

/***/ "./node_modules/@protobufjs/aspromise/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@protobufjs/aspromise/index.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvYXNwcm9taXNlL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHFCQUFxQjtBQUM3QztBQUNBLFVBQVU7QUFDVixXQUFXLFlBQVk7QUFDdkIsV0FBVyxNQUFNO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUIsV0FBVyxHQUFHO0FBQ2QsV0FBVyxNQUFNO0FBQ2pCLGFBQWEsWUFBWTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL2FzcHJvbWlzZS9pbmRleC5qcz80NmI0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGFzUHJvbWlzZTtcclxuXHJcbi8qKlxyXG4gKiBDYWxsYmFjayBhcyB1c2VkIGJ5IHtAbGluayB1dGlsLmFzUHJvbWlzZX0uXHJcbiAqIEB0eXBlZGVmIGFzUHJvbWlzZUNhbGxiYWNrXHJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICogQHBhcmFtIHtFcnJvcnxudWxsfSBlcnJvciBFcnJvciwgaWYgYW55XHJcbiAqIEBwYXJhbSB7Li4uKn0gcGFyYW1zIEFkZGl0aW9uYWwgYXJndW1lbnRzXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBwcm9taXNlIGZyb20gYSBub2RlLXN0eWxlIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAcGFyYW0ge2FzUHJvbWlzZUNhbGxiYWNrfSBmbiBGdW5jdGlvbiB0byBjYWxsXHJcbiAqIEBwYXJhbSB7Kn0gY3R4IEZ1bmN0aW9uIGNvbnRleHRcclxuICogQHBhcmFtIHsuLi4qfSBwYXJhbXMgRnVuY3Rpb24gYXJndW1lbnRzXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPCo+fSBQcm9taXNpZmllZCBmdW5jdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gYXNQcm9taXNlKGZuLCBjdHgvKiwgdmFyYXJncyAqLykge1xyXG4gICAgdmFyIHBhcmFtcyAgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpLFxyXG4gICAgICAgIG9mZnNldCAgPSAwLFxyXG4gICAgICAgIGluZGV4ICAgPSAyLFxyXG4gICAgICAgIHBlbmRpbmcgPSB0cnVlO1xyXG4gICAgd2hpbGUgKGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aClcclxuICAgICAgICBwYXJhbXNbb2Zmc2V0KytdID0gYXJndW1lbnRzW2luZGV4KytdO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHBhcmFtc1tvZmZzZXRdID0gZnVuY3Rpb24gY2FsbGJhY2soZXJyLyosIHZhcmFyZ3MgKi8pIHtcclxuICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHBlbmRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChlcnIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAob2Zmc2V0IDwgcGFyYW1zLmxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zW29mZnNldCsrXSA9IGFyZ3VtZW50c1tvZmZzZXRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUuYXBwbHkobnVsbCwgcGFyYW1zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZm4uYXBwbHkoY3R4IHx8IG51bGwsIHBhcmFtcyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIGlmIChwZW5kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBwZW5kaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@protobufjs/aspromise/index.js\n");

/***/ }),

/***/ "./node_modules/@protobufjs/base64/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@protobufjs/base64/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvYmFzZTY0L2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0EsOEJBQThCLEVBQUUsbUJBQW1CLEVBQUUsaUJBQWlCLEVBQUU7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvYmFzZTY0L2luZGV4LmpzPzY3ODYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vKipcclxuICogQSBtaW5pbWFsIGJhc2U2NCBpbXBsZW1lbnRhdGlvbiBmb3IgbnVtYmVyIGFycmF5cy5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQG5hbWVzcGFjZVxyXG4gKi9cclxudmFyIGJhc2U2NCA9IGV4cG9ydHM7XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgYnl0ZSBsZW5ndGggb2YgYSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgQmFzZTY0IGVuY29kZWQgc3RyaW5nXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEJ5dGUgbGVuZ3RoXHJcbiAqL1xyXG5iYXNlNjQubGVuZ3RoID0gZnVuY3Rpb24gbGVuZ3RoKHN0cmluZykge1xyXG4gICAgdmFyIHAgPSBzdHJpbmcubGVuZ3RoO1xyXG4gICAgaWYgKCFwKVxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgdmFyIG4gPSAwO1xyXG4gICAgd2hpbGUgKC0tcCAlIDQgPiAxICYmIHN0cmluZy5jaGFyQXQocCkgPT09IFwiPVwiKVxyXG4gICAgICAgICsrbjtcclxuICAgIHJldHVybiBNYXRoLmNlaWwoc3RyaW5nLmxlbmd0aCAqIDMpIC8gNCAtIG47XHJcbn07XHJcblxyXG4vLyBCYXNlNjQgZW5jb2RpbmcgdGFibGVcclxudmFyIGI2NCA9IG5ldyBBcnJheSg2NCk7XHJcblxyXG4vLyBCYXNlNjQgZGVjb2RpbmcgdGFibGVcclxudmFyIHM2NCA9IG5ldyBBcnJheSgxMjMpO1xyXG5cclxuLy8gNjUuLjkwLCA5Ny4uMTIyLCA0OC4uNTcsIDQzLCA0N1xyXG5mb3IgKHZhciBpID0gMDsgaSA8IDY0OylcclxuICAgIHM2NFtiNjRbaV0gPSBpIDwgMjYgPyBpICsgNjUgOiBpIDwgNTIgPyBpICsgNzEgOiBpIDwgNjIgPyBpIC0gNCA6IGkgLSA1OSB8IDQzXSA9IGkrKztcclxuXHJcbi8qKlxyXG4gKiBFbmNvZGVzIGEgYnVmZmVyIHRvIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZmZlciBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBTb3VyY2Ugc3RhcnRcclxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBTb3VyY2UgZW5kXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEJhc2U2NCBlbmNvZGVkIHN0cmluZ1xyXG4gKi9cclxuYmFzZTY0LmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShidWZmZXIsIHN0YXJ0LCBlbmQpIHtcclxuICAgIHZhciBwYXJ0cyA9IG51bGwsXHJcbiAgICAgICAgY2h1bmsgPSBbXTtcclxuICAgIHZhciBpID0gMCwgLy8gb3V0cHV0IGluZGV4XHJcbiAgICAgICAgaiA9IDAsIC8vIGdvdG8gaW5kZXhcclxuICAgICAgICB0OyAgICAgLy8gdGVtcG9yYXJ5XHJcbiAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcclxuICAgICAgICB2YXIgYiA9IGJ1ZmZlcltzdGFydCsrXTtcclxuICAgICAgICBzd2l0Y2ggKGopIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgY2h1bmtbaSsrXSA9IGI2NFtiID4+IDJdO1xyXG4gICAgICAgICAgICAgICAgdCA9IChiICYgMykgPDwgNDtcclxuICAgICAgICAgICAgICAgIGogPSAxO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIGNodW5rW2krK10gPSBiNjRbdCB8IGIgPj4gNF07XHJcbiAgICAgICAgICAgICAgICB0ID0gKGIgJiAxNSkgPDwgMjtcclxuICAgICAgICAgICAgICAgIGogPSAyO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIGNodW5rW2krK10gPSBiNjRbdCB8IGIgPj4gNl07XHJcbiAgICAgICAgICAgICAgICBjaHVua1tpKytdID0gYjY0W2IgJiA2M107XHJcbiAgICAgICAgICAgICAgICBqID0gMDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaSA+IDgxOTEpIHtcclxuICAgICAgICAgICAgKHBhcnRzIHx8IChwYXJ0cyA9IFtdKSkucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2h1bmspKTtcclxuICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGopIHtcclxuICAgICAgICBjaHVua1tpKytdID0gYjY0W3RdO1xyXG4gICAgICAgIGNodW5rW2krK10gPSA2MTtcclxuICAgICAgICBpZiAoaiA9PT0gMSlcclxuICAgICAgICAgICAgY2h1bmtbaSsrXSA9IDYxO1xyXG4gICAgfVxyXG4gICAgaWYgKHBhcnRzKSB7XHJcbiAgICAgICAgaWYgKGkpXHJcbiAgICAgICAgICAgIHBhcnRzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rLnNsaWNlKDAsIGkpKSk7XHJcbiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oXCJcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rLnNsaWNlKDAsIGkpKTtcclxufTtcclxuXHJcbnZhciBpbnZhbGlkRW5jb2RpbmcgPSBcImludmFsaWQgZW5jb2RpbmdcIjtcclxuXHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nIHRvIGEgYnVmZmVyLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFNvdXJjZSBzdHJpbmdcclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZmZXIgRGVzdGluYXRpb24gYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgRGVzdGluYXRpb24gb2Zmc2V0XHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IE51bWJlciBvZiBieXRlcyB3cml0dGVuXHJcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBlbmNvZGluZyBpcyBpbnZhbGlkXHJcbiAqL1xyXG5iYXNlNjQuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHN0cmluZywgYnVmZmVyLCBvZmZzZXQpIHtcclxuICAgIHZhciBzdGFydCA9IG9mZnNldDtcclxuICAgIHZhciBqID0gMCwgLy8gZ290byBpbmRleFxyXG4gICAgICAgIHQ7ICAgICAvLyB0ZW1wb3JhcnlcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDspIHtcclxuICAgICAgICB2YXIgYyA9IHN0cmluZy5jaGFyQ29kZUF0KGkrKyk7XHJcbiAgICAgICAgaWYgKGMgPT09IDYxICYmIGogPiAxKVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBpZiAoKGMgPSBzNjRbY10pID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGludmFsaWRFbmNvZGluZyk7XHJcbiAgICAgICAgc3dpdGNoIChqKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIHQgPSBjO1xyXG4gICAgICAgICAgICAgICAgaiA9IDE7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IHQgPDwgMiB8IChjICYgNDgpID4+IDQ7XHJcbiAgICAgICAgICAgICAgICB0ID0gYztcclxuICAgICAgICAgICAgICAgIGogPSAyO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSAodCAmIDE1KSA8PCA0IHwgKGMgJiA2MCkgPj4gMjtcclxuICAgICAgICAgICAgICAgIHQgPSBjO1xyXG4gICAgICAgICAgICAgICAgaiA9IDM7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9ICh0ICYgMykgPDwgNiB8IGM7XHJcbiAgICAgICAgICAgICAgICBqID0gMDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChqID09PSAxKVxyXG4gICAgICAgIHRocm93IEVycm9yKGludmFsaWRFbmNvZGluZyk7XHJcbiAgICByZXR1cm4gb2Zmc2V0IC0gc3RhcnQ7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBzdHJpbmcgYXBwZWFycyB0byBiZSBiYXNlNjQgZW5jb2RlZC5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gdGVzdFxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHByb2JhYmx5IGJhc2U2NCBlbmNvZGVkLCBvdGhlcndpc2UgZmFsc2VcclxuICovXHJcbmJhc2U2NC50ZXN0ID0gZnVuY3Rpb24gdGVzdChzdHJpbmcpIHtcclxuICAgIHJldHVybiAvXig/OltBLVphLXowLTkrL117NH0pKig/OltBLVphLXowLTkrL117Mn09PXxbQS1aYS16MC05Ky9dezN9PSk/JC8udGVzdChzdHJpbmcpO1xyXG59O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@protobufjs/base64/index.js\n");

/***/ }),

/***/ "./node_modules/@protobufjs/eventemitter/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@protobufjs/eventemitter/index.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvZXZlbnRlbWl0dGVyL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsVUFBVTtBQUNyQixXQUFXLEdBQUc7QUFDZCxhQUFhLG1CQUFtQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxVQUFVO0FBQ3JCLGFBQWEsbUJBQW1CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixxQkFBcUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLE1BQU07QUFDakIsYUFBYSxtQkFBbUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxxQkFBcUI7QUFDcEM7QUFDQSxvQkFBb0IscUJBQXFCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL2V2ZW50ZW1pdHRlci9pbmRleC5qcz9jYzdiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IGV2ZW50IGVtaXR0ZXIgaW5zdGFuY2UuXHJcbiAqIEBjbGFzc2Rlc2MgQSBtaW5pbWFsIGV2ZW50IGVtaXR0ZXIuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsKj59XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlZ2lzdGVycyBhbiBldmVudCBsaXN0ZW5lci5cclxuICogQHBhcmFtIHtzdHJpbmd9IGV2dCBFdmVudCBuYW1lXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIExpc3RlbmVyXHJcbiAqIEBwYXJhbSB7Kn0gW2N0eF0gTGlzdGVuZXIgY29udGV4dFxyXG4gKiBAcmV0dXJucyB7dXRpbC5FdmVudEVtaXR0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2dCwgZm4sIGN0eCkge1xyXG4gICAgKHRoaXMuX2xpc3RlbmVyc1tldnRdIHx8ICh0aGlzLl9saXN0ZW5lcnNbZXZ0XSA9IFtdKSkucHVzaCh7XHJcbiAgICAgICAgZm4gIDogZm4sXHJcbiAgICAgICAgY3R4IDogY3R4IHx8IHRoaXNcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlcyBhbiBldmVudCBsaXN0ZW5lciBvciBhbnkgbWF0Y2hpbmcgbGlzdGVuZXJzIGlmIGFyZ3VtZW50cyBhcmUgb21pdHRlZC5cclxuICogQHBhcmFtIHtzdHJpbmd9IFtldnRdIEV2ZW50IG5hbWUuIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBpZiBvbWl0dGVkLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbZm5dIExpc3RlbmVyIHRvIHJlbW92ZS4gUmVtb3ZlcyBhbGwgbGlzdGVuZXJzIG9mIGBldnRgIGlmIG9taXR0ZWQuXHJcbiAqIEByZXR1cm5zIHt1dGlsLkV2ZW50RW1pdHRlcn0gYHRoaXNgXHJcbiAqL1xyXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIG9mZihldnQsIGZuKSB7XHJcbiAgICBpZiAoZXZ0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0ge307XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoZm4gPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzW2V2dF0gPSBbXTtcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldnRdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7KVxyXG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1tpXS5mbiA9PT0gZm4pXHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICArK2k7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdHMgYW4gZXZlbnQgYnkgY2FsbGluZyBpdHMgbGlzdGVuZXJzIHdpdGggdGhlIHNwZWNpZmllZCBhcmd1bWVudHMuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBldnQgRXZlbnQgbmFtZVxyXG4gKiBAcGFyYW0gey4uLip9IGFyZ3MgQXJndW1lbnRzXHJcbiAqIEByZXR1cm5zIHt1dGlsLkV2ZW50RW1pdHRlcn0gYHRoaXNgXHJcbiAqL1xyXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2dCkge1xyXG4gICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldnRdO1xyXG4gICAgaWYgKGxpc3RlbmVycykge1xyXG4gICAgICAgIHZhciBhcmdzID0gW10sXHJcbiAgICAgICAgICAgIGkgPSAxO1xyXG4gICAgICAgIGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDspXHJcbiAgICAgICAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7KVxyXG4gICAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2krK10uY3R4LCBhcmdzKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@protobufjs/eventemitter/index.js\n");

/***/ }),

/***/ "./node_modules/@protobufjs/float/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/float/index.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@protobufjs/float/index.js\n");

/***/ }),

/***/ "./node_modules/@protobufjs/inquire/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/inquire/index.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvaW5xdWlyZS9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLCtEQUErRDtBQUMvRDtBQUNBO0FBQ0EsTUFBTSxhQUFhO0FBQ25CO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvaW5xdWlyZS9pbmRleC5qcz80N2JjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGlucXVpcmU7XHJcblxyXG4vKipcclxuICogUmVxdWlyZXMgYSBtb2R1bGUgb25seSBpZiBhdmFpbGFibGUuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVOYW1lIE1vZHVsZSB0byByZXF1aXJlXHJcbiAqIEByZXR1cm5zIHs/T2JqZWN0fSBSZXF1aXJlZCBtb2R1bGUgaWYgYXZhaWxhYmxlIGFuZCBub3QgZW1wdHksIG90aGVyd2lzZSBgbnVsbGBcclxuICovXHJcbmZ1bmN0aW9uIGlucXVpcmUobW9kdWxlTmFtZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB2YXIgbW9kID0gZXZhbChcInF1aXJlXCIucmVwbGFjZSgvXi8sXCJyZVwiKSkobW9kdWxlTmFtZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxyXG4gICAgICAgIGlmIChtb2QgJiYgKG1vZC5sZW5ndGggfHwgT2JqZWN0LmtleXMobW9kKS5sZW5ndGgpKVxyXG4gICAgICAgICAgICByZXR1cm4gbW9kO1xyXG4gICAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@protobufjs/inquire/index.js\n");

/***/ }),

/***/ "./node_modules/@protobufjs/pool/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/pool/index.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvcG9vbC9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixnQkFBZ0I7QUFDNUM7QUFDQSxVQUFVO0FBQ1YsV0FBVyxRQUFRO0FBQ25CLGFBQWEsWUFBWTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0EsVUFBVTtBQUNWLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxZQUFZO0FBQ3pCLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsUUFBUTtBQUNuQixhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvcG9vbC9pbmRleC5qcz8wZmFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHBvb2w7XHJcblxyXG4vKipcclxuICogQW4gYWxsb2NhdG9yIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwucG9vbH0uXHJcbiAqIEB0eXBlZGVmIFBvb2xBbGxvY2F0b3JcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBCdWZmZXIgc2l6ZVxyXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gQnVmZmVyXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEEgc2xpY2VyIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwucG9vbH0uXHJcbiAqIEB0eXBlZGVmIFBvb2xTbGljZXJcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgU3RhcnQgb2Zmc2V0XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgRW5kIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gQnVmZmVyIHNsaWNlXHJcbiAqIEB0aGlzIHtVaW50OEFycmF5fVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBBIGdlbmVyYWwgcHVycG9zZSBidWZmZXIgcG9vbC5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7UG9vbEFsbG9jYXRvcn0gYWxsb2MgQWxsb2NhdG9yXHJcbiAqIEBwYXJhbSB7UG9vbFNsaWNlcn0gc2xpY2UgU2xpY2VyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT04MTkyXSBTbGFiIHNpemVcclxuICogQHJldHVybnMge1Bvb2xBbGxvY2F0b3J9IFBvb2xlZCBhbGxvY2F0b3JcclxuICovXHJcbmZ1bmN0aW9uIHBvb2woYWxsb2MsIHNsaWNlLCBzaXplKSB7XHJcbiAgICB2YXIgU0laRSAgID0gc2l6ZSB8fCA4MTkyO1xyXG4gICAgdmFyIE1BWCAgICA9IFNJWkUgPj4+IDE7XHJcbiAgICB2YXIgc2xhYiAgID0gbnVsbDtcclxuICAgIHZhciBvZmZzZXQgPSBTSVpFO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBvb2xfYWxsb2Moc2l6ZSkge1xyXG4gICAgICAgIGlmIChzaXplIDwgMSB8fCBzaXplID4gTUFYKVxyXG4gICAgICAgICAgICByZXR1cm4gYWxsb2Moc2l6ZSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCArIHNpemUgPiBTSVpFKSB7XHJcbiAgICAgICAgICAgIHNsYWIgPSBhbGxvYyhTSVpFKTtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJ1ZiA9IHNsaWNlLmNhbGwoc2xhYiwgb2Zmc2V0LCBvZmZzZXQgKz0gc2l6ZSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCAmIDcpIC8vIGFsaWduIHRvIDMyIGJpdFxyXG4gICAgICAgICAgICBvZmZzZXQgPSAob2Zmc2V0IHwgNykgKyAxO1xyXG4gICAgICAgIHJldHVybiBidWY7XHJcbiAgICB9O1xyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@protobufjs/pool/index.js\n");

/***/ }),

/***/ "./node_modules/@protobufjs/utf8/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/utf8/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvdXRmOC9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsWUFBWTtBQUN2QixXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL3V0ZjgvaW5kZXguanM/YjRjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8qKlxyXG4gKiBBIG1pbmltYWwgVVRGOCBpbXBsZW1lbnRhdGlvbiBmb3IgbnVtYmVyIGFycmF5cy5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQG5hbWVzcGFjZVxyXG4gKi9cclxudmFyIHV0ZjggPSBleHBvcnRzO1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIFVURjggYnl0ZSBsZW5ndGggb2YgYSBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEJ5dGUgbGVuZ3RoXHJcbiAqL1xyXG51dGY4Lmxlbmd0aCA9IGZ1bmN0aW9uIHV0ZjhfbGVuZ3RoKHN0cmluZykge1xyXG4gICAgdmFyIGxlbiA9IDAsXHJcbiAgICAgICAgYyA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBpZiAoYyA8IDEyOClcclxuICAgICAgICAgICAgbGVuICs9IDE7XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpXHJcbiAgICAgICAgICAgIGxlbiArPSAyO1xyXG4gICAgICAgIGVsc2UgaWYgKChjICYgMHhGQzAwKSA9PT0gMHhEODAwICYmIChzdHJpbmcuY2hhckNvZGVBdChpICsgMSkgJiAweEZDMDApID09PSAweERDMDApIHtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBsZW4gKz0gNDtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgbGVuICs9IDM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGVuO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlYWRzIFVURjggYnl0ZXMgYXMgYSBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmZmVyIFNvdXJjZSBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFNvdXJjZSBzdGFydFxyXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIFNvdXJjZSBlbmRcclxuICogQHJldHVybnMge3N0cmluZ30gU3RyaW5nIHJlYWRcclxuICovXHJcbnV0ZjgucmVhZCA9IGZ1bmN0aW9uIHV0ZjhfcmVhZChidWZmZXIsIHN0YXJ0LCBlbmQpIHtcclxuICAgIHZhciBsZW4gPSBlbmQgLSBzdGFydDtcclxuICAgIGlmIChsZW4gPCAxKVxyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgdmFyIHBhcnRzID0gbnVsbCxcclxuICAgICAgICBjaHVuayA9IFtdLFxyXG4gICAgICAgIGkgPSAwLCAvLyBjaGFyIG9mZnNldFxyXG4gICAgICAgIHQ7ICAgICAvLyB0ZW1wb3JhcnlcclxuICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xyXG4gICAgICAgIHQgPSBidWZmZXJbc3RhcnQrK107XHJcbiAgICAgICAgaWYgKHQgPCAxMjgpXHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSB0O1xyXG4gICAgICAgIGVsc2UgaWYgKHQgPiAxOTEgJiYgdCA8IDIyNClcclxuICAgICAgICAgICAgY2h1bmtbaSsrXSA9ICh0ICYgMzEpIDw8IDYgfCBidWZmZXJbc3RhcnQrK10gJiA2MztcclxuICAgICAgICBlbHNlIGlmICh0ID4gMjM5ICYmIHQgPCAzNjUpIHtcclxuICAgICAgICAgICAgdCA9ICgodCAmIDcpIDw8IDE4IHwgKGJ1ZmZlcltzdGFydCsrXSAmIDYzKSA8PCAxMiB8IChidWZmZXJbc3RhcnQrK10gJiA2MykgPDwgNiB8IGJ1ZmZlcltzdGFydCsrXSAmIDYzKSAtIDB4MTAwMDA7XHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSAweEQ4MDAgKyAodCA+PiAxMCk7XHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSAweERDMDAgKyAodCAmIDEwMjMpO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICBjaHVua1tpKytdID0gKHQgJiAxNSkgPDwgMTIgfCAoYnVmZmVyW3N0YXJ0KytdICYgNjMpIDw8IDYgfCBidWZmZXJbc3RhcnQrK10gJiA2MztcclxuICAgICAgICBpZiAoaSA+IDgxOTEpIHtcclxuICAgICAgICAgICAgKHBhcnRzIHx8IChwYXJ0cyA9IFtdKSkucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2h1bmspKTtcclxuICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHBhcnRzKSB7XHJcbiAgICAgICAgaWYgKGkpXHJcbiAgICAgICAgICAgIHBhcnRzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rLnNsaWNlKDAsIGkpKSk7XHJcbiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oXCJcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rLnNsaWNlKDAsIGkpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSBzdHJpbmcgYXMgVVRGOCBieXRlcy5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTb3VyY2Ugc3RyaW5nXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmZmVyIERlc3RpbmF0aW9uIGJ1ZmZlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IERlc3RpbmF0aW9uIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBCeXRlcyB3cml0dGVuXHJcbiAqL1xyXG51dGY4LndyaXRlID0gZnVuY3Rpb24gdXRmOF93cml0ZShzdHJpbmcsIGJ1ZmZlciwgb2Zmc2V0KSB7XHJcbiAgICB2YXIgc3RhcnQgPSBvZmZzZXQsXHJcbiAgICAgICAgYzEsIC8vIGNoYXJhY3RlciAxXHJcbiAgICAgICAgYzI7IC8vIGNoYXJhY3RlciAyXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGMxID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgaWYgKGMxIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMTtcclxuICAgICAgICB9IGVsc2UgaWYgKGMxIDwgMjA0OCkge1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gNiAgICAgICB8IDE5MjtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxICAgICAgICYgNjMgfCAxMjg7XHJcbiAgICAgICAgfSBlbHNlIGlmICgoYzEgJiAweEZDMDApID09PSAweEQ4MDAgJiYgKChjMiA9IHN0cmluZy5jaGFyQ29kZUF0KGkgKyAxKSkgJiAweEZDMDApID09PSAweERDMDApIHtcclxuICAgICAgICAgICAgYzEgPSAweDEwMDAwICsgKChjMSAmIDB4MDNGRikgPDwgMTApICsgKGMyICYgMHgwM0ZGKTtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gMTggICAgICB8IDI0MDtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDEyICYgNjMgfCAxMjg7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSA+PiA2ICAmIDYzIHwgMTI4O1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgICAgICAgJiA2MyB8IDEyODtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gMTIgICAgICB8IDIyNDtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDYgICYgNjMgfCAxMjg7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSAgICAgICAmIDYzIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvZmZzZXQgLSBzdGFydDtcclxufTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@protobufjs/utf8/index.js\n");

/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./lib/axios */ \"./node_modules/axios/lib/axios.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsNEZBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzPzUzZTkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/index.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar settle = __webpack_require__(/*! ./../core/settle */ \"./node_modules/axios/lib/core/settle.js\");\nvar cookies = __webpack_require__(/*! ./../helpers/cookies */ \"./node_modules/axios/lib/helpers/cookies.js\");\nvar buildURL = __webpack_require__(/*! ./../helpers/buildURL */ \"./node_modules/axios/lib/helpers/buildURL.js\");\nvar buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ \"./node_modules/axios/lib/core/buildFullPath.js\");\nvar parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ \"./node_modules/axios/lib/helpers/parseHeaders.js\");\nvar isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ \"./node_modules/axios/lib/helpers/isURLSameOrigin.js\");\nvar createError = __webpack_require__(/*! ../core/createError */ \"./node_modules/axios/lib/core/createError.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"./node_modules/axios/lib/defaults.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      var transitional = config.transitional || defaults.transitional;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(\n        timeoutErrorMessage,\n        config,\n        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/adapters/xhr.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/axios/lib/utils.js\");\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"./node_modules/axios/lib/helpers/bind.js\");\nvar Axios = __webpack_require__(/*! ./core/Axios */ \"./node_modules/axios/lib/core/Axios.js\");\nvar mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ \"./node_modules/axios/lib/core/mergeConfig.js\");\nvar defaults = __webpack_require__(/*! ./defaults */ \"./node_modules/axios/lib/defaults.js\");\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\naxios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ \"./node_modules/axios/lib/cancel/CancelToken.js\");\naxios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ \"./node_modules/axios/lib/cancel/isCancel.js\");\naxios.VERSION = (__webpack_require__(/*! ./env/data */ \"./node_modules/axios/lib/env/data.js\").version);\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = __webpack_require__(/*! ./helpers/spread */ \"./node_modules/axios/lib/helpers/spread.js\");\n\n// Expose isAxiosError\naxios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ \"./node_modules/axios/lib/helpers/isAxiosError.js\");\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports[\"default\"] = axios;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxrREFBUztBQUM3QixXQUFXLG1CQUFPLENBQUMsZ0VBQWdCO0FBQ25DLFlBQVksbUJBQU8sQ0FBQyw0REFBYztBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyx3RUFBb0I7QUFDOUMsZUFBZSxtQkFBTyxDQUFDLHdEQUFZOztBQUVuQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxrRUFBaUI7QUFDeEMsb0JBQW9CLG1CQUFPLENBQUMsNEVBQXNCO0FBQ2xELGlCQUFpQixtQkFBTyxDQUFDLHNFQUFtQjtBQUM1QyxnQkFBZ0IsdUZBQTZCOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxvRUFBa0I7O0FBRXpDO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsZ0ZBQXdCOztBQUVyRDs7QUFFQTtBQUNBLHlCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanM/ZmFkNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5heGlvcy5WRVJTSU9OID0gcmVxdWlyZSgnLi9lbnYvZGF0YScpLnZlcnNpb247XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4vaGVscGVycy9pc0F4aW9zRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/axios.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzP2QyYTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/cancel/Cancel.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Cancel = __webpack_require__(/*! ./Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n\n  // eslint-disable-next-line func-names\n  this.promise.then(function(cancel) {\n    if (!token._listeners) return;\n\n    var i;\n    var l = token._listeners.length;\n\n    for (i = 0; i < l; i++) {\n      token._listeners[i](cancel);\n    }\n    token._listeners = null;\n  });\n\n  // eslint-disable-next-line func-names\n  this.promise.then = function(onfulfilled) {\n    var _resolve;\n    // eslint-disable-next-line func-names\n    var promise = new Promise(function(resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Subscribe to the cancel signal\n */\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n\n/**\n * Unsubscribe from the cancel signal\n */\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n  var index = this._listeners.indexOf(listener);\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixhQUFhLG1CQUFPLENBQUMsMkRBQVU7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcz83MmM4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcblxuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbihmdW5jdGlvbihjYW5jZWwpIHtcbiAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgIHZhciBpO1xuICAgIHZhciBsID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgfVxuICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbiA9IGZ1bmN0aW9uKG9uZnVsZmlsbGVkKSB7XG4gICAgdmFyIF9yZXNvbHZlO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICB9XG59O1xuXG4vKipcbiAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAqL1xuXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZShsaXN0ZW5lcikge1xuICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/cancel/CancelToken.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcz9jMTdhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/cancel/isCancel.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar buildURL = __webpack_require__(/*! ../helpers/buildURL */ \"./node_modules/axios/lib/helpers/buildURL.js\");\nvar InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ \"./node_modules/axios/lib/core/InterceptorManager.js\");\nvar dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ \"./node_modules/axios/lib/core/dispatchRequest.js\");\nvar mergeConfig = __webpack_require__(/*! ./mergeConfig */ \"./node_modules/axios/lib/core/mergeConfig.js\");\nvar validator = __webpack_require__(/*! ../helpers/validator */ \"./node_modules/axios/lib/helpers/validator.js\");\n\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(configOrUrl, config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof configOrUrl === 'string') {\n    config = config || {};\n    config.url = configOrUrl;\n  } else {\n    config = configOrUrl || {};\n  }\n\n  if (!config.url) {\n    throw new Error('Provided config url is not valid');\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  var transitional = config.transitional;\n\n  if (transitional !== undefined) {\n    validator.assertOptions(transitional, {\n      silentJSONParsing: validators.transitional(validators.boolean),\n      forcedJSONParsing: validators.transitional(validators.boolean),\n      clarifyTimeoutError: validators.transitional(validators.boolean)\n    }, false);\n  }\n\n  // filter out skipped interceptors\n  var requestInterceptorChain = [];\n  var synchronousRequestInterceptors = true;\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n      return;\n    }\n\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var responseInterceptorChain = [];\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var promise;\n\n  if (!synchronousRequestInterceptors) {\n    var chain = [dispatchRequest, undefined];\n\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\n    chain = chain.concat(responseInterceptorChain);\n\n    promise = Promise.resolve(config);\n    while (chain.length) {\n      promise = promise.then(chain.shift(), chain.shift());\n    }\n\n    return promise;\n  }\n\n\n  var newConfig = config;\n  while (requestInterceptorChain.length) {\n    var onFulfilled = requestInterceptorChain.shift();\n    var onRejected = requestInterceptorChain.shift();\n    try {\n      newConfig = onFulfilled(newConfig);\n    } catch (error) {\n      onRejected(error);\n      break;\n    }\n  }\n\n  try {\n    promise = dispatchRequest(newConfig);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  while (responseInterceptorChain.length) {\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  if (!config.url) {\n    throw new Error('Provided config url is not valid');\n  }\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHFEQUFZO0FBQ2hDLGVBQWUsbUJBQU8sQ0FBQyx5RUFBcUI7QUFDNUMseUJBQXlCLG1CQUFPLENBQUMsaUZBQXNCO0FBQ3ZELHNCQUFzQixtQkFBTyxDQUFDLDJFQUFtQjtBQUNqRCxrQkFBa0IsbUJBQU8sQ0FBQyxtRUFBZTtBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQywyRUFBc0I7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzPzI5ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xudmFyIHZhbGlkYXRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdmFsaWRhdG9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgfVxuXG4gIGlmICghY29uZmlnLnVybCkge1xuICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZWQgY29uZmlnIHVybCBpcyBub3QgdmFsaWQnKTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWw7XG5cbiAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgIH0sIGZhbHNlKTtcbiAgfVxuXG4gIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHZhciBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHByb21pc2U7XG5cbiAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICBjaGFpbiA9IGNoYWluLmNvbmNhdChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuXG4gIHZhciBuZXdDb25maWcgPSBjb25maWc7XG4gIHdoaWxlIChyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICB2YXIgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHZhciBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB0cnkge1xuICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25SZWplY3RlZChlcnJvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QobmV3Q29uZmlnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgd2hpbGUgKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGlmICghY29uZmlnLnVybCkge1xuICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZWQgY29uZmlnIHVybCBpcyBub3QgdmFsaWQnKTtcbiAgfVxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/Axios.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxxREFBWTs7QUFFaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLFVBQVU7QUFDckI7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzP2M3OTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZCxcbiAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/InterceptorManager.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ \"./node_modules/axios/lib/helpers/isAbsoluteURL.js\");\nvar combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ \"./node_modules/axios/lib/helpers/combineURLs.js\");\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixvQkFBb0IsbUJBQU8sQ0FBQyxtRkFBMEI7QUFDdEQsa0JBQWtCLG1CQUFPLENBQUMsK0VBQXdCOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcz9mMDJkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/buildFullPath.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar enhanceError = __webpack_require__(/*! ./enhanceError */ \"./node_modules/axios/lib/core/enhanceError.js\");\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsbUJBQW1CLG1CQUFPLENBQUMscUVBQWdCOztBQUUzQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzPzc3MGMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/createError.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar transformData = __webpack_require__(/*! ./transformData */ \"./node_modules/axios/lib/core/transformData.js\");\nvar isCancel = __webpack_require__(/*! ../cancel/isCancel */ \"./node_modules/axios/lib/cancel/isCancel.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"./node_modules/axios/lib/defaults.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new Cancel('canceled');\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxxREFBWTtBQUNoQyxvQkFBb0IsbUJBQU8sQ0FBQyx1RUFBaUI7QUFDN0MsZUFBZSxtQkFBTyxDQUFDLHVFQUFvQjtBQUMzQyxlQUFlLG1CQUFPLENBQUMseURBQWE7QUFDcEMsYUFBYSxtQkFBTyxDQUFDLG1FQUFrQjs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLHVDQUF1QztBQUN2QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzPzRkYzkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWwnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWwoJ2NhbmNlbGVkJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/dispatchRequest.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  };\n  return error;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcz8wZGYzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMucmVzcG9uc2UgJiYgdGhpcy5yZXNwb25zZS5zdGF0dXMgPyB0aGlzLnJlc3BvbnNlLnN0YXR1cyA6IG51bGxcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/enhanceError.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/axios/lib/utils.js\");\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(prop) {\n    if (prop in config2) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  var mergeMap = {\n    'url': valueFromConfig2,\n    'method': valueFromConfig2,\n    'data': valueFromConfig2,\n    'baseURL': defaultToConfig2,\n    'transformRequest': defaultToConfig2,\n    'transformResponse': defaultToConfig2,\n    'paramsSerializer': defaultToConfig2,\n    'timeout': defaultToConfig2,\n    'timeoutMessage': defaultToConfig2,\n    'withCredentials': defaultToConfig2,\n    'adapter': defaultToConfig2,\n    'responseType': defaultToConfig2,\n    'xsrfCookieName': defaultToConfig2,\n    'xsrfHeaderName': defaultToConfig2,\n    'onUploadProgress': defaultToConfig2,\n    'onDownloadProgress': defaultToConfig2,\n    'decompress': defaultToConfig2,\n    'maxContentLength': defaultToConfig2,\n    'maxBodyLength': defaultToConfig2,\n    'transport': defaultToConfig2,\n    'httpAgent': defaultToConfig2,\n    'httpsAgent': defaultToConfig2,\n    'cancelToken': defaultToConfig2,\n    'socketPath': defaultToConfig2,\n    'responseEncoding': defaultToConfig2,\n    'validateStatus': mergeDirectKeys\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    var merge = mergeMap[prop] || mergeDeepProperties;\n    var configValue = merge(prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLG1EQUFVOztBQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLDJCQUEyQjtBQUMzQixNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzP2JkMTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbWVyZ2VNYXAgPSB7XG4gICAgJ3VybCc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ21ldGhvZCc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2RhdGEnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdiYXNlVVJMJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVxdWVzdCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlc3BvbnNlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncGFyYW1zU2VyaWFsaXplcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0TWVzc2FnZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3dpdGhDcmVkZW50aWFscyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2FkYXB0ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdyZXNwb25zZVR5cGUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd4c3JmQ29va2llTmFtZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25VcGxvYWRQcm9ncmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ29uRG93bmxvYWRQcm9ncmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2RlY29tcHJlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnbWF4Qm9keUxlbmd0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zcG9ydCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2h0dHBBZ2VudCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2h0dHBzQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdjYW5jZWxUb2tlbic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3NvY2tldFBhdGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdyZXNwb25zZUVuY29kaW5nJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndmFsaWRhdGVTdGF0dXMnOiBtZXJnZURpcmVjdEtleXNcbiAgfTtcblxuICB1dGlscy5mb3JFYWNoKE9iamVjdC5rZXlzKGNvbmZpZzEpLmNvbmNhdChPYmplY3Qua2V5cyhjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgdmFyIG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICB2YXIgY29uZmlnVmFsdWUgPSBtZXJnZShwcm9wKTtcbiAgICAodXRpbHMuaXNVbmRlZmluZWQoY29uZmlnVmFsdWUpICYmIG1lcmdlICE9PSBtZXJnZURpcmVjdEtleXMpIHx8IChjb25maWdbcHJvcF0gPSBjb25maWdWYWx1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/mergeConfig.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar createError = __webpack_require__(/*! ./createError */ \"./node_modules/axios/lib/core/createError.js\");\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGtCQUFrQixtQkFBTyxDQUFDLG1FQUFlOztBQUV6QztBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanM/ODc2OCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/settle.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar defaults = __webpack_require__(/*! ./../defaults */ \"./node_modules/axios/lib/defaults.js\");\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  var context = this || defaults;\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(context, data, headers);\n  });\n\n  return data;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMscURBQVk7QUFDaEMsZUFBZSxtQkFBTyxDQUFDLDJEQUFlOztBQUV0QztBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsZ0JBQWdCO0FBQzNCLGFBQWEsR0FBRztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcz83NjYyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi8uLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgdmFyIGNvbnRleHQgPSB0aGlzIHx8IGRlZmF1bHRzO1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbi5jYWxsKGNvbnRleHQsIGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/transformData.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var process = __webpack_require__(/*! process/browser.js */ \"./node_modules/process/browser.js\");\n\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/axios/lib/utils.js\");\nvar normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ \"./node_modules/axios/lib/helpers/normalizeHeaderName.js\");\nvar enhanceError = __webpack_require__(/*! ./core/enhanceError */ \"./node_modules/axios/lib/core/enhanceError.js\");\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = __webpack_require__(/*! ./adapters/xhr */ \"./node_modules/axios/lib/adapters/xhr.js\");\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = __webpack_require__(/*! ./adapters/http */ \"./node_modules/axios/lib/adapters/xhr.js\");\n  }\n  return adapter;\n}\n\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nvar defaults = {\n\n  transitional: {\n    silentJSONParsing: true,\n    forcedJSONParsing: true,\n    clarifyTimeoutError: false\n  },\n\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {\n      setContentTypeIfUnset(headers, 'application/json');\n      return stringifySafely(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    var transitional = this.transitional || defaults.transitional;\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n\n    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw enhanceError(e, this, 'E_JSON_PARSE');\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsa0RBQVM7QUFDN0IsMEJBQTBCLG1CQUFPLENBQUMsOEZBQStCO0FBQ2pFLG1CQUFtQixtQkFBTyxDQUFDLDBFQUFxQjs7QUFFaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG1CQUFPLENBQUMsZ0VBQWdCO0FBQ3RDLElBQUksZ0JBQWdCLE9BQU8sbURBQW1ELE9BQU87QUFDckY7QUFDQSxjQUFjLG1CQUFPLENBQUMsaUVBQWlCO0FBQ3ZDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzP2UyMjEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9jb3JlL2VuaGFuY2VFcnJvcicpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB7XG4gICAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gICAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2VcbiAgfSxcblxuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpIHx8IChoZWFkZXJzICYmIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIHZhciBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgdmFyIGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICB2YXIgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChzdHJpY3RKU09OUGFyc2luZyB8fCAoZm9yY2VkSlNPTlBhcnNpbmcgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgZGF0YS5sZW5ndGgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgZW5oYW5jZUVycm9yKGUsIHRoaXMsICdFX0pTT05fUEFSU0UnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/defaults.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/env/data.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/
/***/ ((module) => {

eval("module.exports = {\n  \"version\": \"0.25.0\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9kYXRhLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanM/MTEwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCJ2ZXJzaW9uXCI6IFwiMC4yNS4wXCJcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/env/data.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcz80YmVhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/bind.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHFEQUFZOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanM/YzE3OCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/buildURL.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzPzZiYzYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/combineURLs.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMscURBQVk7O0FBRWhDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwyQ0FBMkM7QUFDM0MsU0FBUzs7QUFFVDtBQUNBLDREQUE0RCx3QkFBd0I7QUFDcEY7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMsZ0NBQWdDLGNBQWM7QUFDOUM7QUFDQTtBQUNBLEtBQUs7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzPzFkM2YiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/cookies.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanM/YTIyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZCtcXC0uXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/isAbsoluteURL.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxxREFBWTs7QUFFaEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcz9iZDlkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/isAxiosError.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxxREFBWTs7QUFFaEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QixnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzPzg3OTUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/isURLSameOrigin.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsbURBQVU7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzPzZiMTUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/normalizeHeaderName.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxxREFBWTs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjs7QUFFbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanM/NTRlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/parseHeaders.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcz8yNzI5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/spread.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar VERSION = (__webpack_require__(/*! ../env/data */ \"./node_modules/axios/lib/env/data.js\").version);\n\nvar validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nvar deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return function(value, opt, opts) {\n    if (validator === false) {\n      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new TypeError('options must be an object');\n  }\n  var keys = Object.keys(options);\n  var i = keys.length;\n  while (i-- > 0) {\n    var opt = keys[i];\n    var validator = schema[opt];\n    if (validator) {\n      var value = options[opt];\n      var result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new TypeError('option ' + opt + ' must be ' + result);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw Error('Unknown option ' + opt);\n    }\n  }\n}\n\nmodule.exports = {\n  assertOptions: assertOptions,\n  validators: validators\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGNBQWMsd0ZBQThCOztBQUU1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFVBQVU7QUFDckI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzPzAxMzIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2Vudi9kYXRhJykudmVyc2lvbjtcblxudmFyIHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUsIGkpIHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbnZhciBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG9wdCwgb3B0cykge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgdmFyIG9wdCA9IGtleXNbaV07XG4gICAgdmFyIHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXNzZXJ0T3B0aW9uczogYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yczogdmFsaWRhdG9yc1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/validator.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"./node_modules/axios/lib/helpers/bind.js\");\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return Array.isArray(val);\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return toString.call(val) === '[object FormData]';\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return toString.call(val) === '[object URLSearchParams]';\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/utils.js\n");

/***/ }),

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bootstrap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bootstrap */ \"./resources/js/bootstrap.js\");\n/* harmony import */ var _bootstrap__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_bootstrap__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var zego_express_engine_webrtc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zego-express-engine-webrtc */ \"./node_modules/zego-express-engine-webrtc/ZegoExpressWebRTC.js\");\n/* harmony import */ var zego_express_engine_webrtc__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(zego_express_engine_webrtc__WEBPACK_IMPORTED_MODULE_1__);\n\n\nwindow.ZegoExpressEngine = {\n  ZegoExpressEngine: zego_express_engine_webrtc__WEBPACK_IMPORTED_MODULE_1__.ZegoExpressEngine\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFCO0FBRXVDO0FBQzVEQyxNQUFNLENBQUNELGlCQUFpQixHQUFHO0VBQUNBLGlCQUFpQixFQUFqQkEseUVBQWlCQTtBQUFBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYXBwLmpzP2NlZDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuL2Jvb3RzdHJhcCc7XG5cbmltcG9ydCB7WmVnb0V4cHJlc3NFbmdpbmV9IGZyb20gJ3plZ28tZXhwcmVzcy1lbmdpbmUtd2VicnRjJ1xud2luZG93LlplZ29FeHByZXNzRW5naW5lID0ge1plZ29FeHByZXNzRW5naW5lfTtcbiJdLCJuYW1lcyI6WyJaZWdvRXhwcmVzc0VuZ2luZSIsIndpbmRvdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/js/bootstrap.js":
/*!***********************************!*\
  !*** ./resources/js/bootstrap.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("window._ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\ntry {\n  __webpack_require__(/*! bootstrap */ \"./node_modules/bootstrap/dist/js/bootstrap.esm.js\");\n} catch (e) {}\n\n/**\n * We'll load the axios HTTP library which allows us to easily issue requests\n * to our Laravel back-end. This library automatically handles sending the\n * CSRF token as a header based on the value of the \"XSRF\" token cookie.\n */\n\nwindow.axios = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\nwindow.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\n/**\n * Echo exposes an expressive API for subscribing to channels and listening\n * for events that are broadcast by Laravel. Echo and event broadcasting\n * allows your team to easily build robust real-time web applications.\n */\n\n// import Echo from 'laravel-echo';\n\n// window.Pusher = require('pusher-js');\n\n// window.Echo = new Echo({\n//     broadcaster: 'pusher',\n//     key: process.env.MIX_PUSHER_APP_KEY,\n//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n//     forceTLS: true\n// });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYm9vdHN0cmFwLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLENBQUMsR0FBR0MsbUJBQU8sQ0FBQywrQ0FBUSxDQUFDO0FBRTVCLElBQUk7RUFDQUEsbUJBQU8sQ0FBQyxvRUFBVyxDQUFDO0FBQ3hCLENBQUMsQ0FBQyxPQUFPQyxDQUFDLEVBQUUsQ0FBQzs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBSCxNQUFNLENBQUNJLEtBQUssR0FBR0YsbUJBQU8sQ0FBQyw0Q0FBTyxDQUFDO0FBRS9CRixNQUFNLENBQUNJLEtBQUssQ0FBQ0MsUUFBUSxDQUFDQyxPQUFPLENBQUNDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLGdCQUFnQjs7QUFFM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYm9vdHN0cmFwLmpzPzZkZTciXSwic291cmNlc0NvbnRlbnQiOlsid2luZG93Ll8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxudHJ5IHtcbiAgICByZXF1aXJlKCdib290c3RyYXAnKTtcbn0gY2F0Y2ggKGUpIHt9XG5cbi8qKlxuICogV2UnbGwgbG9hZCB0aGUgYXhpb3MgSFRUUCBsaWJyYXJ5IHdoaWNoIGFsbG93cyB1cyB0byBlYXNpbHkgaXNzdWUgcmVxdWVzdHNcbiAqIHRvIG91ciBMYXJhdmVsIGJhY2stZW5kLiBUaGlzIGxpYnJhcnkgYXV0b21hdGljYWxseSBoYW5kbGVzIHNlbmRpbmcgdGhlXG4gKiBDU1JGIHRva2VuIGFzIGEgaGVhZGVyIGJhc2VkIG9uIHRoZSB2YWx1ZSBvZiB0aGUgXCJYU1JGXCIgdG9rZW4gY29va2llLlxuICovXG5cbndpbmRvdy5heGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5cbndpbmRvdy5heGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1SZXF1ZXN0ZWQtV2l0aCddID0gJ1hNTEh0dHBSZXF1ZXN0JztcblxuLyoqXG4gKiBFY2hvIGV4cG9zZXMgYW4gZXhwcmVzc2l2ZSBBUEkgZm9yIHN1YnNjcmliaW5nIHRvIGNoYW5uZWxzIGFuZCBsaXN0ZW5pbmdcbiAqIGZvciBldmVudHMgdGhhdCBhcmUgYnJvYWRjYXN0IGJ5IExhcmF2ZWwuIEVjaG8gYW5kIGV2ZW50IGJyb2FkY2FzdGluZ1xuICogYWxsb3dzIHlvdXIgdGVhbSB0byBlYXNpbHkgYnVpbGQgcm9idXN0IHJlYWwtdGltZSB3ZWIgYXBwbGljYXRpb25zLlxuICovXG5cbi8vIGltcG9ydCBFY2hvIGZyb20gJ2xhcmF2ZWwtZWNobyc7XG5cbi8vIHdpbmRvdy5QdXNoZXIgPSByZXF1aXJlKCdwdXNoZXItanMnKTtcblxuLy8gd2luZG93LkVjaG8gPSBuZXcgRWNobyh7XG4vLyAgICAgYnJvYWRjYXN0ZXI6ICdwdXNoZXInLFxuLy8gICAgIGtleTogcHJvY2Vzcy5lbnYuTUlYX1BVU0hFUl9BUFBfS0VZLFxuLy8gICAgIGNsdXN0ZXI6IHByb2Nlc3MuZW52Lk1JWF9QVVNIRVJfQVBQX0NMVVNURVIsXG4vLyAgICAgZm9yY2VUTFM6IHRydWVcbi8vIH0pO1xuIl0sIm5hbWVzIjpbIndpbmRvdyIsIl8iLCJyZXF1aXJlIiwiZSIsImF4aW9zIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/bootstrap.js\n");

/***/ }),

/***/ "./node_modules/bootstrap/dist/js/bootstrap.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/bootstrap/dist/js/bootstrap.esm.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Alert\": () => (/* binding */ Alert),\n/* harmony export */   \"Button\": () => (/* binding */ Button),\n/* harmony export */   \"Carousel\": () => (/* binding */ Carousel),\n/* harmony export */   \"Collapse\": () => (/* binding */ Collapse),\n/* harmony export */   \"Dropdown\": () => (/* binding */ Dropdown),\n/* harmony export */   \"Modal\": () => (/* binding */ Modal),\n/* harmony export */   \"Offcanvas\": () => (/* binding */ Offcanvas),\n/* harmony export */   \"Popover\": () => (/* binding */ Popover),\n/* harmony export */   \"ScrollSpy\": () => (/* binding */ ScrollSpy),\n/* harmony export */   \"Tab\": () => (/* binding */ Tab),\n/* harmony export */   \"Toast\": () => (/* binding */ Toast),\n/* harmony export */   \"Tooltip\": () => (/* binding */ Tooltip)\n/* harmony export */ });\n/* harmony import */ var _popperjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @popperjs/core */ \"./node_modules/@popperjs/core/lib/index.js\");\n/* harmony import */ var _popperjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @popperjs/core */ \"./node_modules/@popperjs/core/lib/popper.js\");\n/*!\n  * Bootstrap v5.2.2 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): util/index.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\nconst MAX_UID = 1000000;\nconst MILLISECONDS_MULTIPLIER = 1000;\nconst TRANSITION_END = 'transitionend'; // Shout-out Angus Croll (https://goo.gl/pxwQGp)\n\nconst toType = object => {\n  if (object === null || object === undefined) {\n    return `${object}`;\n  }\n\n  return Object.prototype.toString.call(object).match(/\\s([a-z]+)/i)[1].toLowerCase();\n};\n/**\n * Public Util API\n */\n\n\nconst getUID = prefix => {\n  do {\n    prefix += Math.floor(Math.random() * MAX_UID);\n  } while (document.getElementById(prefix));\n\n  return prefix;\n};\n\nconst getSelector = element => {\n  let selector = element.getAttribute('data-bs-target');\n\n  if (!selector || selector === '#') {\n    let hrefAttribute = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,\n    // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n    // `document.querySelector` will rightfully complain it is invalid.\n    // See https://github.com/twbs/bootstrap/issues/32273\n\n    if (!hrefAttribute || !hrefAttribute.includes('#') && !hrefAttribute.startsWith('.')) {\n      return null;\n    } // Just in case some CMS puts out a full URL with the anchor appended\n\n\n    if (hrefAttribute.includes('#') && !hrefAttribute.startsWith('#')) {\n      hrefAttribute = `#${hrefAttribute.split('#')[1]}`;\n    }\n\n    selector = hrefAttribute && hrefAttribute !== '#' ? hrefAttribute.trim() : null;\n  }\n\n  return selector;\n};\n\nconst getSelectorFromElement = element => {\n  const selector = getSelector(element);\n\n  if (selector) {\n    return document.querySelector(selector) ? selector : null;\n  }\n\n  return null;\n};\n\nconst getElementFromSelector = element => {\n  const selector = getSelector(element);\n  return selector ? document.querySelector(selector) : null;\n};\n\nconst getTransitionDurationFromElement = element => {\n  if (!element) {\n    return 0;\n  } // Get transition-duration of the element\n\n\n  let {\n    transitionDuration,\n    transitionDelay\n  } = window.getComputedStyle(element);\n  const floatTransitionDuration = Number.parseFloat(transitionDuration);\n  const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found\n\n  if (!floatTransitionDuration && !floatTransitionDelay) {\n    return 0;\n  } // If multiple durations are defined, take the first\n\n\n  transitionDuration = transitionDuration.split(',')[0];\n  transitionDelay = transitionDelay.split(',')[0];\n  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;\n};\n\nconst triggerTransitionEnd = element => {\n  element.dispatchEvent(new Event(TRANSITION_END));\n};\n\nconst isElement = object => {\n  if (!object || typeof object !== 'object') {\n    return false;\n  }\n\n  if (typeof object.jquery !== 'undefined') {\n    object = object[0];\n  }\n\n  return typeof object.nodeType !== 'undefined';\n};\n\nconst getElement = object => {\n  // it's a jQuery object or a node element\n  if (isElement(object)) {\n    return object.jquery ? object[0] : object;\n  }\n\n  if (typeof object === 'string' && object.length > 0) {\n    return document.querySelector(object);\n  }\n\n  return null;\n};\n\nconst isVisible = element => {\n  if (!isElement(element) || element.getClientRects().length === 0) {\n    return false;\n  }\n\n  const elementIsVisible = getComputedStyle(element).getPropertyValue('visibility') === 'visible'; // Handle `details` element as its content may falsie appear visible when it is closed\n\n  const closedDetails = element.closest('details:not([open])');\n\n  if (!closedDetails) {\n    return elementIsVisible;\n  }\n\n  if (closedDetails !== element) {\n    const summary = element.closest('summary');\n\n    if (summary && summary.parentNode !== closedDetails) {\n      return false;\n    }\n\n    if (summary === null) {\n      return false;\n    }\n  }\n\n  return elementIsVisible;\n};\n\nconst isDisabled = element => {\n  if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n    return true;\n  }\n\n  if (element.classList.contains('disabled')) {\n    return true;\n  }\n\n  if (typeof element.disabled !== 'undefined') {\n    return element.disabled;\n  }\n\n  return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';\n};\n\nconst findShadowRoot = element => {\n  if (!document.documentElement.attachShadow) {\n    return null;\n  } // Can find the shadow root otherwise it'll return the document\n\n\n  if (typeof element.getRootNode === 'function') {\n    const root = element.getRootNode();\n    return root instanceof ShadowRoot ? root : null;\n  }\n\n  if (element instanceof ShadowRoot) {\n    return element;\n  } // when we don't find a shadow root\n\n\n  if (!element.parentNode) {\n    return null;\n  }\n\n  return findShadowRoot(element.parentNode);\n};\n\nconst noop = () => {};\n/**\n * Trick to restart an element's animation\n *\n * @param {HTMLElement} element\n * @return void\n *\n * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation\n */\n\n\nconst reflow = element => {\n  element.offsetHeight; // eslint-disable-line no-unused-expressions\n};\n\nconst getjQuery = () => {\n  if (window.jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {\n    return window.jQuery;\n  }\n\n  return null;\n};\n\nconst DOMContentLoadedCallbacks = [];\n\nconst onDOMContentLoaded = callback => {\n  if (document.readyState === 'loading') {\n    // add listener on the first call when the document is in loading state\n    if (!DOMContentLoadedCallbacks.length) {\n      document.addEventListener('DOMContentLoaded', () => {\n        for (const callback of DOMContentLoadedCallbacks) {\n          callback();\n        }\n      });\n    }\n\n    DOMContentLoadedCallbacks.push(callback);\n  } else {\n    callback();\n  }\n};\n\nconst isRTL = () => document.documentElement.dir === 'rtl';\n\nconst defineJQueryPlugin = plugin => {\n  onDOMContentLoaded(() => {\n    const $ = getjQuery();\n    /* istanbul ignore if */\n\n    if ($) {\n      const name = plugin.NAME;\n      const JQUERY_NO_CONFLICT = $.fn[name];\n      $.fn[name] = plugin.jQueryInterface;\n      $.fn[name].Constructor = plugin;\n\n      $.fn[name].noConflict = () => {\n        $.fn[name] = JQUERY_NO_CONFLICT;\n        return plugin.jQueryInterface;\n      };\n    }\n  });\n};\n\nconst execute = callback => {\n  if (typeof callback === 'function') {\n    callback();\n  }\n};\n\nconst executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {\n  if (!waitForTransition) {\n    execute(callback);\n    return;\n  }\n\n  const durationPadding = 5;\n  const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;\n  let called = false;\n\n  const handler = ({\n    target\n  }) => {\n    if (target !== transitionElement) {\n      return;\n    }\n\n    called = true;\n    transitionElement.removeEventListener(TRANSITION_END, handler);\n    execute(callback);\n  };\n\n  transitionElement.addEventListener(TRANSITION_END, handler);\n  setTimeout(() => {\n    if (!called) {\n      triggerTransitionEnd(transitionElement);\n    }\n  }, emulatedDuration);\n};\n/**\n * Return the previous/next element of a list.\n *\n * @param {array} list    The list of elements\n * @param activeElement   The active element\n * @param shouldGetNext   Choose to get next or previous element\n * @param isCycleAllowed\n * @return {Element|elem} The proper element\n */\n\n\nconst getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {\n  const listLength = list.length;\n  let index = list.indexOf(activeElement); // if the element does not exist in the list return an element\n  // depending on the direction and if cycle is allowed\n\n  if (index === -1) {\n    return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0];\n  }\n\n  index += shouldGetNext ? 1 : -1;\n\n  if (isCycleAllowed) {\n    index = (index + listLength) % listLength;\n  }\n\n  return list[Math.max(0, Math.min(index, listLength - 1))];\n};\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): dom/event-handler.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst namespaceRegex = /[^.]*(?=\\..*)\\.|.*/;\nconst stripNameRegex = /\\..*/;\nconst stripUidRegex = /::\\d+$/;\nconst eventRegistry = {}; // Events storage\n\nlet uidEvent = 1;\nconst customEvents = {\n  mouseenter: 'mouseover',\n  mouseleave: 'mouseout'\n};\nconst nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);\n/**\n * Private methods\n */\n\nfunction makeEventUid(element, uid) {\n  return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;\n}\n\nfunction getElementEvents(element) {\n  const uid = makeEventUid(element);\n  element.uidEvent = uid;\n  eventRegistry[uid] = eventRegistry[uid] || {};\n  return eventRegistry[uid];\n}\n\nfunction bootstrapHandler(element, fn) {\n  return function handler(event) {\n    hydrateObj(event, {\n      delegateTarget: element\n    });\n\n    if (handler.oneOff) {\n      EventHandler.off(element, event.type, fn);\n    }\n\n    return fn.apply(element, [event]);\n  };\n}\n\nfunction bootstrapDelegationHandler(element, selector, fn) {\n  return function handler(event) {\n    const domElements = element.querySelectorAll(selector);\n\n    for (let {\n      target\n    } = event; target && target !== this; target = target.parentNode) {\n      for (const domElement of domElements) {\n        if (domElement !== target) {\n          continue;\n        }\n\n        hydrateObj(event, {\n          delegateTarget: target\n        });\n\n        if (handler.oneOff) {\n          EventHandler.off(element, event.type, selector, fn);\n        }\n\n        return fn.apply(target, [event]);\n      }\n    }\n  };\n}\n\nfunction findHandler(events, callable, delegationSelector = null) {\n  return Object.values(events).find(event => event.callable === callable && event.delegationSelector === delegationSelector);\n}\n\nfunction normalizeParameters(originalTypeEvent, handler, delegationFunction) {\n  const isDelegated = typeof handler === 'string'; // todo: tooltip passes `false` instead of selector, so we need to check\n\n  const callable = isDelegated ? delegationFunction : handler || delegationFunction;\n  let typeEvent = getTypeEvent(originalTypeEvent);\n\n  if (!nativeEvents.has(typeEvent)) {\n    typeEvent = originalTypeEvent;\n  }\n\n  return [isDelegated, callable, typeEvent];\n}\n\nfunction addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {\n  if (typeof originalTypeEvent !== 'string' || !element) {\n    return;\n  }\n\n  let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction); // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n  // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n\n  if (originalTypeEvent in customEvents) {\n    const wrapFunction = fn => {\n      return function (event) {\n        if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {\n          return fn.call(this, event);\n        }\n      };\n    };\n\n    callable = wrapFunction(callable);\n  }\n\n  const events = getElementEvents(element);\n  const handlers = events[typeEvent] || (events[typeEvent] = {});\n  const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);\n\n  if (previousFunction) {\n    previousFunction.oneOff = previousFunction.oneOff && oneOff;\n    return;\n  }\n\n  const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ''));\n  const fn = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);\n  fn.delegationSelector = isDelegated ? handler : null;\n  fn.callable = callable;\n  fn.oneOff = oneOff;\n  fn.uidEvent = uid;\n  handlers[uid] = fn;\n  element.addEventListener(typeEvent, fn, isDelegated);\n}\n\nfunction removeHandler(element, events, typeEvent, handler, delegationSelector) {\n  const fn = findHandler(events[typeEvent], handler, delegationSelector);\n\n  if (!fn) {\n    return;\n  }\n\n  element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));\n  delete events[typeEvent][fn.uidEvent];\n}\n\nfunction removeNamespacedHandlers(element, events, typeEvent, namespace) {\n  const storeElementEvent = events[typeEvent] || {};\n\n  for (const handlerKey of Object.keys(storeElementEvent)) {\n    if (handlerKey.includes(namespace)) {\n      const event = storeElementEvent[handlerKey];\n      removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);\n    }\n  }\n}\n\nfunction getTypeEvent(event) {\n  // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n  event = event.replace(stripNameRegex, '');\n  return customEvents[event] || event;\n}\n\nconst EventHandler = {\n  on(element, event, handler, delegationFunction) {\n    addHandler(element, event, handler, delegationFunction, false);\n  },\n\n  one(element, event, handler, delegationFunction) {\n    addHandler(element, event, handler, delegationFunction, true);\n  },\n\n  off(element, originalTypeEvent, handler, delegationFunction) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return;\n    }\n\n    const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);\n    const inNamespace = typeEvent !== originalTypeEvent;\n    const events = getElementEvents(element);\n    const storeElementEvent = events[typeEvent] || {};\n    const isNamespace = originalTypeEvent.startsWith('.');\n\n    if (typeof callable !== 'undefined') {\n      // Simplest case: handler is passed, remove that listener ONLY.\n      if (!Object.keys(storeElementEvent).length) {\n        return;\n      }\n\n      removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);\n      return;\n    }\n\n    if (isNamespace) {\n      for (const elementEvent of Object.keys(events)) {\n        removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));\n      }\n    }\n\n    for (const keyHandlers of Object.keys(storeElementEvent)) {\n      const handlerKey = keyHandlers.replace(stripUidRegex, '');\n\n      if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n        const event = storeElementEvent[keyHandlers];\n        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);\n      }\n    }\n  },\n\n  trigger(element, event, args) {\n    if (typeof event !== 'string' || !element) {\n      return null;\n    }\n\n    const $ = getjQuery();\n    const typeEvent = getTypeEvent(event);\n    const inNamespace = event !== typeEvent;\n    let jQueryEvent = null;\n    let bubbles = true;\n    let nativeDispatch = true;\n    let defaultPrevented = false;\n\n    if (inNamespace && $) {\n      jQueryEvent = $.Event(event, args);\n      $(element).trigger(jQueryEvent);\n      bubbles = !jQueryEvent.isPropagationStopped();\n      nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();\n      defaultPrevented = jQueryEvent.isDefaultPrevented();\n    }\n\n    let evt = new Event(event, {\n      bubbles,\n      cancelable: true\n    });\n    evt = hydrateObj(evt, args);\n\n    if (defaultPrevented) {\n      evt.preventDefault();\n    }\n\n    if (nativeDispatch) {\n      element.dispatchEvent(evt);\n    }\n\n    if (evt.defaultPrevented && jQueryEvent) {\n      jQueryEvent.preventDefault();\n    }\n\n    return evt;\n  }\n\n};\n\nfunction hydrateObj(obj, meta) {\n  for (const [key, value] of Object.entries(meta || {})) {\n    try {\n      obj[key] = value;\n    } catch (_unused) {\n      Object.defineProperty(obj, key, {\n        configurable: true,\n\n        get() {\n          return value;\n        }\n\n      });\n    }\n  }\n\n  return obj;\n}\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): dom/data.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * Constants\n */\nconst elementMap = new Map();\nconst Data = {\n  set(element, key, instance) {\n    if (!elementMap.has(element)) {\n      elementMap.set(element, new Map());\n    }\n\n    const instanceMap = elementMap.get(element); // make it clear we only want one instance per element\n    // can be removed later when multiple key/instances are fine to be used\n\n    if (!instanceMap.has(key) && instanceMap.size !== 0) {\n      // eslint-disable-next-line no-console\n      console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);\n      return;\n    }\n\n    instanceMap.set(key, instance);\n  },\n\n  get(element, key) {\n    if (elementMap.has(element)) {\n      return elementMap.get(element).get(key) || null;\n    }\n\n    return null;\n  },\n\n  remove(element, key) {\n    if (!elementMap.has(element)) {\n      return;\n    }\n\n    const instanceMap = elementMap.get(element);\n    instanceMap.delete(key); // free up element references if there are no instances left for an element\n\n    if (instanceMap.size === 0) {\n      elementMap.delete(element);\n    }\n  }\n\n};\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): dom/manipulator.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\nfunction normalizeData(value) {\n  if (value === 'true') {\n    return true;\n  }\n\n  if (value === 'false') {\n    return false;\n  }\n\n  if (value === Number(value).toString()) {\n    return Number(value);\n  }\n\n  if (value === '' || value === 'null') {\n    return null;\n  }\n\n  if (typeof value !== 'string') {\n    return value;\n  }\n\n  try {\n    return JSON.parse(decodeURIComponent(value));\n  } catch (_unused) {\n    return value;\n  }\n}\n\nfunction normalizeDataKey(key) {\n  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);\n}\n\nconst Manipulator = {\n  setDataAttribute(element, key, value) {\n    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);\n  },\n\n  removeDataAttribute(element, key) {\n    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);\n  },\n\n  getDataAttributes(element) {\n    if (!element) {\n      return {};\n    }\n\n    const attributes = {};\n    const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'));\n\n    for (const key of bsKeys) {\n      let pureKey = key.replace(/^bs/, '');\n      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n      attributes[pureKey] = normalizeData(element.dataset[key]);\n    }\n\n    return attributes;\n  },\n\n  getDataAttribute(element, key) {\n    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));\n  }\n\n};\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): util/config.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Class definition\n */\n\nclass Config {\n  // Getters\n  static get Default() {\n    return {};\n  }\n\n  static get DefaultType() {\n    return {};\n  }\n\n  static get NAME() {\n    throw new Error('You have to implement the static method \"NAME\", for each component!');\n  }\n\n  _getConfig(config) {\n    config = this._mergeConfigObj(config);\n    config = this._configAfterMerge(config);\n\n    this._typeCheckConfig(config);\n\n    return config;\n  }\n\n  _configAfterMerge(config) {\n    return config;\n  }\n\n  _mergeConfigObj(config, element) {\n    const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {}; // try to parse\n\n    return { ...this.constructor.Default,\n      ...(typeof jsonConfig === 'object' ? jsonConfig : {}),\n      ...(isElement(element) ? Manipulator.getDataAttributes(element) : {}),\n      ...(typeof config === 'object' ? config : {})\n    };\n  }\n\n  _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {\n    for (const property of Object.keys(configTypes)) {\n      const expectedTypes = configTypes[property];\n      const value = config[property];\n      const valueType = isElement(value) ? 'element' : toType(value);\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`);\n      }\n    }\n  }\n\n}\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): base-component.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst VERSION = '5.2.2';\n/**\n * Class definition\n */\n\nclass BaseComponent extends Config {\n  constructor(element, config) {\n    super();\n    element = getElement(element);\n\n    if (!element) {\n      return;\n    }\n\n    this._element = element;\n    this._config = this._getConfig(config);\n    Data.set(this._element, this.constructor.DATA_KEY, this);\n  } // Public\n\n\n  dispose() {\n    Data.remove(this._element, this.constructor.DATA_KEY);\n    EventHandler.off(this._element, this.constructor.EVENT_KEY);\n\n    for (const propertyName of Object.getOwnPropertyNames(this)) {\n      this[propertyName] = null;\n    }\n  }\n\n  _queueCallback(callback, element, isAnimated = true) {\n    executeAfterTransition(callback, element, isAnimated);\n  }\n\n  _getConfig(config) {\n    config = this._mergeConfigObj(config, this._element);\n    config = this._configAfterMerge(config);\n\n    this._typeCheckConfig(config);\n\n    return config;\n  } // Static\n\n\n  static getInstance(element) {\n    return Data.get(getElement(element), this.DATA_KEY);\n  }\n\n  static getOrCreateInstance(element, config = {}) {\n    return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);\n  }\n\n  static get VERSION() {\n    return VERSION;\n  }\n\n  static get DATA_KEY() {\n    return `bs.${this.NAME}`;\n  }\n\n  static get EVENT_KEY() {\n    return `.${this.DATA_KEY}`;\n  }\n\n  static eventName(name) {\n    return `${name}${this.EVENT_KEY}`;\n  }\n\n}\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): util/component-functions.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst enableDismissTrigger = (component, method = 'hide') => {\n  const clickEvent = `click.dismiss${component.EVENT_KEY}`;\n  const name = component.NAME;\n  EventHandler.on(document, clickEvent, `[data-bs-dismiss=\"${name}\"]`, function (event) {\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault();\n    }\n\n    if (isDisabled(this)) {\n      return;\n    }\n\n    const target = getElementFromSelector(this) || this.closest(`.${name}`);\n    const instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method\n\n    instance[method]();\n  });\n};\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): alert.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst NAME$f = 'alert';\nconst DATA_KEY$a = 'bs.alert';\nconst EVENT_KEY$b = `.${DATA_KEY$a}`;\nconst EVENT_CLOSE = `close${EVENT_KEY$b}`;\nconst EVENT_CLOSED = `closed${EVENT_KEY$b}`;\nconst CLASS_NAME_FADE$5 = 'fade';\nconst CLASS_NAME_SHOW$8 = 'show';\n/**\n * Class definition\n */\n\nclass Alert extends BaseComponent {\n  // Getters\n  static get NAME() {\n    return NAME$f;\n  } // Public\n\n\n  close() {\n    const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);\n\n    if (closeEvent.defaultPrevented) {\n      return;\n    }\n\n    this._element.classList.remove(CLASS_NAME_SHOW$8);\n\n    const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);\n\n    this._queueCallback(() => this._destroyElement(), this._element, isAnimated);\n  } // Private\n\n\n  _destroyElement() {\n    this._element.remove();\n\n    EventHandler.trigger(this._element, EVENT_CLOSED);\n    this.dispose();\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Alert.getOrCreateInstance(this);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config](this);\n    });\n  }\n\n}\n/**\n * Data API implementation\n */\n\n\nenableDismissTrigger(Alert, 'close');\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Alert);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): button.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst NAME$e = 'button';\nconst DATA_KEY$9 = 'bs.button';\nconst EVENT_KEY$a = `.${DATA_KEY$9}`;\nconst DATA_API_KEY$6 = '.data-api';\nconst CLASS_NAME_ACTIVE$3 = 'active';\nconst SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle=\"button\"]';\nconst EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;\n/**\n * Class definition\n */\n\nclass Button extends BaseComponent {\n  // Getters\n  static get NAME() {\n    return NAME$e;\n  } // Public\n\n\n  toggle() {\n    // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method\n    this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Button.getOrCreateInstance(this);\n\n      if (config === 'toggle') {\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * Data API implementation\n */\n\n\nEventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, event => {\n  event.preventDefault();\n  const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);\n  const data = Button.getOrCreateInstance(button);\n  data.toggle();\n});\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Button);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): dom/selector-engine.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst SelectorEngine = {\n  find(selector, element = document.documentElement) {\n    return [].concat(...Element.prototype.querySelectorAll.call(element, selector));\n  },\n\n  findOne(selector, element = document.documentElement) {\n    return Element.prototype.querySelector.call(element, selector);\n  },\n\n  children(element, selector) {\n    return [].concat(...element.children).filter(child => child.matches(selector));\n  },\n\n  parents(element, selector) {\n    const parents = [];\n    let ancestor = element.parentNode.closest(selector);\n\n    while (ancestor) {\n      parents.push(ancestor);\n      ancestor = ancestor.parentNode.closest(selector);\n    }\n\n    return parents;\n  },\n\n  prev(element, selector) {\n    let previous = element.previousElementSibling;\n\n    while (previous) {\n      if (previous.matches(selector)) {\n        return [previous];\n      }\n\n      previous = previous.previousElementSibling;\n    }\n\n    return [];\n  },\n\n  // TODO: this is now unused; remove later along with prev()\n  next(element, selector) {\n    let next = element.nextElementSibling;\n\n    while (next) {\n      if (next.matches(selector)) {\n        return [next];\n      }\n\n      next = next.nextElementSibling;\n    }\n\n    return [];\n  },\n\n  focusableChildren(element) {\n    const focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable=\"true\"]'].map(selector => `${selector}:not([tabindex^=\"-\"])`).join(',');\n    return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el));\n  }\n\n};\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): util/swipe.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst NAME$d = 'swipe';\nconst EVENT_KEY$9 = '.bs.swipe';\nconst EVENT_TOUCHSTART = `touchstart${EVENT_KEY$9}`;\nconst EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$9}`;\nconst EVENT_TOUCHEND = `touchend${EVENT_KEY$9}`;\nconst EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$9}`;\nconst EVENT_POINTERUP = `pointerup${EVENT_KEY$9}`;\nconst POINTER_TYPE_TOUCH = 'touch';\nconst POINTER_TYPE_PEN = 'pen';\nconst CLASS_NAME_POINTER_EVENT = 'pointer-event';\nconst SWIPE_THRESHOLD = 40;\nconst Default$c = {\n  endCallback: null,\n  leftCallback: null,\n  rightCallback: null\n};\nconst DefaultType$c = {\n  endCallback: '(function|null)',\n  leftCallback: '(function|null)',\n  rightCallback: '(function|null)'\n};\n/**\n * Class definition\n */\n\nclass Swipe extends Config {\n  constructor(element, config) {\n    super();\n    this._element = element;\n\n    if (!element || !Swipe.isSupported()) {\n      return;\n    }\n\n    this._config = this._getConfig(config);\n    this._deltaX = 0;\n    this._supportPointerEvents = Boolean(window.PointerEvent);\n\n    this._initEvents();\n  } // Getters\n\n\n  static get Default() {\n    return Default$c;\n  }\n\n  static get DefaultType() {\n    return DefaultType$c;\n  }\n\n  static get NAME() {\n    return NAME$d;\n  } // Public\n\n\n  dispose() {\n    EventHandler.off(this._element, EVENT_KEY$9);\n  } // Private\n\n\n  _start(event) {\n    if (!this._supportPointerEvents) {\n      this._deltaX = event.touches[0].clientX;\n      return;\n    }\n\n    if (this._eventIsPointerPenTouch(event)) {\n      this._deltaX = event.clientX;\n    }\n  }\n\n  _end(event) {\n    if (this._eventIsPointerPenTouch(event)) {\n      this._deltaX = event.clientX - this._deltaX;\n    }\n\n    this._handleSwipe();\n\n    execute(this._config.endCallback);\n  }\n\n  _move(event) {\n    this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;\n  }\n\n  _handleSwipe() {\n    const absDeltaX = Math.abs(this._deltaX);\n\n    if (absDeltaX <= SWIPE_THRESHOLD) {\n      return;\n    }\n\n    const direction = absDeltaX / this._deltaX;\n    this._deltaX = 0;\n\n    if (!direction) {\n      return;\n    }\n\n    execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);\n  }\n\n  _initEvents() {\n    if (this._supportPointerEvents) {\n      EventHandler.on(this._element, EVENT_POINTERDOWN, event => this._start(event));\n      EventHandler.on(this._element, EVENT_POINTERUP, event => this._end(event));\n\n      this._element.classList.add(CLASS_NAME_POINTER_EVENT);\n    } else {\n      EventHandler.on(this._element, EVENT_TOUCHSTART, event => this._start(event));\n      EventHandler.on(this._element, EVENT_TOUCHMOVE, event => this._move(event));\n      EventHandler.on(this._element, EVENT_TOUCHEND, event => this._end(event));\n    }\n  }\n\n  _eventIsPointerPenTouch(event) {\n    return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);\n  } // Static\n\n\n  static isSupported() {\n    return 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;\n  }\n\n}\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): carousel.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst NAME$c = 'carousel';\nconst DATA_KEY$8 = 'bs.carousel';\nconst EVENT_KEY$8 = `.${DATA_KEY$8}`;\nconst DATA_API_KEY$5 = '.data-api';\nconst ARROW_LEFT_KEY$1 = 'ArrowLeft';\nconst ARROW_RIGHT_KEY$1 = 'ArrowRight';\nconst TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch\n\nconst ORDER_NEXT = 'next';\nconst ORDER_PREV = 'prev';\nconst DIRECTION_LEFT = 'left';\nconst DIRECTION_RIGHT = 'right';\nconst EVENT_SLIDE = `slide${EVENT_KEY$8}`;\nconst EVENT_SLID = `slid${EVENT_KEY$8}`;\nconst EVENT_KEYDOWN$1 = `keydown${EVENT_KEY$8}`;\nconst EVENT_MOUSEENTER$1 = `mouseenter${EVENT_KEY$8}`;\nconst EVENT_MOUSELEAVE$1 = `mouseleave${EVENT_KEY$8}`;\nconst EVENT_DRAG_START = `dragstart${EVENT_KEY$8}`;\nconst EVENT_LOAD_DATA_API$3 = `load${EVENT_KEY$8}${DATA_API_KEY$5}`;\nconst EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$8}${DATA_API_KEY$5}`;\nconst CLASS_NAME_CAROUSEL = 'carousel';\nconst CLASS_NAME_ACTIVE$2 = 'active';\nconst CLASS_NAME_SLIDE = 'slide';\nconst CLASS_NAME_END = 'carousel-item-end';\nconst CLASS_NAME_START = 'carousel-item-start';\nconst CLASS_NAME_NEXT = 'carousel-item-next';\nconst CLASS_NAME_PREV = 'carousel-item-prev';\nconst SELECTOR_ACTIVE = '.active';\nconst SELECTOR_ITEM = '.carousel-item';\nconst SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;\nconst SELECTOR_ITEM_IMG = '.carousel-item img';\nconst SELECTOR_INDICATORS = '.carousel-indicators';\nconst SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';\nconst SELECTOR_DATA_RIDE = '[data-bs-ride=\"carousel\"]';\nconst KEY_TO_DIRECTION = {\n  [ARROW_LEFT_KEY$1]: DIRECTION_RIGHT,\n  [ARROW_RIGHT_KEY$1]: DIRECTION_LEFT\n};\nconst Default$b = {\n  interval: 5000,\n  keyboard: true,\n  pause: 'hover',\n  ride: false,\n  touch: true,\n  wrap: true\n};\nconst DefaultType$b = {\n  interval: '(number|boolean)',\n  // TODO:v6 remove boolean support\n  keyboard: 'boolean',\n  pause: '(string|boolean)',\n  ride: '(boolean|string)',\n  touch: 'boolean',\n  wrap: 'boolean'\n};\n/**\n * Class definition\n */\n\nclass Carousel extends BaseComponent {\n  constructor(element, config) {\n    super(element, config);\n    this._interval = null;\n    this._activeElement = null;\n    this._isSliding = false;\n    this.touchTimeout = null;\n    this._swipeHelper = null;\n    this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);\n\n    this._addEventListeners();\n\n    if (this._config.ride === CLASS_NAME_CAROUSEL) {\n      this.cycle();\n    }\n  } // Getters\n\n\n  static get Default() {\n    return Default$b;\n  }\n\n  static get DefaultType() {\n    return DefaultType$b;\n  }\n\n  static get NAME() {\n    return NAME$c;\n  } // Public\n\n\n  next() {\n    this._slide(ORDER_NEXT);\n  }\n\n  nextWhenVisible() {\n    // FIXME TODO use `document.visibilityState`\n    // Don't call next when the page isn't visible\n    // or the carousel or its parent isn't visible\n    if (!document.hidden && isVisible(this._element)) {\n      this.next();\n    }\n  }\n\n  prev() {\n    this._slide(ORDER_PREV);\n  }\n\n  pause() {\n    if (this._isSliding) {\n      triggerTransitionEnd(this._element);\n    }\n\n    this._clearInterval();\n  }\n\n  cycle() {\n    this._clearInterval();\n\n    this._updateInterval();\n\n    this._interval = setInterval(() => this.nextWhenVisible(), this._config.interval);\n  }\n\n  _maybeEnableCycle() {\n    if (!this._config.ride) {\n      return;\n    }\n\n    if (this._isSliding) {\n      EventHandler.one(this._element, EVENT_SLID, () => this.cycle());\n      return;\n    }\n\n    this.cycle();\n  }\n\n  to(index) {\n    const items = this._getItems();\n\n    if (index > items.length - 1 || index < 0) {\n      return;\n    }\n\n    if (this._isSliding) {\n      EventHandler.one(this._element, EVENT_SLID, () => this.to(index));\n      return;\n    }\n\n    const activeIndex = this._getItemIndex(this._getActive());\n\n    if (activeIndex === index) {\n      return;\n    }\n\n    const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;\n\n    this._slide(order, items[index]);\n  }\n\n  dispose() {\n    if (this._swipeHelper) {\n      this._swipeHelper.dispose();\n    }\n\n    super.dispose();\n  } // Private\n\n\n  _configAfterMerge(config) {\n    config.defaultInterval = config.interval;\n    return config;\n  }\n\n  _addEventListeners() {\n    if (this._config.keyboard) {\n      EventHandler.on(this._element, EVENT_KEYDOWN$1, event => this._keydown(event));\n    }\n\n    if (this._config.pause === 'hover') {\n      EventHandler.on(this._element, EVENT_MOUSEENTER$1, () => this.pause());\n      EventHandler.on(this._element, EVENT_MOUSELEAVE$1, () => this._maybeEnableCycle());\n    }\n\n    if (this._config.touch && Swipe.isSupported()) {\n      this._addTouchEventListeners();\n    }\n  }\n\n  _addTouchEventListeners() {\n    for (const img of SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)) {\n      EventHandler.on(img, EVENT_DRAG_START, event => event.preventDefault());\n    }\n\n    const endCallBack = () => {\n      if (this._config.pause !== 'hover') {\n        return;\n      } // If it's a touch-enabled device, mouseenter/leave are fired as\n      // part of the mouse compatibility events on first tap - the carousel\n      // would stop cycling until user tapped out of it;\n      // here, we listen for touchend, explicitly pause the carousel\n      // (as if it's the second time we tap on it, mouseenter compat event\n      // is NOT fired) and after a timeout (to allow for mouse compatibility\n      // events to fire) we explicitly restart cycling\n\n\n      this.pause();\n\n      if (this.touchTimeout) {\n        clearTimeout(this.touchTimeout);\n      }\n\n      this.touchTimeout = setTimeout(() => this._maybeEnableCycle(), TOUCHEVENT_COMPAT_WAIT + this._config.interval);\n    };\n\n    const swipeConfig = {\n      leftCallback: () => this._slide(this._directionToOrder(DIRECTION_LEFT)),\n      rightCallback: () => this._slide(this._directionToOrder(DIRECTION_RIGHT)),\n      endCallback: endCallBack\n    };\n    this._swipeHelper = new Swipe(this._element, swipeConfig);\n  }\n\n  _keydown(event) {\n    if (/input|textarea/i.test(event.target.tagName)) {\n      return;\n    }\n\n    const direction = KEY_TO_DIRECTION[event.key];\n\n    if (direction) {\n      event.preventDefault();\n\n      this._slide(this._directionToOrder(direction));\n    }\n  }\n\n  _getItemIndex(element) {\n    return this._getItems().indexOf(element);\n  }\n\n  _setActiveIndicatorElement(index) {\n    if (!this._indicatorsElement) {\n      return;\n    }\n\n    const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);\n    activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);\n    activeIndicator.removeAttribute('aria-current');\n    const newActiveIndicator = SelectorEngine.findOne(`[data-bs-slide-to=\"${index}\"]`, this._indicatorsElement);\n\n    if (newActiveIndicator) {\n      newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);\n      newActiveIndicator.setAttribute('aria-current', 'true');\n    }\n  }\n\n  _updateInterval() {\n    const element = this._activeElement || this._getActive();\n\n    if (!element) {\n      return;\n    }\n\n    const elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);\n    this._config.interval = elementInterval || this._config.defaultInterval;\n  }\n\n  _slide(order, element = null) {\n    if (this._isSliding) {\n      return;\n    }\n\n    const activeElement = this._getActive();\n\n    const isNext = order === ORDER_NEXT;\n    const nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);\n\n    if (nextElement === activeElement) {\n      return;\n    }\n\n    const nextElementIndex = this._getItemIndex(nextElement);\n\n    const triggerEvent = eventName => {\n      return EventHandler.trigger(this._element, eventName, {\n        relatedTarget: nextElement,\n        direction: this._orderToDirection(order),\n        from: this._getItemIndex(activeElement),\n        to: nextElementIndex\n      });\n    };\n\n    const slideEvent = triggerEvent(EVENT_SLIDE);\n\n    if (slideEvent.defaultPrevented) {\n      return;\n    }\n\n    if (!activeElement || !nextElement) {\n      // Some weirdness is happening, so we bail\n      // todo: change tests that use empty divs to avoid this check\n      return;\n    }\n\n    const isCycling = Boolean(this._interval);\n    this.pause();\n    this._isSliding = true;\n\n    this._setActiveIndicatorElement(nextElementIndex);\n\n    this._activeElement = nextElement;\n    const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;\n    const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;\n    nextElement.classList.add(orderClassName);\n    reflow(nextElement);\n    activeElement.classList.add(directionalClassName);\n    nextElement.classList.add(directionalClassName);\n\n    const completeCallBack = () => {\n      nextElement.classList.remove(directionalClassName, orderClassName);\n      nextElement.classList.add(CLASS_NAME_ACTIVE$2);\n      activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);\n      this._isSliding = false;\n      triggerEvent(EVENT_SLID);\n    };\n\n    this._queueCallback(completeCallBack, activeElement, this._isAnimated());\n\n    if (isCycling) {\n      this.cycle();\n    }\n  }\n\n  _isAnimated() {\n    return this._element.classList.contains(CLASS_NAME_SLIDE);\n  }\n\n  _getActive() {\n    return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n  }\n\n  _getItems() {\n    return SelectorEngine.find(SELECTOR_ITEM, this._element);\n  }\n\n  _clearInterval() {\n    if (this._interval) {\n      clearInterval(this._interval);\n      this._interval = null;\n    }\n  }\n\n  _directionToOrder(direction) {\n    if (isRTL()) {\n      return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;\n    }\n\n    return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;\n  }\n\n  _orderToDirection(order) {\n    if (isRTL()) {\n      return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n\n    return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Carousel.getOrCreateInstance(this, config);\n\n      if (typeof config === 'number') {\n        data.to(config);\n        return;\n      }\n\n      if (typeof config === 'string') {\n        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * Data API implementation\n */\n\n\nEventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function (event) {\n  const target = getElementFromSelector(this);\n\n  if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {\n    return;\n  }\n\n  event.preventDefault();\n  const carousel = Carousel.getOrCreateInstance(target);\n  const slideIndex = this.getAttribute('data-bs-slide-to');\n\n  if (slideIndex) {\n    carousel.to(slideIndex);\n\n    carousel._maybeEnableCycle();\n\n    return;\n  }\n\n  if (Manipulator.getDataAttribute(this, 'slide') === 'next') {\n    carousel.next();\n\n    carousel._maybeEnableCycle();\n\n    return;\n  }\n\n  carousel.prev();\n\n  carousel._maybeEnableCycle();\n});\nEventHandler.on(window, EVENT_LOAD_DATA_API$3, () => {\n  const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);\n\n  for (const carousel of carousels) {\n    Carousel.getOrCreateInstance(carousel);\n  }\n});\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Carousel);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): collapse.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst NAME$b = 'collapse';\nconst DATA_KEY$7 = 'bs.collapse';\nconst EVENT_KEY$7 = `.${DATA_KEY$7}`;\nconst DATA_API_KEY$4 = '.data-api';\nconst EVENT_SHOW$6 = `show${EVENT_KEY$7}`;\nconst EVENT_SHOWN$6 = `shown${EVENT_KEY$7}`;\nconst EVENT_HIDE$6 = `hide${EVENT_KEY$7}`;\nconst EVENT_HIDDEN$6 = `hidden${EVENT_KEY$7}`;\nconst EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$7}${DATA_API_KEY$4}`;\nconst CLASS_NAME_SHOW$7 = 'show';\nconst CLASS_NAME_COLLAPSE = 'collapse';\nconst CLASS_NAME_COLLAPSING = 'collapsing';\nconst CLASS_NAME_COLLAPSED = 'collapsed';\nconst CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;\nconst CLASS_NAME_HORIZONTAL = 'collapse-horizontal';\nconst WIDTH = 'width';\nconst HEIGHT = 'height';\nconst SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';\nconst SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle=\"collapse\"]';\nconst Default$a = {\n  parent: null,\n  toggle: true\n};\nconst DefaultType$a = {\n  parent: '(null|element)',\n  toggle: 'boolean'\n};\n/**\n * Class definition\n */\n\nclass Collapse extends BaseComponent {\n  constructor(element, config) {\n    super(element, config);\n    this._isTransitioning = false;\n    this._triggerArray = [];\n    const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);\n\n    for (const elem of toggleList) {\n      const selector = getSelectorFromElement(elem);\n      const filterElement = SelectorEngine.find(selector).filter(foundElement => foundElement === this._element);\n\n      if (selector !== null && filterElement.length) {\n        this._triggerArray.push(elem);\n      }\n    }\n\n    this._initializeChildren();\n\n    if (!this._config.parent) {\n      this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());\n    }\n\n    if (this._config.toggle) {\n      this.toggle();\n    }\n  } // Getters\n\n\n  static get Default() {\n    return Default$a;\n  }\n\n  static get DefaultType() {\n    return DefaultType$a;\n  }\n\n  static get NAME() {\n    return NAME$b;\n  } // Public\n\n\n  toggle() {\n    if (this._isShown()) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  show() {\n    if (this._isTransitioning || this._isShown()) {\n      return;\n    }\n\n    let activeChildren = []; // find active children\n\n    if (this._config.parent) {\n      activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter(element => element !== this._element).map(element => Collapse.getOrCreateInstance(element, {\n        toggle: false\n      }));\n    }\n\n    if (activeChildren.length && activeChildren[0]._isTransitioning) {\n      return;\n    }\n\n    const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);\n\n    if (startEvent.defaultPrevented) {\n      return;\n    }\n\n    for (const activeInstance of activeChildren) {\n      activeInstance.hide();\n    }\n\n    const dimension = this._getDimension();\n\n    this._element.classList.remove(CLASS_NAME_COLLAPSE);\n\n    this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n    this._element.style[dimension] = 0;\n\n    this._addAriaAndCollapsedClass(this._triggerArray, true);\n\n    this._isTransitioning = true;\n\n    const complete = () => {\n      this._isTransitioning = false;\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSING);\n\n      this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n\n      this._element.style[dimension] = '';\n      EventHandler.trigger(this._element, EVENT_SHOWN$6);\n    };\n\n    const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n    const scrollSize = `scroll${capitalizedDimension}`;\n\n    this._queueCallback(complete, this._element, true);\n\n    this._element.style[dimension] = `${this._element[scrollSize]}px`;\n  }\n\n  hide() {\n    if (this._isTransitioning || !this._isShown()) {\n      return;\n    }\n\n    const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);\n\n    if (startEvent.defaultPrevented) {\n      return;\n    }\n\n    const dimension = this._getDimension();\n\n    this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;\n    reflow(this._element);\n\n    this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n    this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n\n    for (const trigger of this._triggerArray) {\n      const element = getElementFromSelector(trigger);\n\n      if (element && !this._isShown(element)) {\n        this._addAriaAndCollapsedClass([trigger], false);\n      }\n    }\n\n    this._isTransitioning = true;\n\n    const complete = () => {\n      this._isTransitioning = false;\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSING);\n\n      this._element.classList.add(CLASS_NAME_COLLAPSE);\n\n      EventHandler.trigger(this._element, EVENT_HIDDEN$6);\n    };\n\n    this._element.style[dimension] = '';\n\n    this._queueCallback(complete, this._element, true);\n  }\n\n  _isShown(element = this._element) {\n    return element.classList.contains(CLASS_NAME_SHOW$7);\n  } // Private\n\n\n  _configAfterMerge(config) {\n    config.toggle = Boolean(config.toggle); // Coerce string values\n\n    config.parent = getElement(config.parent);\n    return config;\n  }\n\n  _getDimension() {\n    return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;\n  }\n\n  _initializeChildren() {\n    if (!this._config.parent) {\n      return;\n    }\n\n    const children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);\n\n    for (const element of children) {\n      const selected = getElementFromSelector(element);\n\n      if (selected) {\n        this._addAriaAndCollapsedClass([element], this._isShown(selected));\n      }\n    }\n  }\n\n  _getFirstLevelChildren(selector) {\n    const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent); // remove children if greater depth\n\n    return SelectorEngine.find(selector, this._config.parent).filter(element => !children.includes(element));\n  }\n\n  _addAriaAndCollapsedClass(triggerArray, isOpen) {\n    if (!triggerArray.length) {\n      return;\n    }\n\n    for (const element of triggerArray) {\n      element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);\n      element.setAttribute('aria-expanded', isOpen);\n    }\n  } // Static\n\n\n  static jQueryInterface(config) {\n    const _config = {};\n\n    if (typeof config === 'string' && /show|hide/.test(config)) {\n      _config.toggle = false;\n    }\n\n    return this.each(function () {\n      const data = Collapse.getOrCreateInstance(this, _config);\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * Data API implementation\n */\n\n\nEventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function (event) {\n  // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n  if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {\n    event.preventDefault();\n  }\n\n  const selector = getSelectorFromElement(this);\n  const selectorElements = SelectorEngine.find(selector);\n\n  for (const element of selectorElements) {\n    Collapse.getOrCreateInstance(element, {\n      toggle: false\n    }).toggle();\n  }\n});\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Collapse);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): dropdown.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst NAME$a = 'dropdown';\nconst DATA_KEY$6 = 'bs.dropdown';\nconst EVENT_KEY$6 = `.${DATA_KEY$6}`;\nconst DATA_API_KEY$3 = '.data-api';\nconst ESCAPE_KEY$2 = 'Escape';\nconst TAB_KEY$1 = 'Tab';\nconst ARROW_UP_KEY$1 = 'ArrowUp';\nconst ARROW_DOWN_KEY$1 = 'ArrowDown';\nconst RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button\n\nconst EVENT_HIDE$5 = `hide${EVENT_KEY$6}`;\nconst EVENT_HIDDEN$5 = `hidden${EVENT_KEY$6}`;\nconst EVENT_SHOW$5 = `show${EVENT_KEY$6}`;\nconst EVENT_SHOWN$5 = `shown${EVENT_KEY$6}`;\nconst EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;\nconst EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$6}${DATA_API_KEY$3}`;\nconst EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$6}${DATA_API_KEY$3}`;\nconst CLASS_NAME_SHOW$6 = 'show';\nconst CLASS_NAME_DROPUP = 'dropup';\nconst CLASS_NAME_DROPEND = 'dropend';\nconst CLASS_NAME_DROPSTART = 'dropstart';\nconst CLASS_NAME_DROPUP_CENTER = 'dropup-center';\nconst CLASS_NAME_DROPDOWN_CENTER = 'dropdown-center';\nconst SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle=\"dropdown\"]:not(.disabled):not(:disabled)';\nconst SELECTOR_DATA_TOGGLE_SHOWN = `${SELECTOR_DATA_TOGGLE$3}.${CLASS_NAME_SHOW$6}`;\nconst SELECTOR_MENU = '.dropdown-menu';\nconst SELECTOR_NAVBAR = '.navbar';\nconst SELECTOR_NAVBAR_NAV = '.navbar-nav';\nconst SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';\nconst PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';\nconst PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';\nconst PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';\nconst PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';\nconst PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';\nconst PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';\nconst PLACEMENT_TOPCENTER = 'top';\nconst PLACEMENT_BOTTOMCENTER = 'bottom';\nconst Default$9 = {\n  autoClose: true,\n  boundary: 'clippingParents',\n  display: 'dynamic',\n  offset: [0, 2],\n  popperConfig: null,\n  reference: 'toggle'\n};\nconst DefaultType$9 = {\n  autoClose: '(boolean|string)',\n  boundary: '(string|element)',\n  display: 'string',\n  offset: '(array|string|function)',\n  popperConfig: '(null|object|function)',\n  reference: '(string|element|object)'\n};\n/**\n * Class definition\n */\n\nclass Dropdown extends BaseComponent {\n  constructor(element, config) {\n    super(element, config);\n    this._popper = null;\n    this._parent = this._element.parentNode; // dropdown wrapper\n    // todo: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.2/forms/input-group/\n\n    this._menu = SelectorEngine.next(this._element, SELECTOR_MENU)[0] || SelectorEngine.prev(this._element, SELECTOR_MENU)[0] || SelectorEngine.findOne(SELECTOR_MENU, this._parent);\n    this._inNavbar = this._detectNavbar();\n  } // Getters\n\n\n  static get Default() {\n    return Default$9;\n  }\n\n  static get DefaultType() {\n    return DefaultType$9;\n  }\n\n  static get NAME() {\n    return NAME$a;\n  } // Public\n\n\n  toggle() {\n    return this._isShown() ? this.hide() : this.show();\n  }\n\n  show() {\n    if (isDisabled(this._element) || this._isShown()) {\n      return;\n    }\n\n    const relatedTarget = {\n      relatedTarget: this._element\n    };\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);\n\n    if (showEvent.defaultPrevented) {\n      return;\n    }\n\n    this._createPopper(); // If this is a touch-enabled device we add extra\n    // empty mouseover listeners to the body's immediate children;\n    // only needed because of broken event delegation on iOS\n    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n\n    if ('ontouchstart' in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {\n      for (const element of [].concat(...document.body.children)) {\n        EventHandler.on(element, 'mouseover', noop);\n      }\n    }\n\n    this._element.focus();\n\n    this._element.setAttribute('aria-expanded', true);\n\n    this._menu.classList.add(CLASS_NAME_SHOW$6);\n\n    this._element.classList.add(CLASS_NAME_SHOW$6);\n\n    EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);\n  }\n\n  hide() {\n    if (isDisabled(this._element) || !this._isShown()) {\n      return;\n    }\n\n    const relatedTarget = {\n      relatedTarget: this._element\n    };\n\n    this._completeHide(relatedTarget);\n  }\n\n  dispose() {\n    if (this._popper) {\n      this._popper.destroy();\n    }\n\n    super.dispose();\n  }\n\n  update() {\n    this._inNavbar = this._detectNavbar();\n\n    if (this._popper) {\n      this._popper.update();\n    }\n  } // Private\n\n\n  _completeHide(relatedTarget) {\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    } // If this is a touch-enabled device we remove the extra\n    // empty mouseover listeners we added for iOS support\n\n\n    if ('ontouchstart' in document.documentElement) {\n      for (const element of [].concat(...document.body.children)) {\n        EventHandler.off(element, 'mouseover', noop);\n      }\n    }\n\n    if (this._popper) {\n      this._popper.destroy();\n    }\n\n    this._menu.classList.remove(CLASS_NAME_SHOW$6);\n\n    this._element.classList.remove(CLASS_NAME_SHOW$6);\n\n    this._element.setAttribute('aria-expanded', 'false');\n\n    Manipulator.removeDataAttribute(this._menu, 'popper');\n    EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);\n  }\n\n  _getConfig(config) {\n    config = super._getConfig(config);\n\n    if (typeof config.reference === 'object' && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {\n      // Popper virtual elements require a getBoundingClientRect method\n      throw new TypeError(`${NAME$a.toUpperCase()}: Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.`);\n    }\n\n    return config;\n  }\n\n  _createPopper() {\n    if (typeof _popperjs_core__WEBPACK_IMPORTED_MODULE_0__ === 'undefined') {\n      throw new TypeError('Bootstrap\\'s dropdowns require Popper (https://popper.js.org)');\n    }\n\n    let referenceElement = this._element;\n\n    if (this._config.reference === 'parent') {\n      referenceElement = this._parent;\n    } else if (isElement(this._config.reference)) {\n      referenceElement = getElement(this._config.reference);\n    } else if (typeof this._config.reference === 'object') {\n      referenceElement = this._config.reference;\n    }\n\n    const popperConfig = this._getPopperConfig();\n\n    this._popper = _popperjs_core__WEBPACK_IMPORTED_MODULE_1__.createPopper(referenceElement, this._menu, popperConfig);\n  }\n\n  _isShown() {\n    return this._menu.classList.contains(CLASS_NAME_SHOW$6);\n  }\n\n  _getPlacement() {\n    const parentDropdown = this._parent;\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {\n      return PLACEMENT_RIGHT;\n    }\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {\n      return PLACEMENT_LEFT;\n    }\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {\n      return PLACEMENT_TOPCENTER;\n    }\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {\n      return PLACEMENT_BOTTOMCENTER;\n    } // We need to trim the value because custom properties can also include spaces\n\n\n    const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {\n      return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;\n    }\n\n    return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;\n  }\n\n  _detectNavbar() {\n    return this._element.closest(SELECTOR_NAVBAR) !== null;\n  }\n\n  _getOffset() {\n    const {\n      offset\n    } = this._config;\n\n    if (typeof offset === 'string') {\n      return offset.split(',').map(value => Number.parseInt(value, 10));\n    }\n\n    if (typeof offset === 'function') {\n      return popperData => offset(popperData, this._element);\n    }\n\n    return offset;\n  }\n\n  _getPopperConfig() {\n    const defaultBsPopperConfig = {\n      placement: this._getPlacement(),\n      modifiers: [{\n        name: 'preventOverflow',\n        options: {\n          boundary: this._config.boundary\n        }\n      }, {\n        name: 'offset',\n        options: {\n          offset: this._getOffset()\n        }\n      }]\n    }; // Disable Popper if we have a static display or Dropdown is in Navbar\n\n    if (this._inNavbar || this._config.display === 'static') {\n      Manipulator.setDataAttribute(this._menu, 'popper', 'static'); // todo:v6 remove\n\n      defaultBsPopperConfig.modifiers = [{\n        name: 'applyStyles',\n        enabled: false\n      }];\n    }\n\n    return { ...defaultBsPopperConfig,\n      ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)\n    };\n  }\n\n  _selectMenuItem({\n    key,\n    target\n  }) {\n    const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(element => isVisible(element));\n\n    if (!items.length) {\n      return;\n    } // if target isn't included in items (e.g. when expanding the dropdown)\n    // allow cycling to get the last item in case key equals ARROW_UP_KEY\n\n\n    getNextActiveElement(items, target, key === ARROW_DOWN_KEY$1, !items.includes(target)).focus();\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Dropdown.getOrCreateInstance(this, config);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config]();\n    });\n  }\n\n  static clearMenus(event) {\n    if (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1) {\n      return;\n    }\n\n    const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);\n\n    for (const toggle of openToggles) {\n      const context = Dropdown.getInstance(toggle);\n\n      if (!context || context._config.autoClose === false) {\n        continue;\n      }\n\n      const composedPath = event.composedPath();\n      const isMenuTarget = composedPath.includes(context._menu);\n\n      if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {\n        continue;\n      } // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu\n\n\n      if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {\n        continue;\n      }\n\n      const relatedTarget = {\n        relatedTarget: context._element\n      };\n\n      if (event.type === 'click') {\n        relatedTarget.clickEvent = event;\n      }\n\n      context._completeHide(relatedTarget);\n    }\n  }\n\n  static dataApiKeydownHandler(event) {\n    // If not an UP | DOWN | ESCAPE key => not a dropdown command\n    // If input/textarea && if key is other than ESCAPE => not a dropdown command\n    const isInput = /input|textarea/i.test(event.target.tagName);\n    const isEscapeEvent = event.key === ESCAPE_KEY$2;\n    const isUpOrDownEvent = [ARROW_UP_KEY$1, ARROW_DOWN_KEY$1].includes(event.key);\n\n    if (!isUpOrDownEvent && !isEscapeEvent) {\n      return;\n    }\n\n    if (isInput && !isEscapeEvent) {\n      return;\n    }\n\n    event.preventDefault(); // todo: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.2/forms/input-group/\n\n    const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.next(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.findOne(SELECTOR_DATA_TOGGLE$3, event.delegateTarget.parentNode);\n    const instance = Dropdown.getOrCreateInstance(getToggleButton);\n\n    if (isUpOrDownEvent) {\n      event.stopPropagation();\n      instance.show();\n\n      instance._selectMenuItem(event);\n\n      return;\n    }\n\n    if (instance._isShown()) {\n      // else is escape and we check if it is shown\n      event.stopPropagation();\n      instance.hide();\n      getToggleButton.focus();\n    }\n  }\n\n}\n/**\n * Data API implementation\n */\n\n\nEventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);\nEventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);\nEventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);\nEventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);\nEventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function (event) {\n  event.preventDefault();\n  Dropdown.getOrCreateInstance(this).toggle();\n});\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Dropdown);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): util/scrollBar.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';\nconst SELECTOR_STICKY_CONTENT = '.sticky-top';\nconst PROPERTY_PADDING = 'padding-right';\nconst PROPERTY_MARGIN = 'margin-right';\n/**\n * Class definition\n */\n\nclass ScrollBarHelper {\n  constructor() {\n    this._element = document.body;\n  } // Public\n\n\n  getWidth() {\n    // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes\n    const documentWidth = document.documentElement.clientWidth;\n    return Math.abs(window.innerWidth - documentWidth);\n  }\n\n  hide() {\n    const width = this.getWidth();\n\n    this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width\n\n\n    this._setElementAttributes(this._element, PROPERTY_PADDING, calculatedValue => calculatedValue + width); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth\n\n\n    this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, calculatedValue => calculatedValue + width);\n\n    this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, calculatedValue => calculatedValue - width);\n  }\n\n  reset() {\n    this._resetElementAttributes(this._element, 'overflow');\n\n    this._resetElementAttributes(this._element, PROPERTY_PADDING);\n\n    this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);\n\n    this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);\n  }\n\n  isOverflowing() {\n    return this.getWidth() > 0;\n  } // Private\n\n\n  _disableOverFlow() {\n    this._saveInitialAttribute(this._element, 'overflow');\n\n    this._element.style.overflow = 'hidden';\n  }\n\n  _setElementAttributes(selector, styleProperty, callback) {\n    const scrollbarWidth = this.getWidth();\n\n    const manipulationCallBack = element => {\n      if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {\n        return;\n      }\n\n      this._saveInitialAttribute(element, styleProperty);\n\n      const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);\n      element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`);\n    };\n\n    this._applyManipulationCallback(selector, manipulationCallBack);\n  }\n\n  _saveInitialAttribute(element, styleProperty) {\n    const actualValue = element.style.getPropertyValue(styleProperty);\n\n    if (actualValue) {\n      Manipulator.setDataAttribute(element, styleProperty, actualValue);\n    }\n  }\n\n  _resetElementAttributes(selector, styleProperty) {\n    const manipulationCallBack = element => {\n      const value = Manipulator.getDataAttribute(element, styleProperty); // We only want to remove the property if the value is `null`; the value can also be zero\n\n      if (value === null) {\n        element.style.removeProperty(styleProperty);\n        return;\n      }\n\n      Manipulator.removeDataAttribute(element, styleProperty);\n      element.style.setProperty(styleProperty, value);\n    };\n\n    this._applyManipulationCallback(selector, manipulationCallBack);\n  }\n\n  _applyManipulationCallback(selector, callBack) {\n    if (isElement(selector)) {\n      callBack(selector);\n      return;\n    }\n\n    for (const sel of SelectorEngine.find(selector, this._element)) {\n      callBack(sel);\n    }\n  }\n\n}\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): util/backdrop.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst NAME$9 = 'backdrop';\nconst CLASS_NAME_FADE$4 = 'fade';\nconst CLASS_NAME_SHOW$5 = 'show';\nconst EVENT_MOUSEDOWN = `mousedown.bs.${NAME$9}`;\nconst Default$8 = {\n  className: 'modal-backdrop',\n  clickCallback: null,\n  isAnimated: false,\n  isVisible: true,\n  // if false, we use the backdrop helper without adding any element to the dom\n  rootElement: 'body' // give the choice to place backdrop under different elements\n\n};\nconst DefaultType$8 = {\n  className: 'string',\n  clickCallback: '(function|null)',\n  isAnimated: 'boolean',\n  isVisible: 'boolean',\n  rootElement: '(element|string)'\n};\n/**\n * Class definition\n */\n\nclass Backdrop extends Config {\n  constructor(config) {\n    super();\n    this._config = this._getConfig(config);\n    this._isAppended = false;\n    this._element = null;\n  } // Getters\n\n\n  static get Default() {\n    return Default$8;\n  }\n\n  static get DefaultType() {\n    return DefaultType$8;\n  }\n\n  static get NAME() {\n    return NAME$9;\n  } // Public\n\n\n  show(callback) {\n    if (!this._config.isVisible) {\n      execute(callback);\n      return;\n    }\n\n    this._append();\n\n    const element = this._getElement();\n\n    if (this._config.isAnimated) {\n      reflow(element);\n    }\n\n    element.classList.add(CLASS_NAME_SHOW$5);\n\n    this._emulateAnimation(() => {\n      execute(callback);\n    });\n  }\n\n  hide(callback) {\n    if (!this._config.isVisible) {\n      execute(callback);\n      return;\n    }\n\n    this._getElement().classList.remove(CLASS_NAME_SHOW$5);\n\n    this._emulateAnimation(() => {\n      this.dispose();\n      execute(callback);\n    });\n  }\n\n  dispose() {\n    if (!this._isAppended) {\n      return;\n    }\n\n    EventHandler.off(this._element, EVENT_MOUSEDOWN);\n\n    this._element.remove();\n\n    this._isAppended = false;\n  } // Private\n\n\n  _getElement() {\n    if (!this._element) {\n      const backdrop = document.createElement('div');\n      backdrop.className = this._config.className;\n\n      if (this._config.isAnimated) {\n        backdrop.classList.add(CLASS_NAME_FADE$4);\n      }\n\n      this._element = backdrop;\n    }\n\n    return this._element;\n  }\n\n  _configAfterMerge(config) {\n    // use getElement() with the default \"body\" to get a fresh Element on each instantiation\n    config.rootElement = getElement(config.rootElement);\n    return config;\n  }\n\n  _append() {\n    if (this._isAppended) {\n      return;\n    }\n\n    const element = this._getElement();\n\n    this._config.rootElement.append(element);\n\n    EventHandler.on(element, EVENT_MOUSEDOWN, () => {\n      execute(this._config.clickCallback);\n    });\n    this._isAppended = true;\n  }\n\n  _emulateAnimation(callback) {\n    executeAfterTransition(callback, this._getElement(), this._config.isAnimated);\n  }\n\n}\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): util/focustrap.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst NAME$8 = 'focustrap';\nconst DATA_KEY$5 = 'bs.focustrap';\nconst EVENT_KEY$5 = `.${DATA_KEY$5}`;\nconst EVENT_FOCUSIN$2 = `focusin${EVENT_KEY$5}`;\nconst EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$5}`;\nconst TAB_KEY = 'Tab';\nconst TAB_NAV_FORWARD = 'forward';\nconst TAB_NAV_BACKWARD = 'backward';\nconst Default$7 = {\n  autofocus: true,\n  trapElement: null // The element to trap focus inside of\n\n};\nconst DefaultType$7 = {\n  autofocus: 'boolean',\n  trapElement: 'element'\n};\n/**\n * Class definition\n */\n\nclass FocusTrap extends Config {\n  constructor(config) {\n    super();\n    this._config = this._getConfig(config);\n    this._isActive = false;\n    this._lastTabNavDirection = null;\n  } // Getters\n\n\n  static get Default() {\n    return Default$7;\n  }\n\n  static get DefaultType() {\n    return DefaultType$7;\n  }\n\n  static get NAME() {\n    return NAME$8;\n  } // Public\n\n\n  activate() {\n    if (this._isActive) {\n      return;\n    }\n\n    if (this._config.autofocus) {\n      this._config.trapElement.focus();\n    }\n\n    EventHandler.off(document, EVENT_KEY$5); // guard against infinite focus loop\n\n    EventHandler.on(document, EVENT_FOCUSIN$2, event => this._handleFocusin(event));\n    EventHandler.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event));\n    this._isActive = true;\n  }\n\n  deactivate() {\n    if (!this._isActive) {\n      return;\n    }\n\n    this._isActive = false;\n    EventHandler.off(document, EVENT_KEY$5);\n  } // Private\n\n\n  _handleFocusin(event) {\n    const {\n      trapElement\n    } = this._config;\n\n    if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {\n      return;\n    }\n\n    const elements = SelectorEngine.focusableChildren(trapElement);\n\n    if (elements.length === 0) {\n      trapElement.focus();\n    } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n      elements[elements.length - 1].focus();\n    } else {\n      elements[0].focus();\n    }\n  }\n\n  _handleKeydown(event) {\n    if (event.key !== TAB_KEY) {\n      return;\n    }\n\n    this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;\n  }\n\n}\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): modal.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst NAME$7 = 'modal';\nconst DATA_KEY$4 = 'bs.modal';\nconst EVENT_KEY$4 = `.${DATA_KEY$4}`;\nconst DATA_API_KEY$2 = '.data-api';\nconst ESCAPE_KEY$1 = 'Escape';\nconst EVENT_HIDE$4 = `hide${EVENT_KEY$4}`;\nconst EVENT_HIDE_PREVENTED$1 = `hidePrevented${EVENT_KEY$4}`;\nconst EVENT_HIDDEN$4 = `hidden${EVENT_KEY$4}`;\nconst EVENT_SHOW$4 = `show${EVENT_KEY$4}`;\nconst EVENT_SHOWN$4 = `shown${EVENT_KEY$4}`;\nconst EVENT_RESIZE$1 = `resize${EVENT_KEY$4}`;\nconst EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$4}`;\nconst EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$4}`;\nconst EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$4}`;\nconst EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$4}${DATA_API_KEY$2}`;\nconst CLASS_NAME_OPEN = 'modal-open';\nconst CLASS_NAME_FADE$3 = 'fade';\nconst CLASS_NAME_SHOW$4 = 'show';\nconst CLASS_NAME_STATIC = 'modal-static';\nconst OPEN_SELECTOR$1 = '.modal.show';\nconst SELECTOR_DIALOG = '.modal-dialog';\nconst SELECTOR_MODAL_BODY = '.modal-body';\nconst SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle=\"modal\"]';\nconst Default$6 = {\n  backdrop: true,\n  focus: true,\n  keyboard: true\n};\nconst DefaultType$6 = {\n  backdrop: '(boolean|string)',\n  focus: 'boolean',\n  keyboard: 'boolean'\n};\n/**\n * Class definition\n */\n\nclass Modal extends BaseComponent {\n  constructor(element, config) {\n    super(element, config);\n    this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);\n    this._backdrop = this._initializeBackDrop();\n    this._focustrap = this._initializeFocusTrap();\n    this._isShown = false;\n    this._isTransitioning = false;\n    this._scrollBar = new ScrollBarHelper();\n\n    this._addEventListeners();\n  } // Getters\n\n\n  static get Default() {\n    return Default$6;\n  }\n\n  static get DefaultType() {\n    return DefaultType$6;\n  }\n\n  static get NAME() {\n    return NAME$7;\n  } // Public\n\n\n  toggle(relatedTarget) {\n    return this._isShown ? this.hide() : this.show(relatedTarget);\n  }\n\n  show(relatedTarget) {\n    if (this._isShown || this._isTransitioning) {\n      return;\n    }\n\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {\n      relatedTarget\n    });\n\n    if (showEvent.defaultPrevented) {\n      return;\n    }\n\n    this._isShown = true;\n    this._isTransitioning = true;\n\n    this._scrollBar.hide();\n\n    document.body.classList.add(CLASS_NAME_OPEN);\n\n    this._adjustDialog();\n\n    this._backdrop.show(() => this._showElement(relatedTarget));\n  }\n\n  hide() {\n    if (!this._isShown || this._isTransitioning) {\n      return;\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    }\n\n    this._isShown = false;\n    this._isTransitioning = true;\n\n    this._focustrap.deactivate();\n\n    this._element.classList.remove(CLASS_NAME_SHOW$4);\n\n    this._queueCallback(() => this._hideModal(), this._element, this._isAnimated());\n  }\n\n  dispose() {\n    for (const htmlElement of [window, this._dialog]) {\n      EventHandler.off(htmlElement, EVENT_KEY$4);\n    }\n\n    this._backdrop.dispose();\n\n    this._focustrap.deactivate();\n\n    super.dispose();\n  }\n\n  handleUpdate() {\n    this._adjustDialog();\n  } // Private\n\n\n  _initializeBackDrop() {\n    return new Backdrop({\n      isVisible: Boolean(this._config.backdrop),\n      // 'static' option will be translated to true, and booleans will keep their value,\n      isAnimated: this._isAnimated()\n    });\n  }\n\n  _initializeFocusTrap() {\n    return new FocusTrap({\n      trapElement: this._element\n    });\n  }\n\n  _showElement(relatedTarget) {\n    // try to append dynamic modal\n    if (!document.body.contains(this._element)) {\n      document.body.append(this._element);\n    }\n\n    this._element.style.display = 'block';\n\n    this._element.removeAttribute('aria-hidden');\n\n    this._element.setAttribute('aria-modal', true);\n\n    this._element.setAttribute('role', 'dialog');\n\n    this._element.scrollTop = 0;\n    const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);\n\n    if (modalBody) {\n      modalBody.scrollTop = 0;\n    }\n\n    reflow(this._element);\n\n    this._element.classList.add(CLASS_NAME_SHOW$4);\n\n    const transitionComplete = () => {\n      if (this._config.focus) {\n        this._focustrap.activate();\n      }\n\n      this._isTransitioning = false;\n      EventHandler.trigger(this._element, EVENT_SHOWN$4, {\n        relatedTarget\n      });\n    };\n\n    this._queueCallback(transitionComplete, this._dialog, this._isAnimated());\n  }\n\n  _addEventListeners() {\n    EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, event => {\n      if (event.key !== ESCAPE_KEY$1) {\n        return;\n      }\n\n      if (this._config.keyboard) {\n        event.preventDefault();\n        this.hide();\n        return;\n      }\n\n      this._triggerBackdropTransition();\n    });\n    EventHandler.on(window, EVENT_RESIZE$1, () => {\n      if (this._isShown && !this._isTransitioning) {\n        this._adjustDialog();\n      }\n    });\n    EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, event => {\n      // a bad trick to segregate clicks that may start inside dialog but end outside, and avoid listen to scrollbar clicks\n      EventHandler.one(this._element, EVENT_CLICK_DISMISS, event2 => {\n        if (this._element !== event.target || this._element !== event2.target) {\n          return;\n        }\n\n        if (this._config.backdrop === 'static') {\n          this._triggerBackdropTransition();\n\n          return;\n        }\n\n        if (this._config.backdrop) {\n          this.hide();\n        }\n      });\n    });\n  }\n\n  _hideModal() {\n    this._element.style.display = 'none';\n\n    this._element.setAttribute('aria-hidden', true);\n\n    this._element.removeAttribute('aria-modal');\n\n    this._element.removeAttribute('role');\n\n    this._isTransitioning = false;\n\n    this._backdrop.hide(() => {\n      document.body.classList.remove(CLASS_NAME_OPEN);\n\n      this._resetAdjustments();\n\n      this._scrollBar.reset();\n\n      EventHandler.trigger(this._element, EVENT_HIDDEN$4);\n    });\n  }\n\n  _isAnimated() {\n    return this._element.classList.contains(CLASS_NAME_FADE$3);\n  }\n\n  _triggerBackdropTransition() {\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    }\n\n    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n    const initialOverflowY = this._element.style.overflowY; // return if the following background transition hasn't yet completed\n\n    if (initialOverflowY === 'hidden' || this._element.classList.contains(CLASS_NAME_STATIC)) {\n      return;\n    }\n\n    if (!isModalOverflowing) {\n      this._element.style.overflowY = 'hidden';\n    }\n\n    this._element.classList.add(CLASS_NAME_STATIC);\n\n    this._queueCallback(() => {\n      this._element.classList.remove(CLASS_NAME_STATIC);\n\n      this._queueCallback(() => {\n        this._element.style.overflowY = initialOverflowY;\n      }, this._dialog);\n    }, this._dialog);\n\n    this._element.focus();\n  }\n  /**\n   * The following methods are used to handle overflowing modals\n   */\n\n\n  _adjustDialog() {\n    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n\n    const scrollbarWidth = this._scrollBar.getWidth();\n\n    const isBodyOverflowing = scrollbarWidth > 0;\n\n    if (isBodyOverflowing && !isModalOverflowing) {\n      const property = isRTL() ? 'paddingLeft' : 'paddingRight';\n      this._element.style[property] = `${scrollbarWidth}px`;\n    }\n\n    if (!isBodyOverflowing && isModalOverflowing) {\n      const property = isRTL() ? 'paddingRight' : 'paddingLeft';\n      this._element.style[property] = `${scrollbarWidth}px`;\n    }\n  }\n\n  _resetAdjustments() {\n    this._element.style.paddingLeft = '';\n    this._element.style.paddingRight = '';\n  } // Static\n\n\n  static jQueryInterface(config, relatedTarget) {\n    return this.each(function () {\n      const data = Modal.getOrCreateInstance(this, config);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config](relatedTarget);\n    });\n  }\n\n}\n/**\n * Data API implementation\n */\n\n\nEventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function (event) {\n  const target = getElementFromSelector(this);\n\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault();\n  }\n\n  EventHandler.one(target, EVENT_SHOW$4, showEvent => {\n    if (showEvent.defaultPrevented) {\n      // only register focus restorer if modal will actually get shown\n      return;\n    }\n\n    EventHandler.one(target, EVENT_HIDDEN$4, () => {\n      if (isVisible(this)) {\n        this.focus();\n      }\n    });\n  }); // avoid conflict when clicking modal toggler while another one is open\n\n  const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);\n\n  if (alreadyOpen) {\n    Modal.getInstance(alreadyOpen).hide();\n  }\n\n  const data = Modal.getOrCreateInstance(target);\n  data.toggle(this);\n});\nenableDismissTrigger(Modal);\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Modal);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): offcanvas.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst NAME$6 = 'offcanvas';\nconst DATA_KEY$3 = 'bs.offcanvas';\nconst EVENT_KEY$3 = `.${DATA_KEY$3}`;\nconst DATA_API_KEY$1 = '.data-api';\nconst EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$3}${DATA_API_KEY$1}`;\nconst ESCAPE_KEY = 'Escape';\nconst CLASS_NAME_SHOW$3 = 'show';\nconst CLASS_NAME_SHOWING$1 = 'showing';\nconst CLASS_NAME_HIDING = 'hiding';\nconst CLASS_NAME_BACKDROP = 'offcanvas-backdrop';\nconst OPEN_SELECTOR = '.offcanvas.show';\nconst EVENT_SHOW$3 = `show${EVENT_KEY$3}`;\nconst EVENT_SHOWN$3 = `shown${EVENT_KEY$3}`;\nconst EVENT_HIDE$3 = `hide${EVENT_KEY$3}`;\nconst EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$3}`;\nconst EVENT_HIDDEN$3 = `hidden${EVENT_KEY$3}`;\nconst EVENT_RESIZE = `resize${EVENT_KEY$3}`;\nconst EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$3}${DATA_API_KEY$1}`;\nconst EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$3}`;\nconst SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle=\"offcanvas\"]';\nconst Default$5 = {\n  backdrop: true,\n  keyboard: true,\n  scroll: false\n};\nconst DefaultType$5 = {\n  backdrop: '(boolean|string)',\n  keyboard: 'boolean',\n  scroll: 'boolean'\n};\n/**\n * Class definition\n */\n\nclass Offcanvas extends BaseComponent {\n  constructor(element, config) {\n    super(element, config);\n    this._isShown = false;\n    this._backdrop = this._initializeBackDrop();\n    this._focustrap = this._initializeFocusTrap();\n\n    this._addEventListeners();\n  } // Getters\n\n\n  static get Default() {\n    return Default$5;\n  }\n\n  static get DefaultType() {\n    return DefaultType$5;\n  }\n\n  static get NAME() {\n    return NAME$6;\n  } // Public\n\n\n  toggle(relatedTarget) {\n    return this._isShown ? this.hide() : this.show(relatedTarget);\n  }\n\n  show(relatedTarget) {\n    if (this._isShown) {\n      return;\n    }\n\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {\n      relatedTarget\n    });\n\n    if (showEvent.defaultPrevented) {\n      return;\n    }\n\n    this._isShown = true;\n\n    this._backdrop.show();\n\n    if (!this._config.scroll) {\n      new ScrollBarHelper().hide();\n    }\n\n    this._element.setAttribute('aria-modal', true);\n\n    this._element.setAttribute('role', 'dialog');\n\n    this._element.classList.add(CLASS_NAME_SHOWING$1);\n\n    const completeCallBack = () => {\n      if (!this._config.scroll || this._config.backdrop) {\n        this._focustrap.activate();\n      }\n\n      this._element.classList.add(CLASS_NAME_SHOW$3);\n\n      this._element.classList.remove(CLASS_NAME_SHOWING$1);\n\n      EventHandler.trigger(this._element, EVENT_SHOWN$3, {\n        relatedTarget\n      });\n    };\n\n    this._queueCallback(completeCallBack, this._element, true);\n  }\n\n  hide() {\n    if (!this._isShown) {\n      return;\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    }\n\n    this._focustrap.deactivate();\n\n    this._element.blur();\n\n    this._isShown = false;\n\n    this._element.classList.add(CLASS_NAME_HIDING);\n\n    this._backdrop.hide();\n\n    const completeCallback = () => {\n      this._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);\n\n      this._element.removeAttribute('aria-modal');\n\n      this._element.removeAttribute('role');\n\n      if (!this._config.scroll) {\n        new ScrollBarHelper().reset();\n      }\n\n      EventHandler.trigger(this._element, EVENT_HIDDEN$3);\n    };\n\n    this._queueCallback(completeCallback, this._element, true);\n  }\n\n  dispose() {\n    this._backdrop.dispose();\n\n    this._focustrap.deactivate();\n\n    super.dispose();\n  } // Private\n\n\n  _initializeBackDrop() {\n    const clickCallback = () => {\n      if (this._config.backdrop === 'static') {\n        EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);\n        return;\n      }\n\n      this.hide();\n    }; // 'static' option will be translated to true, and booleans will keep their value\n\n\n    const isVisible = Boolean(this._config.backdrop);\n    return new Backdrop({\n      className: CLASS_NAME_BACKDROP,\n      isVisible,\n      isAnimated: true,\n      rootElement: this._element.parentNode,\n      clickCallback: isVisible ? clickCallback : null\n    });\n  }\n\n  _initializeFocusTrap() {\n    return new FocusTrap({\n      trapElement: this._element\n    });\n  }\n\n  _addEventListeners() {\n    EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, event => {\n      if (event.key !== ESCAPE_KEY) {\n        return;\n      }\n\n      if (!this._config.keyboard) {\n        EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);\n        return;\n      }\n\n      this.hide();\n    });\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Offcanvas.getOrCreateInstance(this, config);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config](this);\n    });\n  }\n\n}\n/**\n * Data API implementation\n */\n\n\nEventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function (event) {\n  const target = getElementFromSelector(this);\n\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault();\n  }\n\n  if (isDisabled(this)) {\n    return;\n  }\n\n  EventHandler.one(target, EVENT_HIDDEN$3, () => {\n    // focus on trigger when it is closed\n    if (isVisible(this)) {\n      this.focus();\n    }\n  }); // avoid conflict when clicking a toggler of an offcanvas, while another is open\n\n  const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);\n\n  if (alreadyOpen && alreadyOpen !== target) {\n    Offcanvas.getInstance(alreadyOpen).hide();\n  }\n\n  const data = Offcanvas.getOrCreateInstance(target);\n  data.toggle(this);\n});\nEventHandler.on(window, EVENT_LOAD_DATA_API$2, () => {\n  for (const selector of SelectorEngine.find(OPEN_SELECTOR)) {\n    Offcanvas.getOrCreateInstance(selector).show();\n  }\n});\nEventHandler.on(window, EVENT_RESIZE, () => {\n  for (const element of SelectorEngine.find('[aria-modal][class*=show][class*=offcanvas-]')) {\n    if (getComputedStyle(element).position !== 'fixed') {\n      Offcanvas.getOrCreateInstance(element).hide();\n    }\n  }\n});\nenableDismissTrigger(Offcanvas);\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Offcanvas);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): util/sanitizer.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\nconst uriAttributes = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);\nconst ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i;\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n */\n\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;\n/**\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n *\n * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n */\n\nconst DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i;\n\nconst allowedAttribute = (attribute, allowedAttributeList) => {\n  const attributeName = attribute.nodeName.toLowerCase();\n\n  if (allowedAttributeList.includes(attributeName)) {\n    if (uriAttributes.has(attributeName)) {\n      return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));\n    }\n\n    return true;\n  } // Check if a regular expression validates the attribute.\n\n\n  return allowedAttributeList.filter(attributeRegex => attributeRegex instanceof RegExp).some(regex => regex.test(attributeName));\n};\n\nconst DefaultAllowlist = {\n  // Global attributes allowed on any supplied element below.\n  '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n  a: ['target', 'href', 'title', 'rel'],\n  area: [],\n  b: [],\n  br: [],\n  col: [],\n  code: [],\n  div: [],\n  em: [],\n  hr: [],\n  h1: [],\n  h2: [],\n  h3: [],\n  h4: [],\n  h5: [],\n  h6: [],\n  i: [],\n  img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n  li: [],\n  ol: [],\n  p: [],\n  pre: [],\n  s: [],\n  small: [],\n  span: [],\n  sub: [],\n  sup: [],\n  strong: [],\n  u: [],\n  ul: []\n};\nfunction sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {\n  if (!unsafeHtml.length) {\n    return unsafeHtml;\n  }\n\n  if (sanitizeFunction && typeof sanitizeFunction === 'function') {\n    return sanitizeFunction(unsafeHtml);\n  }\n\n  const domParser = new window.DOMParser();\n  const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');\n  const elements = [].concat(...createdDocument.body.querySelectorAll('*'));\n\n  for (const element of elements) {\n    const elementName = element.nodeName.toLowerCase();\n\n    if (!Object.keys(allowList).includes(elementName)) {\n      element.remove();\n      continue;\n    }\n\n    const attributeList = [].concat(...element.attributes);\n    const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);\n\n    for (const attribute of attributeList) {\n      if (!allowedAttribute(attribute, allowedAttributes)) {\n        element.removeAttribute(attribute.nodeName);\n      }\n    }\n  }\n\n  return createdDocument.body.innerHTML;\n}\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): util/template-factory.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst NAME$5 = 'TemplateFactory';\nconst Default$4 = {\n  allowList: DefaultAllowlist,\n  content: {},\n  // { selector : text ,  selector2 : text2 , }\n  extraClass: '',\n  html: false,\n  sanitize: true,\n  sanitizeFn: null,\n  template: '<div></div>'\n};\nconst DefaultType$4 = {\n  allowList: 'object',\n  content: 'object',\n  extraClass: '(string|function)',\n  html: 'boolean',\n  sanitize: 'boolean',\n  sanitizeFn: '(null|function)',\n  template: 'string'\n};\nconst DefaultContentType = {\n  entry: '(string|element|function|null)',\n  selector: '(string|element)'\n};\n/**\n * Class definition\n */\n\nclass TemplateFactory extends Config {\n  constructor(config) {\n    super();\n    this._config = this._getConfig(config);\n  } // Getters\n\n\n  static get Default() {\n    return Default$4;\n  }\n\n  static get DefaultType() {\n    return DefaultType$4;\n  }\n\n  static get NAME() {\n    return NAME$5;\n  } // Public\n\n\n  getContent() {\n    return Object.values(this._config.content).map(config => this._resolvePossibleFunction(config)).filter(Boolean);\n  }\n\n  hasContent() {\n    return this.getContent().length > 0;\n  }\n\n  changeContent(content) {\n    this._checkContent(content);\n\n    this._config.content = { ...this._config.content,\n      ...content\n    };\n    return this;\n  }\n\n  toHtml() {\n    const templateWrapper = document.createElement('div');\n    templateWrapper.innerHTML = this._maybeSanitize(this._config.template);\n\n    for (const [selector, text] of Object.entries(this._config.content)) {\n      this._setContent(templateWrapper, text, selector);\n    }\n\n    const template = templateWrapper.children[0];\n\n    const extraClass = this._resolvePossibleFunction(this._config.extraClass);\n\n    if (extraClass) {\n      template.classList.add(...extraClass.split(' '));\n    }\n\n    return template;\n  } // Private\n\n\n  _typeCheckConfig(config) {\n    super._typeCheckConfig(config);\n\n    this._checkContent(config.content);\n  }\n\n  _checkContent(arg) {\n    for (const [selector, content] of Object.entries(arg)) {\n      super._typeCheckConfig({\n        selector,\n        entry: content\n      }, DefaultContentType);\n    }\n  }\n\n  _setContent(template, content, selector) {\n    const templateElement = SelectorEngine.findOne(selector, template);\n\n    if (!templateElement) {\n      return;\n    }\n\n    content = this._resolvePossibleFunction(content);\n\n    if (!content) {\n      templateElement.remove();\n      return;\n    }\n\n    if (isElement(content)) {\n      this._putElementInTemplate(getElement(content), templateElement);\n\n      return;\n    }\n\n    if (this._config.html) {\n      templateElement.innerHTML = this._maybeSanitize(content);\n      return;\n    }\n\n    templateElement.textContent = content;\n  }\n\n  _maybeSanitize(arg) {\n    return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;\n  }\n\n  _resolvePossibleFunction(arg) {\n    return typeof arg === 'function' ? arg(this) : arg;\n  }\n\n  _putElementInTemplate(element, templateElement) {\n    if (this._config.html) {\n      templateElement.innerHTML = '';\n      templateElement.append(element);\n      return;\n    }\n\n    templateElement.textContent = element.textContent;\n  }\n\n}\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): tooltip.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst NAME$4 = 'tooltip';\nconst DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);\nconst CLASS_NAME_FADE$2 = 'fade';\nconst CLASS_NAME_MODAL = 'modal';\nconst CLASS_NAME_SHOW$2 = 'show';\nconst SELECTOR_TOOLTIP_INNER = '.tooltip-inner';\nconst SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;\nconst EVENT_MODAL_HIDE = 'hide.bs.modal';\nconst TRIGGER_HOVER = 'hover';\nconst TRIGGER_FOCUS = 'focus';\nconst TRIGGER_CLICK = 'click';\nconst TRIGGER_MANUAL = 'manual';\nconst EVENT_HIDE$2 = 'hide';\nconst EVENT_HIDDEN$2 = 'hidden';\nconst EVENT_SHOW$2 = 'show';\nconst EVENT_SHOWN$2 = 'shown';\nconst EVENT_INSERTED = 'inserted';\nconst EVENT_CLICK$1 = 'click';\nconst EVENT_FOCUSIN$1 = 'focusin';\nconst EVENT_FOCUSOUT$1 = 'focusout';\nconst EVENT_MOUSEENTER = 'mouseenter';\nconst EVENT_MOUSELEAVE = 'mouseleave';\nconst AttachmentMap = {\n  AUTO: 'auto',\n  TOP: 'top',\n  RIGHT: isRTL() ? 'left' : 'right',\n  BOTTOM: 'bottom',\n  LEFT: isRTL() ? 'right' : 'left'\n};\nconst Default$3 = {\n  allowList: DefaultAllowlist,\n  animation: true,\n  boundary: 'clippingParents',\n  container: false,\n  customClass: '',\n  delay: 0,\n  fallbackPlacements: ['top', 'right', 'bottom', 'left'],\n  html: false,\n  offset: [0, 0],\n  placement: 'top',\n  popperConfig: null,\n  sanitize: true,\n  sanitizeFn: null,\n  selector: false,\n  template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"tooltip-arrow\"></div>' + '<div class=\"tooltip-inner\"></div>' + '</div>',\n  title: '',\n  trigger: 'hover focus'\n};\nconst DefaultType$3 = {\n  allowList: 'object',\n  animation: 'boolean',\n  boundary: '(string|element)',\n  container: '(string|element|boolean)',\n  customClass: '(string|function)',\n  delay: '(number|object)',\n  fallbackPlacements: 'array',\n  html: 'boolean',\n  offset: '(array|string|function)',\n  placement: '(string|function)',\n  popperConfig: '(null|object|function)',\n  sanitize: 'boolean',\n  sanitizeFn: '(null|function)',\n  selector: '(string|boolean)',\n  template: 'string',\n  title: '(string|element|function)',\n  trigger: 'string'\n};\n/**\n * Class definition\n */\n\nclass Tooltip extends BaseComponent {\n  constructor(element, config) {\n    if (typeof _popperjs_core__WEBPACK_IMPORTED_MODULE_0__ === 'undefined') {\n      throw new TypeError('Bootstrap\\'s tooltips require Popper (https://popper.js.org)');\n    }\n\n    super(element, config); // Private\n\n    this._isEnabled = true;\n    this._timeout = 0;\n    this._isHovered = null;\n    this._activeTrigger = {};\n    this._popper = null;\n    this._templateFactory = null;\n    this._newContent = null; // Protected\n\n    this.tip = null;\n\n    this._setListeners();\n\n    if (!this._config.selector) {\n      this._fixTitle();\n    }\n  } // Getters\n\n\n  static get Default() {\n    return Default$3;\n  }\n\n  static get DefaultType() {\n    return DefaultType$3;\n  }\n\n  static get NAME() {\n    return NAME$4;\n  } // Public\n\n\n  enable() {\n    this._isEnabled = true;\n  }\n\n  disable() {\n    this._isEnabled = false;\n  }\n\n  toggleEnabled() {\n    this._isEnabled = !this._isEnabled;\n  }\n\n  toggle() {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    this._activeTrigger.click = !this._activeTrigger.click;\n\n    if (this._isShown()) {\n      this._leave();\n\n      return;\n    }\n\n    this._enter();\n  }\n\n  dispose() {\n    clearTimeout(this._timeout);\n    EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n\n    if (this.tip) {\n      this.tip.remove();\n    }\n\n    if (this._element.getAttribute('data-bs-original-title')) {\n      this._element.setAttribute('title', this._element.getAttribute('data-bs-original-title'));\n    }\n\n    this._disposePopper();\n\n    super.dispose();\n  }\n\n  show() {\n    if (this._element.style.display === 'none') {\n      throw new Error('Please use show on visible elements');\n    }\n\n    if (!(this._isWithContent() && this._isEnabled)) {\n      return;\n    }\n\n    const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));\n    const shadowRoot = findShadowRoot(this._element);\n\n    const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);\n\n    if (showEvent.defaultPrevented || !isInTheDom) {\n      return;\n    } // todo v6 remove this OR make it optional\n\n\n    if (this.tip) {\n      this.tip.remove();\n      this.tip = null;\n    }\n\n    const tip = this._getTipElement();\n\n    this._element.setAttribute('aria-describedby', tip.getAttribute('id'));\n\n    const {\n      container\n    } = this._config;\n\n    if (!this._element.ownerDocument.documentElement.contains(this.tip)) {\n      container.append(tip);\n      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));\n    }\n\n    if (this._popper) {\n      this._popper.update();\n    } else {\n      this._popper = this._createPopper(tip);\n    }\n\n    tip.classList.add(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we add extra\n    // empty mouseover listeners to the body's immediate children;\n    // only needed because of broken event delegation on iOS\n    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n    if ('ontouchstart' in document.documentElement) {\n      for (const element of [].concat(...document.body.children)) {\n        EventHandler.on(element, 'mouseover', noop);\n      }\n    }\n\n    const complete = () => {\n      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN$2));\n\n      if (this._isHovered === false) {\n        this._leave();\n      }\n\n      this._isHovered = false;\n    };\n\n    this._queueCallback(complete, this.tip, this._isAnimated());\n  }\n\n  hide() {\n    if (!this._isShown()) {\n      return;\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    }\n\n    const tip = this._getTipElement();\n\n    tip.classList.remove(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we remove the extra\n    // empty mouseover listeners we added for iOS support\n\n    if ('ontouchstart' in document.documentElement) {\n      for (const element of [].concat(...document.body.children)) {\n        EventHandler.off(element, 'mouseover', noop);\n      }\n    }\n\n    this._activeTrigger[TRIGGER_CLICK] = false;\n    this._activeTrigger[TRIGGER_FOCUS] = false;\n    this._activeTrigger[TRIGGER_HOVER] = false;\n    this._isHovered = null; // it is a trick to support manual triggering\n\n    const complete = () => {\n      if (this._isWithActiveTrigger()) {\n        return;\n      }\n\n      if (!this._isHovered) {\n        tip.remove();\n      }\n\n      this._element.removeAttribute('aria-describedby');\n\n      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN$2));\n\n      this._disposePopper();\n    };\n\n    this._queueCallback(complete, this.tip, this._isAnimated());\n  }\n\n  update() {\n    if (this._popper) {\n      this._popper.update();\n    }\n  } // Protected\n\n\n  _isWithContent() {\n    return Boolean(this._getTitle());\n  }\n\n  _getTipElement() {\n    if (!this.tip) {\n      this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());\n    }\n\n    return this.tip;\n  }\n\n  _createTipElement(content) {\n    const tip = this._getTemplateFactory(content).toHtml(); // todo: remove this check on v6\n\n\n    if (!tip) {\n      return null;\n    }\n\n    tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2); // todo: on v6 the following can be achieved with CSS only\n\n    tip.classList.add(`bs-${this.constructor.NAME}-auto`);\n    const tipId = getUID(this.constructor.NAME).toString();\n    tip.setAttribute('id', tipId);\n\n    if (this._isAnimated()) {\n      tip.classList.add(CLASS_NAME_FADE$2);\n    }\n\n    return tip;\n  }\n\n  setContent(content) {\n    this._newContent = content;\n\n    if (this._isShown()) {\n      this._disposePopper();\n\n      this.show();\n    }\n  }\n\n  _getTemplateFactory(content) {\n    if (this._templateFactory) {\n      this._templateFactory.changeContent(content);\n    } else {\n      this._templateFactory = new TemplateFactory({ ...this._config,\n        // the `content` var has to be after `this._config`\n        // to override config.content in case of popover\n        content,\n        extraClass: this._resolvePossibleFunction(this._config.customClass)\n      });\n    }\n\n    return this._templateFactory;\n  }\n\n  _getContentForTemplate() {\n    return {\n      [SELECTOR_TOOLTIP_INNER]: this._getTitle()\n    };\n  }\n\n  _getTitle() {\n    return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute('data-bs-original-title');\n  } // Private\n\n\n  _initializeOnDelegatedTarget(event) {\n    return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());\n  }\n\n  _isAnimated() {\n    return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);\n  }\n\n  _isShown() {\n    return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);\n  }\n\n  _createPopper(tip) {\n    const placement = typeof this._config.placement === 'function' ? this._config.placement.call(this, tip, this._element) : this._config.placement;\n    const attachment = AttachmentMap[placement.toUpperCase()];\n    return _popperjs_core__WEBPACK_IMPORTED_MODULE_1__.createPopper(this._element, tip, this._getPopperConfig(attachment));\n  }\n\n  _getOffset() {\n    const {\n      offset\n    } = this._config;\n\n    if (typeof offset === 'string') {\n      return offset.split(',').map(value => Number.parseInt(value, 10));\n    }\n\n    if (typeof offset === 'function') {\n      return popperData => offset(popperData, this._element);\n    }\n\n    return offset;\n  }\n\n  _resolvePossibleFunction(arg) {\n    return typeof arg === 'function' ? arg.call(this._element) : arg;\n  }\n\n  _getPopperConfig(attachment) {\n    const defaultBsPopperConfig = {\n      placement: attachment,\n      modifiers: [{\n        name: 'flip',\n        options: {\n          fallbackPlacements: this._config.fallbackPlacements\n        }\n      }, {\n        name: 'offset',\n        options: {\n          offset: this._getOffset()\n        }\n      }, {\n        name: 'preventOverflow',\n        options: {\n          boundary: this._config.boundary\n        }\n      }, {\n        name: 'arrow',\n        options: {\n          element: `.${this.constructor.NAME}-arrow`\n        }\n      }, {\n        name: 'preSetPlacement',\n        enabled: true,\n        phase: 'beforeMain',\n        fn: data => {\n          // Pre-set Popper's placement attribute in order to read the arrow sizes properly.\n          // Otherwise, Popper mixes up the width and height dimensions since the initial arrow style is for top placement\n          this._getTipElement().setAttribute('data-popper-placement', data.state.placement);\n        }\n      }]\n    };\n    return { ...defaultBsPopperConfig,\n      ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)\n    };\n  }\n\n  _setListeners() {\n    const triggers = this._config.trigger.split(' ');\n\n    for (const trigger of triggers) {\n      if (trigger === 'click') {\n        EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, event => {\n          const context = this._initializeOnDelegatedTarget(event);\n\n          context.toggle();\n        });\n      } else if (trigger !== TRIGGER_MANUAL) {\n        const eventIn = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);\n        const eventOut = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);\n        EventHandler.on(this._element, eventIn, this._config.selector, event => {\n          const context = this._initializeOnDelegatedTarget(event);\n\n          context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;\n\n          context._enter();\n        });\n        EventHandler.on(this._element, eventOut, this._config.selector, event => {\n          const context = this._initializeOnDelegatedTarget(event);\n\n          context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);\n\n          context._leave();\n        });\n      }\n    }\n\n    this._hideModalHandler = () => {\n      if (this._element) {\n        this.hide();\n      }\n    };\n\n    EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n  }\n\n  _fixTitle() {\n    const title = this._element.getAttribute('title');\n\n    if (!title) {\n      return;\n    }\n\n    if (!this._element.getAttribute('aria-label') && !this._element.textContent.trim()) {\n      this._element.setAttribute('aria-label', title);\n    }\n\n    this._element.setAttribute('data-bs-original-title', title); // DO NOT USE IT. Is only for backwards compatibility\n\n\n    this._element.removeAttribute('title');\n  }\n\n  _enter() {\n    if (this._isShown() || this._isHovered) {\n      this._isHovered = true;\n      return;\n    }\n\n    this._isHovered = true;\n\n    this._setTimeout(() => {\n      if (this._isHovered) {\n        this.show();\n      }\n    }, this._config.delay.show);\n  }\n\n  _leave() {\n    if (this._isWithActiveTrigger()) {\n      return;\n    }\n\n    this._isHovered = false;\n\n    this._setTimeout(() => {\n      if (!this._isHovered) {\n        this.hide();\n      }\n    }, this._config.delay.hide);\n  }\n\n  _setTimeout(handler, timeout) {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(handler, timeout);\n  }\n\n  _isWithActiveTrigger() {\n    return Object.values(this._activeTrigger).includes(true);\n  }\n\n  _getConfig(config) {\n    const dataAttributes = Manipulator.getDataAttributes(this._element);\n\n    for (const dataAttribute of Object.keys(dataAttributes)) {\n      if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {\n        delete dataAttributes[dataAttribute];\n      }\n    }\n\n    config = { ...dataAttributes,\n      ...(typeof config === 'object' && config ? config : {})\n    };\n    config = this._mergeConfigObj(config);\n    config = this._configAfterMerge(config);\n\n    this._typeCheckConfig(config);\n\n    return config;\n  }\n\n  _configAfterMerge(config) {\n    config.container = config.container === false ? document.body : getElement(config.container);\n\n    if (typeof config.delay === 'number') {\n      config.delay = {\n        show: config.delay,\n        hide: config.delay\n      };\n    }\n\n    if (typeof config.title === 'number') {\n      config.title = config.title.toString();\n    }\n\n    if (typeof config.content === 'number') {\n      config.content = config.content.toString();\n    }\n\n    return config;\n  }\n\n  _getDelegateConfig() {\n    const config = {};\n\n    for (const key in this._config) {\n      if (this.constructor.Default[key] !== this._config[key]) {\n        config[key] = this._config[key];\n      }\n    }\n\n    config.selector = false;\n    config.trigger = 'manual'; // In the future can be replaced with:\n    // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])\n    // `Object.fromEntries(keysWithDifferentValues)`\n\n    return config;\n  }\n\n  _disposePopper() {\n    if (this._popper) {\n      this._popper.destroy();\n\n      this._popper = null;\n    }\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Tooltip.getOrCreateInstance(this, config);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config]();\n    });\n  }\n\n}\n/**\n * jQuery\n */\n\n\ndefineJQueryPlugin(Tooltip);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): popover.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst NAME$3 = 'popover';\nconst SELECTOR_TITLE = '.popover-header';\nconst SELECTOR_CONTENT = '.popover-body';\nconst Default$2 = { ...Tooltip.Default,\n  content: '',\n  offset: [0, 8],\n  placement: 'right',\n  template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"popover-arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div>' + '</div>',\n  trigger: 'click'\n};\nconst DefaultType$2 = { ...Tooltip.DefaultType,\n  content: '(null|string|element|function)'\n};\n/**\n * Class definition\n */\n\nclass Popover extends Tooltip {\n  // Getters\n  static get Default() {\n    return Default$2;\n  }\n\n  static get DefaultType() {\n    return DefaultType$2;\n  }\n\n  static get NAME() {\n    return NAME$3;\n  } // Overrides\n\n\n  _isWithContent() {\n    return this._getTitle() || this._getContent();\n  } // Private\n\n\n  _getContentForTemplate() {\n    return {\n      [SELECTOR_TITLE]: this._getTitle(),\n      [SELECTOR_CONTENT]: this._getContent()\n    };\n  }\n\n  _getContent() {\n    return this._resolvePossibleFunction(this._config.content);\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Popover.getOrCreateInstance(this, config);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config]();\n    });\n  }\n\n}\n/**\n * jQuery\n */\n\n\ndefineJQueryPlugin(Popover);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): scrollspy.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst NAME$2 = 'scrollspy';\nconst DATA_KEY$2 = 'bs.scrollspy';\nconst EVENT_KEY$2 = `.${DATA_KEY$2}`;\nconst DATA_API_KEY = '.data-api';\nconst EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;\nconst EVENT_CLICK = `click${EVENT_KEY$2}`;\nconst EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$2}${DATA_API_KEY}`;\nconst CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';\nconst CLASS_NAME_ACTIVE$1 = 'active';\nconst SELECTOR_DATA_SPY = '[data-bs-spy=\"scroll\"]';\nconst SELECTOR_TARGET_LINKS = '[href]';\nconst SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';\nconst SELECTOR_NAV_LINKS = '.nav-link';\nconst SELECTOR_NAV_ITEMS = '.nav-item';\nconst SELECTOR_LIST_ITEMS = '.list-group-item';\nconst SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_NAV_ITEMS} > ${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`;\nconst SELECTOR_DROPDOWN = '.dropdown';\nconst SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';\nconst Default$1 = {\n  offset: null,\n  // TODO: v6 @deprecated, keep it for backwards compatibility reasons\n  rootMargin: '0px 0px -25%',\n  smoothScroll: false,\n  target: null,\n  threshold: [0.1, 0.5, 1]\n};\nconst DefaultType$1 = {\n  offset: '(number|null)',\n  // TODO v6 @deprecated, keep it for backwards compatibility reasons\n  rootMargin: 'string',\n  smoothScroll: 'boolean',\n  target: 'element',\n  threshold: 'array'\n};\n/**\n * Class definition\n */\n\nclass ScrollSpy extends BaseComponent {\n  constructor(element, config) {\n    super(element, config); // this._element is the observablesContainer and config.target the menu links wrapper\n\n    this._targetLinks = new Map();\n    this._observableSections = new Map();\n    this._rootElement = getComputedStyle(this._element).overflowY === 'visible' ? null : this._element;\n    this._activeTarget = null;\n    this._observer = null;\n    this._previousScrollData = {\n      visibleEntryTop: 0,\n      parentScrollTop: 0\n    };\n    this.refresh(); // initialize\n  } // Getters\n\n\n  static get Default() {\n    return Default$1;\n  }\n\n  static get DefaultType() {\n    return DefaultType$1;\n  }\n\n  static get NAME() {\n    return NAME$2;\n  } // Public\n\n\n  refresh() {\n    this._initializeTargetsAndObservables();\n\n    this._maybeEnableSmoothScroll();\n\n    if (this._observer) {\n      this._observer.disconnect();\n    } else {\n      this._observer = this._getNewObserver();\n    }\n\n    for (const section of this._observableSections.values()) {\n      this._observer.observe(section);\n    }\n  }\n\n  dispose() {\n    this._observer.disconnect();\n\n    super.dispose();\n  } // Private\n\n\n  _configAfterMerge(config) {\n    // TODO: on v6 target should be given explicitly & remove the {target: 'ss-target'} case\n    config.target = getElement(config.target) || document.body; // TODO: v6 Only for backwards compatibility reasons. Use rootMargin only\n\n    config.rootMargin = config.offset ? `${config.offset}px 0px -30%` : config.rootMargin;\n\n    if (typeof config.threshold === 'string') {\n      config.threshold = config.threshold.split(',').map(value => Number.parseFloat(value));\n    }\n\n    return config;\n  }\n\n  _maybeEnableSmoothScroll() {\n    if (!this._config.smoothScroll) {\n      return;\n    } // unregister any previous listeners\n\n\n    EventHandler.off(this._config.target, EVENT_CLICK);\n    EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, event => {\n      const observableSection = this._observableSections.get(event.target.hash);\n\n      if (observableSection) {\n        event.preventDefault();\n        const root = this._rootElement || window;\n        const height = observableSection.offsetTop - this._element.offsetTop;\n\n        if (root.scrollTo) {\n          root.scrollTo({\n            top: height,\n            behavior: 'smooth'\n          });\n          return;\n        } // Chrome 60 doesn't support `scrollTo`\n\n\n        root.scrollTop = height;\n      }\n    });\n  }\n\n  _getNewObserver() {\n    const options = {\n      root: this._rootElement,\n      threshold: this._config.threshold,\n      rootMargin: this._config.rootMargin\n    };\n    return new IntersectionObserver(entries => this._observerCallback(entries), options);\n  } // The logic of selection\n\n\n  _observerCallback(entries) {\n    const targetElement = entry => this._targetLinks.get(`#${entry.target.id}`);\n\n    const activate = entry => {\n      this._previousScrollData.visibleEntryTop = entry.target.offsetTop;\n\n      this._process(targetElement(entry));\n    };\n\n    const parentScrollTop = (this._rootElement || document.documentElement).scrollTop;\n    const userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;\n    this._previousScrollData.parentScrollTop = parentScrollTop;\n\n    for (const entry of entries) {\n      if (!entry.isIntersecting) {\n        this._activeTarget = null;\n\n        this._clearActiveClass(targetElement(entry));\n\n        continue;\n      }\n\n      const entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop; // if we are scrolling down, pick the bigger offsetTop\n\n      if (userScrollsDown && entryIsLowerThanPrevious) {\n        activate(entry); // if parent isn't scrolled, let's keep the first visible item, breaking the iteration\n\n        if (!parentScrollTop) {\n          return;\n        }\n\n        continue;\n      } // if we are scrolling up, pick the smallest offsetTop\n\n\n      if (!userScrollsDown && !entryIsLowerThanPrevious) {\n        activate(entry);\n      }\n    }\n  }\n\n  _initializeTargetsAndObservables() {\n    this._targetLinks = new Map();\n    this._observableSections = new Map();\n    const targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);\n\n    for (const anchor of targetLinks) {\n      // ensure that the anchor has an id and is not disabled\n      if (!anchor.hash || isDisabled(anchor)) {\n        continue;\n      }\n\n      const observableSection = SelectorEngine.findOne(anchor.hash, this._element); // ensure that the observableSection exists & is visible\n\n      if (isVisible(observableSection)) {\n        this._targetLinks.set(anchor.hash, anchor);\n\n        this._observableSections.set(anchor.hash, observableSection);\n      }\n    }\n  }\n\n  _process(target) {\n    if (this._activeTarget === target) {\n      return;\n    }\n\n    this._clearActiveClass(this._config.target);\n\n    this._activeTarget = target;\n    target.classList.add(CLASS_NAME_ACTIVE$1);\n\n    this._activateParents(target);\n\n    EventHandler.trigger(this._element, EVENT_ACTIVATE, {\n      relatedTarget: target\n    });\n  }\n\n  _activateParents(target) {\n    // Activate dropdown parents\n    if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {\n      SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);\n      return;\n    }\n\n    for (const listGroup of SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)) {\n      // Set triggered links parents as active\n      // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n      for (const item of SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)) {\n        item.classList.add(CLASS_NAME_ACTIVE$1);\n      }\n    }\n  }\n\n  _clearActiveClass(parent) {\n    parent.classList.remove(CLASS_NAME_ACTIVE$1);\n    const activeNodes = SelectorEngine.find(`${SELECTOR_TARGET_LINKS}.${CLASS_NAME_ACTIVE$1}`, parent);\n\n    for (const node of activeNodes) {\n      node.classList.remove(CLASS_NAME_ACTIVE$1);\n    }\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = ScrollSpy.getOrCreateInstance(this, config);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config]();\n    });\n  }\n\n}\n/**\n * Data API implementation\n */\n\n\nEventHandler.on(window, EVENT_LOAD_DATA_API$1, () => {\n  for (const spy of SelectorEngine.find(SELECTOR_DATA_SPY)) {\n    ScrollSpy.getOrCreateInstance(spy);\n  }\n});\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(ScrollSpy);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): tab.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst NAME$1 = 'tab';\nconst DATA_KEY$1 = 'bs.tab';\nconst EVENT_KEY$1 = `.${DATA_KEY$1}`;\nconst EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;\nconst EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;\nconst EVENT_SHOW$1 = `show${EVENT_KEY$1}`;\nconst EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}`;\nconst EVENT_KEYDOWN = `keydown${EVENT_KEY$1}`;\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY$1}`;\nconst ARROW_LEFT_KEY = 'ArrowLeft';\nconst ARROW_RIGHT_KEY = 'ArrowRight';\nconst ARROW_UP_KEY = 'ArrowUp';\nconst ARROW_DOWN_KEY = 'ArrowDown';\nconst CLASS_NAME_ACTIVE = 'active';\nconst CLASS_NAME_FADE$1 = 'fade';\nconst CLASS_NAME_SHOW$1 = 'show';\nconst CLASS_DROPDOWN = 'dropdown';\nconst SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';\nconst SELECTOR_DROPDOWN_MENU = '.dropdown-menu';\nconst NOT_SELECTOR_DROPDOWN_TOGGLE = ':not(.dropdown-toggle)';\nconst SELECTOR_TAB_PANEL = '.list-group, .nav, [role=\"tablist\"]';\nconst SELECTOR_OUTER = '.nav-item, .list-group-item';\nconst SELECTOR_INNER = `.nav-link${NOT_SELECTOR_DROPDOWN_TOGGLE}, .list-group-item${NOT_SELECTOR_DROPDOWN_TOGGLE}, [role=\"tab\"]${NOT_SELECTOR_DROPDOWN_TOGGLE}`;\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]'; // todo:v6: could be only `tab`\n\nconst SELECTOR_INNER_ELEM = `${SELECTOR_INNER}, ${SELECTOR_DATA_TOGGLE}`;\nconst SELECTOR_DATA_TOGGLE_ACTIVE = `.${CLASS_NAME_ACTIVE}[data-bs-toggle=\"tab\"], .${CLASS_NAME_ACTIVE}[data-bs-toggle=\"pill\"], .${CLASS_NAME_ACTIVE}[data-bs-toggle=\"list\"]`;\n/**\n * Class definition\n */\n\nclass Tab extends BaseComponent {\n  constructor(element) {\n    super(element);\n    this._parent = this._element.closest(SELECTOR_TAB_PANEL);\n\n    if (!this._parent) {\n      return; // todo: should Throw exception on v6\n      // throw new TypeError(`${element.outerHTML} has not a valid parent ${SELECTOR_INNER_ELEM}`)\n    } // Set up initial aria attributes\n\n\n    this._setInitialAttributes(this._parent, this._getChildren());\n\n    EventHandler.on(this._element, EVENT_KEYDOWN, event => this._keydown(event));\n  } // Getters\n\n\n  static get NAME() {\n    return NAME$1;\n  } // Public\n\n\n  show() {\n    // Shows this elem and deactivate the active sibling if exists\n    const innerElem = this._element;\n\n    if (this._elemIsActive(innerElem)) {\n      return;\n    } // Search for active tab on same parent to deactivate it\n\n\n    const active = this._getActiveElem();\n\n    const hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {\n      relatedTarget: innerElem\n    }) : null;\n    const showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {\n      relatedTarget: active\n    });\n\n    if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) {\n      return;\n    }\n\n    this._deactivate(active, innerElem);\n\n    this._activate(innerElem, active);\n  } // Private\n\n\n  _activate(element, relatedElem) {\n    if (!element) {\n      return;\n    }\n\n    element.classList.add(CLASS_NAME_ACTIVE);\n\n    this._activate(getElementFromSelector(element)); // Search and activate/show the proper section\n\n\n    const complete = () => {\n      if (element.getAttribute('role') !== 'tab') {\n        element.classList.add(CLASS_NAME_SHOW$1);\n        return;\n      }\n\n      element.removeAttribute('tabindex');\n      element.setAttribute('aria-selected', true);\n\n      this._toggleDropDown(element, true);\n\n      EventHandler.trigger(element, EVENT_SHOWN$1, {\n        relatedTarget: relatedElem\n      });\n    };\n\n    this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));\n  }\n\n  _deactivate(element, relatedElem) {\n    if (!element) {\n      return;\n    }\n\n    element.classList.remove(CLASS_NAME_ACTIVE);\n    element.blur();\n\n    this._deactivate(getElementFromSelector(element)); // Search and deactivate the shown section too\n\n\n    const complete = () => {\n      if (element.getAttribute('role') !== 'tab') {\n        element.classList.remove(CLASS_NAME_SHOW$1);\n        return;\n      }\n\n      element.setAttribute('aria-selected', false);\n      element.setAttribute('tabindex', '-1');\n\n      this._toggleDropDown(element, false);\n\n      EventHandler.trigger(element, EVENT_HIDDEN$1, {\n        relatedTarget: relatedElem\n      });\n    };\n\n    this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));\n  }\n\n  _keydown(event) {\n    if (![ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY].includes(event.key)) {\n      return;\n    }\n\n    event.stopPropagation(); // stopPropagation/preventDefault both added to support up/down keys without scrolling the page\n\n    event.preventDefault();\n    const isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key);\n    const nextActiveElement = getNextActiveElement(this._getChildren().filter(element => !isDisabled(element)), event.target, isNext, true);\n\n    if (nextActiveElement) {\n      nextActiveElement.focus({\n        preventScroll: true\n      });\n      Tab.getOrCreateInstance(nextActiveElement).show();\n    }\n  }\n\n  _getChildren() {\n    // collection of inner elements\n    return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);\n  }\n\n  _getActiveElem() {\n    return this._getChildren().find(child => this._elemIsActive(child)) || null;\n  }\n\n  _setInitialAttributes(parent, children) {\n    this._setAttributeIfNotExists(parent, 'role', 'tablist');\n\n    for (const child of children) {\n      this._setInitialAttributesOnChild(child);\n    }\n  }\n\n  _setInitialAttributesOnChild(child) {\n    child = this._getInnerElement(child);\n\n    const isActive = this._elemIsActive(child);\n\n    const outerElem = this._getOuterElement(child);\n\n    child.setAttribute('aria-selected', isActive);\n\n    if (outerElem !== child) {\n      this._setAttributeIfNotExists(outerElem, 'role', 'presentation');\n    }\n\n    if (!isActive) {\n      child.setAttribute('tabindex', '-1');\n    }\n\n    this._setAttributeIfNotExists(child, 'role', 'tab'); // set attributes to the related panel too\n\n\n    this._setInitialAttributesOnTargetPanel(child);\n  }\n\n  _setInitialAttributesOnTargetPanel(child) {\n    const target = getElementFromSelector(child);\n\n    if (!target) {\n      return;\n    }\n\n    this._setAttributeIfNotExists(target, 'role', 'tabpanel');\n\n    if (child.id) {\n      this._setAttributeIfNotExists(target, 'aria-labelledby', `#${child.id}`);\n    }\n  }\n\n  _toggleDropDown(element, open) {\n    const outerElem = this._getOuterElement(element);\n\n    if (!outerElem.classList.contains(CLASS_DROPDOWN)) {\n      return;\n    }\n\n    const toggle = (selector, className) => {\n      const element = SelectorEngine.findOne(selector, outerElem);\n\n      if (element) {\n        element.classList.toggle(className, open);\n      }\n    };\n\n    toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);\n    toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);\n    outerElem.setAttribute('aria-expanded', open);\n  }\n\n  _setAttributeIfNotExists(element, attribute, value) {\n    if (!element.hasAttribute(attribute)) {\n      element.setAttribute(attribute, value);\n    }\n  }\n\n  _elemIsActive(elem) {\n    return elem.classList.contains(CLASS_NAME_ACTIVE);\n  } // Try to get the inner element (usually the .nav-link)\n\n\n  _getInnerElement(elem) {\n    return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);\n  } // Try to get the outer element (usually the .nav-item)\n\n\n  _getOuterElement(elem) {\n    return elem.closest(SELECTOR_OUTER) || elem;\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Tab.getOrCreateInstance(this);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config]();\n    });\n  }\n\n}\n/**\n * Data API implementation\n */\n\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault();\n  }\n\n  if (isDisabled(this)) {\n    return;\n  }\n\n  Tab.getOrCreateInstance(this).show();\n});\n/**\n * Initialize on focus\n */\n\nEventHandler.on(window, EVENT_LOAD_DATA_API, () => {\n  for (const element of SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)) {\n    Tab.getOrCreateInstance(element);\n  }\n});\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Tab);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.2): toast.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * Constants\n */\n\nconst NAME = 'toast';\nconst DATA_KEY = 'bs.toast';\nconst EVENT_KEY = `.${DATA_KEY}`;\nconst EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;\nconst EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;\nconst EVENT_FOCUSIN = `focusin${EVENT_KEY}`;\nconst EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;\nconst EVENT_HIDE = `hide${EVENT_KEY}`;\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`;\nconst EVENT_SHOW = `show${EVENT_KEY}`;\nconst EVENT_SHOWN = `shown${EVENT_KEY}`;\nconst CLASS_NAME_FADE = 'fade';\nconst CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility\n\nconst CLASS_NAME_SHOW = 'show';\nconst CLASS_NAME_SHOWING = 'showing';\nconst DefaultType = {\n  animation: 'boolean',\n  autohide: 'boolean',\n  delay: 'number'\n};\nconst Default = {\n  animation: true,\n  autohide: true,\n  delay: 5000\n};\n/**\n * Class definition\n */\n\nclass Toast extends BaseComponent {\n  constructor(element, config) {\n    super(element, config);\n    this._timeout = null;\n    this._hasMouseInteraction = false;\n    this._hasKeyboardInteraction = false;\n\n    this._setListeners();\n  } // Getters\n\n\n  static get Default() {\n    return Default;\n  }\n\n  static get DefaultType() {\n    return DefaultType;\n  }\n\n  static get NAME() {\n    return NAME;\n  } // Public\n\n\n  show() {\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);\n\n    if (showEvent.defaultPrevented) {\n      return;\n    }\n\n    this._clearTimeout();\n\n    if (this._config.animation) {\n      this._element.classList.add(CLASS_NAME_FADE);\n    }\n\n    const complete = () => {\n      this._element.classList.remove(CLASS_NAME_SHOWING);\n\n      EventHandler.trigger(this._element, EVENT_SHOWN);\n\n      this._maybeScheduleHide();\n    };\n\n    this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated\n\n\n    reflow(this._element);\n\n    this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);\n\n    this._queueCallback(complete, this._element, this._config.animation);\n  }\n\n  hide() {\n    if (!this.isShown()) {\n      return;\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    }\n\n    const complete = () => {\n      this._element.classList.add(CLASS_NAME_HIDE); // @deprecated\n\n\n      this._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);\n\n      EventHandler.trigger(this._element, EVENT_HIDDEN);\n    };\n\n    this._element.classList.add(CLASS_NAME_SHOWING);\n\n    this._queueCallback(complete, this._element, this._config.animation);\n  }\n\n  dispose() {\n    this._clearTimeout();\n\n    if (this.isShown()) {\n      this._element.classList.remove(CLASS_NAME_SHOW);\n    }\n\n    super.dispose();\n  }\n\n  isShown() {\n    return this._element.classList.contains(CLASS_NAME_SHOW);\n  } // Private\n\n\n  _maybeScheduleHide() {\n    if (!this._config.autohide) {\n      return;\n    }\n\n    if (this._hasMouseInteraction || this._hasKeyboardInteraction) {\n      return;\n    }\n\n    this._timeout = setTimeout(() => {\n      this.hide();\n    }, this._config.delay);\n  }\n\n  _onInteraction(event, isInteracting) {\n    switch (event.type) {\n      case 'mouseover':\n      case 'mouseout':\n        {\n          this._hasMouseInteraction = isInteracting;\n          break;\n        }\n\n      case 'focusin':\n      case 'focusout':\n        {\n          this._hasKeyboardInteraction = isInteracting;\n          break;\n        }\n    }\n\n    if (isInteracting) {\n      this._clearTimeout();\n\n      return;\n    }\n\n    const nextElement = event.relatedTarget;\n\n    if (this._element === nextElement || this._element.contains(nextElement)) {\n      return;\n    }\n\n    this._maybeScheduleHide();\n  }\n\n  _setListeners() {\n    EventHandler.on(this._element, EVENT_MOUSEOVER, event => this._onInteraction(event, true));\n    EventHandler.on(this._element, EVENT_MOUSEOUT, event => this._onInteraction(event, false));\n    EventHandler.on(this._element, EVENT_FOCUSIN, event => this._onInteraction(event, true));\n    EventHandler.on(this._element, EVENT_FOCUSOUT, event => this._onInteraction(event, false));\n  }\n\n  _clearTimeout() {\n    clearTimeout(this._timeout);\n    this._timeout = null;\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Toast.getOrCreateInstance(this, config);\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config](this);\n      }\n    });\n  }\n\n}\n/**\n * Data API implementation\n */\n\n\nenableDismissTrigger(Toast);\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Toast);\n\n\n//# sourceMappingURL=bootstrap.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/bootstrap/dist/js/bootstrap.esm.js\n");

/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.21';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function',\n      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading whitespace. */\n  var reTrimStart = /^\\s+/;\n\n  /** Used to match a single whitespace character. */\n  var reWhitespace = /\\s/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /**\n   * Used to validate the `validate` option in `_.template` variable.\n   *\n   * Forbids characters which could potentially change the meaning of the function argument definition:\n   * - \"(),\" (modification of function parameters)\n   * - \"=\" (default value)\n   * - \"[]{}\" (destructuring of function parameters)\n   * - \"/\" (beginning of a comment)\n   * - whitespace\n   */\n  var reForbiddenIdentifierChars = /[()=,{}\\[\\]\\/\\s]/;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n      rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports =  true && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && \"object\" == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n      if (types) {\n        return types;\n      }\n\n      // Legacy `process.binding('util')` for Node.js < 10.\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.trim`.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} Returns the trimmed string.\n   */\n  function baseTrim(string) {\n    return string\n      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n      : string;\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n   * character of `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the index of the last non-whitespace character.\n   */\n  function trimmedEndIndex(string) {\n    var index = string.length;\n\n    while (index-- && reWhitespace.test(string.charAt(index))) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      if (isSet(value)) {\n        value.forEach(function(subValue) {\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n        });\n      } else if (isMap(value)) {\n        value.forEach(function(subValue, key) {\n          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n        });\n      }\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        stack || (stack = new Stack);\n        if (isObject(srcValue)) {\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || isFunction(objValue)) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      if (iteratees.length) {\n        iteratees = arrayMap(iteratees, function(iteratee) {\n          if (isArray(iteratee)) {\n            return function(value) {\n              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n            }\n          }\n          return iteratee;\n        });\n      } else {\n        iteratees = [identity];\n      }\n\n      var index = -1;\n      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n          return object;\n        }\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      var low = 0,\n          high = array == null ? 0 : array.length;\n      if (high === 0) {\n        return 0;\n      }\n\n      value = iteratee(value);\n      var valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision && nativeIsFinite(number)) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = new array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return new Ctor;\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return new Ctor;\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      var type = typeof value;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n\n      return !!length &&\n        (type == 'number' ||\n          (type != 'symbol' && reIsUint.test(value))) &&\n            (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the property to get.\n     * @returns {*} Returns the property value.\n     */\n    function safeGet(object, key) {\n      if (key === 'constructor' && typeof object[key] === 'function') {\n        return;\n      }\n\n      if (key == '__proto__') {\n        return;\n      }\n\n      return object[key];\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (string.charCodeAt(0) === 46 /* . */) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, subString) {\n        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     *\n     * // Combining several predicates using `_.overEvery` or `_.overSome`.\n     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n     * // => objects for ['fred', 'barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 30 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n          : timeWaiting;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            clearTimeout(timerId);\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = baseTrim(value);\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(object, sources) {\n      object = Object(object);\n\n      var index = -1;\n      var length = sources.length;\n      var guard = length > 2 ? sources[2] : undefined;\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        length = 1;\n      }\n\n      while (++index < length) {\n        var source = sources[index];\n        var props = keysIn(source);\n        var propsIndex = -1;\n        var propsLength = props.length;\n\n        while (++propsIndex < propsLength) {\n          var key = props[propsIndex];\n          var value = object[key];\n\n          if (value === undefined ||\n              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n            object[key] = source[key];\n          }\n        }\n      }\n\n      return object;\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      // The sourceURL gets injected into the source that's eval-ed, so be careful\n      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in\n      // and escape the comment, thus injecting code that gets evaled.\n      var sourceURL = '//# sourceURL=' +\n        (hasOwnProperty.call(options, 'sourceURL')\n          ? (options.sourceURL + '').replace(/\\s/g, ' ')\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Throw an error if a forbidden character was found in `variable`, to prevent\n      // potential command injection attacks.\n      else if (reForbiddenIdentifierChars.test(variable)) {\n        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);\n      }\n\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return baseTrim(string);\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.slice(0, trimmedEndIndex(string) + 1);\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     *\n     * // Checking for several possible values\n     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     *\n     * // Checking for several possible values\n     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     *\n     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\n     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = lodashFunc.name + '';\n        if (!hasOwnProperty.call(realNames, key)) {\n          realNames[key] = [];\n        }\n        realNames[key].push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (true) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return _;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else {}\n}.call(this));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lodash/lodash.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz9hODBiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/protobufjs/minimal.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/minimal.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// minimal library entry point.\n\n\nmodule.exports = __webpack_require__(/*! ./src/index-minimal */ \"./node_modules/protobufjs/src/index-minimal.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9taW5pbWFsLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVhO0FBQ2IsaUhBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvbWluaW1hbC5qcz80ZWI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIG1pbmltYWwgbGlicmFyeSBlbnRyeSBwb2ludC5cblxuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3NyYy9pbmRleC1taW5pbWFsXCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/protobufjs/minimal.js\n");

/***/ }),

/***/ "./node_modules/protobufjs/src/index-minimal.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/index-minimal.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\nprotobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ \"./node_modules/protobufjs/src/writer_buffer.js\");\nprotobuf.Reader       = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\nprotobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ \"./node_modules/protobufjs/src/reader_buffer.js\");\n\n// Utility\nprotobuf.util         = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\nprotobuf.rpc          = __webpack_require__(/*! ./rpc */ \"./node_modules/protobufjs/src/rpc.js\");\nprotobuf.roots        = __webpack_require__(/*! ./roots */ \"./node_modules/protobufjs/src/roots.js\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXgtbWluaW1hbC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsbUJBQU8sQ0FBQyx5REFBVTtBQUMxQyx3QkFBd0IsbUJBQU8sQ0FBQyx1RUFBaUI7QUFDakQsd0JBQXdCLG1CQUFPLENBQUMseURBQVU7QUFDMUMsd0JBQXdCLG1CQUFPLENBQUMsdUVBQWlCOztBQUVqRDtBQUNBLHdCQUF3QixtQkFBTyxDQUFDLHFFQUFnQjtBQUNoRCx3QkFBd0IsbUJBQU8sQ0FBQyxtREFBTztBQUN2Qyx3QkFBd0IsbUJBQU8sQ0FBQyx1REFBUztBQUN6Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXgtbWluaW1hbC5qcz85NDNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIHByb3RvYnVmID0gZXhwb3J0cztcblxuLyoqXG4gKiBCdWlsZCB0eXBlLCBvbmUgb2YgYFwiZnVsbFwiYCwgYFwibGlnaHRcImAgb3IgYFwibWluaW1hbFwiYC5cbiAqIEBuYW1lIGJ1aWxkXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQGNvbnN0XG4gKi9cbnByb3RvYnVmLmJ1aWxkID0gXCJtaW5pbWFsXCI7XG5cbi8vIFNlcmlhbGl6YXRpb25cbnByb3RvYnVmLldyaXRlciAgICAgICA9IHJlcXVpcmUoXCIuL3dyaXRlclwiKTtcbnByb3RvYnVmLkJ1ZmZlcldyaXRlciA9IHJlcXVpcmUoXCIuL3dyaXRlcl9idWZmZXJcIik7XG5wcm90b2J1Zi5SZWFkZXIgICAgICAgPSByZXF1aXJlKFwiLi9yZWFkZXJcIik7XG5wcm90b2J1Zi5CdWZmZXJSZWFkZXIgPSByZXF1aXJlKFwiLi9yZWFkZXJfYnVmZmVyXCIpO1xuXG4vLyBVdGlsaXR5XG5wcm90b2J1Zi51dGlsICAgICAgICAgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XG5wcm90b2J1Zi5ycGMgICAgICAgICAgPSByZXF1aXJlKFwiLi9ycGNcIik7XG5wcm90b2J1Zi5yb290cyAgICAgICAgPSByZXF1aXJlKFwiLi9yb290c1wiKTtcbnByb3RvYnVmLmNvbmZpZ3VyZSAgICA9IGNvbmZpZ3VyZTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogUmVjb25maWd1cmVzIHRoZSBsaWJyYXJ5IGFjY29yZGluZyB0byB0aGUgZW52aXJvbm1lbnQuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBjb25maWd1cmUoKSB7XG4gICAgcHJvdG9idWYudXRpbC5fY29uZmlndXJlKCk7XG4gICAgcHJvdG9idWYuV3JpdGVyLl9jb25maWd1cmUocHJvdG9idWYuQnVmZmVyV3JpdGVyKTtcbiAgICBwcm90b2J1Zi5SZWFkZXIuX2NvbmZpZ3VyZShwcm90b2J1Zi5CdWZmZXJSZWFkZXIpO1xufVxuXG4vLyBTZXQgdXAgYnVmZmVyIHV0aWxpdHkgYWNjb3JkaW5nIHRvIHRoZSBlbnZpcm9ubWVudFxuY29uZmlndXJlKCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/protobufjs/src/index-minimal.js\n");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/reader.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Reader;\n\nvar util      = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/protobufjs/src/reader.js\n");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/reader_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcmVhZGVyX2J1ZmZlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOztBQUVBO0FBQ0EsYUFBYSxtQkFBTyxDQUFDLHlEQUFVO0FBQy9COztBQUVBLFdBQVcsbUJBQU8sQ0FBQyxxRUFBZ0I7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3JlYWRlcl9idWZmZXIuanM/NTA4NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyUmVhZGVyO1xuXG4vLyBleHRlbmRzIFJlYWRlclxudmFyIFJlYWRlciA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKTtcbihCdWZmZXJSZWFkZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShSZWFkZXIucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBCdWZmZXJSZWFkZXI7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIHJlYWRlciBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgV2lyZSBmb3JtYXQgcmVhZGVyIHVzaW5nIG5vZGUgYnVmZmVycy5cbiAqIEBleHRlbmRzIFJlYWRlclxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIEJ1ZmZlciB0byByZWFkIGZyb21cbiAqL1xuZnVuY3Rpb24gQnVmZmVyUmVhZGVyKGJ1ZmZlcikge1xuICAgIFJlYWRlci5jYWxsKHRoaXMsIGJ1ZmZlcik7XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIGJ1ZmZlci5cbiAgICAgKiBAbmFtZSBCdWZmZXJSZWFkZXIjYnVmXG4gICAgICogQHR5cGUge0J1ZmZlcn1cbiAgICAgKi9cbn1cblxuQnVmZmVyUmVhZGVyLl9jb25maWd1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodXRpbC5CdWZmZXIpXG4gICAgICAgIEJ1ZmZlclJlYWRlci5wcm90b3R5cGUuX3NsaWNlID0gdXRpbC5CdWZmZXIucHJvdG90eXBlLnNsaWNlO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5CdWZmZXJSZWFkZXIucHJvdG90eXBlLnN0cmluZyA9IGZ1bmN0aW9uIHJlYWRfc3RyaW5nX2J1ZmZlcigpIHtcbiAgICB2YXIgbGVuID0gdGhpcy51aW50MzIoKTsgLy8gbW9kaWZpZXMgcG9zXG4gICAgcmV0dXJuIHRoaXMuYnVmLnV0ZjhTbGljZVxuICAgICAgICA/IHRoaXMuYnVmLnV0ZjhTbGljZSh0aGlzLnBvcywgdGhpcy5wb3MgPSBNYXRoLm1pbih0aGlzLnBvcyArIGxlbiwgdGhpcy5sZW4pKVxuICAgICAgICA6IHRoaXMuYnVmLnRvU3RyaW5nKFwidXRmLThcIiwgdGhpcy5wb3MsIHRoaXMucG9zID0gTWF0aC5taW4odGhpcy5wb3MgKyBsZW4sIHRoaXMubGVuKSk7XG59O1xuXG4vKipcbiAqIFJlYWRzIGEgc2VxdWVuY2Ugb2YgYnl0ZXMgcHJlY2VlZGVkIGJ5IGl0cyBsZW5ndGggYXMgYSB2YXJpbnQuXG4gKiBAbmFtZSBCdWZmZXJSZWFkZXIjYnl0ZXNcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0J1ZmZlcn0gVmFsdWUgcmVhZFxuICovXG5cbkJ1ZmZlclJlYWRlci5fY29uZmlndXJlKCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/protobufjs/src/reader_buffer.js\n");

/***/ }),

/***/ "./node_modules/protobufjs/src/roots.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/roots.js ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcm9vdHMuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yb290cy5qcz8xZjkzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLyoqXG4gKiBOYW1lZCByb290cy5cbiAqIFRoaXMgaXMgd2hlcmUgcGJqcyBzdG9yZXMgZ2VuZXJhdGVkIHN0cnVjdHVyZXMgKHRoZSBvcHRpb24gYC1yLCAtLXJvb3RgIHNwZWNpZmllcyBhIG5hbWUpLlxuICogQ2FuIGFsc28gYmUgdXNlZCBtYW51YWxseSB0byBtYWtlIHJvb3RzIGF2YWlsYWJsZSBhY2Nyb3NzIG1vZHVsZXMuXG4gKiBAbmFtZSByb290c1xuICogQHR5cGUge09iamVjdC48c3RyaW5nLFJvb3Q+fVxuICogQGV4YW1wbGVcbiAqIC8vIHBianMgLXIgbXlyb290IC1vIGNvbXBpbGVkLmpzIC4uLlxuICpcbiAqIC8vIGluIGFub3RoZXIgbW9kdWxlOlxuICogcmVxdWlyZShcIi4vY29tcGlsZWQuanNcIik7XG4gKlxuICogLy8gaW4gYW55IHN1YnNlcXVlbnQgbW9kdWxlOlxuICogdmFyIHJvb3QgPSBwcm90b2J1Zi5yb290c1tcIm15cm9vdFwiXTtcbiAqL1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/protobufjs/src/roots.js\n");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/src/rpc.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = __webpack_require__(/*! ./rpc/service */ \"./node_modules/protobufjs/src/rpc/service.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcnBjLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQ0FBaUMsc0JBQXNCO0FBQ3ZEO0FBQ0EsVUFBVTtBQUNWLFdBQVcsbUNBQW1DLFlBQVksSUFBSTtBQUM5RCxXQUFXLFlBQVk7QUFDdkIsV0FBVyxpQkFBaUI7QUFDNUIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0EsbUNBQW1DLGNBQWM7QUFDakQ7QUFDQSxVQUFVO0FBQ1YsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsaUJBQWlCO0FBQzVCLGFBQWE7QUFDYjs7QUFFQSxjQUFjLG1CQUFPLENBQUMsbUVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcnBjLmpzPzRjY2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogU3RyZWFtaW5nIFJQQyBoZWxwZXJzLlxuICogQG5hbWVzcGFjZVxuICovXG52YXIgcnBjID0gZXhwb3J0cztcblxuLyoqXG4gKiBSUEMgaW1wbGVtZW50YXRpb24gcGFzc2VkIHRvIHtAbGluayBTZXJ2aWNlI2NyZWF0ZX0gcGVyZm9ybWluZyBhIHNlcnZpY2UgcmVxdWVzdCBvbiBuZXR3b3JrIGxldmVsLCBpLmUuIGJ5IHV0aWxpemluZyBodHRwIHJlcXVlc3RzIG9yIHdlYnNvY2tldHMuXG4gKiBAdHlwZWRlZiBSUENJbXBsXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge01ldGhvZHxycGMuU2VydmljZU1ldGhvZDxNZXNzYWdlPHt9PixNZXNzYWdlPHt9Pj59IG1ldGhvZCBSZWZsZWN0ZWQgb3Igc3RhdGljIG1ldGhvZCBiZWluZyBjYWxsZWRcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gcmVxdWVzdERhdGEgUmVxdWVzdCBkYXRhXG4gKiBAcGFyYW0ge1JQQ0ltcGxDYWxsYmFja30gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAZXhhbXBsZVxuICogZnVuY3Rpb24gcnBjSW1wbChtZXRob2QsIHJlcXVlc3REYXRhLCBjYWxsYmFjaykge1xuICogICAgIGlmIChwcm90b2J1Zi51dGlsLmxjRmlyc3QobWV0aG9kLm5hbWUpICE9PSBcIm15TWV0aG9kXCIpIC8vIGNvbXBhdGlibGUgd2l0aCBzdGF0aWMgY29kZVxuICogICAgICAgICB0aHJvdyBFcnJvcihcIm5vIHN1Y2ggbWV0aG9kXCIpO1xuICogICAgIGFzeW5jaHJvbm91c2x5T2J0YWluQVJlc3BvbnNlKHJlcXVlc3REYXRhLCBmdW5jdGlvbihlcnIsIHJlc3BvbnNlRGF0YSkge1xuICogICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3BvbnNlRGF0YSk7XG4gKiAgICAgfSk7XG4gKiB9XG4gKi9cblxuLyoqXG4gKiBOb2RlLXN0eWxlIGNhbGxiYWNrIGFzIHVzZWQgYnkge0BsaW5rIFJQQ0ltcGx9LlxuICogQHR5cGVkZWYgUlBDSW1wbENhbGxiYWNrXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge0Vycm9yfG51bGx9IGVycm9yIEVycm9yLCBpZiBhbnksIG90aGVyd2lzZSBgbnVsbGBcbiAqIEBwYXJhbSB7VWludDhBcnJheXxudWxsfSBbcmVzcG9uc2VdIFJlc3BvbnNlIGRhdGEgb3IgYG51bGxgIHRvIHNpZ25hbCBlbmQgb2Ygc3RyZWFtLCBpZiB0aGVyZSBoYXNuJ3QgYmVlbiBhbiBlcnJvclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuXG5ycGMuU2VydmljZSA9IHJlcXVpcmUoXCIuL3JwYy9zZXJ2aWNlXCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/protobufjs/src/rpc.js\n");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc/service.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/rpc/service.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Service;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/protobufjs/src/rpc/service.js\n");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/longbits.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/util/longbits.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = LongBits;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/protobufjs/src/util/longbits.js\n");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/minimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/protobufjs/src/util/minimal.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"./node_modules/@protobufjs/aspromise/index.js\");\n\n// converts to / from base64 encoded strings\nutil.base64 = __webpack_require__(/*! @protobufjs/base64 */ \"./node_modules/@protobufjs/base64/index.js\");\n\n// base class of rpc.Service\nutil.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ \"./node_modules/@protobufjs/eventemitter/index.js\");\n\n// float handling accross browsers\nutil.float = __webpack_require__(/*! @protobufjs/float */ \"./node_modules/@protobufjs/float/index.js\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = __webpack_require__(/*! @protobufjs/inquire */ \"./node_modules/@protobufjs/inquire/index.js\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ \"./node_modules/@protobufjs/utf8/index.js\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = __webpack_require__(/*! @protobufjs/pool */ \"./node_modules/@protobufjs/pool/index.js\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = __webpack_require__(/*! ./longbits */ \"./node_modules/protobufjs/src/util/longbits.js\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof __webpack_require__.g !== \"undefined\"\n                   && __webpack_require__.g\n                   && __webpack_require__.g.process\n                   && __webpack_require__.g.process.versions\n                   && __webpack_require__.g.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && __webpack_require__.g\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/protobufjs/src/util/minimal.js\n");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/writer.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Writer;\n\nvar util      = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/protobufjs/src/writer.js\n");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/writer_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvd3JpdGVyX2J1ZmZlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOztBQUVBO0FBQ0EsYUFBYSxtQkFBTyxDQUFDLHlEQUFVO0FBQy9COztBQUVBLFdBQVcsbUJBQU8sQ0FBQyxxRUFBZ0I7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBOztBQUVBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGVBQWU7QUFDOUM7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvd3JpdGVyX2J1ZmZlci5qcz8yMGQ2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBCdWZmZXJXcml0ZXI7XG5cbi8vIGV4dGVuZHMgV3JpdGVyXG52YXIgV3JpdGVyID0gcmVxdWlyZShcIi4vd3JpdGVyXCIpO1xuKEJ1ZmZlcldyaXRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFdyaXRlci5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IEJ1ZmZlcldyaXRlcjtcblxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBidWZmZXIgd3JpdGVyIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCB3cml0ZXIgdXNpbmcgbm9kZSBidWZmZXJzLlxuICogQGV4dGVuZHMgV3JpdGVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQnVmZmVyV3JpdGVyKCkge1xuICAgIFdyaXRlci5jYWxsKHRoaXMpO1xufVxuXG5CdWZmZXJXcml0ZXIuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBBbGxvY2F0ZXMgYSBidWZmZXIgb2YgdGhlIHNwZWNpZmllZCBzaXplLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIEJ1ZmZlciBzaXplXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gQnVmZmVyXG4gICAgICovXG4gICAgQnVmZmVyV3JpdGVyLmFsbG9jID0gdXRpbC5fQnVmZmVyX2FsbG9jVW5zYWZlO1xuXG4gICAgQnVmZmVyV3JpdGVyLndyaXRlQnl0ZXNCdWZmZXIgPSB1dGlsLkJ1ZmZlciAmJiB1dGlsLkJ1ZmZlci5wcm90b3R5cGUgaW5zdGFuY2VvZiBVaW50OEFycmF5ICYmIHV0aWwuQnVmZmVyLnByb3RvdHlwZS5zZXQubmFtZSA9PT0gXCJzZXRcIlxuICAgICAgICA/IGZ1bmN0aW9uIHdyaXRlQnl0ZXNCdWZmZXJfc2V0KHZhbCwgYnVmLCBwb3MpIHtcbiAgICAgICAgICBidWYuc2V0KHZhbCwgcG9zKTsgLy8gZmFzdGVyIHRoYW4gY29weSAocmVxdWlyZXMgbm9kZSA+PSA0IHdoZXJlIEJ1ZmZlcnMgZXh0ZW5kIFVpbnQ4QXJyYXkgYW5kIHNldCBpcyBwcm9wZXJseSBpbmhlcml0ZWQpXG4gICAgICAgICAgLy8gYWxzbyB3b3JrcyBmb3IgcGxhaW4gYXJyYXkgdmFsdWVzXG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgOiBmdW5jdGlvbiB3cml0ZUJ5dGVzQnVmZmVyX2NvcHkodmFsLCBidWYsIHBvcykge1xuICAgICAgICAgIGlmICh2YWwuY29weSkgLy8gQnVmZmVyIHZhbHVlc1xuICAgICAgICAgICAgdmFsLmNvcHkoYnVmLCBwb3MsIDAsIHZhbC5sZW5ndGgpO1xuICAgICAgICAgIGVsc2UgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOykgLy8gcGxhaW4gYXJyYXkgdmFsdWVzXG4gICAgICAgICAgICBidWZbcG9zKytdID0gdmFsW2krK107XG4gICAgICAgIH07XG59O1xuXG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUuYnl0ZXMgPSBmdW5jdGlvbiB3cml0ZV9ieXRlc19idWZmZXIodmFsdWUpIHtcbiAgICBpZiAodXRpbC5pc1N0cmluZyh2YWx1ZSkpXG4gICAgICAgIHZhbHVlID0gdXRpbC5fQnVmZmVyX2Zyb20odmFsdWUsIFwiYmFzZTY0XCIpO1xuICAgIHZhciBsZW4gPSB2YWx1ZS5sZW5ndGggPj4+IDA7XG4gICAgdGhpcy51aW50MzIobGVuKTtcbiAgICBpZiAobGVuKVxuICAgICAgICB0aGlzLl9wdXNoKEJ1ZmZlcldyaXRlci53cml0ZUJ5dGVzQnVmZmVyLCBsZW4sIHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHdyaXRlU3RyaW5nQnVmZmVyKHZhbCwgYnVmLCBwb3MpIHtcbiAgICBpZiAodmFsLmxlbmd0aCA8IDQwKSAvLyBwbGFpbiBqcyBpcyBmYXN0ZXIgZm9yIHNob3J0IHN0cmluZ3MgKHByb2JhYmx5IGR1ZSB0byByZWR1bmRhbnQgYXNzZXJ0aW9ucylcbiAgICAgICAgdXRpbC51dGY4LndyaXRlKHZhbCwgYnVmLCBwb3MpO1xuICAgIGVsc2UgaWYgKGJ1Zi51dGY4V3JpdGUpXG4gICAgICAgIGJ1Zi51dGY4V3JpdGUodmFsLCBwb3MpO1xuICAgIGVsc2VcbiAgICAgICAgYnVmLndyaXRlKHZhbCwgcG9zKTtcbn1cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuQnVmZmVyV3JpdGVyLnByb3RvdHlwZS5zdHJpbmcgPSBmdW5jdGlvbiB3cml0ZV9zdHJpbmdfYnVmZmVyKHZhbHVlKSB7XG4gICAgdmFyIGxlbiA9IHV0aWwuQnVmZmVyLmJ5dGVMZW5ndGgodmFsdWUpO1xuICAgIHRoaXMudWludDMyKGxlbik7XG4gICAgaWYgKGxlbilcbiAgICAgICAgdGhpcy5fcHVzaCh3cml0ZVN0cmluZ0J1ZmZlciwgbGVuLCB2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogRmluaXNoZXMgdGhlIHdyaXRlIG9wZXJhdGlvbi5cbiAqIEBuYW1lIEJ1ZmZlcldyaXRlciNmaW5pc2hcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0J1ZmZlcn0gRmluaXNoZWQgYnVmZmVyXG4gKi9cblxuQnVmZmVyV3JpdGVyLl9jb25maWd1cmUoKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/protobufjs/src/writer_buffer.js\n");

/***/ }),

/***/ "./node_modules/zego-express-engine-webrtm/ZegoExpressWebRTM.js":
/*!**********************************************************************!*\
  !*** ./node_modules/zego-express-engine-webrtm/ZegoExpressWebRTM.js ***!
  \**********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("!function(e,t){if(true)module.exports=t(__webpack_require__(/*! protobufjs/minimal */ \"./node_modules/protobufjs/minimal.js\"));else { var n, r; }}(\"undefined\"!=typeof self?self:this,(function(e){return n=[function(e,t,n){\"use strict\";var r,o,i=(n=n(6)).Reader,s=n.Writer,a=n.util,c=n.roots.default||(n.roots.default={});function u(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function l(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function h(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function p(e){if(this.stream_info=[],this.stream_mix_info=[],this.trans_seqs=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function d(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function _(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function f(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function g(e){if(this.trans_seq_array=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function m(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function y(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function v(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function b(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function E(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function O(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function T(e){if(this.redirect_server=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function S(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function R(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function k(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function C(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function w(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function N(e){if(this.messages=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function I(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function M(e){if(this.messages=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function L(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function P(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function A(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function D(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function H(e){if(this.trans_seqs=[],this.user_trans_seqs=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function j(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function q(e){if(this.trans_seq_array=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function U(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function B(e){if(this.user_basic_list=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function x(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function G(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function V(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function z(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function F(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function W(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Z(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Y(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function K(e){if(this.stream_info=[],this.stream_mix_info=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function X(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function J(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Q(e){if(this.dst_userlist=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function $(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function ee(e){if(this.dst_userlist=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function te(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function ne(e){if(this.dst_userlist=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function re(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function oe(e){if(this.dst_userlist=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function ie(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function se(e){if(this.dst_userlist=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function ae(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function ce(e){if(this.dst_userlist=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function ue(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function le(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function he(e){if(this.msg_data=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function pe(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function de(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function _e(e){if(this.stream_info=[],this.stream_mix_info=[],this.trans_seqs=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function fe(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function ge(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function me(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function ye(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function ve(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function be(e){if(this.room_list=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Ee(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Oe(e){if(this.stream_list=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Te(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Se(e){if(this.trans_seq_array=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Re(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function ke(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Ce(e){if(this.fetch_array=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function we(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Ne(e){if(this.trans_fetch_results=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Ie(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Me(e){if(this.fetch_array=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Le(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Pe(e){if(this.trans_fetch_results=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Ae(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function De(e){if(this.msgs=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function He(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function je(e){if(this.msgs=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function qe(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Ue(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Be(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function xe(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Ge(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Ve(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function ze(e){if(this.user_list=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Fe(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function We(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Ze(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Ye(e){if(this.stream_id_list=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Ke(e){if(this.stream_info=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Xe(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Je(e){if(this.msg_data=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Qe(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function $e(e){if(this.msg_data=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function et(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function tt(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function nt(e){if(this.trans_array=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function rt(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}c.proto_switch=((n={}).CommonRsp=(u.prototype.rsp_head=null,u.create=function(e){return new u(e)},u.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.proto_switch.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),t},u.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.CommonRsp;e.pos<n;){var o=e.uint32();o>>>3==1?r.rsp_head=c.proto_switch.RspHead.decode(e,e.uint32()):e.skipType(7&o)}return r},u),n.RspHead=(l.prototype.code=0,l.prototype.message=\"\",l.create=function(e){return new l(e)},l.encode=function(e,t){return t=t||s.create(),null!=e.code&&Object.hasOwnProperty.call(e,\"code\")&&t.uint32(8).uint32(e.code),null!=e.message&&Object.hasOwnProperty.call(e,\"message\")&&t.uint32(18).string(e.message),t},l.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.RspHead;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.code=e.uint32();break;case 2:r.message=e.string();break;default:e.skipType(7&o)}}return r},l),n.LoginRoomReq=(h.prototype.app_id=0,h.prototype.id_name=a.newBuffer([]),h.prototype.device_id=\"\",h.prototype.term_type=0,h.prototype.net_type=0,h.prototype.sdk_ver=0,h.prototype.proto_ver=0,h.prototype.nick_name=a.newBuffer([]),h.prototype.client_stamp=a.newBuffer([]),h.prototype.crypt_version=0,h.prototype.k1_sign=a.newBuffer([]),h.prototype.login_token=a.newBuffer([]),h.prototype.relogin_token=a.newBuffer([]),h.prototype.role=0,h.prototype.liveroom_session_id=a.Long?a.Long.fromBits(0,0,!0):0,h.prototype.room_id=a.newBuffer([]),h.prototype.room_name=a.newBuffer([]),h.prototype.biz_type=0,h.prototype.room_create_flag=0,h.prototype.user_state_flag=0,h.prototype.lv_key=\"\",h.prototype.third_token=a.newBuffer([]),h.prototype.cluster_req=0,h.prototype.user_count_limit=0,h.prototype.relate_service=\"\",h.prototype.biz_version=\"\",h.prototype.login_logic=0,h.prototype.sdk_conn_type=0,h.create=function(e){return new h(e)},h.encode=function(e,t){return t=t||s.create(),null!=e.app_id&&Object.hasOwnProperty.call(e,\"app_id\")&&t.uint32(8).uint32(e.app_id),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(18).bytes(e.id_name),null!=e.device_id&&Object.hasOwnProperty.call(e,\"device_id\")&&t.uint32(26).string(e.device_id),null!=e.term_type&&Object.hasOwnProperty.call(e,\"term_type\")&&t.uint32(32).int32(e.term_type),null!=e.net_type&&Object.hasOwnProperty.call(e,\"net_type\")&&t.uint32(40).int32(e.net_type),null!=e.sdk_ver&&Object.hasOwnProperty.call(e,\"sdk_ver\")&&t.uint32(48).uint32(e.sdk_ver),null!=e.proto_ver&&Object.hasOwnProperty.call(e,\"proto_ver\")&&t.uint32(56).int32(e.proto_ver),null!=e.nick_name&&Object.hasOwnProperty.call(e,\"nick_name\")&&t.uint32(66).bytes(e.nick_name),null!=e.client_stamp&&Object.hasOwnProperty.call(e,\"client_stamp\")&&t.uint32(74).bytes(e.client_stamp),null!=e.crypt_version&&Object.hasOwnProperty.call(e,\"crypt_version\")&&t.uint32(80).uint32(e.crypt_version),null!=e.k1_sign&&Object.hasOwnProperty.call(e,\"k1_sign\")&&t.uint32(90).bytes(e.k1_sign),null!=e.login_token&&Object.hasOwnProperty.call(e,\"login_token\")&&t.uint32(98).bytes(e.login_token),null!=e.relogin_token&&Object.hasOwnProperty.call(e,\"relogin_token\")&&t.uint32(106).bytes(e.relogin_token),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(112).uint32(e.role),null!=e.liveroom_session_id&&Object.hasOwnProperty.call(e,\"liveroom_session_id\")&&t.uint32(120).uint64(e.liveroom_session_id),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(130).bytes(e.room_id),null!=e.room_name&&Object.hasOwnProperty.call(e,\"room_name\")&&t.uint32(138).bytes(e.room_name),null!=e.biz_type&&Object.hasOwnProperty.call(e,\"biz_type\")&&t.uint32(144).uint32(e.biz_type),null!=e.room_create_flag&&Object.hasOwnProperty.call(e,\"room_create_flag\")&&t.uint32(152).uint32(e.room_create_flag),null!=e.user_state_flag&&Object.hasOwnProperty.call(e,\"user_state_flag\")&&t.uint32(160).uint32(e.user_state_flag),null!=e.lv_key&&Object.hasOwnProperty.call(e,\"lv_key\")&&t.uint32(170).string(e.lv_key),null!=e.third_token&&Object.hasOwnProperty.call(e,\"third_token\")&&t.uint32(178).bytes(e.third_token),null!=e.cluster_req&&Object.hasOwnProperty.call(e,\"cluster_req\")&&t.uint32(184).uint32(e.cluster_req),null!=e.user_count_limit&&Object.hasOwnProperty.call(e,\"user_count_limit\")&&t.uint32(192).uint32(e.user_count_limit),null!=e.relate_service&&Object.hasOwnProperty.call(e,\"relate_service\")&&t.uint32(202).string(e.relate_service),null!=e.biz_version&&Object.hasOwnProperty.call(e,\"biz_version\")&&t.uint32(210).string(e.biz_version),null!=e.login_logic&&Object.hasOwnProperty.call(e,\"login_logic\")&&t.uint32(216).uint32(e.login_logic),null!=e.sdk_conn_type&&Object.hasOwnProperty.call(e,\"sdk_conn_type\")&&t.uint32(224).int32(e.sdk_conn_type),t},h.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.LoginRoomReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.app_id=e.uint32();break;case 2:r.id_name=e.bytes();break;case 3:r.device_id=e.string();break;case 4:r.term_type=e.int32();break;case 5:r.net_type=e.int32();break;case 6:r.sdk_ver=e.uint32();break;case 7:r.proto_ver=e.int32();break;case 8:r.nick_name=e.bytes();break;case 9:r.client_stamp=e.bytes();break;case 10:r.crypt_version=e.uint32();break;case 11:r.k1_sign=e.bytes();break;case 12:r.login_token=e.bytes();break;case 13:r.relogin_token=e.bytes();break;case 14:r.role=e.uint32();break;case 15:r.liveroom_session_id=e.uint64();break;case 16:r.room_id=e.bytes();break;case 17:r.room_name=e.bytes();break;case 18:r.biz_type=e.uint32();break;case 19:r.room_create_flag=e.uint32();break;case 20:r.user_state_flag=e.uint32();break;case 21:r.lv_key=e.string();break;case 22:r.third_token=e.bytes();break;case 23:r.cluster_req=e.uint32();break;case 24:r.user_count_limit=e.uint32();break;case 25:r.relate_service=e.string();break;case 26:r.biz_version=e.string();break;case 27:r.login_logic=e.uint32();break;case 28:r.sdk_conn_type=e.int32();break;default:e.skipType(7&o)}}return r},h),n.LoginRoomRsp=(p.prototype.rsp_head=null,p.prototype.room_id=a.newBuffer([]),p.prototype.heartbeat_interval=0,p.prototype.heartbeat_timeout=0,p.prototype.ret_timestamp=a.Long?a.Long.fromBits(0,0,!1):0,p.prototype.crypt_option=0,p.prototype.k2_sign=a.newBuffer([]),p.prototype.liveroom_session_id=a.Long?a.Long.fromBits(0,0,!0):0,p.prototype.liveroom_hb_interval=0,p.prototype.liveroom_hb_timeout=0,p.prototype.anchor_info=null,p.prototype.stream_seq=0,p.prototype.stream_info=a.emptyArray,p.prototype.stream_fetch_flag=0,p.prototype.lv_key=\"\",p.prototype.zp_key=\"\",p.prototype.online_count=0,p.prototype.bigim_time_window=0,p.prototype.dati_time_window=0,p.prototype.cluster_name=\"\",p.prototype.relogin_token=a.newBuffer([]),p.prototype.stream_mix_info=a.emptyArray,p.prototype.userlist_merge_timeout=0,p.prototype.userlist_interval=0,p.prototype.room_session_id=a.Long?a.Long.fromBits(0,0,!0):0,p.prototype.trans_seqs=a.emptyArray,p.prototype.stream_list_push_merge_timeout=0,p.prototype.stream_list_hb_wait_merge_time=0,p.prototype.trans_list_seq=0,p.prototype.token_remain_time=0,p.create=function(e){return new p(e)},p.encode=function(e,t){if(t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.proto_switch.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(18).bytes(e.room_id),null!=e.heartbeat_interval&&Object.hasOwnProperty.call(e,\"heartbeat_interval\")&&t.uint32(24).uint32(e.heartbeat_interval),null!=e.heartbeat_timeout&&Object.hasOwnProperty.call(e,\"heartbeat_timeout\")&&t.uint32(32).uint32(e.heartbeat_timeout),null!=e.ret_timestamp&&Object.hasOwnProperty.call(e,\"ret_timestamp\")&&t.uint32(40).int64(e.ret_timestamp),null!=e.crypt_option&&Object.hasOwnProperty.call(e,\"crypt_option\")&&t.uint32(48).uint32(e.crypt_option),null!=e.k2_sign&&Object.hasOwnProperty.call(e,\"k2_sign\")&&t.uint32(58).bytes(e.k2_sign),null!=e.liveroom_session_id&&Object.hasOwnProperty.call(e,\"liveroom_session_id\")&&t.uint32(64).uint64(e.liveroom_session_id),null!=e.liveroom_hb_interval&&Object.hasOwnProperty.call(e,\"liveroom_hb_interval\")&&t.uint32(72).uint32(e.liveroom_hb_interval),null!=e.liveroom_hb_timeout&&Object.hasOwnProperty.call(e,\"liveroom_hb_timeout\")&&t.uint32(80).uint32(e.liveroom_hb_timeout),null!=e.anchor_info&&Object.hasOwnProperty.call(e,\"anchor_info\")&&c.proto_switch.StAnchorInfo.encode(e.anchor_info,t.uint32(90).fork()).ldelim(),null!=e.stream_seq&&Object.hasOwnProperty.call(e,\"stream_seq\")&&t.uint32(96).uint32(e.stream_seq),null!=e.stream_info&&e.stream_info.length)for(var n=0;n<e.stream_info.length;++n)c.proto_switch.StStreamInfo.encode(e.stream_info[n],t.uint32(106).fork()).ldelim();if(null!=e.stream_fetch_flag&&Object.hasOwnProperty.call(e,\"stream_fetch_flag\")&&t.uint32(112).uint32(e.stream_fetch_flag),null!=e.lv_key&&Object.hasOwnProperty.call(e,\"lv_key\")&&t.uint32(122).string(e.lv_key),null!=e.zp_key&&Object.hasOwnProperty.call(e,\"zp_key\")&&t.uint32(130).string(e.zp_key),null!=e.online_count&&Object.hasOwnProperty.call(e,\"online_count\")&&t.uint32(136).uint32(e.online_count),null!=e.bigim_time_window&&Object.hasOwnProperty.call(e,\"bigim_time_window\")&&t.uint32(144).uint32(e.bigim_time_window),null!=e.dati_time_window&&Object.hasOwnProperty.call(e,\"dati_time_window\")&&t.uint32(152).uint32(e.dati_time_window),null!=e.cluster_name&&Object.hasOwnProperty.call(e,\"cluster_name\")&&t.uint32(162).string(e.cluster_name),null!=e.relogin_token&&Object.hasOwnProperty.call(e,\"relogin_token\")&&t.uint32(170).bytes(e.relogin_token),null!=e.stream_mix_info&&e.stream_mix_info.length)for(n=0;n<e.stream_mix_info.length;++n)c.proto_switch.StStreamInfo.encode(e.stream_mix_info[n],t.uint32(178).fork()).ldelim();if(null!=e.userlist_merge_timeout&&Object.hasOwnProperty.call(e,\"userlist_merge_timeout\")&&t.uint32(184).uint32(e.userlist_merge_timeout),null!=e.userlist_interval&&Object.hasOwnProperty.call(e,\"userlist_interval\")&&t.uint32(192).uint32(e.userlist_interval),null!=e.room_session_id&&Object.hasOwnProperty.call(e,\"room_session_id\")&&t.uint32(200).uint64(e.room_session_id),null!=e.trans_seqs&&e.trans_seqs.length)for(n=0;n<e.trans_seqs.length;++n)c.proto_switch.StTransInfo.encode(e.trans_seqs[n],t.uint32(210).fork()).ldelim();return null!=e.stream_list_push_merge_timeout&&Object.hasOwnProperty.call(e,\"stream_list_push_merge_timeout\")&&t.uint32(216).uint32(e.stream_list_push_merge_timeout),null!=e.stream_list_hb_wait_merge_time&&Object.hasOwnProperty.call(e,\"stream_list_hb_wait_merge_time\")&&t.uint32(224).uint32(e.stream_list_hb_wait_merge_time),null!=e.trans_list_seq&&Object.hasOwnProperty.call(e,\"trans_list_seq\")&&t.uint32(232).uint32(e.trans_list_seq),null!=e.token_remain_time&&Object.hasOwnProperty.call(e,\"token_remain_time\")&&t.uint32(240).uint32(e.token_remain_time),t},p.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.LoginRoomRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.proto_switch.RspHead.decode(e,e.uint32());break;case 2:r.room_id=e.bytes();break;case 3:r.heartbeat_interval=e.uint32();break;case 4:r.heartbeat_timeout=e.uint32();break;case 5:r.ret_timestamp=e.int64();break;case 6:r.crypt_option=e.uint32();break;case 7:r.k2_sign=e.bytes();break;case 8:r.liveroom_session_id=e.uint64();break;case 9:r.liveroom_hb_interval=e.uint32();break;case 10:r.liveroom_hb_timeout=e.uint32();break;case 11:r.anchor_info=c.proto_switch.StAnchorInfo.decode(e,e.uint32());break;case 12:r.stream_seq=e.uint32();break;case 13:r.stream_info&&r.stream_info.length||(r.stream_info=[]),r.stream_info.push(c.proto_switch.StStreamInfo.decode(e,e.uint32()));break;case 14:r.stream_fetch_flag=e.uint32();break;case 15:r.lv_key=e.string();break;case 16:r.zp_key=e.string();break;case 17:r.online_count=e.uint32();break;case 18:r.bigim_time_window=e.uint32();break;case 19:r.dati_time_window=e.uint32();break;case 20:r.cluster_name=e.string();break;case 21:r.relogin_token=e.bytes();break;case 22:r.stream_mix_info&&r.stream_mix_info.length||(r.stream_mix_info=[]),r.stream_mix_info.push(c.proto_switch.StStreamInfo.decode(e,e.uint32()));break;case 23:r.userlist_merge_timeout=e.uint32();break;case 24:r.userlist_interval=e.uint32();break;case 25:r.room_session_id=e.uint64();break;case 26:r.trans_seqs&&r.trans_seqs.length||(r.trans_seqs=[]),r.trans_seqs.push(c.proto_switch.StTransInfo.decode(e,e.uint32()));break;case 27:r.stream_list_push_merge_timeout=e.uint32();break;case 28:r.stream_list_hb_wait_merge_time=e.uint32();break;case 29:r.trans_list_seq=e.uint32();break;case 30:r.token_remain_time=e.uint32();break;default:e.skipType(7&o)}}return r},p),n.StAnchorInfo=(d.prototype.anchor_id_name=a.newBuffer([]),d.prototype.anchor_id=a.Long?a.Long.fromBits(0,0,!0):0,d.prototype.anchor_nick_name=a.newBuffer([]),d.create=function(e){return new d(e)},d.encode=function(e,t){return t=t||s.create(),null!=e.anchor_id_name&&Object.hasOwnProperty.call(e,\"anchor_id_name\")&&t.uint32(10).bytes(e.anchor_id_name),null!=e.anchor_id&&Object.hasOwnProperty.call(e,\"anchor_id\")&&t.uint32(16).uint64(e.anchor_id),null!=e.anchor_nick_name&&Object.hasOwnProperty.call(e,\"anchor_nick_name\")&&t.uint32(26).bytes(e.anchor_nick_name),t},d.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.StAnchorInfo;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.anchor_id_name=e.bytes();break;case 2:r.anchor_id=e.uint64();break;case 3:r.anchor_nick_name=e.bytes();break;default:e.skipType(7&o)}}return r},d),n.StStreamInfo=(_.prototype.stream_id=a.newBuffer([]),_.prototype.stream_sid=\"\",_.prototype.id_name=a.newBuffer([]),_.prototype.nick_name=a.newBuffer([]),_.prototype.create_time=a.Long?a.Long.fromBits(0,0,!1):0,_.prototype.extra_info=a.newBuffer([]),_.prototype.title=a.newBuffer([]),_.prototype.stream_ver=0,_.prototype.stream_attr=a.newBuffer([]),_.prototype.stream_src=0,_.prototype.stream_state=0,_.prototype.stream_type=0,_.prototype.stream_nid=0,_.create=function(e){return new _(e)},_.encode=function(e,t){return t=t||s.create(),null!=e.stream_id&&Object.hasOwnProperty.call(e,\"stream_id\")&&t.uint32(10).bytes(e.stream_id),null!=e.stream_sid&&Object.hasOwnProperty.call(e,\"stream_sid\")&&t.uint32(18).string(e.stream_sid),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(26).bytes(e.id_name),null!=e.nick_name&&Object.hasOwnProperty.call(e,\"nick_name\")&&t.uint32(34).bytes(e.nick_name),null!=e.create_time&&Object.hasOwnProperty.call(e,\"create_time\")&&t.uint32(41).fixed64(e.create_time),null!=e.extra_info&&Object.hasOwnProperty.call(e,\"extra_info\")&&t.uint32(50).bytes(e.extra_info),null!=e.title&&Object.hasOwnProperty.call(e,\"title\")&&t.uint32(58).bytes(e.title),null!=e.stream_ver&&Object.hasOwnProperty.call(e,\"stream_ver\")&&t.uint32(64).uint32(e.stream_ver),null!=e.stream_attr&&Object.hasOwnProperty.call(e,\"stream_attr\")&&t.uint32(74).bytes(e.stream_attr),null!=e.stream_src&&Object.hasOwnProperty.call(e,\"stream_src\")&&t.uint32(80).uint32(e.stream_src),null!=e.stream_state&&Object.hasOwnProperty.call(e,\"stream_state\")&&t.uint32(88).uint32(e.stream_state),null!=e.stream_type&&Object.hasOwnProperty.call(e,\"stream_type\")&&t.uint32(96).uint32(e.stream_type),null!=e.stream_nid&&Object.hasOwnProperty.call(e,\"stream_nid\")&&t.uint32(104).uint32(e.stream_nid),t},_.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.StStreamInfo;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.stream_id=e.bytes();break;case 2:r.stream_sid=e.string();break;case 3:r.id_name=e.bytes();break;case 4:r.nick_name=e.bytes();break;case 5:r.create_time=e.fixed64();break;case 6:r.extra_info=e.bytes();break;case 7:r.title=e.bytes();break;case 8:r.stream_ver=e.uint32();break;case 9:r.stream_attr=e.bytes();break;case 10:r.stream_src=e.uint32();break;case 11:r.stream_state=e.uint32();break;case 12:r.stream_type=e.uint32();break;case 13:r.stream_nid=e.uint32();break;default:e.skipType(7&o)}}return r},_),n.StTransSeqInfo=(f.prototype.trans_type=a.newBuffer([]),f.prototype.trans_seq=0,f.create=function(e){return new f(e)},f.encode=function(e,t){return t=t||s.create(),null!=e.trans_type&&Object.hasOwnProperty.call(e,\"trans_type\")&&t.uint32(10).bytes(e.trans_type),null!=e.trans_seq&&Object.hasOwnProperty.call(e,\"trans_seq\")&&t.uint32(16).uint32(e.trans_seq),t},f.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.StTransSeqInfo;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.trans_type=e.bytes();break;case 2:r.trans_seq=e.uint32();break;default:e.skipType(7&o)}}return r},f),n.StTransInfo=(g.prototype.trans_channel=a.newBuffer([]),g.prototype.trans_seq_array=a.emptyArray,g.create=function(e){return new g(e)},g.encode=function(e,t){if(t=t||s.create(),null!=e.trans_channel&&Object.hasOwnProperty.call(e,\"trans_channel\")&&t.uint32(10).bytes(e.trans_channel),null!=e.trans_seq_array&&e.trans_seq_array.length)for(var n=0;n<e.trans_seq_array.length;++n)c.proto_switch.StTransSeqInfo.encode(e.trans_seq_array[n],t.uint32(18).fork()).ldelim();return t},g.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.StTransInfo;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.trans_channel=e.bytes();break;case 2:r.trans_seq_array&&r.trans_seq_array.length||(r.trans_seq_array=[]),r.trans_seq_array.push(c.proto_switch.StTransSeqInfo.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},g),n.LogoutRoomReq=(m.prototype.logout_code=0,m.prototype.logout_check=a.newBuffer([]),m.prototype.liveroom_session_id=a.Long?a.Long.fromBits(0,0,!0):0,m.prototype.room_id=a.newBuffer([]),m.prototype.role=0,m.prototype.nickname=a.newBuffer([]),m.prototype.logout_logic=0,m.create=function(e){return new m(e)},m.encode=function(e,t){return t=t||s.create(),null!=e.logout_code&&Object.hasOwnProperty.call(e,\"logout_code\")&&t.uint32(8).uint32(e.logout_code),null!=e.logout_check&&Object.hasOwnProperty.call(e,\"logout_check\")&&t.uint32(18).bytes(e.logout_check),null!=e.liveroom_session_id&&Object.hasOwnProperty.call(e,\"liveroom_session_id\")&&t.uint32(24).uint64(e.liveroom_session_id),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(34).bytes(e.room_id),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(40).uint32(e.role),null!=e.nickname&&Object.hasOwnProperty.call(e,\"nickname\")&&t.uint32(50).bytes(e.nickname),null!=e.logout_logic&&Object.hasOwnProperty.call(e,\"logout_logic\")&&t.uint32(56).uint32(e.logout_logic),t},m.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.LogoutRoomReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.logout_code=e.uint32();break;case 2:r.logout_check=e.bytes();break;case 3:r.liveroom_session_id=e.uint64();break;case 4:r.room_id=e.bytes();break;case 5:r.role=e.uint32();break;case 6:r.nickname=e.bytes();break;case 7:r.logout_logic=e.uint32();break;default:e.skipType(7&o)}}return r},m),n.LogoutRoomRsp=(y.prototype.rsp_head=null,y.create=function(e){return new y(e)},y.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.proto_switch.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),t},y.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.LogoutRoomRsp;e.pos<n;){var o=e.uint32();o>>>3==1?r.rsp_head=c.proto_switch.RspHead.decode(e,e.uint32()):e.skipType(7&o)}return r},y),n.TcpHbReq=(v.prototype.id_name=a.newBuffer([]),v.create=function(e){return new v(e)},v.encode=function(e,t){return t=t||s.create(),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(10).bytes(e.id_name),t},v.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.TcpHbReq;e.pos<n;){var o=e.uint32();o>>>3==1?r.id_name=e.bytes():e.skipType(7&o)}return r},v),n.TcpHbRsp=(b.prototype.rsp_head=null,b.prototype.heartbeat_interval=0,b.prototype.heartbeat_timeout=0,b.prototype.server_timestamp=a.Long?a.Long.fromBits(0,0,!1):0,b.create=function(e){return new b(e)},b.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.proto_switch.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.heartbeat_interval&&Object.hasOwnProperty.call(e,\"heartbeat_interval\")&&t.uint32(16).uint32(e.heartbeat_interval),null!=e.heartbeat_timeout&&Object.hasOwnProperty.call(e,\"heartbeat_timeout\")&&t.uint32(24).uint32(e.heartbeat_timeout),null!=e.server_timestamp&&Object.hasOwnProperty.call(e,\"server_timestamp\")&&t.uint32(32).int64(e.server_timestamp),t},b.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.TcpHbRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.proto_switch.RspHead.decode(e,e.uint32());break;case 2:r.heartbeat_interval=e.uint32();break;case 3:r.heartbeat_timeout=e.uint32();break;case 4:r.server_timestamp=e.int64();break;default:e.skipType(7&o)}}return r},b),n.TermType=(o={},(r=Object.create(o))[o[0]=\"TT_NONE\"]=0,r[o[1]=\"TT_PC\"]=1,r[o[2]=\"TT_IOS\"]=2,r[o[3]=\"TT_ANDROID\"]=3,r[o[4]=\"TT_MAC\"]=4,r[o[5]=\"TT_LINUX\"]=5,r[o[6]=\"TT_WEB\"]=6,r[o[7]=\"TT_MINIPROGRAM\"]=7,r[o[32]=\"TT_UNKNOWN\"]=32,r),n.NetType=(o={},(r=Object.create(o))[o[0]=\"NT_NONE\"]=0,r[o[1]=\"NT_LINE\"]=1,r[o[2]=\"NT_WIFI\"]=2,r[o[3]=\"NT_2G\"]=3,r[o[4]=\"NT_3G\"]=4,r[o[5]=\"NT_4G\"]=5,r[o[32]=\"NT_UNKNOWN\"]=32,r),n.ProductType=(o={},(r=Object.create(o))[o[0]=\"PRODUCT_TYPE_NONE\"]=0,r[o[1]=\"PRODUCT_TYPE_LIVEROOM\"]=1,r[o[2]=\"PRODUCT_TYPE_IM\"]=2,r),n.LiveroomProtoVersion=(o={},(r=Object.create(o))[o[0]=\"PROTO_VERSION_NONE\"]=0,r[o[131072]=\"RPOTO_V020000\"]=131072,r),n.SdkConnType=(o={},(r=Object.create(o))[o[0]=\"SdkConnType_None\"]=0,r[o[1]=\"SdkConnType_Tcp\"]=1,r[o[2]=\"SdkConnType_Websocket\"]=2,r),n.Header=(E.prototype.cmd=\"\",E.prototype.seq=0,E.prototype.timestamp=a.Long?a.Long.fromBits(0,0,!1):0,E.prototype.app_id=0,E.prototype.user_id=\"\",E.prototype.session_id=a.Long?a.Long.fromBits(0,0,!1):0,E.prototype.user_nid=a.Long?a.Long.fromBits(0,0,!1):0,E.prototype.controls=a.newBuffer([]),E.prototype.product=0,E.prototype.flags=a.newBuffer([]),E.create=function(e){return new E(e)},E.encode=function(e,t){return t=t||s.create(),null!=e.cmd&&Object.hasOwnProperty.call(e,\"cmd\")&&t.uint32(10).string(e.cmd),null!=e.seq&&Object.hasOwnProperty.call(e,\"seq\")&&t.uint32(16).uint32(e.seq),null!=e.timestamp&&Object.hasOwnProperty.call(e,\"timestamp\")&&t.uint32(24).int64(e.timestamp),null!=e.app_id&&Object.hasOwnProperty.call(e,\"app_id\")&&t.uint32(32).uint32(e.app_id),null!=e.user_id&&Object.hasOwnProperty.call(e,\"user_id\")&&t.uint32(42).string(e.user_id),null!=e.session_id&&Object.hasOwnProperty.call(e,\"session_id\")&&t.uint32(48).int64(e.session_id),null!=e.user_nid&&Object.hasOwnProperty.call(e,\"user_nid\")&&t.uint32(56).int64(e.user_nid),null!=e.controls&&Object.hasOwnProperty.call(e,\"controls\")&&t.uint32(66).bytes(e.controls),null!=e.product&&Object.hasOwnProperty.call(e,\"product\")&&t.uint32(72).int32(e.product),null!=e.flags&&Object.hasOwnProperty.call(e,\"flags\")&&t.uint32(82).bytes(e.flags),t},E.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.Header;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.cmd=e.string();break;case 2:r.seq=e.uint32();break;case 3:r.timestamp=e.int64();break;case 4:r.app_id=e.uint32();break;case 5:r.user_id=e.string();break;case 6:r.session_id=e.int64();break;case 7:r.user_nid=e.int64();break;case 8:r.controls=e.bytes();break;case 9:r.product=e.int32();break;case 10:r.flags=e.bytes();break;default:e.skipType(7&o)}}return r},E),n.PushKickout=(O.prototype.reason=0,O.prototype.message=\"\",O.prototype.need_relogin=0,O.create=function(e){return new O(e)},O.encode=function(e,t){return t=t||s.create(),null!=e.reason&&Object.hasOwnProperty.call(e,\"reason\")&&t.uint32(8).uint32(e.reason),null!=e.message&&Object.hasOwnProperty.call(e,\"message\")&&t.uint32(18).string(e.message),null!=e.need_relogin&&Object.hasOwnProperty.call(e,\"need_relogin\")&&t.uint32(24).uint32(e.need_relogin),t},O.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.PushKickout;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.reason=e.uint32();break;case 2:r.message=e.string();break;case 3:r.need_relogin=e.uint32();break;default:e.skipType(7&o)}}return r},O),n.PushRedirect2Sdk=(T.prototype.redirect_server=a.emptyArray,T.create=function(e){return new T(e)},T.encode=function(e,t){if(t=t||s.create(),null!=e.redirect_server&&e.redirect_server.length)for(var n=0;n<e.redirect_server.length;++n)t.uint32(10).string(e.redirect_server[n]);return t},T.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.PushRedirect2Sdk;e.pos<n;){var o=e.uint32();o>>>3==1?(r.redirect_server&&r.redirect_server.length||(r.redirect_server=[]),r.redirect_server.push(e.string())):e.skipType(7&o)}return r},T),n.PushReq=(S.prototype.head=null,S.prototype.msg_body=a.newBuffer([]),S.create=function(e){return new S(e)},S.encode=function(e,t){return t=t||s.create(),null!=e.head&&Object.hasOwnProperty.call(e,\"head\")&&c.proto_switch.PushReqHead.encode(e.head,t.uint32(10).fork()).ldelim(),null!=e.msg_body&&Object.hasOwnProperty.call(e,\"msg_body\")&&t.uint32(18).bytes(e.msg_body),t},S.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.PushReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.head=c.proto_switch.PushReqHead.decode(e,e.uint32());break;case 2:r.msg_body=e.bytes();break;default:e.skipType(7&o)}}return r},S),n.PushReqHead=(R.prototype.sub_cmd=\"\",R.prototype.sender_user_id=\"\",R.prototype.qos_flag=0,R.prototype.msg_id=\"\",R.prototype.send_time=a.Long?a.Long.fromBits(0,0,!1):0,R.prototype.room_id=a.newBuffer([]),R.prototype.sender_user_nid=a.Long?a.Long.fromBits(0,0,!0):0,R.create=function(e){return new R(e)},R.encode=function(e,t){return t=t||s.create(),null!=e.sub_cmd&&Object.hasOwnProperty.call(e,\"sub_cmd\")&&t.uint32(10).string(e.sub_cmd),null!=e.sender_user_id&&Object.hasOwnProperty.call(e,\"sender_user_id\")&&t.uint32(18).string(e.sender_user_id),null!=e.qos_flag&&Object.hasOwnProperty.call(e,\"qos_flag\")&&t.uint32(24).uint32(e.qos_flag),null!=e.msg_id&&Object.hasOwnProperty.call(e,\"msg_id\")&&t.uint32(34).string(e.msg_id),null!=e.send_time&&Object.hasOwnProperty.call(e,\"send_time\")&&t.uint32(40).int64(e.send_time),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(50).bytes(e.room_id),null!=e.sender_user_nid&&Object.hasOwnProperty.call(e,\"sender_user_nid\")&&t.uint32(56).uint64(e.sender_user_nid),t},R.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.PushReqHead;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.sub_cmd=e.string();break;case 2:r.sender_user_id=e.string();break;case 3:r.qos_flag=e.uint32();break;case 4:r.msg_id=e.string();break;case 5:r.send_time=e.int64();break;case 6:r.room_id=e.bytes();break;case 7:r.sender_user_nid=e.uint64();break;default:e.skipType(7&o)}}return r},R),n.PushRsp=(k.prototype.code=0,k.prototype.message=\"\",k.prototype.sub_cmd=\"\",k.prototype.msg_id=\"\",k.prototype.server_send_time=a.Long?a.Long.fromBits(0,0,!1):0,k.create=function(e){return new k(e)},k.encode=function(e,t){return t=t||s.create(),null!=e.code&&Object.hasOwnProperty.call(e,\"code\")&&t.uint32(8).uint32(e.code),null!=e.message&&Object.hasOwnProperty.call(e,\"message\")&&t.uint32(18).string(e.message),null!=e.sub_cmd&&Object.hasOwnProperty.call(e,\"sub_cmd\")&&t.uint32(26).string(e.sub_cmd),null!=e.msg_id&&Object.hasOwnProperty.call(e,\"msg_id\")&&t.uint32(34).string(e.msg_id),null!=e.server_send_time&&Object.hasOwnProperty.call(e,\"server_send_time\")&&t.uint32(40).int64(e.server_send_time),t},k.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.PushRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.code=e.uint32();break;case 2:r.message=e.string();break;case 3:r.sub_cmd=e.string();break;case 4:r.msg_id=e.string();break;case 5:r.server_send_time=e.int64();break;default:e.skipType(7&o)}}return r},k),n.MergePushHead=(C.prototype.qos_flag=0,C.prototype.send_time=a.Long?a.Long.fromBits(0,0,!1):0,C.prototype.room_id=a.newBuffer([]),C.create=function(e){return new C(e)},C.encode=function(e,t){return t=t||s.create(),null!=e.qos_flag&&Object.hasOwnProperty.call(e,\"qos_flag\")&&t.uint32(8).uint32(e.qos_flag),null!=e.send_time&&Object.hasOwnProperty.call(e,\"send_time\")&&t.uint32(16).int64(e.send_time),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(26).bytes(e.room_id),t},C.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.MergePushHead;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.qos_flag=e.uint32();break;case 2:r.send_time=e.int64();break;case 3:r.room_id=e.bytes();break;default:e.skipType(7&o)}}return r},C),n.MergePushInfo=(w.prototype.sub_cmd=\"\",w.prototype.sub_seq=0,w.prototype.sender_nid=a.Long?a.Long.fromBits(0,0,!0):0,w.prototype.msg_id=a.newBuffer([]),w.prototype.msg_body=a.newBuffer([]),w.prototype.msg_timestamp=a.Long?a.Long.fromBits(0,0,!1):0,w.create=function(e){return new w(e)},w.encode=function(e,t){return t=t||s.create(),null!=e.sub_cmd&&Object.hasOwnProperty.call(e,\"sub_cmd\")&&t.uint32(10).string(e.sub_cmd),null!=e.sub_seq&&Object.hasOwnProperty.call(e,\"sub_seq\")&&t.uint32(16).uint32(e.sub_seq),null!=e.sender_nid&&Object.hasOwnProperty.call(e,\"sender_nid\")&&t.uint32(24).uint64(e.sender_nid),null!=e.msg_id&&Object.hasOwnProperty.call(e,\"msg_id\")&&t.uint32(34).bytes(e.msg_id),null!=e.msg_body&&Object.hasOwnProperty.call(e,\"msg_body\")&&t.uint32(42).bytes(e.msg_body),null!=e.msg_timestamp&&Object.hasOwnProperty.call(e,\"msg_timestamp\")&&t.uint32(48).int64(e.msg_timestamp),t},w.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.MergePushInfo;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.sub_cmd=e.string();break;case 2:r.sub_seq=e.uint32();break;case 3:r.sender_nid=e.uint64();break;case 4:r.msg_id=e.bytes();break;case 5:r.msg_body=e.bytes();break;case 6:r.msg_timestamp=e.int64();break;default:e.skipType(7&o)}}return r},w),n.CmdMergePushReq=(N.prototype.head=null,N.prototype.messages=a.emptyArray,N.create=function(e){return new N(e)},N.encode=function(e,t){if(t=t||s.create(),null!=e.head&&Object.hasOwnProperty.call(e,\"head\")&&c.proto_switch.MergePushHead.encode(e.head,t.uint32(10).fork()).ldelim(),null!=e.messages&&e.messages.length)for(var n=0;n<e.messages.length;++n)c.proto_switch.MergePushInfo.encode(e.messages[n],t.uint32(18).fork()).ldelim();return t},N.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.CmdMergePushReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.head=c.proto_switch.MergePushHead.decode(e,e.uint32());break;case 2:r.messages&&r.messages.length||(r.messages=[]),r.messages.push(c.proto_switch.MergePushInfo.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},N),n.CmdMergePushRspInfo=(I.prototype.sub_cmd=\"\",I.prototype.sub_seq=0,I.prototype.msg_id=a.newBuffer([]),I.create=function(e){return new I(e)},I.encode=function(e,t){return t=t||s.create(),null!=e.sub_cmd&&Object.hasOwnProperty.call(e,\"sub_cmd\")&&t.uint32(10).string(e.sub_cmd),null!=e.sub_seq&&Object.hasOwnProperty.call(e,\"sub_seq\")&&t.uint32(16).uint32(e.sub_seq),null!=e.msg_id&&Object.hasOwnProperty.call(e,\"msg_id\")&&t.uint32(26).bytes(e.msg_id),t},I.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.CmdMergePushRspInfo;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.sub_cmd=e.string();break;case 2:r.sub_seq=e.uint32();break;case 3:r.msg_id=e.bytes();break;default:e.skipType(7&o)}}return r},I),n.CmdMergePushRsp=(M.prototype.messages=a.emptyArray,M.create=function(e){return new M(e)},M.encode=function(e,t){if(t=t||s.create(),null!=e.messages&&e.messages.length)for(var n=0;n<e.messages.length;++n)c.proto_switch.CmdMergePushRspInfo.encode(e.messages[n],t.uint32(10).fork()).ldelim();return t},M.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.proto_switch.CmdMergePushRsp;e.pos<n;){var o=e.uint32();o>>>3==1?(r.messages&&r.messages.length||(r.messages=[]),r.messages.push(c.proto_switch.CmdMergePushRspInfo.decode(e,e.uint32()))):e.skipType(7&o)}return r},M),n),c.liveroom_cs=((o={}).ReqHead=(L.prototype.room_id=\"\",L.prototype.user_session_id=a.Long?a.Long.fromBits(0,0,!0):0,L.prototype.room_session_id=a.Long?a.Long.fromBits(0,0,!0):0,L.create=function(e){return new L(e)},L.encode=function(e,t){return t=t||s.create(),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(10).string(e.room_id),null!=e.user_session_id&&Object.hasOwnProperty.call(e,\"user_session_id\")&&t.uint32(16).uint64(e.user_session_id),null!=e.room_session_id&&Object.hasOwnProperty.call(e,\"room_session_id\")&&t.uint32(24).uint64(e.room_session_id),t},L.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.ReqHead;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.room_id=e.string();break;case 2:r.user_session_id=e.uint64();break;case 3:r.room_session_id=e.uint64();break;default:e.skipType(7&o)}}return r},L),o.RspHead=(P.prototype.code=0,P.prototype.message=\"\",P.create=function(e){return new P(e)},P.encode=function(e,t){return t=t||s.create(),null!=e.code&&Object.hasOwnProperty.call(e,\"code\")&&t.uint32(8).uint32(e.code),null!=e.message&&Object.hasOwnProperty.call(e,\"message\")&&t.uint32(18).string(e.message),t},P.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.RspHead;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.code=e.uint32();break;case 2:r.message=e.string();break;default:e.skipType(7&o)}}return r},P),o.CommonRsp=(A.prototype.rsp_head=null,A.create=function(e){return new A(e)},A.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),t},A.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.CommonRsp;e.pos<n;){var o=e.uint32();o>>>3==1?r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32()):e.skipType(7&o)}return r},A),o.HbReq=(D.prototype.req_head=null,D.prototype.role=0,D.prototype.lv_key=\"\",D.create=function(e){return new D(e)},D.encode=function(e,t){return t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(16).uint32(e.role),null!=e.lv_key&&Object.hasOwnProperty.call(e,\"lv_key\")&&t.uint32(26).string(e.lv_key),t},D.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.HbReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.role=e.uint32();break;case 3:r.lv_key=e.string();break;default:e.skipType(7&o)}}return r},D),o.HbRsp=(H.prototype.rsp_head=null,H.prototype.ret_timestamp=a.Long?a.Long.fromBits(0,0,!1):0,H.prototype.hb_interval=0,H.prototype.hb_timeout=0,H.prototype.stream_seq=0,H.prototype.user_seq=a.Long?a.Long.fromBits(0,0,!1):0,H.prototype.online_count=0,H.prototype.bigim_time_window=0,H.prototype.dati_time_window=a.Long?a.Long.fromBits(0,0,!1):0,H.prototype.trans_seqs=a.emptyArray,H.prototype.user_trans_seqs=a.emptyArray,H.prototype.StreamRefresh=0,H.prototype.trans_list_seq=0,H.create=function(e){return new H(e)},H.encode=function(e,t){if(t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.ret_timestamp&&Object.hasOwnProperty.call(e,\"ret_timestamp\")&&t.uint32(16).int64(e.ret_timestamp),null!=e.hb_interval&&Object.hasOwnProperty.call(e,\"hb_interval\")&&t.uint32(24).uint32(e.hb_interval),null!=e.hb_timeout&&Object.hasOwnProperty.call(e,\"hb_timeout\")&&t.uint32(32).uint32(e.hb_timeout),null!=e.stream_seq&&Object.hasOwnProperty.call(e,\"stream_seq\")&&t.uint32(40).uint32(e.stream_seq),null!=e.user_seq&&Object.hasOwnProperty.call(e,\"user_seq\")&&t.uint32(48).int64(e.user_seq),null!=e.online_count&&Object.hasOwnProperty.call(e,\"online_count\")&&t.uint32(56).uint32(e.online_count),null!=e.bigim_time_window&&Object.hasOwnProperty.call(e,\"bigim_time_window\")&&t.uint32(64).uint32(e.bigim_time_window),null!=e.dati_time_window&&Object.hasOwnProperty.call(e,\"dati_time_window\")&&t.uint32(72).int64(e.dati_time_window),null!=e.trans_seqs&&e.trans_seqs.length)for(var n=0;n<e.trans_seqs.length;++n)c.liveroom_cs.StTransChannelSeq.encode(e.trans_seqs[n],t.uint32(82).fork()).ldelim();if(null!=e.user_trans_seqs&&e.user_trans_seqs.length)for(n=0;n<e.user_trans_seqs.length;++n)c.liveroom_cs.StTransChannelSeq.encode(e.user_trans_seqs[n],t.uint32(90).fork()).ldelim();return null!=e.StreamRefresh&&Object.hasOwnProperty.call(e,\"StreamRefresh\")&&t.uint32(96).uint32(e.StreamRefresh),null!=e.trans_list_seq&&Object.hasOwnProperty.call(e,\"trans_list_seq\")&&t.uint32(104).uint32(e.trans_list_seq),t},H.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.HbRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.ret_timestamp=e.int64();break;case 3:r.hb_interval=e.uint32();break;case 4:r.hb_timeout=e.uint32();break;case 5:r.stream_seq=e.uint32();break;case 6:r.user_seq=e.int64();break;case 7:r.online_count=e.uint32();break;case 8:r.bigim_time_window=e.uint32();break;case 9:r.dati_time_window=e.int64();break;case 10:r.trans_seqs&&r.trans_seqs.length||(r.trans_seqs=[]),r.trans_seqs.push(c.liveroom_cs.StTransChannelSeq.decode(e,e.uint32()));break;case 11:r.user_trans_seqs&&r.user_trans_seqs.length||(r.user_trans_seqs=[]),r.user_trans_seqs.push(c.liveroom_cs.StTransChannelSeq.decode(e,e.uint32()));break;case 12:r.StreamRefresh=e.uint32();break;case 13:r.trans_list_seq=e.uint32();break;default:e.skipType(7&o)}}return r},H),o.StTransSeq=(j.prototype.trans_type=a.newBuffer([]),j.prototype.trans_seq=0,j.create=function(e){return new j(e)},j.encode=function(e,t){return t=t||s.create(),null!=e.trans_type&&Object.hasOwnProperty.call(e,\"trans_type\")&&t.uint32(10).bytes(e.trans_type),null!=e.trans_seq&&Object.hasOwnProperty.call(e,\"trans_seq\")&&t.uint32(16).uint32(e.trans_seq),t},j.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StTransSeq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.trans_type=e.bytes();break;case 2:r.trans_seq=e.uint32();break;default:e.skipType(7&o)}}return r},j),o.StTransChannelSeq=(q.prototype.trans_channel=a.newBuffer([]),q.prototype.trans_seq_array=a.emptyArray,q.create=function(e){return new q(e)},q.encode=function(e,t){if(t=t||s.create(),null!=e.trans_channel&&Object.hasOwnProperty.call(e,\"trans_channel\")&&t.uint32(10).bytes(e.trans_channel),null!=e.trans_seq_array&&e.trans_seq_array.length)for(var n=0;n<e.trans_seq_array.length;++n)c.liveroom_cs.StTransSeq.encode(e.trans_seq_array[n],t.uint32(18).fork()).ldelim();return t},q.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StTransChannelSeq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.trans_channel=e.bytes();break;case 2:r.trans_seq_array&&r.trans_seq_array.length||(r.trans_seq_array=[]),r.trans_seq_array.push(c.liveroom_cs.StTransSeq.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},q),o.UserlistReq=(U.prototype.req_head=null,U.prototype.sort_type=0,U.prototype.user_index=0,U.create=function(e){return new U(e)},U.encode=function(e,t){return t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.sort_type&&Object.hasOwnProperty.call(e,\"sort_type\")&&t.uint32(16).uint32(e.sort_type),null!=e.user_index&&Object.hasOwnProperty.call(e,\"user_index\")&&t.uint32(24).uint32(e.user_index),t},U.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.UserlistReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.sort_type=e.uint32();break;case 3:r.user_index=e.uint32();break;default:e.skipType(7&o)}}return r},U),o.UserlistRsp=(B.prototype.rsp_head=null,B.prototype.server_user_seq=a.Long?a.Long.fromBits(0,0,!0):0,B.prototype.server_user_index=a.Long?a.Long.fromBits(0,0,!1):0,B.prototype.ret_user_index=a.Long?a.Long.fromBits(0,0,!1):0,B.prototype.user_basic_list=a.emptyArray,B.create=function(e){return new B(e)},B.encode=function(e,t){if(t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.server_user_seq&&Object.hasOwnProperty.call(e,\"server_user_seq\")&&t.uint32(16).uint64(e.server_user_seq),null!=e.server_user_index&&Object.hasOwnProperty.call(e,\"server_user_index\")&&t.uint32(24).int64(e.server_user_index),null!=e.ret_user_index&&Object.hasOwnProperty.call(e,\"ret_user_index\")&&t.uint32(32).int64(e.ret_user_index),null!=e.user_basic_list&&e.user_basic_list.length)for(var n=0;n<e.user_basic_list.length;++n)c.liveroom_cs.StUserBasicDef.encode(e.user_basic_list[n],t.uint32(42).fork()).ldelim();return t},B.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.UserlistRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.server_user_seq=e.uint64();break;case 3:r.server_user_index=e.int64();break;case 4:r.ret_user_index=e.int64();break;case 5:r.user_basic_list&&r.user_basic_list.length||(r.user_basic_list=[]),r.user_basic_list.push(c.liveroom_cs.StUserBasicDef.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},B),o.StUserBasicDef=(x.prototype.id_name=a.newBuffer([]),x.prototype.nick_name=a.newBuffer([]),x.prototype.role=0,x.create=function(e){return new x(e)},x.encode=function(e,t){return t=t||s.create(),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(10).bytes(e.id_name),null!=e.nick_name&&Object.hasOwnProperty.call(e,\"nick_name\")&&t.uint32(18).bytes(e.nick_name),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(24).uint32(e.role),t},x.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StUserBasicDef;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.id_name=e.bytes();break;case 2:r.nick_name=e.bytes();break;case 3:r.role=e.uint32();break;default:e.skipType(7&o)}}return r},x),o.StreamAddReq=(G.prototype.req_head=null,G.prototype.stream_id=a.newBuffer([]),G.prototype.title=a.newBuffer([]),G.prototype.stream_attr=a.newBuffer([]),G.prototype.extra_info=a.newBuffer([]),G.prototype.client_req_seq=0,G.prototype.nickname=a.newBuffer([]),G.prototype.login_mode=0,G.prototype.stream_type=0,G.prototype.third_token=a.newBuffer([]),G.create=function(e){return new G(e)},G.encode=function(e,t){return t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.stream_id&&Object.hasOwnProperty.call(e,\"stream_id\")&&t.uint32(18).bytes(e.stream_id),null!=e.title&&Object.hasOwnProperty.call(e,\"title\")&&t.uint32(26).bytes(e.title),null!=e.stream_attr&&Object.hasOwnProperty.call(e,\"stream_attr\")&&t.uint32(34).bytes(e.stream_attr),null!=e.extra_info&&Object.hasOwnProperty.call(e,\"extra_info\")&&t.uint32(42).bytes(e.extra_info),null!=e.client_req_seq&&Object.hasOwnProperty.call(e,\"client_req_seq\")&&t.uint32(48).uint32(e.client_req_seq),null!=e.nickname&&Object.hasOwnProperty.call(e,\"nickname\")&&t.uint32(58).bytes(e.nickname),null!=e.login_mode&&Object.hasOwnProperty.call(e,\"login_mode\")&&t.uint32(64).uint32(e.login_mode),null!=e.stream_type&&Object.hasOwnProperty.call(e,\"stream_type\")&&t.uint32(72).uint32(e.stream_type),null!=e.third_token&&Object.hasOwnProperty.call(e,\"third_token\")&&t.uint32(82).bytes(e.third_token),t},G.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StreamAddReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.stream_id=e.bytes();break;case 3:r.title=e.bytes();break;case 4:r.stream_attr=e.bytes();break;case 5:r.extra_info=e.bytes();break;case 6:r.client_req_seq=e.uint32();break;case 7:r.nickname=e.bytes();break;case 8:r.login_mode=e.uint32();break;case 9:r.stream_type=e.uint32();break;case 10:r.third_token=e.bytes();break;default:e.skipType(7&o)}}return r},G),o.StreamAddRsp=(V.prototype.rsp_head=null,V.prototype.stream_seq=0,V.prototype.stream_sid=\"\",V.prototype.stream_ver=0,V.prototype.stream_nid=0,V.prototype.token_remain_time=0,V.create=function(e){return new V(e)},V.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.stream_seq&&Object.hasOwnProperty.call(e,\"stream_seq\")&&t.uint32(16).uint32(e.stream_seq),null!=e.stream_sid&&Object.hasOwnProperty.call(e,\"stream_sid\")&&t.uint32(26).string(e.stream_sid),null!=e.stream_ver&&Object.hasOwnProperty.call(e,\"stream_ver\")&&t.uint32(32).uint32(e.stream_ver),null!=e.stream_nid&&Object.hasOwnProperty.call(e,\"stream_nid\")&&t.uint32(40).uint32(e.stream_nid),null!=e.token_remain_time&&Object.hasOwnProperty.call(e,\"token_remain_time\")&&t.uint32(48).uint32(e.token_remain_time),t},V.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StreamAddRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.stream_seq=e.uint32();break;case 3:r.stream_sid=e.string();break;case 4:r.stream_ver=e.uint32();break;case 5:r.stream_nid=e.uint32();break;case 6:r.token_remain_time=e.uint32();break;default:e.skipType(7&o)}}return r},V),o.StreamDeleteReq=(z.prototype.req_head=null,z.prototype.stream_sid=\"\",z.prototype.stream_id=a.newBuffer([]),z.prototype.client_req_seq=0,z.create=function(e){return new z(e)},z.encode=function(e,t){return t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.stream_sid&&Object.hasOwnProperty.call(e,\"stream_sid\")&&t.uint32(18).string(e.stream_sid),null!=e.stream_id&&Object.hasOwnProperty.call(e,\"stream_id\")&&t.uint32(26).bytes(e.stream_id),null!=e.client_req_seq&&Object.hasOwnProperty.call(e,\"client_req_seq\")&&t.uint32(32).uint32(e.client_req_seq),t},z.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StreamDeleteReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.stream_sid=e.string();break;case 3:r.stream_id=e.bytes();break;case 4:r.client_req_seq=e.uint32();break;default:e.skipType(7&o)}}return r},z),o.StreamDeleteRsp=(F.prototype.rsp_head=null,F.prototype.stream_seq=0,F.prototype.stream_ver=0,F.create=function(e){return new F(e)},F.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.stream_seq&&Object.hasOwnProperty.call(e,\"stream_seq\")&&t.uint32(16).uint32(e.stream_seq),null!=e.stream_ver&&Object.hasOwnProperty.call(e,\"stream_ver\")&&t.uint32(24).uint32(e.stream_ver),t},F.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StreamDeleteRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.stream_seq=e.uint32();break;case 3:r.stream_ver=e.uint32();break;default:e.skipType(7&o)}}return r},F),o.StreamUpdateReq=(W.prototype.req_head=null,W.prototype.stream_sid=\"\",W.prototype.stream_id=a.newBuffer([]),W.prototype.title=a.newBuffer([]),W.prototype.stream_attr=a.newBuffer([]),W.prototype.extra_info=a.newBuffer([]),W.prototype.client_req_seq=0,W.prototype.nickname=a.newBuffer([]),W.create=function(e){return new W(e)},W.encode=function(e,t){return t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.stream_sid&&Object.hasOwnProperty.call(e,\"stream_sid\")&&t.uint32(18).string(e.stream_sid),null!=e.stream_id&&Object.hasOwnProperty.call(e,\"stream_id\")&&t.uint32(26).bytes(e.stream_id),null!=e.title&&Object.hasOwnProperty.call(e,\"title\")&&t.uint32(34).bytes(e.title),null!=e.stream_attr&&Object.hasOwnProperty.call(e,\"stream_attr\")&&t.uint32(42).bytes(e.stream_attr),null!=e.extra_info&&Object.hasOwnProperty.call(e,\"extra_info\")&&t.uint32(50).bytes(e.extra_info),null!=e.client_req_seq&&Object.hasOwnProperty.call(e,\"client_req_seq\")&&t.uint32(56).uint32(e.client_req_seq),null!=e.nickname&&Object.hasOwnProperty.call(e,\"nickname\")&&t.uint32(66).bytes(e.nickname),t},W.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StreamUpdateReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.stream_sid=e.string();break;case 3:r.stream_id=e.bytes();break;case 4:r.title=e.bytes();break;case 5:r.stream_attr=e.bytes();break;case 6:r.extra_info=e.bytes();break;case 7:r.client_req_seq=e.uint32();break;case 8:r.nickname=e.bytes();break;default:e.skipType(7&o)}}return r},W),o.StreamUpdateRsp=(Z.prototype.rsp_head=null,Z.prototype.stream_seq=0,Z.prototype.stream_ver=0,Z.create=function(e){return new Z(e)},Z.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.stream_seq&&Object.hasOwnProperty.call(e,\"stream_seq\")&&t.uint32(16).uint32(e.stream_seq),null!=e.stream_ver&&Object.hasOwnProperty.call(e,\"stream_ver\")&&t.uint32(24).uint32(e.stream_ver),t},Z.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StreamUpdateRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.stream_seq=e.uint32();break;case 3:r.stream_ver=e.uint32();break;default:e.skipType(7&o)}}return r},Z),o.StreamListReq=(Y.prototype.req_head=null,Y.create=function(e){return new Y(e)},Y.encode=function(e,t){return t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),t},Y.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StreamListReq;e.pos<n;){var o=e.uint32();o>>>3==1?r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32()):e.skipType(7&o)}return r},Y),o.StreamListRsp=(K.prototype.rsp_head=null,K.prototype.stream_seq=0,K.prototype.stream_info=a.emptyArray,K.prototype.stream_refresh=0,K.prototype.stream_mix_info=a.emptyArray,K.create=function(e){return new K(e)},K.encode=function(e,t){if(t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.stream_seq&&Object.hasOwnProperty.call(e,\"stream_seq\")&&t.uint32(16).uint32(e.stream_seq),null!=e.stream_info&&e.stream_info.length)for(var n=0;n<e.stream_info.length;++n)c.liveroom_cs.StStreamInfo.encode(e.stream_info[n],t.uint32(26).fork()).ldelim();if(null!=e.stream_refresh&&Object.hasOwnProperty.call(e,\"stream_refresh\")&&t.uint32(32).uint32(e.stream_refresh),null!=e.stream_mix_info&&e.stream_mix_info.length)for(n=0;n<e.stream_mix_info.length;++n)c.liveroom_cs.StStreamInfo.encode(e.stream_mix_info[n],t.uint32(42).fork()).ldelim();return t},K.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StreamListRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.stream_seq=e.uint32();break;case 3:r.stream_info&&r.stream_info.length||(r.stream_info=[]),r.stream_info.push(c.liveroom_cs.StStreamInfo.decode(e,e.uint32()));break;case 4:r.stream_refresh=e.uint32();break;case 5:r.stream_mix_info&&r.stream_mix_info.length||(r.stream_mix_info=[]),r.stream_mix_info.push(c.liveroom_cs.StStreamInfo.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},K),o.StStreamInfo=(X.prototype.stream_sid=\"\",X.prototype.stream_id=a.newBuffer([]),X.prototype.id_name=a.newBuffer([]),X.prototype.nick_name=a.newBuffer([]),X.prototype.extra_info=a.newBuffer([]),X.prototype.title=a.newBuffer([]),X.prototype.stream_ver=0,X.prototype.stream_attr=a.newBuffer([]),X.prototype.create_time=a.Long?a.Long.fromBits(0,0,!1):0,X.prototype.stream_src=0,X.prototype.state=0,X.prototype.stream_type=0,X.prototype.stream_nid=0,X.create=function(e){return new X(e)},X.encode=function(e,t){return t=t||s.create(),null!=e.stream_sid&&Object.hasOwnProperty.call(e,\"stream_sid\")&&t.uint32(10).string(e.stream_sid),null!=e.stream_id&&Object.hasOwnProperty.call(e,\"stream_id\")&&t.uint32(18).bytes(e.stream_id),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(26).bytes(e.id_name),null!=e.nick_name&&Object.hasOwnProperty.call(e,\"nick_name\")&&t.uint32(34).bytes(e.nick_name),null!=e.extra_info&&Object.hasOwnProperty.call(e,\"extra_info\")&&t.uint32(42).bytes(e.extra_info),null!=e.title&&Object.hasOwnProperty.call(e,\"title\")&&t.uint32(50).bytes(e.title),null!=e.stream_ver&&Object.hasOwnProperty.call(e,\"stream_ver\")&&t.uint32(56).uint32(e.stream_ver),null!=e.stream_attr&&Object.hasOwnProperty.call(e,\"stream_attr\")&&t.uint32(66).bytes(e.stream_attr),null!=e.create_time&&Object.hasOwnProperty.call(e,\"create_time\")&&t.uint32(72).int64(e.create_time),null!=e.stream_src&&Object.hasOwnProperty.call(e,\"stream_src\")&&t.uint32(80).uint32(e.stream_src),null!=e.state&&Object.hasOwnProperty.call(e,\"state\")&&t.uint32(88).uint32(e.state),null!=e.stream_type&&Object.hasOwnProperty.call(e,\"stream_type\")&&t.uint32(96).uint32(e.stream_type),null!=e.stream_nid&&Object.hasOwnProperty.call(e,\"stream_nid\")&&t.uint32(104).uint32(e.stream_nid),t},X.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StStreamInfo;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.stream_sid=e.string();break;case 2:r.stream_id=e.bytes();break;case 3:r.id_name=e.bytes();break;case 4:r.nick_name=e.bytes();break;case 5:r.extra_info=e.bytes();break;case 6:r.title=e.bytes();break;case 7:r.stream_ver=e.uint32();break;case 8:r.stream_attr=e.bytes();break;case 9:r.create_time=e.int64();break;case 10:r.stream_src=e.uint32();break;case 11:r.state=e.uint32();break;case 12:r.stream_type=e.uint32();break;case 13:r.stream_nid=e.uint32();break;default:e.skipType(7&o)}}return r},X),o.StDstUser=(J.prototype.id_name=a.newBuffer([]),J.prototype.id=a.Long?a.Long.fromBits(0,0,!0):0,J.create=function(e){return new J(e)},J.encode=function(e,t){return t=t||s.create(),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(10).bytes(e.id_name),null!=e.id&&Object.hasOwnProperty.call(e,\"id\")&&t.uint32(16).uint64(e.id),t},J.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StDstUser;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.id_name=e.bytes();break;case 2:r.id=e.uint64();break;default:e.skipType(7&o)}}return r},J),o.SignalLiveReq=(Q.prototype.req_head=null,Q.prototype.push_message=a.newBuffer([]),Q.prototype.dst_userlist=a.emptyArray,Q.create=function(e){return new Q(e)},Q.encode=function(e,t){if(t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.push_message&&Object.hasOwnProperty.call(e,\"push_message\")&&t.uint32(18).bytes(e.push_message),null!=e.dst_userlist&&e.dst_userlist.length)for(var n=0;n<e.dst_userlist.length;++n)c.liveroom_cs.StDstUser.encode(e.dst_userlist[n],t.uint32(26).fork()).ldelim();return t},Q.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.SignalLiveReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.push_message=e.bytes();break;case 3:r.dst_userlist&&r.dst_userlist.length||(r.dst_userlist=[]),r.dst_userlist.push(c.liveroom_cs.StDstUser.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},Q),o.SignalLiveRsp=($.prototype.rsp_head=null,$.create=function(e){return new $(e)},$.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),t},$.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.SignalLiveRsp;e.pos<n;){var o=e.uint32();o>>>3==1?r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32()):e.skipType(7&o)}return r},$),o.SignalLiveResultReq=(ee.prototype.req_head=null,ee.prototype.push_message=a.newBuffer([]),ee.prototype.dst_userlist=a.emptyArray,ee.create=function(e){return new ee(e)},ee.encode=function(e,t){if(t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.push_message&&Object.hasOwnProperty.call(e,\"push_message\")&&t.uint32(18).bytes(e.push_message),null!=e.dst_userlist&&e.dst_userlist.length)for(var n=0;n<e.dst_userlist.length;++n)c.liveroom_cs.StDstUser.encode(e.dst_userlist[n],t.uint32(26).fork()).ldelim();return t},ee.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.SignalLiveResultReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.push_message=e.bytes();break;case 3:r.dst_userlist&&r.dst_userlist.length||(r.dst_userlist=[]),r.dst_userlist.push(c.liveroom_cs.StDstUser.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},ee),o.SignalLiveResulRsp=(te.prototype.rsp_head=null,te.create=function(e){return new te(e)},te.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),t},te.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.SignalLiveResulRsp;e.pos<n;){var o=e.uint32();o>>>3==1?r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32()):e.skipType(7&o)}return r},te),o.SignalLiveInviteReq=(ne.prototype.req_head=null,ne.prototype.push_message=a.newBuffer([]),ne.prototype.dst_userlist=a.emptyArray,ne.create=function(e){return new ne(e)},ne.encode=function(e,t){if(t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.push_message&&Object.hasOwnProperty.call(e,\"push_message\")&&t.uint32(18).bytes(e.push_message),null!=e.dst_userlist&&e.dst_userlist.length)for(var n=0;n<e.dst_userlist.length;++n)c.liveroom_cs.StDstUser.encode(e.dst_userlist[n],t.uint32(26).fork()).ldelim();return t},ne.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.SignalLiveInviteReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.push_message=e.bytes();break;case 3:r.dst_userlist&&r.dst_userlist.length||(r.dst_userlist=[]),r.dst_userlist.push(c.liveroom_cs.StDstUser.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},ne),o.SignalLiveInviteRsp=(re.prototype.rsp_head=null,re.create=function(e){return new re(e)},re.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),t},re.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.SignalLiveInviteRsp;e.pos<n;){var o=e.uint32();o>>>3==1?r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32()):e.skipType(7&o)}return r},re),o.SignalLiveStopReq=(oe.prototype.req_head=null,oe.prototype.push_message=a.newBuffer([]),oe.prototype.dst_userlist=a.emptyArray,oe.create=function(e){return new oe(e)},oe.encode=function(e,t){if(t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.push_message&&Object.hasOwnProperty.call(e,\"push_message\")&&t.uint32(18).bytes(e.push_message),null!=e.dst_userlist&&e.dst_userlist.length)for(var n=0;n<e.dst_userlist.length;++n)c.liveroom_cs.StDstUser.encode(e.dst_userlist[n],t.uint32(26).fork()).ldelim();return t},oe.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.SignalLiveStopReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.push_message=e.bytes();break;case 3:r.dst_userlist&&r.dst_userlist.length||(r.dst_userlist=[]),r.dst_userlist.push(c.liveroom_cs.StDstUser.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},oe),o.SignalLiveStopRsp=(ie.prototype.rsp_head=null,ie.create=function(e){return new ie(e)},ie.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),t},ie.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.SignalLiveStopRsp;e.pos<n;){var o=e.uint32();o>>>3==1?r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32()):e.skipType(7&o)}return r},ie),o.SignalLiveCustomReq=(se.prototype.req_head=null,se.prototype.push_message=a.newBuffer([]),se.prototype.dst_userlist=a.emptyArray,se.create=function(e){return new se(e)},se.encode=function(e,t){if(t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.push_message&&Object.hasOwnProperty.call(e,\"push_message\")&&t.uint32(18).bytes(e.push_message),null!=e.dst_userlist&&e.dst_userlist.length)for(var n=0;n<e.dst_userlist.length;++n)c.liveroom_cs.StDstUser.encode(e.dst_userlist[n],t.uint32(26).fork()).ldelim();return t},se.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.SignalLiveCustomReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.push_message=e.bytes();break;case 3:r.dst_userlist&&r.dst_userlist.length||(r.dst_userlist=[]),r.dst_userlist.push(c.liveroom_cs.StDstUser.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},se),o.SignalLiveCustomRsp=(ae.prototype.rsp_head=null,ae.create=function(e){return new ae(e)},ae.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),t},ae.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.SignalLiveCustomRsp;e.pos<n;){var o=e.uint32();o>>>3==1?r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32()):e.skipType(7&o)}return r},ae),o.ImChatReq=(ce.prototype.req_head=null,ce.prototype.msg_category=0,ce.prototype.msg_type=0,ce.prototype.msg_priority=0,ce.prototype.msg_content=a.newBuffer([]),ce.prototype.dst_userlist=a.emptyArray,ce.create=function(e){return new ce(e)},ce.encode=function(e,t){if(t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.msg_category&&Object.hasOwnProperty.call(e,\"msg_category\")&&t.uint32(16).uint32(e.msg_category),null!=e.msg_type&&Object.hasOwnProperty.call(e,\"msg_type\")&&t.uint32(24).uint32(e.msg_type),null!=e.msg_priority&&Object.hasOwnProperty.call(e,\"msg_priority\")&&t.uint32(32).uint32(e.msg_priority),null!=e.msg_content&&Object.hasOwnProperty.call(e,\"msg_content\")&&t.uint32(42).bytes(e.msg_content),null!=e.dst_userlist&&e.dst_userlist.length)for(var n=0;n<e.dst_userlist.length;++n)c.liveroom_cs.StDstUser.encode(e.dst_userlist[n],t.uint32(50).fork()).ldelim();return t},ce.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.ImChatReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.msg_category=e.uint32();break;case 3:r.msg_type=e.uint32();break;case 4:r.msg_priority=e.uint32();break;case 5:r.msg_content=e.bytes();break;case 6:r.dst_userlist&&r.dst_userlist.length||(r.dst_userlist=[]),r.dst_userlist.push(c.liveroom_cs.StDstUser.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},ce),o.ImChatRsp=(ue.prototype.rsp_head=null,ue.prototype.msg_id=a.Long?a.Long.fromBits(0,0,!0):0,ue.create=function(e){return new ue(e)},ue.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.msg_id&&Object.hasOwnProperty.call(e,\"msg_id\")&&t.uint32(16).uint64(e.msg_id),t},ue.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.ImChatRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.msg_id=e.uint64();break;default:e.skipType(7&o)}}return r},ue),o.ImGethatReq=(le.prototype.req_head=null,le.prototype.msg_priority=0,le.prototype.msg_id=a.Long?a.Long.fromBits(0,0,!0):0,le.prototype.sort_type=0,le.prototype.msg_count=0,le.create=function(e){return new le(e)},le.encode=function(e,t){return t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.msg_priority&&Object.hasOwnProperty.call(e,\"msg_priority\")&&t.uint32(16).uint32(e.msg_priority),null!=e.msg_id&&Object.hasOwnProperty.call(e,\"msg_id\")&&t.uint32(24).uint64(e.msg_id),null!=e.sort_type&&Object.hasOwnProperty.call(e,\"sort_type\")&&t.uint32(32).uint32(e.sort_type),null!=e.msg_count&&Object.hasOwnProperty.call(e,\"msg_count\")&&t.uint32(40).uint32(e.msg_count),t},le.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.ImGethatReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.msg_priority=e.uint32();break;case 3:r.msg_id=e.uint64();break;case 4:r.sort_type=e.uint32();break;case 5:r.msg_count=e.uint32();break;default:e.skipType(7&o)}}return r},le),o.ImGetChatRsp=(he.prototype.rsp_head=null,he.prototype.server_msg_id=a.Long?a.Long.fromBits(0,0,!0):0,he.prototype.ret_msg_id=a.Long?a.Long.fromBits(0,0,!0):0,he.prototype.msg_data=a.emptyArray,he.create=function(e){return new he(e)},he.encode=function(e,t){if(t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.server_msg_id&&Object.hasOwnProperty.call(e,\"server_msg_id\")&&t.uint32(16).uint64(e.server_msg_id),null!=e.ret_msg_id&&Object.hasOwnProperty.call(e,\"ret_msg_id\")&&t.uint32(24).uint64(e.ret_msg_id),null!=e.msg_data&&e.msg_data.length)for(var n=0;n<e.msg_data.length;++n)c.liveroom_cs.StMsgData.encode(e.msg_data[n],t.uint32(34).fork()).ldelim();return t},he.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.ImGetChatRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.server_msg_id=e.uint64();break;case 3:r.ret_msg_id=e.uint64();break;case 4:r.msg_data&&r.msg_data.length||(r.msg_data=[]),r.msg_data.push(c.liveroom_cs.StMsgData.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},he),o.StMsgData=(pe.prototype.id_name=a.newBuffer([]),pe.prototype.nick_name=a.newBuffer([]),pe.prototype.role=0,pe.prototype.msg_id=a.Long?a.Long.fromBits(0,0,!0):0,pe.prototype.msg_category=0,pe.prototype.msg_type=0,pe.prototype.msg_priority=0,pe.prototype.msg_content=a.newBuffer([]),pe.prototype.send_time=a.Long?a.Long.fromBits(0,0,!1):0,pe.create=function(e){return new pe(e)},pe.encode=function(e,t){return t=t||s.create(),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(10).bytes(e.id_name),null!=e.nick_name&&Object.hasOwnProperty.call(e,\"nick_name\")&&t.uint32(18).bytes(e.nick_name),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(24).uint32(e.role),null!=e.msg_id&&Object.hasOwnProperty.call(e,\"msg_id\")&&t.uint32(32).uint64(e.msg_id),null!=e.msg_category&&Object.hasOwnProperty.call(e,\"msg_category\")&&t.uint32(40).uint32(e.msg_category),null!=e.msg_type&&Object.hasOwnProperty.call(e,\"msg_type\")&&t.uint32(48).uint32(e.msg_type),null!=e.msg_priority&&Object.hasOwnProperty.call(e,\"msg_priority\")&&t.uint32(56).uint32(e.msg_priority),null!=e.msg_content&&Object.hasOwnProperty.call(e,\"msg_content\")&&t.uint32(66).bytes(e.msg_content),null!=e.send_time&&Object.hasOwnProperty.call(e,\"send_time\")&&t.uint32(72).int64(e.send_time),t},pe.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StMsgData;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.id_name=e.bytes();break;case 2:r.nick_name=e.bytes();break;case 3:r.role=e.uint32();break;case 4:r.msg_id=e.uint64();break;case 5:r.msg_category=e.uint32();break;case 6:r.msg_type=e.uint32();break;case 7:r.msg_priority=e.uint32();break;case 8:r.msg_content=e.bytes();break;case 9:r.send_time=e.int64();break;default:e.skipType(7&o)}}return r},pe),o.EnterReq=(de.prototype.req_head=null,de.prototype.switch_session_id=a.Long?a.Long.fromBits(0,0,!0):0,de.prototype.nick_name=a.newBuffer([]),de.prototype.role=0,de.prototype.net_type=0,de.prototype.config=null,de.prototype.lv_key=\"\",de.prototype.third_token=a.newBuffer([]),de.prototype.cluster_req=a.Long?a.Long.fromBits(0,0,!0):0,de.prototype.user_count_limit=0,de.prototype.relate_service=\"\",de.prototype.conn_type=0,de.prototype.room_name=a.newBuffer([]),de.create=function(e){return new de(e)},de.encode=function(e,t){return t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.switch_session_id&&Object.hasOwnProperty.call(e,\"switch_session_id\")&&t.uint32(16).uint64(e.switch_session_id),null!=e.nick_name&&Object.hasOwnProperty.call(e,\"nick_name\")&&t.uint32(26).bytes(e.nick_name),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(32).uint32(e.role),null!=e.net_type&&Object.hasOwnProperty.call(e,\"net_type\")&&t.uint32(40).uint32(e.net_type),null!=e.config&&Object.hasOwnProperty.call(e,\"config\")&&c.liveroom_cs.StConfigList.encode(e.config,t.uint32(50).fork()).ldelim(),null!=e.lv_key&&Object.hasOwnProperty.call(e,\"lv_key\")&&t.uint32(58).string(e.lv_key),null!=e.third_token&&Object.hasOwnProperty.call(e,\"third_token\")&&t.uint32(66).bytes(e.third_token),null!=e.cluster_req&&Object.hasOwnProperty.call(e,\"cluster_req\")&&t.uint32(72).uint64(e.cluster_req),null!=e.user_count_limit&&Object.hasOwnProperty.call(e,\"user_count_limit\")&&t.uint32(80).uint32(e.user_count_limit),null!=e.relate_service&&Object.hasOwnProperty.call(e,\"relate_service\")&&t.uint32(90).string(e.relate_service),null!=e.conn_type&&Object.hasOwnProperty.call(e,\"conn_type\")&&t.uint32(96).uint32(e.conn_type),null!=e.room_name&&Object.hasOwnProperty.call(e,\"room_name\")&&t.uint32(106).bytes(e.room_name),t},de.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.EnterReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.switch_session_id=e.uint64();break;case 3:r.nick_name=e.bytes();break;case 4:r.role=e.uint32();break;case 5:r.net_type=e.uint32();break;case 6:r.config=c.liveroom_cs.StConfigList.decode(e,e.uint32());break;case 7:r.lv_key=e.string();break;case 8:r.third_token=e.bytes();break;case 9:r.cluster_req=e.uint64();break;case 10:r.user_count_limit=e.uint32();break;case 11:r.relate_service=e.string();break;case 12:r.conn_type=e.uint32();break;case 13:r.room_name=e.bytes();break;default:e.skipType(7&o)}}return r},de),o.EnterRsp=(_e.prototype.rsp_head=null,_e.prototype.room_id=a.newBuffer([]),_e.prototype.user_session_id=a.Long?a.Long.fromBits(0,0,!0):0,_e.prototype.room_session_id=a.Long?a.Long.fromBits(0,0,!0):0,_e.prototype.user_id=a.Long?a.Long.fromBits(0,0,!0):0,_e.prototype.ret_timestamp=a.Long?a.Long.fromBits(0,0,!1):0,_e.prototype.bigim_time_window=0,_e.prototype.dati_time_window=a.Long?a.Long.fromBits(0,0,!1):0,_e.prototype.room_id32=0,_e.prototype.hb_interval=0,_e.prototype.hb_timeout=0,_e.prototype.lv_key=\"\",_e.prototype.zp_key=\"\",_e.prototype.online_count=0,_e.prototype.anchor_info=null,_e.prototype.stream_seq=0,_e.prototype.stream_info=a.emptyArray,_e.prototype.stream_mix_info=a.emptyArray,_e.prototype.userlist_merge_timeout=0,_e.prototype.userlist_interval=0,_e.prototype.stream_list_push_merge_timeout=0,_e.prototype.stream_list_hb_wait_merge_time=0,_e.prototype.trans_list_seq=0,_e.prototype.trans_seqs=a.emptyArray,_e.prototype.cluster_name=\"\",_e.prototype.token_remain_time=0,_e.prototype.stream_fetch_flag=0,_e.create=function(e){return new _e(e)},_e.encode=function(e,t){if(t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(18).bytes(e.room_id),null!=e.user_session_id&&Object.hasOwnProperty.call(e,\"user_session_id\")&&t.uint32(24).uint64(e.user_session_id),null!=e.room_session_id&&Object.hasOwnProperty.call(e,\"room_session_id\")&&t.uint32(32).uint64(e.room_session_id),null!=e.user_id&&Object.hasOwnProperty.call(e,\"user_id\")&&t.uint32(40).uint64(e.user_id),null!=e.ret_timestamp&&Object.hasOwnProperty.call(e,\"ret_timestamp\")&&t.uint32(49).fixed64(e.ret_timestamp),null!=e.bigim_time_window&&Object.hasOwnProperty.call(e,\"bigim_time_window\")&&t.uint32(56).uint32(e.bigim_time_window),null!=e.dati_time_window&&Object.hasOwnProperty.call(e,\"dati_time_window\")&&t.uint32(64).int64(e.dati_time_window),null!=e.room_id32&&Object.hasOwnProperty.call(e,\"room_id32\")&&t.uint32(72).uint32(e.room_id32),null!=e.hb_interval&&Object.hasOwnProperty.call(e,\"hb_interval\")&&t.uint32(80).uint32(e.hb_interval),null!=e.hb_timeout&&Object.hasOwnProperty.call(e,\"hb_timeout\")&&t.uint32(88).uint32(e.hb_timeout),null!=e.lv_key&&Object.hasOwnProperty.call(e,\"lv_key\")&&t.uint32(98).string(e.lv_key),null!=e.zp_key&&Object.hasOwnProperty.call(e,\"zp_key\")&&t.uint32(106).string(e.zp_key),null!=e.online_count&&Object.hasOwnProperty.call(e,\"online_count\")&&t.uint32(112).uint32(e.online_count),null!=e.anchor_info&&Object.hasOwnProperty.call(e,\"anchor_info\")&&c.liveroom_cs.StAnchorInfo.encode(e.anchor_info,t.uint32(122).fork()).ldelim(),null!=e.stream_seq&&Object.hasOwnProperty.call(e,\"stream_seq\")&&t.uint32(128).uint32(e.stream_seq),null!=e.stream_info&&e.stream_info.length)for(var n=0;n<e.stream_info.length;++n)c.liveroom_cs.StStreamInfo.encode(e.stream_info[n],t.uint32(138).fork()).ldelim();if(null!=e.stream_mix_info&&e.stream_mix_info.length)for(n=0;n<e.stream_mix_info.length;++n)c.liveroom_cs.StStreamInfo.encode(e.stream_mix_info[n],t.uint32(146).fork()).ldelim();if(null!=e.userlist_merge_timeout&&Object.hasOwnProperty.call(e,\"userlist_merge_timeout\")&&t.uint32(152).uint32(e.userlist_merge_timeout),null!=e.userlist_interval&&Object.hasOwnProperty.call(e,\"userlist_interval\")&&t.uint32(160).uint32(e.userlist_interval),null!=e.stream_list_push_merge_timeout&&Object.hasOwnProperty.call(e,\"stream_list_push_merge_timeout\")&&t.uint32(168).uint32(e.stream_list_push_merge_timeout),null!=e.stream_list_hb_wait_merge_time&&Object.hasOwnProperty.call(e,\"stream_list_hb_wait_merge_time\")&&t.uint32(176).uint32(e.stream_list_hb_wait_merge_time),null!=e.trans_list_seq&&Object.hasOwnProperty.call(e,\"trans_list_seq\")&&t.uint32(184).uint32(e.trans_list_seq),null!=e.trans_seqs&&e.trans_seqs.length)for(n=0;n<e.trans_seqs.length;++n)c.liveroom_cs.StTransInfo.encode(e.trans_seqs[n],t.uint32(194).fork()).ldelim();return null!=e.cluster_name&&Object.hasOwnProperty.call(e,\"cluster_name\")&&t.uint32(202).string(e.cluster_name),null!=e.token_remain_time&&Object.hasOwnProperty.call(e,\"token_remain_time\")&&t.uint32(208).uint32(e.token_remain_time),null!=e.stream_fetch_flag&&Object.hasOwnProperty.call(e,\"stream_fetch_flag\")&&t.uint32(216).uint32(e.stream_fetch_flag),t},_e.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.EnterRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.room_id=e.bytes();break;case 3:r.user_session_id=e.uint64();break;case 4:r.room_session_id=e.uint64();break;case 5:r.user_id=e.uint64();break;case 6:r.ret_timestamp=e.fixed64();break;case 7:r.bigim_time_window=e.uint32();break;case 8:r.dati_time_window=e.int64();break;case 9:r.room_id32=e.uint32();break;case 10:r.hb_interval=e.uint32();break;case 11:r.hb_timeout=e.uint32();break;case 12:r.lv_key=e.string();break;case 13:r.zp_key=e.string();break;case 14:r.online_count=e.uint32();break;case 15:r.anchor_info=c.liveroom_cs.StAnchorInfo.decode(e,e.uint32());break;case 16:r.stream_seq=e.uint32();break;case 17:r.stream_info&&r.stream_info.length||(r.stream_info=[]),r.stream_info.push(c.liveroom_cs.StStreamInfo.decode(e,e.uint32()));break;case 18:r.stream_mix_info&&r.stream_mix_info.length||(r.stream_mix_info=[]),r.stream_mix_info.push(c.liveroom_cs.StStreamInfo.decode(e,e.uint32()));break;case 19:r.userlist_merge_timeout=e.uint32();break;case 20:r.userlist_interval=e.uint32();break;case 21:r.stream_list_push_merge_timeout=e.uint32();break;case 22:r.stream_list_hb_wait_merge_time=e.uint32();break;case 23:r.trans_list_seq=e.uint32();break;case 24:r.trans_seqs&&r.trans_seqs.length||(r.trans_seqs=[]),r.trans_seqs.push(c.liveroom_cs.StTransInfo.decode(e,e.uint32()));break;case 25:r.cluster_name=e.string();break;case 26:r.token_remain_time=e.uint32();break;case 27:r.stream_fetch_flag=e.uint32();break;default:e.skipType(7&o)}}return r},_e),o.StAnchorInfo=(fe.prototype.anchor_id_name=a.newBuffer([]),fe.prototype.anchor_id=a.Long?a.Long.fromBits(0,0,!0):0,fe.prototype.anchor_nick_name=a.newBuffer([]),fe.create=function(e){return new fe(e)},fe.encode=function(e,t){return t=t||s.create(),null!=e.anchor_id_name&&Object.hasOwnProperty.call(e,\"anchor_id_name\")&&t.uint32(10).bytes(e.anchor_id_name),null!=e.anchor_id&&Object.hasOwnProperty.call(e,\"anchor_id\")&&t.uint32(16).uint64(e.anchor_id),null!=e.anchor_nick_name&&Object.hasOwnProperty.call(e,\"anchor_nick_name\")&&t.uint32(26).bytes(e.anchor_nick_name),t},fe.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StAnchorInfo;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.anchor_id_name=e.bytes();break;case 2:r.anchor_id=e.uint64();break;case 3:r.anchor_nick_name=e.bytes();break;default:e.skipType(7&o)}}return r},fe),o.QuitReq=(ge.prototype.req_head=null,ge.prototype.switch_session_id=a.Long?a.Long.fromBits(0,0,!0):0,ge.prototype.room_id32=0,ge.prototype.nick_name=a.newBuffer([]),ge.prototype.role=0,ge.prototype.net_type=0,ge.prototype.config_list=null,ge.create=function(e){return new ge(e)},ge.encode=function(e,t){return t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.switch_session_id&&Object.hasOwnProperty.call(e,\"switch_session_id\")&&t.uint32(16).uint64(e.switch_session_id),null!=e.room_id32&&Object.hasOwnProperty.call(e,\"room_id32\")&&t.uint32(24).uint32(e.room_id32),null!=e.nick_name&&Object.hasOwnProperty.call(e,\"nick_name\")&&t.uint32(34).bytes(e.nick_name),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(40).uint32(e.role),null!=e.net_type&&Object.hasOwnProperty.call(e,\"net_type\")&&t.uint32(48).uint32(e.net_type),null!=e.config_list&&Object.hasOwnProperty.call(e,\"config_list\")&&c.liveroom_cs.StConfigList.encode(e.config_list,t.uint32(58).fork()).ldelim(),t},ge.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.QuitReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.switch_session_id=e.uint64();break;case 3:r.room_id32=e.uint32();break;case 4:r.nick_name=e.bytes();break;case 5:r.role=e.uint32();break;case 6:r.net_type=e.uint32();break;case 7:r.config_list=c.liveroom_cs.StConfigList.decode(e,e.uint32());break;default:e.skipType(7&o)}}return r},ge),o.StConfigList=(me.prototype.room_create_flag=0,me.prototype.user_state_flag=0,me.create=function(e){return new me(e)},me.encode=function(e,t){return t=t||s.create(),null!=e.room_create_flag&&Object.hasOwnProperty.call(e,\"room_create_flag\")&&t.uint32(8).uint32(e.room_create_flag),null!=e.user_state_flag&&Object.hasOwnProperty.call(e,\"user_state_flag\")&&t.uint32(16).uint32(e.user_state_flag),t},me.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StConfigList;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.room_create_flag=e.uint32();break;case 2:r.user_state_flag=e.uint32();break;default:e.skipType(7&o)}}return r},me),o.QuitRsp=(ye.prototype.rsp_head=null,ye.prototype.room_id=a.newBuffer([]),ye.prototype.room_id32=0,ye.create=function(e){return new ye(e)},ye.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(18).bytes(e.room_id),null!=e.room_id32&&Object.hasOwnProperty.call(e,\"room_id32\")&&t.uint32(24).uint32(e.room_id32),t},ye.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.QuitRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.room_id=e.bytes();break;case 3:r.room_id32=e.uint32();break;default:e.skipType(7&o)}}return r},ye),o.RoomListReq=(ve.prototype.req_head=null,ve.create=function(e){return new ve(e)},ve.encode=function(e,t){return t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),t},ve.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.RoomListReq;e.pos<n;){var o=e.uint32();o>>>3==1?r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32()):e.skipType(7&o)}return r},ve),o.RoomListRsp=(be.prototype.rsp_head=null,be.prototype.room_list=a.emptyArray,be.create=function(e){return new be(e)},be.encode=function(e,t){if(t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.room_list&&e.room_list.length)for(var n=0;n<e.room_list.length;++n)c.liveroom_cs.StRoomListRoom.encode(e.room_list[n],t.uint32(18).fork()).ldelim();return t},be.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.RoomListRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.room_list&&r.room_list.length||(r.room_list=[]),r.room_list.push(c.liveroom_cs.StRoomListRoom.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},be),o.StRoomListStream=(Ee.prototype.stream_id=a.newBuffer([]),Ee.create=function(e){return new Ee(e)},Ee.encode=function(e,t){return t=t||s.create(),null!=e.stream_id&&Object.hasOwnProperty.call(e,\"stream_id\")&&t.uint32(10).bytes(e.stream_id),t},Ee.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StRoomListStream;e.pos<n;){var o=e.uint32();o>>>3==1?r.stream_id=e.bytes():e.skipType(7&o)}return r},Ee),o.StRoomListRoom=(Oe.prototype.room_id=a.newBuffer([]),Oe.prototype.room_name=a.newBuffer([]),Oe.prototype.anchor_id_name=a.newBuffer([]),Oe.prototype.anchor_nick_name=a.newBuffer([]),Oe.prototype.stream_list=a.emptyArray,Oe.create=function(e){return new Oe(e)},Oe.encode=function(e,t){if(t=t||s.create(),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(10).bytes(e.room_id),null!=e.room_name&&Object.hasOwnProperty.call(e,\"room_name\")&&t.uint32(18).bytes(e.room_name),null!=e.anchor_id_name&&Object.hasOwnProperty.call(e,\"anchor_id_name\")&&t.uint32(26).bytes(e.anchor_id_name),null!=e.anchor_nick_name&&Object.hasOwnProperty.call(e,\"anchor_nick_name\")&&t.uint32(34).bytes(e.anchor_nick_name),null!=e.stream_list&&e.stream_list.length)for(var n=0;n<e.stream_list.length;++n)c.liveroom_cs.StRoomListStream.encode(e.stream_list[n],t.uint32(42).fork()).ldelim();return t},Oe.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StRoomListRoom;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.room_id=e.bytes();break;case 2:r.room_name=e.bytes();break;case 3:r.anchor_id_name=e.bytes();break;case 4:r.anchor_nick_name=e.bytes();break;case 5:r.stream_list&&r.stream_list.length||(r.stream_list=[]),r.stream_list.push(c.liveroom_cs.StRoomListStream.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},Oe),o.StTransSeqInfo=(Te.prototype.trans_type=a.newBuffer([]),Te.prototype.trans_seq=0,Te.create=function(e){return new Te(e)},Te.encode=function(e,t){return t=t||s.create(),null!=e.trans_type&&Object.hasOwnProperty.call(e,\"trans_type\")&&t.uint32(10).bytes(e.trans_type),null!=e.trans_seq&&Object.hasOwnProperty.call(e,\"trans_seq\")&&t.uint32(16).uint32(e.trans_seq),t},Te.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StTransSeqInfo;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.trans_type=e.bytes();break;case 2:r.trans_seq=e.uint32();break;default:e.skipType(7&o)}}return r},Te),o.StTransInfo=(Se.prototype.trans_channel=a.newBuffer([]),Se.prototype.trans_seq_array=a.emptyArray,Se.create=function(e){return new Se(e)},Se.encode=function(e,t){if(t=t||s.create(),null!=e.trans_channel&&Object.hasOwnProperty.call(e,\"trans_channel\")&&t.uint32(10).bytes(e.trans_channel),null!=e.trans_seq_array&&e.trans_seq_array.length)for(var n=0;n<e.trans_seq_array.length;++n)c.liveroom_cs.StTransSeqInfo.encode(e.trans_seq_array[n],t.uint32(18).fork()).ldelim();return t},Se.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StTransInfo;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.trans_channel=e.bytes();break;case 2:r.trans_seq_array&&r.trans_seq_array.length||(r.trans_seq_array=[]),r.trans_seq_array.push(c.liveroom_cs.StTransSeqInfo.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},Se),o.TransReq=(Re.prototype.req_head=null,Re.prototype.nick_name=a.newBuffer([]),Re.prototype.role=0,Re.prototype.trans_type=a.newBuffer([]),Re.prototype.trans_data=a.newBuffer([]),Re.prototype.trans_local_seq=0,Re.prototype.trans_channel=a.newBuffer([]),Re.create=function(e){return new Re(e)},Re.encode=function(e,t){return t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.nick_name&&Object.hasOwnProperty.call(e,\"nick_name\")&&t.uint32(18).bytes(e.nick_name),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(24).uint32(e.role),null!=e.trans_type&&Object.hasOwnProperty.call(e,\"trans_type\")&&t.uint32(34).bytes(e.trans_type),null!=e.trans_data&&Object.hasOwnProperty.call(e,\"trans_data\")&&t.uint32(42).bytes(e.trans_data),null!=e.trans_local_seq&&Object.hasOwnProperty.call(e,\"trans_local_seq\")&&t.uint32(48).uint32(e.trans_local_seq),null!=e.trans_channel&&Object.hasOwnProperty.call(e,\"trans_channel\")&&t.uint32(58).bytes(e.trans_channel),t},Re.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.TransReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.nick_name=e.bytes();break;case 3:r.role=e.uint32();break;case 4:r.trans_type=e.bytes();break;case 5:r.trans_data=e.bytes();break;case 6:r.trans_local_seq=e.uint32();break;case 7:r.trans_channel=e.bytes();break;default:e.skipType(7&o)}}return r},Re),o.TransRsp=(ke.prototype.rsp_head=null,ke.prototype.trans_type=a.newBuffer([]),ke.prototype.trans_seq=0,ke.prototype.trans_list_seq=0,ke.prototype.trans_channel=a.newBuffer([]),ke.create=function(e){return new ke(e)},ke.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.trans_type&&Object.hasOwnProperty.call(e,\"trans_type\")&&t.uint32(18).bytes(e.trans_type),null!=e.trans_seq&&Object.hasOwnProperty.call(e,\"trans_seq\")&&t.uint32(24).uint32(e.trans_seq),null!=e.trans_list_seq&&Object.hasOwnProperty.call(e,\"trans_list_seq\")&&t.uint32(32).uint32(e.trans_list_seq),null!=e.trans_channel&&Object.hasOwnProperty.call(e,\"trans_channel\")&&t.uint32(42).bytes(e.trans_channel),t},ke.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.TransRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.trans_type=e.bytes();break;case 3:r.trans_seq=e.uint32();break;case 4:r.trans_list_seq=e.uint32();break;case 5:r.trans_channel=e.bytes();break;default:e.skipType(7&o)}}return r},ke),o.TransFetchReq=(Ce.prototype.req_head=null,Ce.prototype.trans_channel=a.newBuffer([]),Ce.prototype.fetch_array=a.emptyArray,Ce.create=function(e){return new Ce(e)},Ce.encode=function(e,t){if(t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.trans_channel&&Object.hasOwnProperty.call(e,\"trans_channel\")&&t.uint32(18).bytes(e.trans_channel),null!=e.fetch_array&&e.fetch_array.length)for(var n=0;n<e.fetch_array.length;++n)c.liveroom_cs.StTransFetch.encode(e.fetch_array[n],t.uint32(26).fork()).ldelim();return t},Ce.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.TransFetchReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.trans_channel=e.bytes();break;case 3:r.fetch_array&&r.fetch_array.length||(r.fetch_array=[]),r.fetch_array.push(c.liveroom_cs.StTransFetch.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},Ce),o.StTransFetch=(we.prototype.trans_type=a.newBuffer([]),we.prototype.trans_local_seq=0,we.create=function(e){return new we(e)},we.encode=function(e,t){return t=t||s.create(),null!=e.trans_type&&Object.hasOwnProperty.call(e,\"trans_type\")&&t.uint32(10).bytes(e.trans_type),null!=e.trans_local_seq&&Object.hasOwnProperty.call(e,\"trans_local_seq\")&&t.uint32(16).uint32(e.trans_local_seq),t},we.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StTransFetch;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.trans_type=e.bytes();break;case 2:r.trans_local_seq=e.uint32();break;default:e.skipType(7&o)}}return r},we),o.TransFetchRsp=(Ne.prototype.rsp_head=null,Ne.prototype.trans_channel=a.newBuffer([]),Ne.prototype.trans_fetch_results=a.emptyArray,Ne.prototype.trans_list_seq=0,Ne.create=function(e){return new Ne(e)},Ne.encode=function(e,t){if(t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.trans_channel&&Object.hasOwnProperty.call(e,\"trans_channel\")&&t.uint32(18).bytes(e.trans_channel),null!=e.trans_fetch_results&&e.trans_fetch_results.length)for(var n=0;n<e.trans_fetch_results.length;++n)c.liveroom_cs.TransFetchResult.encode(e.trans_fetch_results[n],t.uint32(26).fork()).ldelim();return null!=e.trans_list_seq&&Object.hasOwnProperty.call(e,\"trans_list_seq\")&&t.uint32(32).uint32(e.trans_list_seq),t},Ne.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.TransFetchRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.trans_channel=e.bytes();break;case 3:r.trans_fetch_results&&r.trans_fetch_results.length||(r.trans_fetch_results=[]),r.trans_fetch_results.push(c.liveroom_cs.TransFetchResult.decode(e,e.uint32()));break;case 4:r.trans_list_seq=e.uint32();break;default:e.skipType(7&o)}}return r},Ne),o.TransFetchResult=(Ie.prototype.trans_type=a.newBuffer([]),Ie.prototype.trans_data=a.newBuffer([]),Ie.prototype.trans_idname=a.newBuffer([]),Ie.prototype.trans_nickname=a.newBuffer([]),Ie.prototype.trans_role=0,Ie.prototype.trans_send_time=a.Long?a.Long.fromBits(0,0,!1):0,Ie.prototype.trans_seq=0,Ie.prototype.err_code=0,Ie.create=function(e){return new Ie(e)},Ie.encode=function(e,t){return t=t||s.create(),null!=e.trans_type&&Object.hasOwnProperty.call(e,\"trans_type\")&&t.uint32(10).bytes(e.trans_type),null!=e.trans_data&&Object.hasOwnProperty.call(e,\"trans_data\")&&t.uint32(18).bytes(e.trans_data),null!=e.trans_idname&&Object.hasOwnProperty.call(e,\"trans_idname\")&&t.uint32(26).bytes(e.trans_idname),null!=e.trans_nickname&&Object.hasOwnProperty.call(e,\"trans_nickname\")&&t.uint32(34).bytes(e.trans_nickname),null!=e.trans_role&&Object.hasOwnProperty.call(e,\"trans_role\")&&t.uint32(40).uint32(e.trans_role),null!=e.trans_send_time&&Object.hasOwnProperty.call(e,\"trans_send_time\")&&t.uint32(48).int64(e.trans_send_time),null!=e.trans_seq&&Object.hasOwnProperty.call(e,\"trans_seq\")&&t.uint32(56).uint32(e.trans_seq),null!=e.err_code&&Object.hasOwnProperty.call(e,\"err_code\")&&t.uint32(64).int32(e.err_code),t},Ie.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.TransFetchResult;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.trans_type=e.bytes();break;case 2:r.trans_data=e.bytes();break;case 3:r.trans_idname=e.bytes();break;case 4:r.trans_nickname=e.bytes();break;case 5:r.trans_role=e.uint32();break;case 6:r.trans_send_time=e.int64();break;case 7:r.trans_seq=e.uint32();break;case 8:r.err_code=e.int32();break;default:e.skipType(7&o)}}return r},Ie),o.UserTransFetchReq=(Me.prototype.req_head=null,Me.prototype.nick_name=a.newBuffer([]),Me.prototype.role=0,Me.prototype.trans_channel=a.newBuffer([]),Me.prototype.fetch_array=a.emptyArray,Me.create=function(e){return new Me(e)},Me.encode=function(e,t){if(t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.nick_name&&Object.hasOwnProperty.call(e,\"nick_name\")&&t.uint32(18).bytes(e.nick_name),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(24).uint32(e.role),null!=e.trans_channel&&Object.hasOwnProperty.call(e,\"trans_channel\")&&t.uint32(34).bytes(e.trans_channel),null!=e.fetch_array&&e.fetch_array.length)for(var n=0;n<e.fetch_array.length;++n)c.liveroom_cs.StUserTransFetch.encode(e.fetch_array[n],t.uint32(42).fork()).ldelim();return t},Me.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.UserTransFetchReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.nick_name=e.bytes();break;case 3:r.role=e.uint32();break;case 4:r.trans_channel=e.bytes();break;case 5:r.fetch_array&&r.fetch_array.length||(r.fetch_array=[]),r.fetch_array.push(c.liveroom_cs.StUserTransFetch.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},Me),o.StUserTransFetch=(Le.prototype.trans_type=a.newBuffer([]),Le.prototype.trans_local_seq=0,Le.create=function(e){return new Le(e)},Le.encode=function(e,t){return t=t||s.create(),null!=e.trans_type&&Object.hasOwnProperty.call(e,\"trans_type\")&&t.uint32(10).bytes(e.trans_type),null!=e.trans_local_seq&&Object.hasOwnProperty.call(e,\"trans_local_seq\")&&t.uint32(16).uint32(e.trans_local_seq),t},Le.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StUserTransFetch;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.trans_type=e.bytes();break;case 2:r.trans_local_seq=e.uint32();break;default:e.skipType(7&o)}}return r},Le),o.UserTransFetchRsp=(Pe.prototype.rsp_head=null,Pe.prototype.trans_channel=a.newBuffer([]),Pe.prototype.trans_fetch_results=a.emptyArray,Pe.create=function(e){return new Pe(e)},Pe.encode=function(e,t){if(t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.trans_channel&&Object.hasOwnProperty.call(e,\"trans_channel\")&&t.uint32(18).bytes(e.trans_channel),null!=e.trans_fetch_results&&e.trans_fetch_results.length)for(var n=0;n<e.trans_fetch_results.length;++n)c.liveroom_cs.StUserTransFetchResult.encode(e.trans_fetch_results[n],t.uint32(26).fork()).ldelim();return t},Pe.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.UserTransFetchRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.trans_channel=e.bytes();break;case 3:r.trans_fetch_results&&r.trans_fetch_results.length||(r.trans_fetch_results=[]),r.trans_fetch_results.push(c.liveroom_cs.StUserTransFetchResult.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},Pe),o.StUserTransFetchResult=(Ae.prototype.trans_type=a.newBuffer([]),Ae.prototype.trans_data=a.newBuffer([]),Ae.prototype.trans_idname=a.newBuffer([]),Ae.prototype.trans_nickname=a.newBuffer([]),Ae.prototype.trans_role=0,Ae.prototype.trans_send_time=a.Long?a.Long.fromBits(0,0,!1):0,Ae.prototype.trans_seq=0,Ae.prototype.err_code=0,Ae.create=function(e){return new Ae(e)},Ae.encode=function(e,t){return t=t||s.create(),null!=e.trans_type&&Object.hasOwnProperty.call(e,\"trans_type\")&&t.uint32(10).bytes(e.trans_type),null!=e.trans_data&&Object.hasOwnProperty.call(e,\"trans_data\")&&t.uint32(18).bytes(e.trans_data),null!=e.trans_idname&&Object.hasOwnProperty.call(e,\"trans_idname\")&&t.uint32(26).bytes(e.trans_idname),null!=e.trans_nickname&&Object.hasOwnProperty.call(e,\"trans_nickname\")&&t.uint32(34).bytes(e.trans_nickname),null!=e.trans_role&&Object.hasOwnProperty.call(e,\"trans_role\")&&t.uint32(40).uint32(e.trans_role),null!=e.trans_send_time&&Object.hasOwnProperty.call(e,\"trans_send_time\")&&t.uint32(48).int64(e.trans_send_time),null!=e.trans_seq&&Object.hasOwnProperty.call(e,\"trans_seq\")&&t.uint32(56).uint32(e.trans_seq),null!=e.err_code&&Object.hasOwnProperty.call(e,\"err_code\")&&t.uint32(64).int32(e.err_code),t},Ae.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StUserTransFetchResult;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.trans_type=e.bytes();break;case 2:r.trans_data=e.bytes();break;case 3:r.trans_idname=e.bytes();break;case 4:r.trans_nickname=e.bytes();break;case 5:r.trans_role=e.uint32();break;case 6:r.trans_send_time=e.int64();break;case 7:r.trans_seq=e.uint32();break;case 8:r.err_code=e.int32();break;default:e.skipType(7&o)}}return r},Ae),o.BigimChatReq=(De.prototype.req_head=null,De.prototype.nick_name=a.newBuffer([]),De.prototype.role=0,De.prototype.msgs=a.emptyArray,De.create=function(e){return new De(e)},De.encode=function(e,t){if(t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.nick_name&&Object.hasOwnProperty.call(e,\"nick_name\")&&t.uint32(18).bytes(e.nick_name),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(24).uint32(e.role),null!=e.msgs&&e.msgs.length)for(var n=0;n<e.msgs.length;++n)c.liveroom_cs.StBigimChatData.encode(e.msgs[n],t.uint32(34).fork()).ldelim();return t},De.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.BigimChatReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.nick_name=e.bytes();break;case 3:r.role=e.uint32();break;case 4:r.msgs&&r.msgs.length||(r.msgs=[]),r.msgs.push(c.liveroom_cs.StBigimChatData.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},De),o.StBigimChatData=(He.prototype.msg_category=0,He.prototype.msg_type=0,He.prototype.msg_content=a.newBuffer([]),He.prototype.msg_timestamp=a.Long?a.Long.fromBits(0,0,!1):0,He.prototype.bigmsg_client_id=a.newBuffer([]),He.create=function(e){return new He(e)},He.encode=function(e,t){return t=t||s.create(),null!=e.msg_category&&Object.hasOwnProperty.call(e,\"msg_category\")&&t.uint32(8).uint32(e.msg_category),null!=e.msg_type&&Object.hasOwnProperty.call(e,\"msg_type\")&&t.uint32(16).uint32(e.msg_type),null!=e.msg_content&&Object.hasOwnProperty.call(e,\"msg_content\")&&t.uint32(26).bytes(e.msg_content),null!=e.msg_timestamp&&Object.hasOwnProperty.call(e,\"msg_timestamp\")&&t.uint32(32).int64(e.msg_timestamp),null!=e.bigmsg_client_id&&Object.hasOwnProperty.call(e,\"bigmsg_client_id\")&&t.uint32(42).bytes(e.bigmsg_client_id),t},He.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StBigimChatData;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.msg_category=e.uint32();break;case 2:r.msg_type=e.uint32();break;case 3:r.msg_content=e.bytes();break;case 4:r.msg_timestamp=e.int64();break;case 5:r.bigmsg_client_id=e.bytes();break;default:e.skipType(7&o)}}return r},He),o.BigimChatRsp=(je.prototype.rsp_head=null,je.prototype.bigim_time_window=0,je.prototype.msgs=a.emptyArray,je.create=function(e){return new je(e)},je.encode=function(e,t){if(t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.bigim_time_window&&Object.hasOwnProperty.call(e,\"bigim_time_window\")&&t.uint32(16).uint32(e.bigim_time_window),null!=e.msgs&&e.msgs.length)for(var n=0;n<e.msgs.length;++n)c.liveroom_cs.StBigimChatRspData.encode(e.msgs[n],t.uint32(26).fork()).ldelim();return t},je.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.BigimChatRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.bigim_time_window=e.uint32();break;case 3:r.msgs&&r.msgs.length||(r.msgs=[]),r.msgs.push(c.liveroom_cs.StBigimChatRspData.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},je),o.StBigimChatRspData=(qe.prototype.bigmsg_id=a.newBuffer([]),qe.prototype.bigmsg_client_id=a.newBuffer([]),qe.create=function(e){return new qe(e)},qe.encode=function(e,t){return t=t||s.create(),null!=e.bigmsg_id&&Object.hasOwnProperty.call(e,\"bigmsg_id\")&&t.uint32(10).bytes(e.bigmsg_id),null!=e.bigmsg_client_id&&Object.hasOwnProperty.call(e,\"bigmsg_client_id\")&&t.uint32(18).bytes(e.bigmsg_client_id),t},qe.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StBigimChatRspData;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.bigmsg_id=e.bytes();break;case 2:r.bigmsg_client_id=e.bytes();break;default:e.skipType(7&o)}}return r},qe),o.RelayReq=(Ue.prototype.req_head=null,Ue.prototype.nick_name=a.newBuffer([]),Ue.prototype.role=0,Ue.prototype.relay_type=a.newBuffer([]),Ue.prototype.relay_data=a.newBuffer([]),Ue.create=function(e){return new Ue(e)},Ue.encode=function(e,t){return t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.nick_name&&Object.hasOwnProperty.call(e,\"nick_name\")&&t.uint32(18).bytes(e.nick_name),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(24).uint32(e.role),null!=e.relay_type&&Object.hasOwnProperty.call(e,\"relay_type\")&&t.uint32(34).bytes(e.relay_type),null!=e.relay_data&&Object.hasOwnProperty.call(e,\"relay_data\")&&t.uint32(42).bytes(e.relay_data),t},Ue.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.RelayReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.nick_name=e.bytes();break;case 3:r.role=e.uint32();break;case 4:r.relay_type=e.bytes();break;case 5:r.relay_data=e.bytes();break;default:e.skipType(7&o)}}return r},Ue),o.RelayRsp=(Be.prototype.rsp_head=null,Be.prototype.reley_type=a.newBuffer([]),Be.prototype.relay_result=a.newBuffer([]),Be.create=function(e){return new Be(e)},Be.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.reley_type&&Object.hasOwnProperty.call(e,\"reley_type\")&&t.uint32(18).bytes(e.reley_type),null!=e.relay_result&&Object.hasOwnProperty.call(e,\"relay_result\")&&t.uint32(26).bytes(e.relay_result),t},Be.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.RelayRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.reley_type=e.bytes();break;case 3:r.relay_result=e.bytes();break;default:e.skipType(7&o)}}return r},Be),o.RenewTokenReq=(xe.prototype.req_head=null,xe.prototype.token=\"\",xe.create=function(e){return new xe(e)},xe.encode=function(e,t){return t=t||s.create(),null!=e.req_head&&Object.hasOwnProperty.call(e,\"req_head\")&&c.liveroom_cs.ReqHead.encode(e.req_head,t.uint32(10).fork()).ldelim(),null!=e.token&&Object.hasOwnProperty.call(e,\"token\")&&t.uint32(18).string(e.token),t},xe.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.RenewTokenReq;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.req_head=c.liveroom_cs.ReqHead.decode(e,e.uint32());break;case 2:r.token=e.string();break;default:e.skipType(7&o)}}return r},xe),o.RenewTokenRsp=(Ge.prototype.rsp_head=null,Ge.prototype.token_remain_time=0,Ge.create=function(e){return new Ge(e)},Ge.encode=function(e,t){return t=t||s.create(),null!=e.rsp_head&&Object.hasOwnProperty.call(e,\"rsp_head\")&&c.liveroom_cs.RspHead.encode(e.rsp_head,t.uint32(10).fork()).ldelim(),null!=e.token_remain_time&&Object.hasOwnProperty.call(e,\"token_remain_time\")&&t.uint32(16).uint32(e.token_remain_time),t},Ge.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.RenewTokenRsp;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.rsp_head=c.liveroom_cs.RspHead.decode(e,e.uint32());break;case 2:r.token_remain_time=e.uint32();break;default:e.skipType(7&o)}}return r},Ge),o.UserAction=(Ve.prototype.action=0,Ve.prototype.id_name=a.newBuffer([]),Ve.prototype.nick_name=a.newBuffer([]),Ve.prototype.role=0,Ve.prototype.login_time=a.Long?a.Long.fromBits(0,0,!1):0,Ve.create=function(e){return new Ve(e)},Ve.encode=function(e,t){return t=t||s.create(),null!=e.action&&Object.hasOwnProperty.call(e,\"action\")&&t.uint32(8).uint32(e.action),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(18).bytes(e.id_name),null!=e.nick_name&&Object.hasOwnProperty.call(e,\"nick_name\")&&t.uint32(26).bytes(e.nick_name),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(32).uint32(e.role),null!=e.login_time&&Object.hasOwnProperty.call(e,\"login_time\")&&t.uint32(40).int64(e.login_time),t},Ve.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.UserAction;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.action=e.uint32();break;case 2:r.id_name=e.bytes();break;case 3:r.nick_name=e.bytes();break;case 4:r.role=e.uint32();break;case 5:r.login_time=e.int64();break;default:e.skipType(7&o)}}return r},Ve),o.PushUserInfoUpdated=(ze.prototype.room_id=a.newBuffer([]),ze.prototype.server_user_seq=a.Long?a.Long.fromBits(0,0,!1):0,ze.prototype.user_list=a.emptyArray,ze.create=function(e){return new ze(e)},ze.encode=function(e,t){if(t=t||s.create(),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(10).bytes(e.room_id),null!=e.server_user_seq&&Object.hasOwnProperty.call(e,\"server_user_seq\")&&t.uint32(16).int64(e.server_user_seq),null!=e.user_list&&e.user_list.length)for(var n=0;n<e.user_list.length;++n)c.liveroom_cs.UserAction.encode(e.user_list[n],t.uint32(26).fork()).ldelim();return t},ze.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.PushUserInfoUpdated;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.room_id=e.bytes();break;case 2:r.server_user_seq=e.int64();break;case 3:r.user_list&&r.user_list.length||(r.user_list=[]),r.user_list.push(c.liveroom_cs.UserAction.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},ze),o.PushUserKickout=(Fe.prototype.id_name=a.newBuffer([]),Fe.prototype.room_id=a.newBuffer([]),Fe.prototype.session_id=a.Long?a.Long.fromBits(0,0,!0):0,Fe.prototype.kickout_reason=0,Fe.prototype.custom_reason=a.newBuffer([]),Fe.create=function(e){return new Fe(e)},Fe.encode=function(e,t){return t=t||s.create(),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(10).bytes(e.id_name),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(18).bytes(e.room_id),null!=e.session_id&&Object.hasOwnProperty.call(e,\"session_id\")&&t.uint32(24).uint64(e.session_id),null!=e.kickout_reason&&Object.hasOwnProperty.call(e,\"kickout_reason\")&&t.uint32(32).int32(e.kickout_reason),null!=e.custom_reason&&Object.hasOwnProperty.call(e,\"custom_reason\")&&t.uint32(42).bytes(e.custom_reason),t},Fe.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.PushUserKickout;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.id_name=e.bytes();break;case 2:r.room_id=e.bytes();break;case 3:r.session_id=e.uint64();break;case 4:r.kickout_reason=e.int32();break;case 5:r.custom_reason=e.bytes();break;default:e.skipType(7&o)}}return r},Fe),o.PushUserLogReport=(We.create=function(e){return new We(e)},We.encode=function(e,t){return t||s.create()},We.decode=function(e,t){e instanceof i||(e=i.create(e));var n=void 0===t?e.len:e.pos+t;for(t=new c.liveroom_cs.PushUserLogReport;e.pos<n;){var r=e.uint32();e.skipType(7&r)}return t},We),o.PushUserTokenExpire=(Ze.prototype.room_id=a.newBuffer([]),Ze.prototype.token=\"\",Ze.prototype.stop_stream=null,Ze.create=function(e){return new Ze(e)},Ze.encode=function(e,t){return t=t||s.create(),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(10).bytes(e.room_id),null!=e.token&&Object.hasOwnProperty.call(e,\"token\")&&t.uint32(18).string(e.token),null!=e.stop_stream&&Object.hasOwnProperty.call(e,\"stop_stream\")&&c.liveroom_cs.StopStream.encode(e.stop_stream,t.uint32(26).fork()).ldelim(),t},Ze.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.PushUserTokenExpire;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.room_id=e.bytes();break;case 2:r.token=e.string();break;case 3:r.stop_stream=c.liveroom_cs.StopStream.decode(e,e.uint32());break;default:e.skipType(7&o)}}return r},Ze),o.StopStream=(Ye.prototype.stream_id_list=a.emptyArray,Ye.create=function(e){return new Ye(e)},Ye.encode=function(e,t){if(t=t||s.create(),null!=e.stream_id_list&&e.stream_id_list.length)for(var n=0;n<e.stream_id_list.length;++n)t.uint32(10).bytes(e.stream_id_list[n]);return t},Ye.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StopStream;e.pos<n;){var o=e.uint32();o>>>3==1?(r.stream_id_list&&r.stream_id_list.length||(r.stream_id_list=[]),r.stream_id_list.push(e.bytes())):e.skipType(7&o)}return r},Ye),o.PushStream=(Ke.prototype.room_id=a.newBuffer([]),Ke.prototype.stream_seq=0,Ke.prototype.stream_info=a.emptyArray,Ke.create=function(e){return new Ke(e)},Ke.encode=function(e,t){if(t=t||s.create(),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(10).bytes(e.room_id),null!=e.stream_seq&&Object.hasOwnProperty.call(e,\"stream_seq\")&&t.uint32(16).uint32(e.stream_seq),null!=e.stream_info&&e.stream_info.length)for(var n=0;n<e.stream_info.length;++n)c.liveroom_cs.StPushStreamInfo.encode(e.stream_info[n],t.uint32(26).fork()).ldelim();return t},Ke.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.PushStream;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.room_id=e.bytes();break;case 2:r.stream_seq=e.uint32();break;case 3:r.stream_info&&r.stream_info.length||(r.stream_info=[]),r.stream_info.push(c.liveroom_cs.StPushStreamInfo.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},Ke),o.StPushStreamInfo=(Xe.prototype.stream_id=a.newBuffer([]),Xe.prototype.stream_sid=\"\",Xe.prototype.id_name=a.newBuffer([]),Xe.prototype.nick_name=a.newBuffer([]),Xe.prototype.extra_info=a.newBuffer([]),Xe.prototype.title=a.newBuffer([]),Xe.prototype.third_define_data=a.newBuffer([]),Xe.prototype.create_time=a.Long?a.Long.fromBits(0,0,!1):0,Xe.prototype.req_seq=0,Xe.prototype.stream_ver=0,Xe.prototype.stream_attr=a.newBuffer([]),Xe.prototype.stream_src=0,Xe.prototype.stream_state=0,Xe.prototype.stream_type=0,Xe.prototype.stream_nid=0,Xe.prototype.close_type=0,Xe.create=function(e){return new Xe(e)},Xe.encode=function(e,t){return t=t||s.create(),null!=e.stream_id&&Object.hasOwnProperty.call(e,\"stream_id\")&&t.uint32(10).bytes(e.stream_id),null!=e.stream_sid&&Object.hasOwnProperty.call(e,\"stream_sid\")&&t.uint32(18).string(e.stream_sid),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(26).bytes(e.id_name),null!=e.nick_name&&Object.hasOwnProperty.call(e,\"nick_name\")&&t.uint32(34).bytes(e.nick_name),null!=e.extra_info&&Object.hasOwnProperty.call(e,\"extra_info\")&&t.uint32(42).bytes(e.extra_info),null!=e.title&&Object.hasOwnProperty.call(e,\"title\")&&t.uint32(50).bytes(e.title),null!=e.third_define_data&&Object.hasOwnProperty.call(e,\"third_define_data\")&&t.uint32(58).bytes(e.third_define_data),null!=e.create_time&&Object.hasOwnProperty.call(e,\"create_time\")&&t.uint32(64).int64(e.create_time),null!=e.req_seq&&Object.hasOwnProperty.call(e,\"req_seq\")&&t.uint32(72).uint32(e.req_seq),null!=e.stream_ver&&Object.hasOwnProperty.call(e,\"stream_ver\")&&t.uint32(80).uint32(e.stream_ver),null!=e.stream_attr&&Object.hasOwnProperty.call(e,\"stream_attr\")&&t.uint32(90).bytes(e.stream_attr),null!=e.stream_src&&Object.hasOwnProperty.call(e,\"stream_src\")&&t.uint32(96).uint32(e.stream_src),null!=e.stream_state&&Object.hasOwnProperty.call(e,\"stream_state\")&&t.uint32(104).uint32(e.stream_state),null!=e.stream_type&&Object.hasOwnProperty.call(e,\"stream_type\")&&t.uint32(112).uint32(e.stream_type),null!=e.stream_nid&&Object.hasOwnProperty.call(e,\"stream_nid\")&&t.uint32(120).uint32(e.stream_nid),null!=e.close_type&&Object.hasOwnProperty.call(e,\"close_type\")&&t.uint32(128).uint32(e.close_type),t},Xe.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StPushStreamInfo;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.stream_id=e.bytes();break;case 2:r.stream_sid=e.string();break;case 3:r.id_name=e.bytes();break;case 4:r.nick_name=e.bytes();break;case 5:r.extra_info=e.bytes();break;case 6:r.title=e.bytes();break;case 7:r.third_define_data=e.bytes();break;case 8:r.create_time=e.int64();break;case 9:r.req_seq=e.uint32();break;case 10:r.stream_ver=e.uint32();break;case 11:r.stream_attr=e.bytes();break;case 12:r.stream_src=e.uint32();break;case 13:r.stream_state=e.uint32();break;case 14:r.stream_type=e.uint32();break;case 15:r.stream_nid=e.uint32();break;case 16:r.close_type=e.uint32();break;default:e.skipType(7&o)}}return r},Xe),o.PushImChat=(Je.prototype.room_id=a.newBuffer([]),Je.prototype.server_msg_id=a.Long?a.Long.fromBits(0,0,!0):0,Je.prototype.ret_msg_id=a.Long?a.Long.fromBits(0,0,!0):0,Je.prototype.msg_data=a.emptyArray,Je.create=function(e){return new Je(e)},Je.encode=function(e,t){if(t=t||s.create(),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(10).bytes(e.room_id),null!=e.server_msg_id&&Object.hasOwnProperty.call(e,\"server_msg_id\")&&t.uint32(16).uint64(e.server_msg_id),null!=e.ret_msg_id&&Object.hasOwnProperty.call(e,\"ret_msg_id\")&&t.uint32(24).uint64(e.ret_msg_id),null!=e.msg_data&&e.msg_data.length)for(var n=0;n<e.msg_data.length;++n)c.liveroom_cs.StImChatData.encode(e.msg_data[n],t.uint32(34).fork()).ldelim();return t},Je.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.PushImChat;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.room_id=e.bytes();break;case 2:r.server_msg_id=e.uint64();break;case 3:r.ret_msg_id=e.uint64();break;case 4:r.msg_data&&r.msg_data.length||(r.msg_data=[]),r.msg_data.push(c.liveroom_cs.StImChatData.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},Je),o.StImChatData=(Qe.prototype.id_name=a.newBuffer([]),Qe.prototype.nick_name=a.newBuffer([]),Qe.prototype.role=0,Qe.prototype.msg_id=a.Long?a.Long.fromBits(0,0,!0):0,Qe.prototype.msg_category=0,Qe.prototype.msg_type=0,Qe.prototype.msg_priority=0,Qe.prototype.msg_content=a.newBuffer([]),Qe.prototype.send_time=a.Long?a.Long.fromBits(0,0,!1):0,Qe.create=function(e){return new Qe(e)},Qe.encode=function(e,t){return t=t||s.create(),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(10).bytes(e.id_name),null!=e.nick_name&&Object.hasOwnProperty.call(e,\"nick_name\")&&t.uint32(18).bytes(e.nick_name),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(24).uint32(e.role),null!=e.msg_id&&Object.hasOwnProperty.call(e,\"msg_id\")&&t.uint32(32).uint64(e.msg_id),null!=e.msg_category&&Object.hasOwnProperty.call(e,\"msg_category\")&&t.uint32(40).uint32(e.msg_category),null!=e.msg_type&&Object.hasOwnProperty.call(e,\"msg_type\")&&t.uint32(48).uint32(e.msg_type),null!=e.msg_priority&&Object.hasOwnProperty.call(e,\"msg_priority\")&&t.uint32(56).uint32(e.msg_priority),null!=e.msg_content&&Object.hasOwnProperty.call(e,\"msg_content\")&&t.uint32(66).bytes(e.msg_content),null!=e.send_time&&Object.hasOwnProperty.call(e,\"send_time\")&&t.uint32(72).int64(e.send_time),t},Qe.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StImChatData;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.id_name=e.bytes();break;case 2:r.nick_name=e.bytes();break;case 3:r.role=e.uint32();break;case 4:r.msg_id=e.uint64();break;case 5:r.msg_category=e.uint32();break;case 6:r.msg_type=e.uint32();break;case 7:r.msg_priority=e.uint32();break;case 8:r.msg_content=e.bytes();break;case 9:r.send_time=e.int64();break;default:e.skipType(7&o)}}return r},Qe),o.PushBigImChat=($e.prototype.app_id=0,$e.prototype.room_id=a.newBuffer([]),$e.prototype.timestamp=a.Long?a.Long.fromBits(0,0,!1):0,$e.prototype.msg_data=a.emptyArray,$e.create=function(e){return new $e(e)},$e.encode=function(e,t){if(t=t||s.create(),null!=e.app_id&&Object.hasOwnProperty.call(e,\"app_id\")&&t.uint32(8).uint32(e.app_id),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(18).bytes(e.room_id),null!=e.timestamp&&Object.hasOwnProperty.call(e,\"timestamp\")&&t.uint32(24).int64(e.timestamp),null!=e.msg_data&&e.msg_data.length)for(var n=0;n<e.msg_data.length;++n)c.liveroom_cs.StBigImChatData.encode(e.msg_data[n],t.uint32(34).fork()).ldelim();return t},$e.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.PushBigImChat;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.app_id=e.uint32();break;case 2:r.room_id=e.bytes();break;case 3:r.timestamp=e.int64();break;case 4:r.msg_data&&r.msg_data.length||(r.msg_data=[]),r.msg_data.push(c.liveroom_cs.StBigImChatData.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},$e),o.StBigImChatData=(et.prototype.id_name=a.newBuffer([]),et.prototype.nick_name=a.newBuffer([]),et.prototype.role=0,et.prototype.bigmsg_id=a.newBuffer([]),et.prototype.msg_category=0,et.prototype.msg_type=0,et.prototype.msg_content=a.newBuffer([]),et.prototype.msg_timestamp=a.Long?a.Long.fromBits(0,0,!1):0,et.create=function(e){return new et(e)},et.encode=function(e,t){return t=t||s.create(),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(10).bytes(e.id_name),null!=e.nick_name&&Object.hasOwnProperty.call(e,\"nick_name\")&&t.uint32(18).bytes(e.nick_name),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(24).uint32(e.role),null!=e.bigmsg_id&&Object.hasOwnProperty.call(e,\"bigmsg_id\")&&t.uint32(34).bytes(e.bigmsg_id),null!=e.msg_category&&Object.hasOwnProperty.call(e,\"msg_category\")&&t.uint32(40).uint32(e.msg_category),null!=e.msg_type&&Object.hasOwnProperty.call(e,\"msg_type\")&&t.uint32(48).uint32(e.msg_type),null!=e.msg_content&&Object.hasOwnProperty.call(e,\"msg_content\")&&t.uint32(58).bytes(e.msg_content),null!=e.msg_timestamp&&Object.hasOwnProperty.call(e,\"msg_timestamp\")&&t.uint32(64).int64(e.msg_timestamp),t},et.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StBigImChatData;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.id_name=e.bytes();break;case 2:r.nick_name=e.bytes();break;case 3:r.role=e.uint32();break;case 4:r.bigmsg_id=e.bytes();break;case 5:r.msg_category=e.uint32();break;case 6:r.msg_type=e.uint32();break;case 7:r.msg_content=e.bytes();break;case 8:r.msg_timestamp=e.int64();break;default:e.skipType(7&o)}}return r},et),o.PushTrans=(tt.prototype.app_id=0,tt.prototype.room_id=a.newBuffer([]),tt.prototype.trans_idname=a.newBuffer([]),tt.prototype.trans_nickname=a.newBuffer([]),tt.prototype.trans_role=0,tt.prototype.trans_type=a.newBuffer([]),tt.prototype.trans_data=a.newBuffer([]),tt.prototype.trans_seq=0,tt.prototype.trans_send_time=a.Long?a.Long.fromBits(0,0,!1):0,tt.prototype.trans_channel=a.newBuffer([]),tt.prototype.trans_list_seq=0,tt.create=function(e){return new tt(e)},tt.encode=function(e,t){return t=t||s.create(),null!=e.app_id&&Object.hasOwnProperty.call(e,\"app_id\")&&t.uint32(8).uint32(e.app_id),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(18).bytes(e.room_id),null!=e.trans_idname&&Object.hasOwnProperty.call(e,\"trans_idname\")&&t.uint32(26).bytes(e.trans_idname),null!=e.trans_nickname&&Object.hasOwnProperty.call(e,\"trans_nickname\")&&t.uint32(34).bytes(e.trans_nickname),null!=e.trans_role&&Object.hasOwnProperty.call(e,\"trans_role\")&&t.uint32(40).uint32(e.trans_role),null!=e.trans_type&&Object.hasOwnProperty.call(e,\"trans_type\")&&t.uint32(50).bytes(e.trans_type),null!=e.trans_data&&Object.hasOwnProperty.call(e,\"trans_data\")&&t.uint32(58).bytes(e.trans_data),null!=e.trans_seq&&Object.hasOwnProperty.call(e,\"trans_seq\")&&t.uint32(64).uint32(e.trans_seq),null!=e.trans_send_time&&Object.hasOwnProperty.call(e,\"trans_send_time\")&&t.uint32(72).int64(e.trans_send_time),null!=e.trans_channel&&Object.hasOwnProperty.call(e,\"trans_channel\")&&t.uint32(82).bytes(e.trans_channel),null!=e.trans_list_seq&&Object.hasOwnProperty.call(e,\"trans_list_seq\")&&t.uint32(88).uint32(e.trans_list_seq),t},tt.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.PushTrans;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.app_id=e.uint32();break;case 2:r.room_id=e.bytes();break;case 3:r.trans_idname=e.bytes();break;case 4:r.trans_nickname=e.bytes();break;case 5:r.trans_role=e.uint32();break;case 6:r.trans_type=e.bytes();break;case 7:r.trans_data=e.bytes();break;case 8:r.trans_seq=e.uint32();break;case 9:r.trans_send_time=e.int64();break;case 10:r.trans_channel=e.bytes();break;case 11:r.trans_list_seq=e.uint32();break;default:e.skipType(7&o)}}return r},tt),o.PushUserTrans=(nt.prototype.app_id=0,nt.prototype.room_id=a.newBuffer([]),nt.prototype.trans_idname=a.newBuffer([]),nt.prototype.trans_nickname=a.newBuffer([]),nt.prototype.trans_role=0,nt.prototype.trans_send_time=a.Long?a.Long.fromBits(0,0,!1):0,nt.prototype.trans_channel=a.newBuffer([]),nt.prototype.trans_array=a.emptyArray,nt.create=function(e){return new nt(e)},nt.encode=function(e,t){if(t=t||s.create(),null!=e.app_id&&Object.hasOwnProperty.call(e,\"app_id\")&&t.uint32(8).uint32(e.app_id),null!=e.room_id&&Object.hasOwnProperty.call(e,\"room_id\")&&t.uint32(18).bytes(e.room_id),null!=e.trans_idname&&Object.hasOwnProperty.call(e,\"trans_idname\")&&t.uint32(26).bytes(e.trans_idname),null!=e.trans_nickname&&Object.hasOwnProperty.call(e,\"trans_nickname\")&&t.uint32(34).bytes(e.trans_nickname),null!=e.trans_role&&Object.hasOwnProperty.call(e,\"trans_role\")&&t.uint32(40).uint32(e.trans_role),null!=e.trans_send_time&&Object.hasOwnProperty.call(e,\"trans_send_time\")&&t.uint32(72).int64(e.trans_send_time),null!=e.trans_channel&&Object.hasOwnProperty.call(e,\"trans_channel\")&&t.uint32(82).bytes(e.trans_channel),null!=e.trans_array&&e.trans_array.length)for(var n=0;n<e.trans_array.length;++n)c.liveroom_cs.StTransSimple.encode(e.trans_array[n],t.uint32(90).fork()).ldelim();return t},nt.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.PushUserTrans;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.app_id=e.uint32();break;case 2:r.room_id=e.bytes();break;case 3:r.trans_idname=e.bytes();break;case 4:r.trans_nickname=e.bytes();break;case 5:r.trans_role=e.uint32();break;case 9:r.trans_send_time=e.int64();break;case 10:r.trans_channel=e.bytes();break;case 11:r.trans_array&&r.trans_array.length||(r.trans_array=[]),r.trans_array.push(c.liveroom_cs.StTransSimple.decode(e,e.uint32()));break;default:e.skipType(7&o)}}return r},nt),o.StTransSimple=(rt.prototype.trans_type=a.newBuffer([]),rt.prototype.trans_data=a.newBuffer([]),rt.prototype.trans_seq=0,rt.create=function(e){return new rt(e)},rt.encode=function(e,t){return t=t||s.create(),null!=e.trans_type&&Object.hasOwnProperty.call(e,\"trans_type\")&&t.uint32(10).bytes(e.trans_type),null!=e.trans_data&&Object.hasOwnProperty.call(e,\"trans_data\")&&t.uint32(18).bytes(e.trans_data),null!=e.trans_seq&&Object.hasOwnProperty.call(e,\"trans_seq\")&&t.uint32(24).uint32(e.trans_seq),t},rt.decode=function(e,t){e instanceof i||(e=i.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.liveroom_cs.StTransSimple;e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.trans_type=e.bytes();break;case 2:r.trans_data=e.bytes();break;case 3:r.trans_seq=e.uint32();break;default:e.skipType(7&o)}}return r},rt),o),e.exports=c},function(e,t,n){var r=function(e){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.default=void 0;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function r(e){return!0===(e&&e.__isLong__)}function o(e){var t=Math.clz32(e&-e);return e?31-t:t}Object.defineProperty(n.prototype,\"__isLong__\",{value:!0}),n.isLong=r;var i={},s={};function a(e,t){var n,r,o;return t?(o=0<=(e>>>=0)&&e<256)&&(r=s[e])?r:(n=u(e,0,!0),o&&(s[e]=n),n):(o=-128<=(e|=0)&&e<128)&&(r=i[e])?r:(n=u(e,e<0?-1:0,!1),o&&(i[e]=n),n)}function c(e,t){if(isNaN(e))return t?y:m;if(t){if(e<0)return y;if(_<=e)return T}else{if(e<=-f)return S;if(f<=e+1)return O}return e<0?c(-e,t).neg():u(e%d|0,e/d|0,t)}function u(e,t,r){return new n(e,t,r)}n.fromInt=a,n.fromNumber=c,n.fromBits=u;var l=Math.pow;function h(e,t,n){if(0===e.length)throw Error(\"empty string\");if(t=\"number\"==typeof t?(n=t,!1):!!t,\"NaN\"===e||\"Infinity\"===e||\"+Infinity\"===e||\"-Infinity\"===e)return t?y:m;if((n=n||10)<2||36<n)throw RangeError(\"radix\");var r;if(0<(r=e.indexOf(\"-\")))throw Error(\"interior hyphen\");if(0===r)return h(e.substring(1),t,n).neg();for(var o=c(l(n,8)),i=m,s=0;s<e.length;s+=8){var a=Math.min(8,e.length-s),u=parseInt(e.substring(s,s+a),n);i=a<8?(a=c(l(n,a)),i.mul(a).add(c(u))):(i=i.mul(o)).add(c(u))}return i.unsigned=t,i}function p(e,t){return\"number\"==typeof e?c(e,t):\"string\"==typeof e?h(e,t):u(e.low,e.high,\"boolean\"==typeof t?t:e.unsigned)}n.fromString=h,n.fromValue=p;var d=4294967296,_=d*d,f=_/2,g=a(1<<24),m=a(0),y=(n.ZERO=m,a(0,!0)),v=(n.UZERO=y,a(1)),b=(n.ONE=v,a(1,!0)),E=(n.UONE=b,a(-1)),O=(n.NEG_ONE=E,u(-1,2147483647,!1)),T=(n.MAX_VALUE=O,u(-1,-1,!0)),S=(n.MAX_UNSIGNED_VALUE=T,u(0,-2147483648,!1)),R=(n.MIN_VALUE=S,n.prototype);return R.toInt=function(){return this.unsigned?this.low>>>0:this.low},R.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},R.toString=function(e){if((e=e||10)<2||36<e)throw RangeError(\"radix\");if(this.isZero())return\"0\";var t,n;if(this.isNegative())return this.eq(S)?(n=c(e),n=(t=this.div(n)).mul(n).sub(this),t.toString(e)+n.toInt().toString(e)):\"-\"+this.neg().toString(e);for(var r=c(l(e,6),this.unsigned),o=this,i=\"\";;){var s=o.div(r),a=(o.sub(s.mul(r)).toInt()>>>0).toString(e);if((o=s).isZero())return a+i;for(;a.length<6;)a=\"0\"+a;i=\"\"+a+i}},R.getHighBits=function(){return this.high},R.getHighBitsUnsigned=function(){return this.high>>>0},R.getLowBits=function(){return this.low},R.getLowBitsUnsigned=function(){return this.low>>>0},R.getNumBitsAbs=function(){if(this.isNegative())return this.eq(S)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;0<t&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},R.isZero=function(){return 0===this.high&&0===this.low},R.eqz=R.isZero,R.isNegative=function(){return!this.unsigned&&this.high<0},R.isPositive=function(){return this.unsigned||0<=this.high},R.isOdd=function(){return 1==(1&this.low)},R.isEven=function(){return 0==(1&this.low)},R.equals=function(e){return r(e)||(e=p(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},R.eq=R.equals,R.notEquals=function(e){return!this.eq(e)},R.neq=R.notEquals,R.ne=R.notEquals,R.lessThan=function(e){return this.comp(e)<0},R.lt=R.lessThan,R.lessThanOrEqual=function(e){return this.comp(e)<=0},R.lte=R.lessThanOrEqual,R.le=R.lessThanOrEqual,R.greaterThan=function(e){return 0<this.comp(e)},R.gt=R.greaterThan,R.greaterThanOrEqual=function(e){return 0<=this.comp(e)},R.gte=R.greaterThanOrEqual,R.ge=R.greaterThanOrEqual,R.compare=function(e){if(r(e)||(e=p(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},R.comp=R.compare,R.negate=function(){return!this.unsigned&&this.eq(S)?S:this.not().add(v)},R.neg=R.negate,R.add=function(e){r(e)||(e=p(e));var t=this.high>>>16,n=65535&this.high,o=this.low>>>16,i=65535&this.low,s=e.high>>>16,a=65535&e.high,c=e.low>>>16,l=0,h=0,d=0,_=0;return h+=(d=d+((_+=i+(65535&e.low))>>>16)+(o+c))>>>16,u((d&=65535)<<16|(_&=65535),((l+=(h+=n+a)>>>16)+(t+s)&65535)<<16|(h&=65535),this.unsigned)},R.subtract=function(e){return r(e)||(e=p(e)),this.add(e.neg())},R.sub=R.subtract,R.multiply=function(e){if(this.isZero())return this;if(r(e)||(e=p(e)),t)return u(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return this.unsigned?y:m;if(this.eq(S))return e.isOdd()?S:m;if(e.eq(S))return this.isOdd()?S:m;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(g)&&e.lt(g))return c(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,o=65535&this.high,i=this.low>>>16,s=65535&this.low,a=e.high>>>16,l=65535&e.high,h=e.low>>>16,d=0,_=0,f=0,v=(v=0)+((_=_+((f+=s*(e=65535&e.low))>>>16)+i*e)>>>16)+((_=(65535&_)+s*h)>>>16);return u((_&=65535)<<16|(f&=65535),((d+=(v+=o*e)>>>16)+((v=(65535&v)+i*h)>>>16)+((v=(65535&v)+s*l)>>>16)+(n*e+o*h+i*l+s*a)&65535)<<16|(v&=65535),this.unsigned)},R.mul=R.multiply,R.divide=function(e){if((e=r(e)?e:p(e)).isZero())throw Error(\"division by zero\");var n,o,i;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?u((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:m;if(this.unsigned){if((e=e.unsigned?e:e.toUnsigned()).gt(this))return y;if(e.gt(this.shru(1)))return b;o=y}else{if(this.eq(S))return e.eq(v)||e.eq(E)?S:e.eq(S)?v:(i=this.shr(1).div(e).shl(1)).eq(m)?e.isNegative()?v:E:(n=this.sub(e.mul(i)),i.add(n.div(e)));if(e.eq(S))return this.unsigned?y:m;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();o=m}for(n=this;n.gte(e);){i=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var s=Math.ceil(Math.log(i)/Math.LN2),a=s<=48?1:l(2,s-48),h=c(i),d=h.mul(e);d.isNegative()||d.gt(n);)d=(h=c(i-=a,this.unsigned)).mul(e);h.isZero()&&(h=v),o=o.add(h),n=n.sub(d)}return o},R.div=R.divide,R.modulo=function(e){return r(e)||(e=p(e)),t?u((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},R.mod=R.modulo,R.rem=R.modulo,R.not=function(){return u(~this.low,~this.high,this.unsigned)},R.countLeadingZeros=function(){return this.high?Math.clz32(this.high):Math.clz32(this.low)+32},R.clz=R.countLeadingZeros,R.countTrailingZeros=function(){return this.low?o(this.low):o(this.high)+32},R.ctz=R.countTrailingZeros,R.and=function(e){return r(e)||(e=p(e)),u(this.low&e.low,this.high&e.high,this.unsigned)},R.or=function(e){return r(e)||(e=p(e)),u(this.low|e.low,this.high|e.high,this.unsigned)},R.xor=function(e){return r(e)||(e=p(e)),u(this.low^e.low,this.high^e.high,this.unsigned)},R.shiftLeft=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):u(0,this.low<<e-32,this.unsigned)},R.shl=R.shiftLeft,R.shiftRight=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):u(this.high>>e-32,0<=this.high?0:-1,this.unsigned)},R.shr=R.shiftRight,R.shiftRightUnsigned=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low>>>e|this.high<<32-e,this.high>>>e,this.unsigned):u(32===e?this.high:this.high>>>e-32,0,this.unsigned)},R.shru=R.shiftRightUnsigned,R.shr_u=R.shiftRightUnsigned,R.rotateLeft=function(e){var t;return r(e)&&(e=e.toInt()),0==(e&=63)?this:32===e?u(this.high,this.low,this.unsigned):e<32?u(this.low<<e|this.high>>>(t=32-e),this.high<<e|this.low>>>t,this.unsigned):u(this.high<<(e-=32)|this.low>>>(t=32-e),this.low<<e|this.high>>>t,this.unsigned)},R.rotl=R.rotateLeft,R.rotateRight=function(e){var t;return r(e)&&(e=e.toInt()),0==(e&=63)?this:32===e?u(this.high,this.low,this.unsigned):e<32?u(this.high<<(t=32-e)|this.low>>>e,this.low<<t|this.high>>>e,this.unsigned):u(this.low<<(t=32-(e-=32))|this.high>>>e,this.high<<t|this.low>>>e,this.unsigned)},R.rotr=R.rotateRight,R.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},R.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},R.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},R.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},R.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,r){return r?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)},e.default=n,\"default\"in e?e.default:e}({});void 0!==(t=function(){return r}.apply(t,[]))&&(e.exports=t)},function(e,t,n){(function(t){var r;e.exports=(r=function(e){var r;if(\"undefined\"!=typeof window&&window.crypto&&(r=window.crypto),\"undefined\"!=typeof self&&self.crypto&&(r=self.crypto),!(r=!(r=!(r=\"undefined\"!=typeof globalThis&&globalThis.crypto?globalThis.crypto:r)&&\"undefined\"!=typeof window&&window.msCrypto?window.msCrypto:r)&&void 0!==t&&t.crypto?t.crypto:r))try{r=n(16)}catch(s){}var o=Object.create||function(e){return i.prototype=e,e=new i,i.prototype=null,e};function i(){}var s={},a=s.lib={},c=a.Base={extend:function(e){var t=o(this);return e&&t.mixIn(e),t.hasOwnProperty(\"init\")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),(t.init.prototype=t).$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty(\"toString\")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},u=a.WordArray=c.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||h).stringify(this)},concat:function(e){var t=this.words,n=e.words,r=this.sigBytes,o=e.sigBytes;if(this.clamp(),r%4)for(var i=0;i<o;i++){var s=n[i>>>2]>>>24-i%4*8&255;t[r+i>>>2]|=s<<24-(r+i)%4*8}else for(var a=0;a<o;a+=4)t[r+a>>>2]=n[a>>>2];return this.sigBytes+=o,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=c.clone.call(this);return e.words=this.words.slice(0),e},random:function(e){for(var t=[],n=0;n<e;n+=4)t.push(function(){if(r){if(\"function\"==typeof r.getRandomValues)try{return r.getRandomValues(new Uint32Array(1))[0]}catch(e){}if(\"function\"==typeof r.randomBytes)try{return r.randomBytes(4).readInt32LE()}catch(e){}}throw new Error(\"Native crypto module could not be used to get secure random number.\")}());return new u.init(t,e)}}),l=s.enc={},h=l.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push((i>>>4).toString(16)),r.push((15&i).toString(16))}return r.join(\"\")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r+=2)n[r>>>3]|=parseInt(e.substr(r,2),16)<<24-r%8*4;return new u.init(n,t/2)}},p=l.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push(String.fromCharCode(i))}return r.join(\"\")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r>>>2]|=(255&e.charCodeAt(r))<<24-r%4*8;return new u.init(n,t)}},d=l.Utf8={stringify:function(e){try{return decodeURIComponent(escape(p.stringify(e)))}catch(e){throw new Error(\"Malformed UTF-8 data\")}},parse:function(e){return p.parse(unescape(encodeURIComponent(e)))}},_=a.BufferedBlockAlgorithm=c.extend({reset:function(){this._data=new u.init,this._nDataBytes=0},_append:function(e){\"string\"==typeof e&&(e=d.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n,r=this._data,o=r.words,i=r.sigBytes,s=this.blockSize,a=i/(4*s),c=(a=t?e.ceil(a):e.max((0|a)-this._minBufferSize,0))*s;t=e.min(4*c,i);if(c){for(var l=0;l<c;l+=s)this._doProcessBlock(o,l);n=o.splice(0,c),r.sigBytes-=t}return new u.init(n,t)},clone:function(){var e=c.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),f=(a.Hasher=_.extend({cfg:c.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){_.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new f.HMAC.init(e,n).finalize(t)}}}),s.algo={});return s}(Math),r)}).call(this,n(10))},function(e,t,n){e.exports=function(e){for(var t=e,n=t.lib.BlockCipher,r=t.algo,o=[],i=[],s=[],a=[],c=[],u=[],l=[],h=[],p=[],d=[],_=[],f=0;f<256;f++)_[f]=f<128?f<<1:f<<1^283;var g=0,m=0;for(f=0;f<256;f++){var y=m^m<<1^m<<2^m<<3^m<<4;y=y>>>8^255&y^99,o[g]=y,i[y]=g;var v=_[g],b=_[v],E=_[b],O=257*_[y]^16843008*y;s[g]=O<<24|O>>>8,a[g]=O<<16|O>>>16,c[g]=O<<8|O>>>24,u[g]=O;O=16843009*E^65537*b^257*v^16843008*g;l[y]=O<<24|O>>>8,h[y]=O<<16|O>>>16,p[y]=O<<8|O>>>24,d[y]=O,g?(g=v^_[_[_[E^v]]],m^=_[_[m]]):g=m=1}var T=[0,1,2,4,8,16,32,64,128,27,54],S=r.AES=n.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var e=this._keyPriorReset=this._key,t=e.words,n=e.sigBytes/4,r=4*((this._nRounds=n+6)+1),i=this._keySchedule=[],s=0;s<r;s++)s<n?i[s]=t[s]:(u=i[s-1],s%n?n>6&&s%n==4&&(u=o[u>>>24]<<24|o[u>>>16&255]<<16|o[u>>>8&255]<<8|o[255&u]):(u=o[(u=u<<8|u>>>24)>>>24]<<24|o[u>>>16&255]<<16|o[u>>>8&255]<<8|o[255&u],u^=T[s/n|0]<<24),i[s]=i[s-n]^u);for(var a=this._invKeySchedule=[],c=0;c<r;c++){s=r-c;if(c%4)var u=i[s];else u=i[s-4];a[c]=c<4||s<=4?u:l[o[u>>>24]]^h[o[u>>>16&255]]^p[o[u>>>8&255]]^d[o[255&u]]}}},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._keySchedule,s,a,c,u,o)},decryptBlock:function(e,t){var n=e[t+1];e[t+1]=e[t+3],e[t+3]=n,this._doCryptBlock(e,t,this._invKeySchedule,l,h,p,d,i);n=e[t+1];e[t+1]=e[t+3],e[t+3]=n},_doCryptBlock:function(e,t,n,r,o,i,s,a){for(var c=this._nRounds,u=e[t]^n[0],l=e[t+1]^n[1],h=e[t+2]^n[2],p=e[t+3]^n[3],d=4,_=1;_<c;_++){var f=r[u>>>24]^o[l>>>16&255]^i[h>>>8&255]^s[255&p]^n[d++],g=r[l>>>24]^o[h>>>16&255]^i[p>>>8&255]^s[255&u]^n[d++],m=r[h>>>24]^o[p>>>16&255]^i[u>>>8&255]^s[255&l]^n[d++],y=r[p>>>24]^o[u>>>16&255]^i[l>>>8&255]^s[255&h]^n[d++];u=f,l=g,h=m,p=y}f=(a[u>>>24]<<24|a[l>>>16&255]<<16|a[h>>>8&255]<<8|a[255&p])^n[d++],g=(a[l>>>24]<<24|a[h>>>16&255]<<16|a[p>>>8&255]<<8|a[255&u])^n[d++],m=(a[h>>>24]<<24|a[p>>>16&255]<<16|a[u>>>8&255]<<8|a[255&l])^n[d++],y=(a[p>>>24]<<24|a[u>>>16&255]<<16|a[l>>>8&255]<<8|a[255&h])^n[d++];e[t]=f,e[t+1]=g,e[t+2]=m,e[t+3]=y},keySize:8});return t.AES=n._createHelper(S),e.AES}(n(2),(n(17),n(4),n(11),n(20)))},function(e,t,n){e.exports=function(e){for(var t=Math,n=e,r=n.lib,o=r.WordArray,i=r.Hasher,s=n.algo,a=[],c=0;c<64;c++)a[c]=4294967296*t.abs(t.sin(c+1))|0;var u=s.MD5=i.extend({_doReset:function(){this._hash=new o.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(e,t){for(var n=0;n<16;n++){var r=t+n,o=e[r];e[r]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8)}var i=this._hash.words,s=e[t+0],c=e[t+1],u=e[t+2],_=e[t+3],f=e[t+4],g=e[t+5],m=e[t+6],y=e[t+7],v=e[t+8],b=e[t+9],E=e[t+10],O=e[t+11],T=e[t+12],S=e[t+13],R=e[t+14],k=e[t+15],C=i[0],w=i[1],N=i[2],I=i[3];C=l(C,w,N,I,s,7,a[0]),I=l(I,C,w,N,c,12,a[1]),N=l(N,I,C,w,u,17,a[2]),w=l(w,N,I,C,_,22,a[3]),C=l(C,w,N,I,f,7,a[4]),I=l(I,C,w,N,g,12,a[5]),N=l(N,I,C,w,m,17,a[6]),w=l(w,N,I,C,y,22,a[7]),C=l(C,w,N,I,v,7,a[8]),I=l(I,C,w,N,b,12,a[9]),N=l(N,I,C,w,E,17,a[10]),w=l(w,N,I,C,O,22,a[11]),C=l(C,w,N,I,T,7,a[12]),I=l(I,C,w,N,S,12,a[13]),N=l(N,I,C,w,R,17,a[14]),C=h(C,w=l(w,N,I,C,k,22,a[15]),N,I,c,5,a[16]),I=h(I,C,w,N,m,9,a[17]),N=h(N,I,C,w,O,14,a[18]),w=h(w,N,I,C,s,20,a[19]),C=h(C,w,N,I,g,5,a[20]),I=h(I,C,w,N,E,9,a[21]),N=h(N,I,C,w,k,14,a[22]),w=h(w,N,I,C,f,20,a[23]),C=h(C,w,N,I,b,5,a[24]),I=h(I,C,w,N,R,9,a[25]),N=h(N,I,C,w,_,14,a[26]),w=h(w,N,I,C,v,20,a[27]),C=h(C,w,N,I,S,5,a[28]),I=h(I,C,w,N,u,9,a[29]),N=h(N,I,C,w,y,14,a[30]),C=p(C,w=h(w,N,I,C,T,20,a[31]),N,I,g,4,a[32]),I=p(I,C,w,N,v,11,a[33]),N=p(N,I,C,w,O,16,a[34]),w=p(w,N,I,C,R,23,a[35]),C=p(C,w,N,I,c,4,a[36]),I=p(I,C,w,N,f,11,a[37]),N=p(N,I,C,w,y,16,a[38]),w=p(w,N,I,C,E,23,a[39]),C=p(C,w,N,I,S,4,a[40]),I=p(I,C,w,N,s,11,a[41]),N=p(N,I,C,w,_,16,a[42]),w=p(w,N,I,C,m,23,a[43]),C=p(C,w,N,I,b,4,a[44]),I=p(I,C,w,N,T,11,a[45]),N=p(N,I,C,w,k,16,a[46]),C=d(C,w=p(w,N,I,C,u,23,a[47]),N,I,s,6,a[48]),I=d(I,C,w,N,y,10,a[49]),N=d(N,I,C,w,R,15,a[50]),w=d(w,N,I,C,g,21,a[51]),C=d(C,w,N,I,T,6,a[52]),I=d(I,C,w,N,_,10,a[53]),N=d(N,I,C,w,E,15,a[54]),w=d(w,N,I,C,c,21,a[55]),C=d(C,w,N,I,v,6,a[56]),I=d(I,C,w,N,k,10,a[57]),N=d(N,I,C,w,m,15,a[58]),w=d(w,N,I,C,S,21,a[59]),C=d(C,w,N,I,f,6,a[60]),I=d(I,C,w,N,O,10,a[61]),N=d(N,I,C,w,u,15,a[62]),w=d(w,N,I,C,b,21,a[63]),i[0]=i[0]+C|0,i[1]=i[1]+w|0,i[2]=i[2]+N|0,i[3]=i[3]+I|0},_doFinalize:function(){var e=this._data,n=e.words,r=8*this._nDataBytes,o=8*e.sigBytes;n[o>>>5]|=128<<24-o%32;var i=t.floor(r/4294967296),s=r;n[15+(o+64>>>9<<4)]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),n[14+(o+64>>>9<<4)]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),e.sigBytes=4*(n.length+1),this._process();for(var a=this._hash,c=a.words,u=0;u<4;u++){var l=c[u];c[u]=16711935&(l<<8|l>>>24)|4278255360&(l<<24|l>>>8)}return a},clone:function(){var e=i.clone.call(this);return e._hash=this._hash.clone(),e}});function l(e,t,n,r,o,i,s){var a=e+(t&n|~t&r)+o+s;return(a<<i|a>>>32-i)+t}function h(e,t,n,r,o,i,s){var a=e+(t&r|n&~r)+o+s;return(a<<i|a>>>32-i)+t}function p(e,t,n,r,o,i,s){var a=e+(t^n^r)+o+s;return(a<<i|a>>>32-i)+t}function d(e,t,n,r,o,i,s){var a=e+(n^(t|~r))+o+s;return(a<<i|a>>>32-i)+t}return n.MD5=i._createHelper(u),n.HmacMD5=i._createHmacHelper(u),e.MD5}(n(2))},function(e,t,n){function r(e){if(i[e])return i[e].exports;var t=i[e]={i:e,l:!1,exports:{}};return o[e].call(t.exports,t,t.exports,r),t.l=!0,t.exports}var o,i;e.exports=(o=[function(e,t,n){\"use strict\";var r;Object.defineProperty(t,\"__esModule\",{value:!0}),t.E_CLIENT_TYPE=t.ENUM_LOG_LEVEL=t.ENUM_REMOTE_TYPE=t.ZEGO_ENV=t.ZEGO_BROWSER_TYPE=void 0,(r=t.ZEGO_BROWSER_TYPE||(t.ZEGO_BROWSER_TYPE={}))[r.IE=0]=\"IE\",r[r.FIREFOX=1]=\"FIREFOX\",r[r.CHROME=2]=\"CHROME\",r[r.SAFARI=3]=\"SAFARI\",r[r.OPERA=4]=\"OPERA\",r[r.WEIXIN=5]=\"WEIXIN\",r[r.WEIXINMINI=6]=\"WEIXINMINI\",r[r.UNKOWN=7]=\"UNKOWN\",(r=t.ZEGO_ENV||(t.ZEGO_ENV={}))[r.BROWSER=0]=\"BROWSER\",r[r.WEIXINMINI=1]=\"WEIXINMINI\",(r=t.ENUM_REMOTE_TYPE||(t.ENUM_REMOTE_TYPE={}))[r.DISABLE=0]=\"DISABLE\",r[r.WEBSOCKET=1]=\"WEBSOCKET\",r[r.HTTPS=2]=\"HTTPS\",t.ENUM_LOG_LEVEL={DEBUG:0,INFO:1,WARN:2,ERROR:3,REPORT:99,DISABLE:100,debug:0,info:1,warn:2,error:3,report:99,disable:100},(r=t.E_CLIENT_TYPE||(t.E_CLIENT_TYPE={}))[r.ClientType_None=0]=\"ClientType_None\",r[r.ClientType_H5=1]=\"ClientType_H5\",r[r.ClientType_SmallPragram=2]=\"ClientType_SmallPragram\",r[r.ClientType_Webrtc=3]=\"ClientType_Webrtc\"},function(e,t,n){\"use strict\";function r(){this._testEnvironment=!0,this._ENV=0,this._debug=!0}Object.defineProperty(t,\"__esModule\",{value:!0}),t.LoggerStateCenter=void 0,r.getInstance=function(){return r.instance||(r.instance=new r).init(),r.instance},r.prototype.init=function(){},Object.defineProperty(r.prototype,\"testEnvironment\",{get:function(){return this._testEnvironment},set:function(e){this._testEnvironment=e},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\"ENV\",{get:function(){return this._ENV},set:function(e){this._ENV=e},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\"debug\",{get:function(){return this._debug},set:function(e){this._debug=e},enumerable:!1,configurable:!0}),r.instance=new r,t.LoggerStateCenter=r},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createZegoWebSocket=t.ZegoWeiXinMiniWebSocket=void 0;var r=n(0),o=(i.prototype.init=function(){var e=this;this._websocket&&(this.readyState=0,this._websocket.onOpen((function(t){e.readyState=e._websocket.readyState,\"function\"==typeof e.onopen&&(e.onopen(t),e._websocket.onClose((function(t){e.readyState=e._websocket.readyState,\"function\"==typeof e.onclose&&e.onclose(t)})),e._websocket.onMessage((function(t){\"function\"==typeof e.onmessage&&e.onmessage(t)})))})),this._websocket.onError((function(t){e.readyState=e._websocket.readyState,\"function\"==typeof e.onerror&&e.onerror(t)})))},i.prototype.onopen=function(e){},i.prototype.onerror=function(e){},i.prototype.onclose=function(e){},i.prototype.onmessage=function(e){},i.prototype.send=function(e){this._websocket&&this._websocket.send({data:e})},i.prototype.close=function(){this._websocket&&this._websocket.close()},i);function i(e,t){this.url=e,this.readyState=3,this._websocket=wx.connectSocket({url:e}),this.init()}t.ZegoWeiXinMiniWebSocket=o,t.createZegoWebSocket=function(e,t){return new(t%2===r.ZEGO_ENV.BROWSER?WebSocket:o)(e)}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.LoggerStateCenter=t.createZegoWebSocket=t.ZegoDataReport=t.ZegoLogger=void 0;var r=n(1),o=(Object.defineProperty(t,\"LoggerStateCenter\",{enumerable:!0,get:function(){return r.LoggerStateCenter}}),n(2)),i=(Object.defineProperty(t,\"createZegoWebSocket\",{enumerable:!0,get:function(){return o.createZegoWebSocket}}),n(4)),s=(Object.defineProperty(t,\"ZegoDataReport\",{enumerable:!0,get:function(){return i.ZegoDataReport}}),n(5));Object.defineProperty(t,\"ZegoLogger\",{enumerable:!0,get:function(){return s.ZegoLogger}})},function(e,t,n){\"use strict\";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=(Object.defineProperty(t,\"__esModule\",{value:!0}),t.ZegoDataReport=void 0,i.prototype.newReport=function(e,t){this.dataStatistics[e]={event_time:Date.now(),time_consumed:0,seq:e,error:0,message:\"success\",event:t,events:[]}},i.prototype.addMsgExt=function(e,t){this.dataStatistics[e]?this.dataStatistics[e].msg_ext=t:console.warn(e+\" not exist\")},i.prototype.addMsgInfo=function(e,t){this.dataStatistics[e]?Object.assign(this.dataStatistics[e],t):console.warn(e+\" not exist\")},i.prototype.eventStart=function(e,t){this.dataStatistics[e]?null!=this.dataStatistics[e].events?this.dataStatistics[e].events.push({event:t,event_time:Date.now(),time_consumed:0}):this.logger.warn(\"zd.es.0 no events\"):this.logger.warn(\"zd.es.0 no seq match\")},i.prototype.eventEnd=function(e,t,n){if(this.dataStatistics[e]){var r=this.dataStatistics[e].events;if(r&&0!==r.length){for(var o=r.length-1;0<=o;o--)if(r[o].event==t&&0==r[o].time_consumed){r[o].time_consumed=Date.now()-r[o].event_time;break}}else this.logger.info(\"zd.ee.0 no events\")}else this.logger.info(\"zd.ee.0 no seq match\")},i.prototype.eventEndWithMsg=function(e,t,n){if(this.dataStatistics[e]){var o=this.dataStatistics[e].events;if(o){for(var i=o.length-1;0<=i;i--)if(o[i].event==t&&0==o[i].time_consumed){o[i].time_consumed=Date.now()-o[i].event_time,null==o[i].msg_ext&&(o[i].msg_ext={}),o[i].msg_ext=r({},n);break}}else this.logger.warn(\"zd.ee.0 no events\")}else this.logger.warn(\"zd.ee.0 no seq match\")},i.prototype.eventEndWithMsgInfo=function(e,t,n){if(this.dataStatistics[e]){var r=this.dataStatistics[e].events;if(r){for(var o=r.length-1;0<=o;o--)if(r[o].event==t&&0==r[o].time_consumed){r[o].time_consumed=Date.now()-r[o].event_time,Object.assign(r[o],n);break}}else this.logger.warn(\"zd.ee.0 no events\")}else this.logger.warn(\"zd.ee.0 no seq match\")},i.prototype.addEventInfo=function(e,t,n,r){if(this.dataStatistics[e]){var o=this.dataStatistics[e].events;if(null!=o){for(var i=o.length-1;0<=i;i--)if(o[i].event==t&&null!=o[i].time_consumed){null==o[i].msg_ext?o[i].msg_ext={}:o[i].msg_ext&&(o[i].msg_ext[n]=r);break}}else this.logger.warn(\"zd.aei.0 no events\")}else this.logger.warn(\"zd.aei.0 no seq match\")},i.prototype.addEventMsg=function(e,t,n,r){if(this.dataStatistics[e]){var o=this.dataStatistics[e].events;if(null!=o){for(var i=o.length-1;0<=i;i--)if(o[i].event==t){o[i][n]=r;break}}else this.logger.warn(\"zd.aem.0 no events\")}else this.logger.warn(\"zd.aem.0 no seq match\")},i.prototype.addEvent=function(e,t,n){this.dataStatistics[e]?this.dataStatistics[e].events&&(n?this.dataStatistics[e].events.push({event:t,event_time:Date.now(),msg_ext:n}):this.dataStatistics[e].events.push({event:t,event_time:Date.now()})):this.logger.warn(\"zd.ae.0 no seq match\")},i.prototype.uploadReport=function(e,t,n,r){var o=this.dataStatistics[e];null!=o&&(t&&(o.event=t),o.time_consumed=Date.now()-o.event_time,n&&this.addMsgInfo(e,{error:n.code,message:n.message||n.msg+\" \"+(r||\"\")}),this.logger.report(o),delete this.dataStatistics[e])},i);function i(e){this.dataStatistics={},this.logger=e}t.ZegoDataReport=o},function(e,t,n){\"use strict\";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=(Object.defineProperty(t,\"__esModule\",{value:!0}),t.ZegoLogger=void 0,n(0)),i=n(2),s=n(1),a=n(6);function c(e){this.logLevel=o.ENUM_LOG_LEVEL.INFO,this.logRemoteLevel=0,this.websocket=null,this.logUploadTimer=null,this.logUploadInterval=1e4,this.logCache=[],this.logCacheSend=[],this.logCacheMax=100,this.existUserID=!1,this.stateCenter=s.LoggerStateCenter.getInstance(),this.env=e}c.prototype.setLogLevel=function(e){return void 0!==(e=o.ENUM_LOG_LEVEL[e])&&(this.logLevel=e,!0)},c.prototype.setRemoteLogLevel=function(e){return void 0!==(e=o.ENUM_LOG_LEVEL[e])&&(this.logRemoteLevel=e,!0)},c.prototype.setSessionInfo=function(e,t,n,r,o,i){this.appid=e,this.roomid=t,this.sessionid=n,this.userid=r,this.userName=o,this.version=i},c.prototype.report=function(e){e=this.logReportParamList(o.ENUM_LOG_LEVEL.REPORT,e),this.logLevel!==o.ENUM_LOG_LEVEL.DISABLE&&this.logLevel<=o.ENUM_LOG_LEVEL.REPORT&&console.debug(e),this.RemoteLog(o.ENUM_LOG_LEVEL.REPORT,e,!0)},c.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.logParamList(o.ENUM_LOG_LEVEL.DEBUG,e.join(\"\"));this.logLevel!==o.ENUM_LOG_LEVEL.DISABLE&&this.logLevel<=o.ENUM_LOG_LEVEL.DEBUG&&console.debug(n),this.log(o.ENUM_LOG_LEVEL.DEBUG,n)},c.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.logParamList(o.ENUM_LOG_LEVEL.INFO,e.join(\"\"));this.logLevel!==o.ENUM_LOG_LEVEL.DISABLE&&this.logLevel<=o.ENUM_LOG_LEVEL.INFO&&console.info(n),this.log(o.ENUM_LOG_LEVEL.INFO,n)},c.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.logParamList(o.ENUM_LOG_LEVEL.WARN,e.join(\"\"));this.logLevel!==o.ENUM_LOG_LEVEL.DISABLE&&this.logLevel<=o.ENUM_LOG_LEVEL.WARN&&console.warn(n),this.log(o.ENUM_LOG_LEVEL.WARN,n)},c.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.logParamList(o.ENUM_LOG_LEVEL.ERROR,e.join(\"\"));this.logLevel!==o.ENUM_LOG_LEVEL.DISABLE&&this.logLevel<=o.ENUM_LOG_LEVEL.ERROR&&(console.error(n),window?this.stateCenter.debug&&window.alert(e.join(\"\").substr(e.join(\"\").indexOf(\" \")+1,4500)):wx&&this.stateCenter.debug&&wx.showModal({title:\"\",content:e.join(\"\").substr(e.join(\"\").indexOf(\" \")+1,4500)})),this.log(o.ENUM_LOG_LEVEL.ERROR,n)},c.prototype.log=function(e,t){this.logRemoteLevel!==o.ENUM_LOG_LEVEL.DISABLE&&this.logRemoteLevel<=e&&this.RemoteLog(e,t)},c.prototype.setLogServer=function(e){try{return e.startsWith(\"wss:\")?(this.logType=o.ENUM_REMOTE_TYPE.WEBSOCKET,this.openWebSocketLogServer(e)):e.startsWith(\"https:\")?(this.logType=o.ENUM_REMOTE_TYPE.HTTPS,this.openHttpsLogServer(e)):this.logType=o.ENUM_REMOTE_TYPE.DISABLE,!0}catch(e){return this.error(JSON.stringify(e)),!1}},c.prototype.stopLogServer=function(){this.logType==o.ENUM_REMOTE_TYPE.WEBSOCKET?this.stopWebSocketServer():this.logType==o.ENUM_REMOTE_TYPE.HTTPS&&(this.SendHttpsLog(),this.stopHttpsServer()),this.logType=o.ENUM_REMOTE_TYPE.DISABLE},c.prototype.stopWebSocketServer=function(){this.websocket&&(this.websocket.onclose=null,this.websocket.onerror=null,this.websocket.close(),this.websocket=null)},c.prototype.openHttpsLogServer=function(e){var t=this;(this.url=e)&&(this.stopHttpsServer(),this.logUploadTimer||(this.logUploadTimer=setInterval((function(){t.SendHttpsLog()}),this.logUploadInterval)))},c.prototype.stopHttpsServer=function(){this.logUploadTimer&&(clearInterval(this.logUploadTimer),this.logUploadTimer=null)},c.prototype.RemoteLog=function(e,t,n){if(void 0===n&&(n=!1),\"\"!=this.url)if(this.logType==o.ENUM_REMOTE_TYPE.WEBSOCKET)this.RemoteWebSocketLog(e,t);else if(this.logType==o.ENUM_REMOTE_TYPE.HTTPS)this.RemoteHttpsLog(e,t,n);else if(this.logLevel!==o.ENUM_LOG_LEVEL.DISABLE&&this.logLevel<=e)for(this.logCacheSend.push(t);this.logCacheSend.length>this.logCacheMax;)this.logCacheSend.shift()},c.prototype.RemoteWebSocketLog=function(e,t){if(\"string\"==typeof t&&4e3<t.length)console.info(\"log over maximum, ignore\");else if(null==this.websocket||2==this.websocket.readyState||3==this.websocket.readyState){var n=this.url;this.url=\"\",this.setLogServer(n),this.logCacheSend.length<this.logCacheMax&&this.logCacheSend.push(t)}else if(0==this.websocket.readyState)this.logCacheSend.length<this.logCacheMax&&this.logCacheSend.push(t);else if(1==this.websocket.readyState)if(0<this.logCacheSend.length){for(var o=\"\",i=0;i<this.logCacheSend.length;i++){4e3<(o+this.logCacheSend[i]).length&&(this.websocket.send(o),o=\"\");var s=JSON.parse(this.logCacheSend[i]);s=r(r({},s),{userid:s.userid||this.userid,roomid:s.roomid||this.roomid,userName:s.roomid||this.userName}),o=o+JSON.stringify(s)+\"\\n\"}t=o+t,this.logCacheSend=[],this.websocket.send(t)}else this.websocket.send(t);else console.warn(\"wrong socket state:\"+this.websocket.readyState),this.logCacheSend.length<this.logCacheMax&&this.logCacheSend.push(t)},c.prototype.RemoteHttpsLog=function(e,t,n){this.logCacheSend.push(t),(this.logCacheSend.length>=this.logCacheMax||!0===n)&&this.SendHttpsLog()},c.prototype.logParamList=function(e,t){var n={time:n=a.getCurrentTime(),level:e,action:(t=[t.substr(0,t.indexOf(\" \"))||t,t.substr(t.indexOf(\" \")+1,4500)||t])[0],content:t[1],appid:this.appid,roomid:this.roomid,userid:this.userid,userName:this.userName,sessionid:this.sessionid};return JSON.stringify(n)},c.prototype.logReportParamList=function(e,t){var n=a.getCurrentTime();return t=r(r({},t),{time:n,level:e,console:this.env%2===o.ZEGO_ENV.BROWSER?\"rtc\":\"xcx\",appid:this.appid,room_id:this.roomid,roomid:this.roomid,userid:this.userid,id_name:this.userid,userName:this.userName,sessionid:this.sessionid,sdk_version:this.version,test_environment:this.stateCenter.testEnvironment,version:this.version,event_id:this.appid+\"_\"+this.userid+\"_\"+t.event_time+\"_\"+t.seq}),JSON.stringify(t)},c.prototype.openWebSocketLogServer=function(e){this.url!=e&&(this.url=e)&&(this.stopWebSocketServer(),this.websocket=i.createZegoWebSocket(e,this.env),this.websocket.onopen=function(){},this.websocket.onclose=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.warn(\"onclose   websocket error:\",e)},this.websocket.onmessage=function(){},this.websocket.onerror=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.warn(\"open log websocket error:\",e)})},c.prototype.SendHttpsLog=function(){0!=this.logCacheSend.length&&(this.env%2===o.ZEGO_ENV.BROWSER?this.SendHttpsLogWeb():this.SendHttpsLogWeChatMini())},c.prototype.SendHttpsLogWeb=function(){var e=this,t=this.logCacheSend.join(\"\\n\"),n=new XMLHttpRequest;n.onreadystatechange=function(){if(4==n.readyState)if(200==n.status){if(0!=n.responseText.length)try{var t=JSON.parse(n.responseText).interval;\"number\"==typeof t&&e.logUploadInterval!==t&&(e.timeInterval=t,e.openHttpsLogServer(e.url))}catch(t){console.log(\"send result failed \"+t)}}else console.log(\"send failed \"+n.status)},n.open(\"POST\",this.url,!0),0==this.env?n.send(t):2==this.env&&(n.setRequestHeader(\"content-type\",\"application/json\"),n.send(JSON.stringify({user_id:this.userid,log:t}))),this.logCacheSend=[]},c.prototype.SendHttpsLogWeChatMini=function(){var e=this,t=(!this.existUserID&&this.userid&&this.logCacheSend.forEach((function(t){Array.isArray(t)&&t.forEach((function(n,r){var o=JSON.parse(n);o&&\"\"==JSON.parse(n).userid?(o.userid=e.userid,o.id_name=e.userid,t[r]=JSON.stringify(o)):e.existUserID=!0}))})),this.logCacheSend.join(\"\\n\"));t=1==this.env?t:JSON.stringify({user_id:this.userid,log:t});wx.request({url:this.url,data:t,method:\"POST\",success:function(t){0!=t.data.length&&\"number\"==typeof(t=t&&t.data&&t.data.interval)&&e.logUploadInterval!==t&&(e.timeInterval=t,e.openHttpsLogServer(e.url))},fail:function(e){console.log(\"send failed \"+e.statusCode)}}),this.logCacheSend=[]},t.ZegoLogger=c},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.getCurrentTime=t.getCurrentEnv=t.getBrowser=void 0;var r=n(0),o=(t.getBrowser=function(){var e=window.navigator.userAgent,t=null!=window.ActiveXObject&&-1!=e.indexOf(\"MSIE\"),n=-1!=e.indexOf(\"Firefox\"),o=null!=window.opr,i=e.indexOf(\"Chrome\")&&window.chrome,s=-1!=e.indexOf(\"Safari\")&&-1!=e.indexOf(\"Version\");e=e.toLowerCase().match(/MicroMessenger/i)&&\"micromessenger\"===e.toLowerCase().match(/MicroMessenger/i)[0];return t?r.ZEGO_BROWSER_TYPE.IE:n?r.ZEGO_BROWSER_TYPE.FIREFOX:o?r.ZEGO_BROWSER_TYPE.OPERA:i?r.ZEGO_BROWSER_TYPE.CHROME:s?r.ZEGO_BROWSER_TYPE.SAFARI:e?r.ZEGO_BROWSER_TYPE.WEIXIN:r.ZEGO_BROWSER_TYPE.UNKOWN},t.getCurrentEnv=function(){var e=window.navigator.userAgent;return new Promise((function(t){-1==e.indexOf(\"MicroMessage\")?t(r.ZEGO_ENV.BROWSER):wx.miniProgram.getEnv((function(e){e.miniprogram}))}))},[\"00\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\"]);t.getCurrentTime=function(){var e=new Date;return[e.getFullYear()+\"/\",(o[e.getMonth()+1]||e.getMonth()+1)+\"/\",(o[e.getDate()]||e.getDate())+\" \",(o[e.getHours()]||e.getHours())+\":\",(o[e.getMinutes()]||e.getMinutes())+\":\",o[e.getSeconds()]||e.getSeconds(),\".\"+e.getTime()%1e3].join(\"\")}}],i={},r.m=o,r.c=i,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=3))},function(t,n){t.exports=e},function(e,t,n){e.exports=n(2).enc.Utf8},function(e,t,n){\"use strict\";t.byteLength=function(e){return 3*((e=u(e))[0]+(e=e[1]))/4-e},t.toByteArray=function(e){var t,n,r=(s=u(e))[0],s=s[1],a=new i(function(e,t){return 3*(e+t)/4-t}(r,s)),c=0,l=0<s?r-4:r;for(n=0;n<l;n+=4)t=o[e.charCodeAt(n)]<<18|o[e.charCodeAt(n+1)]<<12|o[e.charCodeAt(n+2)]<<6|o[e.charCodeAt(n+3)],a[c++]=t>>16&255,a[c++]=t>>8&255,a[c++]=255&t;return 2===s&&(t=o[e.charCodeAt(n)]<<2|o[e.charCodeAt(n+1)]>>4,a[c++]=255&t),1===s&&(t=o[e.charCodeAt(n)]<<10|o[e.charCodeAt(n+1)]<<4|o[e.charCodeAt(n+2)]>>2,a[c++]=t>>8&255,a[c++]=255&t),a},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,i=[],s=0,a=n-o;s<a;s+=16383)i.push(function(e,t,n){for(var o,i=[],s=t;s<n;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),i.push(function(e){return r[e>>18&63]+r[e>>12&63]+r[e>>6&63]+r[63&e]}(o));return i.join(\"\")}(e,s,a<s+16383?a:s+16383));return 1==o?(t=e[n-1],i.push(r[t>>2]+r[t<<4&63]+\"==\")):2==o&&(t=(e[n-2]<<8)+e[n-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+\"=\")),i.join(\"\")};for(var r=[],o=[],i=\"undefined\"!=typeof Uint8Array?Uint8Array:Array,s=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",a=0,c=s.length;a<c;++a)r[a]=s[a],o[s.charCodeAt(a)]=a;function u(e){var t=e.length;if(0<t%4)throw new Error(\"Invalid string. Length must be a multiple of 4\");return t=(e=-1===(e=e.indexOf(\"=\"))?t:e)===t?0:4-e%4,[e,t]}o[\"-\".charCodeAt(0)]=62,o[\"_\".charCodeAt(0)]=63},function(e,t,n){e.exports=n(2).enc.Hex},function(e,t){var n=function(){return this}();try{n=n||new Function(\"return this\")()}catch(e){\"object\"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r,o,i,s,a;e.exports=(e=n(2),n(18),n(19),r=(i=(n=e).lib).Base,o=i.WordArray,s=(i=n.algo).MD5,a=i.EvpKDF=r.extend({cfg:r.extend({keySize:4,hasher:s,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){for(var n,r=this.cfg,i=r.hasher.create(),s=o.create(),a=s.words,c=r.keySize,u=r.iterations;a.length<c;){n&&i.update(n),n=i.update(e).finalize(t),i.reset();for(var l=1;l<u;l++)n=i.finalize(n),i.reset();s.concat(n)}return s.sigBytes=4*c,s}}),n.EvpKDF=function(e,t,n){return a.create(n).compute(e,t)},e.EvpKDF)},function(e,t,n){function r(e){if(s[e])return s[e].exports;var t=s[e]={i:e,l:!1,exports:{}};return i[e].call(t.exports,t,t.exports,r),t.l=!0,t.exports}var o,i,s;e.exports=(o=n(15),s={},r.m=i=[function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.ZEGO_SETTING_ACTION=void 0,(t=t.ZEGO_SETTING_ACTION||(t.ZEGO_SETTING_ACTION={})).CONSTRUCTOR=\"zs.0\",t.SETTING_INIT=\"zs.ii.0\",t.SETTING_FETCH_SETTING=\"zs.fs.0\",t.SETTING__FETCH_SETTING=\"zs.fs.1\",t.SETTING_GET_CLOUD_SETTING=\"zs.gcs.0\",t.SETTING_POLLING_SETTING=\"zs.ps.0\",t.SETTINGCACHEHANDLER_GET_CACHE_SETTING=\"zs.sch.gcs.0\",t.SETTINGCACHEHANDLER_STORE_SETTING=\"zs.sch.ss.0\",t.SETTINGFETCHHANDLER_FETCHSETTING=\"zs.sfh.fs.0\"},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.errorList=void 0,t.errorList={NOT_INIT:{code:1001,msg:\"not init\"},FILE_REQUEST_FAIL:{code:1002,msg:\"fetch request fail\"},INFLATE_DATA_FAIL:{code:1003,msg:\"inflate fail\"},MULTI_FILE_NOT_EXIST:{code:1004,msg:\"get multi file fail\"},AUTH_FAIL:{code:1005,msg:\"auth failed\"}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.generateUUID=t.checkValidNumber=t.analyzeKey=t.getCurrentTime=t.getBrowser=void 0,t.getBrowser=function(){var e=window.navigator.userAgent,t=null!=window.ActiveXObject&&-1!=e.indexOf(\"MSIE\"),n=-1!=e.indexOf(\"Firefox\"),r=null!=window.opr,o=e.indexOf(\"Chrome\")&&window.chrome,i=-1!=e.indexOf(\"Safari\")&&-1!=e.indexOf(\"Version\");e=e.toLowerCase().match(/MicroMessenger/i)&&\"micromessenger\"===e.toLowerCase().match(/MicroMessenger/i)[0];return t?\"IE\":n?\"FIREFOX\":r?\"OPERA\":o?\"CHROME\":i?\"SAFARI\":e?\"WEIXIN\":\"UNKOWN\"};var r=[\"00\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\"];t.getCurrentTime=function(){var e=new Date;return[e.getFullYear()+\"/\",(r[e.getMonth()+1]||e.getMonth()+1)+\"/\",(r[e.getDate()]||e.getDate())+\" \",(r[e.getHours()]||e.getHours())+\":\",(r[e.getMinutes()]||e.getMinutes())+\":\",r[e.getSeconds()]||e.getSeconds(),\".\"+e.getTime()%1e3].join(\"\")},t.analyzeKey=function(e){return e=e.split(\"_\"),{level:Number(e[0]),timestamp:e[1],seq:e[2]}},t.checkValidNumber=function(e,t,n){return t=t||1,n=n||1e4,\"number\"==typeof e&&e%1==0&&t<=e&&e<=n},t.generateUUID=function(e){if(0===(e=void 0===e?0:e)?n=localStorage.getItem(\"z_deviceID\"):wx.getStorageSync(\"z_deviceID\"),n)return n;var t=(new Date).getTime(),n=\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g,(function(e){var n=(t+16*Math.random())%16|0;return t=Math.floor(t/16),(\"x\"==e?n:3&n|8).toString(36)}));return 0===e?localStorage.setItem(\"z_deviceID\",n):wx.setStorageSync(\"z_deviceID\",n),n}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.ZegoSetting=void 0;var r=n(4);Object.defineProperty(t,\"ZegoSetting\",{enumerable:!0,get:function(){return r.ZegoSetting}})},function(e,t,n){\"use strict\";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,n,r){return new(n=n||Promise)((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):((t=e.value)instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,o,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},s={next:a(0),throw:a(1),return:a(2)};return\"function\"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){var c=[s,a];if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,(c=o?[2&c[0],o.value]:c)[0]){case 0:case 1:o=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!(o=0<(o=i.trys).length&&o[o.length-1])&&(6===c[0]||2===c[0])){i=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){i.label=c[1];break}if(6===c[0]&&i.label<o[1]){i.label=o[1],o=c;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(c);break}o[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(a){c=[6,a],r=0}finally{n=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}}},s=(Object.defineProperty(t,\"__esModule\",{value:!0}),t.ZegoSetting=void 0,n(5)),a=n(6),c=n(10),u=n(0),l=n(12),h=n(1),p=n(2);function d(){this.fileList=[],this.publicEnvVariable={},this.proEnvVariable={},this.pollingTimer=null,this.pollingInterval=300,this.inited=!1,this.checkFailCount=0,this.checkFailed=!1,this.log=new s.ZegoLog}Object.defineProperty(d.prototype,\"envVariable\",{get:function(){return Object.assign({},this.publicEnvVariable,this.proEnvVariable)},enumerable:!1,configurable:!0}),d.prototype.init=function(e){var t=this;return e.pollingFreq&&!p.checkValidNumber(e.pollingFreq)?(this.log.error(u.ZEGO_SETTING_ACTION.SETTING_INIT+\" pollingFreq must be integer number\"),!1):(this.options=Object.assign({},l.INIT_CONFIG,e),this.getPublicEnvVariable(),this.settingFetchHandler=new c.SettingFetchHandler(this.options,this.log),this.settingFetchHandler.setDataReport(this.options.reportNotify),e=Math.round(60*Math.random()),this.log.info(u.ZEGO_SETTING_ACTION.SETTING_INIT+\" delay \"+e),this.delayTimer&&(clearTimeout(this.delayTimer),this.delayTimer=null),this.options.pollingFreq&&60<=this.options.pollingFreq&&(this.pollingInterval=this.options.pollingFreq),this.delayTimer=setTimeout((function(){t.pollingSetting(1e3*t.pollingInterval)}),1e3*e),this.settingCacheHandler=new a.SettingCacheHandler(\"setting_\"+(this.options.online?\"online_\":\"test_\")+this.options.product+\"_\"+this.options.appID,this.log,this.options.env),this.refreshAuthCheck(),this.inited=!0)},d.prototype.uninit=function(){this.pollingTimer&&(clearTimeout(this.pollingTimer),this.pollingTimer=null)},d.prototype.setEnvVariable=function(e,t){this.proEnvVariable[e]=String(t)},d.prototype.getEnvVariable=function(e){return this.envVariable[e]},d.prototype.setEnvVariables=function(e){var t=this;Object.keys(e).forEach((function(n){\"string\"!=typeof e[n]&&\"number\"!=typeof e[n]&&t.log.error(\"zs.sev env \"+n+\" type error\"),t.proEnvVariable[n]=String(e[n])}))},d.prototype.getEnvVariables=function(){return this.envVariable},d.prototype.enablePolling=function(e,t){var n=this;t?t.forEach((function(t){var r=n.fileList.find((function(e){return e.fileName===t}));r&&(r.needPolling=e)})):this.fileList.forEach((function(t){return t.needPolling=e}))},d.prototype.setToken=function(e){this.token!==e&&this.refreshAuthCheck(),this.token=e},d.prototype.setUserID=function(e){this.userID!==e&&this.refreshAuthCheck(),this.userID=e},d.prototype.getSettingCache=function(e){return o(this,void 0,void 0,(function(){var t,n,r;return i(this,(function(o){switch(o.label){case 0:return this.inited?(t=this.fileList.find((function(t){return t.fileName===e})))?[2,Promise.resolve({setting:t.setting,versions:t.versions})]:[3,1]:[2,Promise.reject(h.errorList.NOT_INIT)];case 1:return n=this._getFileName(e),[4,this.settingCacheHandler.getCacheSetting(n)];case 2:return(n=o.sent())&&(this.fileList.find((function(t){return t.fileName===e}))||this.fileList.push({fileName:e,fetchedTime:0,needPolling:!1,setting:n.setting,versions:n.versions}),r={setting:n.setting,versions:n.versions}),[2,Promise.resolve(r)]}}))}))},d.prototype.fetchSetting=function(e,t,n){return void 0===t&&(t={}),void 0===n&&(n=!0),this.log.info(u.ZEGO_SETTING_ACTION.SETTING_FETCH_SETTING+\" call \"+e),this.inited?(this.activePolling(),0<Object.keys(t).length?(this.log.info(u.ZEGO_SETTING_ACTION.SETTING_FETCH_SETTING+\" get file with params\"),this._getCloudSetting(e,r(r({},this.envVariable),t))):(t=this.fileList.find((function(t){return t.fileName===e})))?(this.log.info(u.ZEGO_SETTING_ACTION.SETTING_FETCH_SETTING+\" file exist\"),(new Date).getTime()-t.fetchedTime<1e3*this.pollingInterval?(this.log.info(u.ZEGO_SETTING_ACTION.SETTING_FETCH_SETTING+\" fetch time interval in freq\"),t.needPolling=n,Promise.resolve({setting:t.setting,versions:t.versions})):this._fetchSetting(e,t,n)):(this.log.info(u.ZEGO_SETTING_ACTION.SETTING_FETCH_SETTING+\" file not found\"),this._fetchSetting(e,t,n))):Promise.reject(h.errorList.NOT_INIT)},d.prototype.fetchMultiSetting=function(e,t,n){var s=this;return void 0===t&&(t={}),void 0===n&&(n=!0),this.log.info(u.ZEGO_SETTING_ACTION.SETTING_FETCH_SETTING+\" call\"),this.inited?(this.activePolling(),0<Object.keys(t).length?(this.log.info(u.ZEGO_SETTING_ACTION.SETTING_FETCH_SETTING+\" get file with params\"),this._getCloudSetting(e,r(r({},this.envVariable),t))):new Promise((function(t,r){var a={},c=[];if(e.forEach((function(e){return o(s,void 0,void 0,(function(){var t;return i(this,(function(n){return(t=this.fileList.find((function(t){return t.fileName===e})))&&(new Date).getTime()-t.fetchedTime<1e3*this.pollingInterval?(this.log.info(u.ZEGO_SETTING_ACTION.SETTING_FETCH_SETTING+\" fetch time interval in freq\"),a[e]={setting:t.setting,versions:t.versions}):c.push(e),[2]}))}))})),!(0<c.length))return t(a);s._getCloudSetting(c,s.envVariable).then((function(e){return s.handleFetchFiles(e,n),Object.assign(a,e),t(a)})).catch((function(e){c.forEach((function(e){return o(s,void 0,void 0,(function(){var t;return i(this,(function(r){switch(r.label){case 0:return(t=this.fileList.find((function(t){return t.fileName==e})))?t.fetchedTime=(new Date).getTime():this.fileList.find((function(t){return t.fileName===e}))||this.fileList.push({fileName:e,fetchedTime:(new Date).getTime(),needPolling:n,setting:{},versions:{}}),[4,this.settingCacheHandler.getCacheSetting(e)];case 1:return t=r.sent(),a[e]={setting:t.setting,versions:t.versions},[2]}}))}))})),0<Object.keys(a).length?t(a):r(e)}))}))):(this.log.info(u.ZEGO_SETTING_ACTION.SETTING_FETCH_SETTING+\" not init\"),Promise.reject(h.errorList.NOT_INIT))},d.prototype.setOptions=function(e){e&&\"boolean\"==typeof e.unify&&(this.options.unify=e.unify,this.settingFetchHandler.setOptions(this.options))},d.prototype.setLog=function(e){this.log=e},d.prototype._getCloudSetting=function(e,t){var n=this;return new Promise((function(r,s){return o(n,void 0,void 0,(function(){var n,o,a,c,l;return i(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),this.checkFailed?(this.log.warn(u.ZEGO_SETTING_ACTION.SETTING_GET_CLOUD_SETTING+\" check fail\"),s(h.errorList.AUTH_FAIL),[2]):(a=e instanceof Array,[4,this.settingFetchHandler.fetchSetting(a?e:[e],t,this.token,this.userID)]);case 1:return c=i.sent(),n=c.data,c=c.polling_interval,this.checkFailCount=0,this.log.info(u.ZEGO_SETTING_ACTION.SETTING_GET_CLOUD_SETTING+\" suc\"),\"number\"==typeof c&&5<=c&&this.pollingInterval!==60*c&&(this.log.warn(u.ZEGO_SETTING_ACTION.SETTING_GET_CLOUD_SETTING+\" polling interval change\"),this.pollingInterval=60*c,this.uninit(),this.activePolling()),a?(o={},e.forEach((function(e){var t;0==(null==(t=n[e])?void 0:t.code)&&void 0!==(null==(t=n[e])?void 0:t.data)&&(o[e]={setting:null==(t=n[e])?void 0:t.data,versions:null==(e=n[e])?void 0:e.versions})})),0<Object.keys(o).length?r(o):s(h.errorList.MULTI_FILE_NOT_EXIST)):0===(null==(a=n[e])?void 0:a.code)&&null!=(c=n[e])&&c.data?r({setting:null==(c=n[e])?void 0:c.data,versions:null==(c=n[e])?void 0:c.versions}):s({code:null==(l=n[e])?void 0:l.code,msg:null==(l=n[e])?void 0:l.message}),[3,3];case 2:return l=i.sent(),this.log.error(u.ZEGO_SETTING_ACTION.SETTING_GET_CLOUD_SETTING+\" fail \"+JSON.stringify(l)),21002===(null==l?void 0:l.code)&&(this.checkFailCount+=1),2<=this.checkFailCount&&(this.checkFailed=!0),s(l),[3,3];case 3:return[2]}}))}))}))},d.prototype.handleFetchFiles=function(e,t){var n=this;Object.keys(e).forEach((function(r){var o=n.fileList.find((function(e){return e.fileName==r}));o?(o.fetchedTime=(new Date).getTime(),o.setting=e[r].setting,o.versions=e[r].versions,o.needPolling=t):n.fileList.find((function(e){return e.fileName===r}))||n.fileList.push({fileName:r,fetchedTime:(new Date).getTime(),needPolling:t,setting:e[r].setting,versions:e[r].versions}),o=n._getFileName(r),n.settingCacheHandler.storeSetting(o,e[r])}))},d.prototype._fetchSetting=function(e,t,n){var r=this;return new Promise((function(s,a){r.log.info(u.ZEGO_SETTING_ACTION.SETTING__FETCH_SETTING+\" call\"),r._getCloudSetting(e,r.envVariable).then((function(o){t?(t.fetchedTime=(new Date).getTime(),t.setting=o.setting,t.versions=o.versions,t.needPolling=n):r.fileList.find((function(t){return t.fileName===e}))||r.fileList.push({fileName:e,fetchedTime:(new Date).getTime(),needPolling:n,setting:o.setting,versions:o.versions});var i=r._getFileName(e);r.settingCacheHandler.storeSetting(i,o),s(o),r.log.info(u.ZEGO_SETTING_ACTION.SETTING__FETCH_SETTING+\" call suc\")})).catch((function(c){return o(r,void 0,void 0,(function(){var r;return i(this,(function(o){switch(o.label){case 0:t?t.fetchedTime=(new Date).getTime():this.fileList.find((function(t){return t.fileName===e}))||this.fileList.push({fileName:e,fetchedTime:(new Date).getTime(),needPolling:n,setting:{},versions:{}}),r=this._getFileName(e),o.label=1;case 1:return o.trys.push([1,3,,4]),[4,this.settingCacheHandler.getCacheSetting(r)];case 2:return r=o.sent(),s(r),[3,4];case 3:return o.sent(),a(c),[3,4];case 4:return this.log.info(u.ZEGO_SETTING_ACTION.SETTING__FETCH_SETTING+\" setting not contain or fetch file fail\"),[2]}}))}))}))}))},d.prototype.getPublicEnvVariable=function(){var e;0==this.options.env?(this.publicEnvVariable.userAgent=navigator.userAgent,this.publicEnvVariable.platform=navigator.platform,this.publicEnvVariable.browser=p.getBrowser(),this.publicEnvVariable.deviceid=p.generateUUID()):1==this.options.env&&(e=wx.getSystemInfoSync(),this.publicEnvVariable.brand=e.brand,this.publicEnvVariable.model=e.model,this.publicEnvVariable.system=e.system,this.publicEnvVariable.platform=e.platform,this.publicEnvVariable.wechatVersion=e.version,this.publicEnvVariable.wechatSDKVersion=e.SDKVersion,this.publicEnvVariable.deviceid=p.generateUUID(this.options.env))},d.prototype.pollingSetting=function(e){return o(this,void 0,void 0,(function(){var t,n,r,s,a=this;return i(this,(function(c){switch(c.label){case 0:return this.log.info(u.ZEGO_SETTING_ACTION.SETTING_POLLING_SETTING+\" call \"+e),t=[],this.fileList.forEach((function(e){e.fileName,e.needPolling&&t.push(e.fileName)})),n=e,this.checkFailed?(this.log.warn(u.ZEGO_SETTING_ACTION.SETTING_GET_CLOUD_SETTING+\" has checked fail\"),[3,7]):[3,1];case 1:if(!(0<t.length))return[3,6];c.label=2;case 2:return c.trys.push([2,4,,5]),[4,this.settingFetchHandler.fetchSetting(t,this.envVariable,this.token,this.userID)];case 3:return s=c.sent(),r=s.data,s=s.polling_interval,this.log.info(u.ZEGO_SETTING_ACTION.SETTING_POLLING_SETTING+\" fetch suc\"),this.checkFailCount=0,\"number\"==typeof s&&5<=s&&this.pollingInterval!==60*s&&(this.log.warn(u.ZEGO_SETTING_ACTION.SETTING_POLLING_SETTING+\" polling interval change\"),this.pollingInterval=60*s,n=1e3*this.pollingInterval),this.fileList.forEach((function(e){return o(a,void 0,void 0,(function(){var t,n,o,s;return i(this,(function(i){switch(i.label){case 0:return e.fetchedTime=(new Date).getTime(),t=this._getFileName(e.fileName),r[e.fileName]&&0===r[e.fileName].code&&r[e.fileName].data?(n=JSON.stringify(r[e.fileName].data),o=JSON.stringify(e.setting),s={setting:r[e.fileName].data,versions:null==(s=r[e.fileName])?void 0:s.versions},o!==n&&(this.log.info(u.ZEGO_SETTING_ACTION.SETTING_POLLING_SETTING+\" \"+e.fileName+\" setting changed\"),e.setting=s.setting,e.versions=s.versions,this.options.pollingNotify(e.fileName,s)),[4,this.settingCacheHandler.getCacheSetting(t)]):[3,2];case 1:o=i.sent(),n=JSON.stringify(o),o=JSON.stringify(s),n!==o&&this.settingCacheHandler.storeSetting(t,s),i.label=2;case 2:return[2]}}))}))})),[3,5];case 4:return s=c.sent(),this.log.error(u.ZEGO_SETTING_ACTION.SETTING_POLLING_SETTING+\" fetch fail \"+JSON.stringify(s)),21002===(null==s?void 0:s.code)&&(this.checkFailCount+=1),2<=this.checkFailCount&&(this.checkFailed=!0),[3,5];case 5:return[3,7];case 6:this.log.info(u.ZEGO_SETTING_ACTION.SETTING_POLLING_SETTING+\" polling no file\"),c.label=7;case 7:return this.pollingTimer&&clearTimeout(this.pollingTimer),this.pollingTimer=setTimeout((function(){a.pollingSetting(n)}),n),[2]}}))}))},d.prototype._getFileName=function(e){return e},d.prototype.activePolling=function(){this.pollingTimer||this.pollingSetting(1e3*this.pollingInterval)},d.prototype.refreshAuthCheck=function(){this.checkFailCount=0,this.checkFailed=!1},t.ZegoSetting=n=d},function(e,t,n){\"use strict\";function r(){}Object.defineProperty(t,\"__esModule\",{value:!0}),t.ZegoLog=void 0,r.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];e.join(\" \")},r.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];e.join(\" \")},r.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];e.join(\" \")},r.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];e.join(\" \")},r.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];e.join(\" \")},t.ZegoLog=r},function(e,t,n){\"use strict\";var r=this&&this.__awaiter||function(e,t,n,r){return new(n=n||Promise)((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):((t=e.value)instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},s={next:a(0),throw:a(1),return:a(2)};return\"function\"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){var c=[s,a];if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,(c=o?[2&c[0],o.value]:c)[0]){case 0:case 1:o=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!(o=0<(o=i.trys).length&&o[o.length-1])&&(6===c[0]||2===c[0])){i=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){i.label=c[1];break}if(6===c[0]&&i.label<o[1]){i.label=o[1],o=c;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(c);break}o[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(a){c=[6,a],r=0}finally{n=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}}},i=(Object.defineProperty(t,\"__esModule\",{value:!0}),t.SettingCacheHandler=void 0,n(0)),s=n(7);function a(e,t,n){void 0===n&&(n=0),this.storeName=e,this.log=t,this.store=s.createZegoStore(e,n)}a.prototype.getCacheSetting=function(e){return r(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return this.log.info(i.ZEGO_SETTING_ACTION.SETTINGCACHEHANDLER_GET_CACHE_SETTING+\" call\"),[4,this.store.getItem(e)];case 1:return[2,t.sent()||\"\"]}}))}))},a.prototype.storeSetting=function(e,t){return r(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return this.log.info(i.ZEGO_SETTING_ACTION.SETTINGCACHEHANDLER_STORE_SETTING+\" call\"),[4,this.store.setItem(e,t)];case 1:return n.sent(),[2]}}))}))},t.SettingCacheHandler=n=a},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createZegoStore=t.ZegoWechatMiniStore=void 0;var r=n(8),o=n(9),i=(s.prototype.getItem=function(e){var t=this;return new Promise((function(n,r){try{n(wx.getStorageSync(t.keyPrefix+e))}catch(n){r(n)}}))},s.prototype.setItem=function(e,t){var n=this;return new Promise((function(r,o){try{wx.setStorageSync(n.keyPrefix+e,t),r()}catch(r){o(r)}}))},s.prototype.removeItem=function(e){var t=this;return new Promise((function(n,r){try{n(wx.removeStorageSync(t.keyPrefix+e))}catch(n){r(n)}}))},s.prototype.clear=function(){return new Promise((function(e,t){try{wx.clearStorageSync(),e()}catch(e){t(e)}}))},s.prototype.keys=function(){var e=this;return new Promise((function(t,n){try{var r=wx.getStorageInfoSync().keys,o=[];r.forEach((function(t){0==t.indexOf(e.keyPrefix)&&o.push(t.replace(e.keyPrefix,\"\"))})),o.sort(),t(o)}catch(t){n(t)}}))},s);function s(e){this.storeName=e,this.keyPrefix=e+\"/\",this.storeName}t.ZegoWechatMiniStore=i,t.createZegoStore=function(e,t){return t===o.ZEGO_ENV.BROWSER?r.createInstance({name:e}):new i(e)}},function(e,t){e.exports=o},function(e,t,n){\"use strict\";var r;Object.defineProperty(t,\"__esModule\",{value:!0}),t.SOCKET_DISCONNECT=t.ENUM_REMOTE_TYPE=t.ZEGO_BROWSER_TYPE=t.ZEGO_ENV=t.PROTO_VERSION=void 0,t.PROTO_VERSION=\"1.0.5\",(r=t.ZEGO_ENV||(t.ZEGO_ENV={}))[r.BROWSER=0]=\"BROWSER\",r[r.WEIXINMINI=1]=\"WEIXINMINI\",(r=t.ZEGO_BROWSER_TYPE||(t.ZEGO_BROWSER_TYPE={}))[r.IE=0]=\"IE\",r[r.FIREFOX=1]=\"FIREFOX\",r[r.CHROME=2]=\"CHROME\",r[r.SAFARI=3]=\"SAFARI\",r[r.OPERA=4]=\"OPERA\",r[r.WEIXIN=5]=\"WEIXIN\",r[r.WEIXINMINI=6]=\"WEIXINMINI\",r[r.UNKOWN=7]=\"UNKOWN\",(r=t.ENUM_REMOTE_TYPE||(t.ENUM_REMOTE_TYPE={}))[r.DISABLE=0]=\"DISABLE\",r[r.WEBSOCKET=1]=\"WEBSOCKET\",r[r.HTTPS=2]=\"HTTPS\",t.SOCKET_DISCONNECT=-1},function(e,t,n){\"use strict\";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,\"__esModule\",{value:!0}),t.SettingFetchHandler=void 0;var o,i,s=n(0),a=n(1),c=n(11),u=n(2);function l(e,t){this.options=e,this.log=t,this.seq=0,this.userID=\"\"}n=o={SERVICE_ClOUD_SETTING:10,10:\"SERVICE_ClOUD_SETTING\"},n=i={METHOD_UNSET:0,0:\"METHOD_UNSET\",METHOD_GET:1,1:\"METHOD_GET\",METHOD_POST:2,2:\"METHOD_POST\"},l.prototype.setOptions=function(e){this.options=e},l.prototype.setDataReport=function(e){this.reportFunc=e},l.prototype.setUserID=function(e){this.userID=e},l.prototype.fetchSetting=function(e,t,n,o){var i=this;return new Promise((function(a,l){var h,p={product:i.options.product,files:e,param:r(r({},t),{deviceid:void 0}),appid:i.options.appID,token:n,id_name:o,timestamp:(new Date).getTime(),biztype:0,deviceid:t.deviceid||u.generateUUID(i.options.env),compress:!1,mode:i.options.online?\"online\":\"test\"},d=i.seq++;i.reportFunc&&i.reportFunc(d,\"request_start\"),null!=(h=i.options)&&h.unify&&i.options.connection?i.sendCloudRequest(o,p,\"/cloud-setting/get\",(function(e){var t,n=e.code,r=(e.msg,e.data),o=e.polling_interval;e=e.reportData,i.log.info(s.ZEGO_SETTING_ACTION.SETTINGFETCHHANDLER_FETCHSETTING+\" unify \"+n),r&&(t=[],Object.keys(r).forEach((function(e){t.push({name:e,error:r[e].code})}))),i.reportFunc&&i.reportFunc(d,\"request_end\",{code:n,reportData:e,params:p,files:t}),a({data:r,polling_interval:o})}),(function(e){var t=e.code,n=e.msg;e.data,e=e.reportData,i.log.warn(s.ZEGO_SETTING_ACTION.SETTINGFETCHHANDLER_FETCHSETTING+\" unify \"+t),i.reportFunc&&i.reportFunc(d,\"request_end\",{code:t,params:p,reportData:e}),l({code:t,msg:n})})):c.fetch(i.options.urls,p,i.options.env||0).then((function(e){var t,n=e.code,r=(e.msg,e.data),o=e.polling_interval;e=e.reportData,i.log.info(s.ZEGO_SETTING_ACTION.SETTINGFETCHHANDLER_FETCHSETTING+\" \"+n),r&&(t=[],Object.keys(r).forEach((function(e){t.push({name:e,error:r[e].code})}))),i.reportFunc&&i.reportFunc(d,\"request_end\",{code:n,reportData:e,params:p,files:t}),a({data:r,polling_interval:o})})).catch((function(e){var t=e.code,n=e.msg;e.data,e=e.reportData,i.log.warn(s.ZEGO_SETTING_ACTION.SETTINGFETCHHANDLER_FETCHSETTING+\" \"+t),i.reportFunc&&i.reportFunc(d,\"request_end\",{code:t,params:p,reportData:e}),l({code:t,msg:n})}))}))},l.prototype.sendCloudRequest=function(e,t,n,s,c,u,l){var h,p=this,d=(void 0===u&&(u=3),void 0===l&&(l=[]),(new Date).getTime());null!=(h=this.options.connection)&&h.startHttpRequest({service:o.SERVICE_ClOUD_SETTING,body:t,ack:!1,idName:e,method_no:i.METHOD_POST,location:n},(function(o){var i,h,_,f,g;200===(null==o?void 0:o.status_code)?(i=(f=JSON.parse(o.body)).code,g=f.message,h=f.data,_=f.polling_interval,f=(new Date).getTime()-d,l.push({timestamp:d,url:n,error:i,duration:f}),0===i?s({code:i,msg:g,data:h,polling_interval:_,reportData:l}):c({code:i,msg:g,reportData:l})):(g=(new Date).getTime()-d,l.push({timestamp:d,url:n,error:null==o?void 0:o.status_code,duration:g}),0<u?(u--,p.sendCloudRequest(e,t,n,s,c,u,l)):c(r(r({},a.errorList.FILE_REQUEST_FAIL),{reportData:l})))}),(function(o){var i=(new Date).getTime()-d;l.push({timestamp:d,url:n,error:o.code,duration:i}),0<u?(u--,p.sendCloudRequest(e,t,n,s,c,u,l)):c(r(r({},a.errorList.FILE_REQUEST_FAIL),{reportData:l}))}),null,{timeout:4e3})},t.SettingFetchHandler=n=l},function(e,t,n){\"use strict\";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=(Object.defineProperty(t,\"__esModule\",{value:!0}),t.fetch=void 0,n(1));t.fetch=function e(t,n,i,s,a,c){return void 0===s&&(s=5),void 0===a&&(a=0),void 0===c&&(c=[]),new Promise((function(u,l){a=a||(new Date).getTime();var h,p,d,_=(new Date).getTime();0===i?(h=new XMLHttpRequest,p=t[(s+1)%2]||t[0],h.open(\"post\",p),1==n.compress&&(h.responseType=\"arraybuffer\"),h.ontimeout=function(){},h.onreadystatechange=function(){var d,f,g,m,y;4==h.readyState&&(200<=h.status&&h.status<300||304==h.status?(f=void 0,1!=n.compress&&(f=h.responseText),y=(new Date).getTime()-_,d=(g=JSON.parse(f)).code,m=g.message,f=g.data,g=g.polling_interval,c.push({timestamp:_,url:p,error:d,duration:y}),0===d?u({code:d,msg:m,data:f,polling_interval:g,reportData:c}):l({code:d,msg:m,reportData:c})):(m=(new Date).getTime()-_,c.push({timestamp:_,url:p,error:h.status,duration:m}),y=(new Date).getTime()-a,0<s&&y<8e3?e(t,n,i,--s,a,c).then((function(e){u(e)})).catch((function(e){l(e)})):l(r(r({},o.errorList.FILE_REQUEST_FAIL),{reportData:c}))))},h.timeout=8e3,h.send(JSON.stringify(n))):(d=t[(s+1)%2]||t[0],wx.request({url:d,data:n,method:\"POST\",success:function(h){var p=(m=h.data).code,f=m.message,g=m.data,m=m.polling_interval;void 0!==p?0===p?u({code:p,msg:f,data:g,polling_interval:m,reportData:c}):l({code:p,msg:f,reportData:c}):(f=(new Date).getTime()-_,c.push({timestamp:_,url:d,error:o.errorList.FILE_REQUEST_FAIL.code,msg:h.data,duration:f}),0<s?e(t,n,i,--s,a,c).then((function(e){u(e)})).catch((function(e){l(e)})):l(r(r({},o.errorList.FILE_REQUEST_FAIL),{reportData:c})))},fail:function(h){var p=(new Date).getTime()-_;c.push({timestamp:_,url:d,error:o.errorList.FILE_REQUEST_FAIL.code,msg:h.errMsg,duration:p}),0<s?e(t,n,i,--s,a,c).then((function(e){u(e)})).catch((function(e){l(e)})):l(r(r({},o.errorList.FILE_REQUEST_FAIL),{reportData:c}))}}))}))}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.INIT_CONFIG=void 0,t.INIT_CONFIG={env:0}}],r.c=s,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=3))},function(e,t,n){function r(e){if(a[e])return a[e].exports;var t=a[e]={i:e,l:!1,exports:{}};return s[e].call(t.exports,t,t.exports,r),t.l=!0,t.exports}var o,i,s,a;e.exports=(o=n(6),i=n(1),s=[function(e,t,n){\"use strict\";var r,o;Object.defineProperty(t,\"__esModule\",{value:!0}),t.typeMap=t.BrokenType=t.ConnectedType=t.DisconnectedType=t.Method=t.ConnectionClosedAction=t.NetWorkState=t.externalErrorList=t.Stick=t.PcConnectState=t.ENUM_CONNECT_STATE=t.StreamType=t.Mode=t.ZegoconnRunEnv=t.BusinessService=t.AccessHub_Error_Code=t.AccessHubMessageType=t.ENUM_NETWORK_STATE=void 0,(o=t.ENUM_NETWORK_STATE||(t.ENUM_NETWORK_STATE={}))[o.offline=0]=\"offline\",o[o.online=1]=\"online\",(o=t.AccessHubMessageType||(t.AccessHubMessageType={}))[o.MSG_TYPE_STREAM_CLOSED=2]=\"MSG_TYPE_STREAM_CLOSED\",o[o.MSG_TYPE_CLOSE_CONNECTION=3]=\"MSG_TYPE_CLOSE_CONNECTION\",o[o.MSG_TYPE_HTTP_REQUEST=4]=\"MSG_TYPE_HTTP_REQUEST\",o[o.MSG_TYPE_HTTP_RESPONSE=5]=\"MSG_TYPE_HTTP_RESPONSE\",o[o.MSG_TYPE_HB_REQUEST=12]=\"MSG_TYPE_HB_REQUEST\",o[o.MSG_TYPE_HB_RESPONSE=13]=\"MSG_TYPE_HB_RESPONSE\",o[o.MSG_TYPE_GET_CONFIG_REQUEST=14]=\"MSG_TYPE_GET_CONFIG_REQUEST\",o[o.MSG_TYPE_GET_CONFIG_RESPONSE=15]=\"MSG_TYPE_GET_CONFIG_RESPONSE\",o[o.MSG_TYPE_HTTP_REQUEST_ACK=16]=\"MSG_TYPE_HTTP_REQUEST_ACK\",o[o.MSG_TYPE_PC_UPWARD_MESSAGE=17]=\"MSG_TYPE_PC_UPWARD_MESSAGE\",o[o.MSG_TYPE_PC_UPWARD_MESSAGE_ACK=18]=\"MSG_TYPE_PC_UPWARD_MESSAGE_ACK\",o[o.MSG_TYPE_PC_ESTABLISHED=19]=\"MSG_TYPE_PC_ESTABLISHED\",o[o.MSG_TYPE_PC_BROKEN=20]=\"MSG_TYPE_PC_BROKEN\",o[o.MSG_TYPE_PC_DOWNWARD_MESSAGE=21]=\"MSG_TYPE_PC_DOWNWARD_MESSAGE\",o[o.MSG_TYPE_REDIRECT=22]=\"MSG_TYPE_REDIRECT\",o[o.MSG_TYPE_GET_APPCONFIG_REQUEST=23]=\"MSG_TYPE_GET_APPCONFIG_REQUEST\",o[o.MSG_TYPE_GET_APPCONFIG_RESPONSE=24]=\"MSG_TYPE_GET_APPCONFIG_RESPONSE\",o[o.MSG_TYPE_PUSH_APPCONFIG=25]=\"MSG_TYPE_PUSH_APPCONFIG\",o[o.MSG_TYPE_ACCESSHUB_DISPATCH_REQUEST=26]=\"MSG_TYPE_ACCESSHUB_DISPATCH_REQUEST\",o[o.MSG_TYPE_ACCESSHUB_DISPATCH_RESPONSE=27]=\"MSG_TYPE_ACCESSHUB_DISPATCH_RESPONSE\",o[o.MSG_TYPE_PUSH_EXCEPTION=30]=\"MSG_TYPE_PUSH_EXCEPTION\",(r=o=t.AccessHub_Error_Code||(t.AccessHub_Error_Code={}))[r.ACCESSHUB_INVALID_FRAME=2e4]=\"ACCESSHUB_INVALID_FRAME\",r[r.ACCESSHUB_NEED_ENCRYPT=20001]=\"ACCESSHUB_NEED_ENCRYPT\",r[r.ACCESSHUB_DECRYPT=20002]=\"ACCESSHUB_DECRYPT\",r[r.ACCESSHUB_MSGTYPE=20003]=\"ACCESSHUB_MSGTYPE\",r[r.ACCESSHUB_UNMARSHAL=20004]=\"ACCESSHUB_UNMARSHAL\",r[r.ACCESSHUB_TIMEOUT=20005]=\"ACCESSHUB_TIMEOUT\",r[r.ACCESSHUB_CONNECT=20006]=\"ACCESSHUB_CONNECT\",r[r.ACCESSHUB_BROKEN=20007]=\"ACCESSHUB_BROKEN\",r[r.ACCESSHUB_INTERNAL_ERROR=20008]=\"ACCESSHUB_INTERNAL_ERROR\",r[r.ACCESSHUB_MARSHAL=20009]=\"ACCESSHUB_MARSHAL\",r[r.ACCESSHUB_UNSUPPORTED_SERVICE=20010]=\"ACCESSHUB_UNSUPPORTED_SERVICE\",r[r.ACCESSHUB_TOO_FREQUENTLY=20011]=\"ACCESSHUB_TOO_FREQUENTLY\",r[r.ACCESSHUB_INVALID_APPID=20012]=\"ACCESSHUB_INVALID_APPID\",r[r.ACCESSHUB_HB_TIMEOUT=20013]=\"ACCESSHUB_HB_TIMEOUT\",r[r.ACCESSHUB_INVALID_SIGNATURE=20014]=\"ACCESSHUB_INVALID_SIGNATURE\",(r=t.BusinessService||(t.BusinessService={}))[r.SERVICE_UNSET=0]=\"SERVICE_UNSET\",r[r.SERVICE_MEDIAGW=1]=\"SERVICE_MEDIAGW\",r[r.SERVICE_LIVEROOM=2]=\"SERVICE_LIVEROOM\",r[r.SERVICE_MIX=3]=\"SERVICE_MIX\",r[r.SERVICE_ZEUS=4]=\"SERVICE_ZEUS\",r[r.SERVICE_ZPUSH=5]=\"SERVICE_ZPUSH\",r[r.SERVICE_L3=6]=\"SERVICE_L3\",r[r.SERVICE_TALKLINE=7]=\"SERVICE_TALKLINE\",r[r.SERVICE_EDUSUITE=8]=\"SERVICE_EDUSUITE\",r[r.SERVICE_ZIM=9]=\"SERVICE_ZIM\",r[r.SERVICE_ClOUD_SETTING=10]=\"SERVICE_ClOUD_SETTING\",r[r.SERVICE_ZEUSHB=11]=\"SERVICE_ZEUSHB\",r[r.SERVICE_USER_LOGIC=12]=\"SERVICE_USER_LOGIC\",r[r.SERVICE_UNIFYDISPATCH=13]=\"SERVICE_UNIFYDISPATCH\",r[r.SERVICE_QUALITY=14]=\"SERVICE_QUALITY\",r[r.SERVICE_SECURITY=15]=\"SERVICE_SECURITY\",r[r.SERVICE_KTVCPR=16]=\"SERVICE_KTVCPR\",r[r.SERVICE_SWITCH4LIVEROOM=17]=\"SERVICE_SWITCH4LIVEROOM\",r[r.SERVICE_WEBRTC_SIGNAL=18]=\"SERVICE_WEBRTC_SIGNAL\",r[r.SERVICE_L3_WEBRTC_SIGNAL=19]=\"SERVICE_L3_WEBRTC_SIGNAL\",r[r.SERVICE_VIDEOCPR=20]=\"SERVICE_VIDEOCPR\",r[r.SERVICE_CDN=21]=\"SERVICE_CDN\",r[r.SERVICE_CLOUDRECORD=22]=\"SERVICE_CLOUDRECORD\",r[r.SERVICE_INNER_ECHO=23]=\"SERVICE_INNER_ECHO\",r[r.SERVICE_OUTER_ECHO=24]=\"SERVICE_OUTER_ECHO\",r[r.SERVICE_LOCALHOST_ECHO=25]=\"SERVICE_LOCALHOST_ECHO\",r[r.SERVICE_ECHO=26]=\"SERVICE_ECHO\",r[r.SERVICE_DOCSERVICE=27]=\"SERVICE_DOCSERVICE\",r[r.SERVICE_AUTHSVR=28]=\"SERVICE_AUTHSVR\",(r=t.ZegoconnRunEnv||(t.ZegoconnRunEnv={}))[r.ZEGOCONN_RUN_ENV_UNSET=0]=\"ZEGOCONN_RUN_ENV_UNSET\",r[r.ZEGOCONN_RUN_ENV_BROWSER=1]=\"ZEGOCONN_RUN_ENV_BROWSER\",r[r.ZEGOCONN_RUN_ENV_APPLET=2]=\"ZEGOCONN_RUN_ENV_APPLET\",(r=t.Mode||(t.Mode={}))[r.Mode_UNSET=0]=\"Mode_UNSET\",r[r.MODE_ONLINE=1]=\"MODE_ONLINE\",r[r.MODE_TEST=2]=\"MODE_TEST\",r[r.MODE_ALPHA=3]=\"MODE_ALPHA\",(r=t.StreamType||(t.StreamType={}))[r.HTTP=0]=\"HTTP\",r[r.PC=1]=\"PC\",r[r.OTHER=2]=\"OTHER\",t.ENUM_CONNECT_STATE={disconnect:0,connecting:1,connected:2},(r=t.PcConnectState||(t.PcConnectState={}))[r.CONNECTED=0]=\"CONNECTED\",r[r.DISCONNECT=1]=\"DISCONNECT\",r[r.BROKEN=2]=\"BROKEN\",t.Stick={DISPATCH:\"zego-action-dispatch\",RETRY:\"zego-action-retry\",ABORT:\"zego-action-abort\",NEXT_GROUP:\"zego-action-next-group\",PUSH_APP_CONFIG:\"push-app-config:\"},t.externalErrorList=[o.ACCESSHUB_INVALID_APPID,o.ACCESSHUB_INVALID_SIGNATURE],(r=t.NetWorkState||(t.NetWorkState={}))[r.offline=0]=\"offline\",r[r.online=1]=\"online\",(o=t.ConnectionClosedAction||(t.ConnectionClosedAction={}))[o.ACTION_RESERVED=0]=\"ACTION_RESERVED\",o[o.ACTION_DISPATCH=1]=\"ACTION_DISPATCH\",o[o.ACTION_RETRY=2]=\"ACTION_RETRY\",o[o.ACTION_NEXT_NODE=3]=\"ACTION_NEXT_NODE\",o[o.ACTION_ABORT=4]=\"ACTION_ABORT\",o[o.ACTION_NEXT_GROUP=5]=\"ACTION_NEXT_GROUP\",(r=t.Method||(t.Method={}))[r.METHOD_UNSET=0]=\"METHOD_UNSET\",r[r.METHOD_GET=1]=\"METHOD_GET\",r[r.METHOD_POST=2]=\"METHOD_POST\",(o=t.DisconnectedType||(t.DisconnectedType={}))[o.CLOSE=0]=\"CLOSE\",o[o.TEMP=1]=\"TEMP\",o[o.TIMEOUT=2]=\"TIMEOUT\",(r=t.ConnectedType||(t.ConnectedType={}))[r.AUTO=0]=\"AUTO\",r[r.MANUAL=1]=\"MANUAL\",(o=t.BrokenType||(t.BrokenType={}))[o.EMPTY=0]=\"EMPTY\",o[o.CLOSE=1]=\"CLOSE\",t.typeMap={2:\"stream_closed\",3:\"close_connection\",4:\"http_request\",5:\"http_response\",12:\"hb_request\",13:\"hb_response\",14:\"get_config_request\",15:\"get_config_response\",16:\"http_request_ack\",17:\"pc_upward_message\",18:\"pc_upward_message_ack\",19:\"pc_established\",20:\"pc_broken\",21:\"pc_downward_message\",22:\"redirect\",23:\"get_appconfig_request\",24:\"get_appconfig_response\",25:\"push_appconfig\",26:\"accesshub_dispatch_request\",27:\"accesshub_dispatch_response\",30:\"push_exception\"}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.APP_CONFIG_KEY=t.NET_ACCESS_SERVERS=t.NET_ACCESS_CONFIG=void 0,n=n(0),t.NET_ACCESS_CONFIG={domains:[\"accesshub-wss.zego.im\"],mode:\"online\",modeNo:n.Mode.MODE_ONLINE,sdkType:3,connectVer:2,pcEstablishTimeout:15,scheme:\"wss\",location:\"accesshub\",wssMessageType:1},t.NET_ACCESS_SERVERS=\"z_net_access_servers\",t.APP_CONFIG_KEY=\"z_appconfig\"},function(e,t){e.exports=o},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.errorCodeList=void 0,t.errorCodeList={TIMEOUT:{code:1100002,msg:\"network timeout.\"},SOCKET_CLOSE:{code:1100003,msg:\"socket close\"},NET_SOCKET_TIMEOUT:{code:1100004,msg:\"net agent timeout\"},NET_HB_TIMEOUT:{code:1100005,msg:\"net hb timeout\"}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.uuidNum=t.decodeString=t.encodeString=void 0,t.encodeString=function(e){return Uint8Array.from(Array.from(unescape(encodeURIComponent(e))).map((function(e){return e.charCodeAt(0)})))},t.decodeString=function(e){return decodeURIComponent(escape(String.fromCharCode.apply(String,Array.from(e))))},t.uuidNum=function(e,t){var n,r,o=\"0123456789\".split(\"\"),i=[];if(t=o.length,e)for(n=0;n<e;n++)i[n]=o[0|Math.random()*t];else for(i[8]=i[13]=i[18]=i[23]=\"-\",i[14]=\"4\",n=0;n<36;n++)i[n]||(r=0|16*Math.random(),i[n]=o[19==n?3&r|8:r]);return i.join(\"\")}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.NetAgentPCRequest=void 0;var r=n(0),o=n(1),i=n(6),s=n(4),a=[r.BusinessService.SERVICE_WEBRTC_SIGNAL,r.BusinessService.SERVICE_L3_WEBRTC_SIGNAL];function c(e,t,n,o,s){this.logger=e,this.service=t,this.streamManager=n,this.pcEstablishTimeout=o,this.option=s,this.connectState=r.PcConnectState.DISCONNECT,this.lastConnectState=r.PcConnectState.DISCONNECT,this.brokenTimer=null,this.listenerList={connected:[],broken:[]},this.netPcStream=this.streamManager.createStream(r.StreamType.PC),this.eventManager=new i.EventManager,this.netPcStream.onPushEvent=this.onPushEvent.bind(this)}c.prototype.sendRequest=function(e,t,n){var i=this,c=e.payload,u=((a.includes(this.service)||null!=(u=this.option)&&u.encode)&&(c=(0,s.encodeString)(e.payload)),{service_no:this.service,ack:e.ack,payload:c,wss_message_type:o.NET_ACCESS_CONFIG.wssMessageType,wss_path:null==(u=this.option)?void 0:u.path,wss_raw_query:null==(c=this.option)?void 0:c.query,zegoconn_version:o.NET_ACCESS_CONFIG.connectVer});this.netPcStream.isConnect()||this.eventManager.emit(\"connectStart\"),this.netPcStream.sendMessage(r.AccessHubMessageType.MSG_TYPE_PC_UPWARD_MESSAGE,u,(function(){i.logger.info(\"zn.napr.sr suc\"),n&&n()}),(function(e){i.logger.error(\"zn.napr.sr fail\"),t&&t(e)}),null,{isInSendMap:\"boolean\"==typeof e.isInSendMap&&e.isInSendMap}),this.netPcStream.isFirst=!1},c.prototype.onPushEvent=function(e,t){var n;switch(this.logger.info(\"zn.napr.ope\"+\" msgType: \".concat(e)),e){case r.AccessHubMessageType.MSG_TYPE_PC_ESTABLISHED:this.pcEstablished(t);break;case r.AccessHubMessageType.MSG_TYPE_PC_BROKEN:this.pcBroken();break;case r.AccessHubMessageType.MSG_TYPE_PC_DOWNWARD_MESSAGE:var o=t.payload;(a.includes(this.service)||null!=(n=this.option)&&n.encode)&&(o=(0,s.decodeString)(t.payload)),this.eventManager.emit(\"downLoadMessage\",o)}},c.prototype.on=function(e,t){return this.eventManager.addEventHandler(e,t)},c.prototype.off=function(e,t){this.eventManager.removeEventHandler(e,t)},c.prototype.pcEstablished=function(e){this.logger.info(\"zn.napr.pe call \"+JSON.stringify(e)),this.setConnectState(r.PcConnectState.CONNECTED);var t=r.ConnectedType.MANUAL;this.lastConnectState===r.PcConnectState.BROKEN&&this.connectState===r.PcConnectState.CONNECTED&&(t=r.ConnectedType.AUTO),this.eventManager.emit(\"connected\",t),this.eventManager.emit(\"pcConnectedEvent\",{proxy_link_sources:null==e?void 0:e.from}),this.brokenTimer&&clearTimeout(this.brokenTimer)},c.prototype.pcBroken=function(){var e=this;this.logger.info(\"zn.napr.pb call\"),this.setConnectState(r.PcConnectState.BROKEN),this.eventManager.emit(\"broken\"),this.brokenTimer=setTimeout((function(){e.eventManager.emit(\"disconnected\",r.DisconnectedType.TEMP)}),1e3*this.pcEstablishTimeout)},c.prototype.resetBrokenTimer=function(){this.brokenTimer&&clearTimeout(this.brokenTimer)},c.prototype._close=function(e,t){var n;this.logger.info(\"zn.napr.cr call \"+this.service+\" \"+this.connectState),this.connectState!==r.PcConnectState.DISCONNECT&&(this.netPcStream.closeStream(0,\"\"),this.resetBrokenTimer(),n=this.streamManager.getStreamID(),this.netPcStream.refresh(n),this.eventManager.emit(e,t)),this.setConnectState(r.PcConnectState.DISCONNECT)},c.prototype.closePc=function(){this._close(\"broken\")},c.prototype.closeRequest=function(){this._close(\"disconnected\",r.DisconnectedType.CLOSE)},c.prototype.setConnectState=function(e){this.connectState!==e&&(this.lastConnectState=this.connectState,this.connectState=e)},t.NetAgentPCRequest=c},function(e,t,n){\"use strict\";function r(){this.handlerListMap={}}Object.defineProperty(t,\"__esModule\",{value:!0}),t.EventManager=void 0,r.prototype.addEventHandler=function(e,t){if(this.handlerListMap[e]||(this.handlerListMap[e]=[]),\"function\"!=typeof t)throw new Error(\"Params callBack is not a Function\");return this.handlerListMap[e]&&-1==this.handlerListMap[e].indexOf(t)&&this.handlerListMap[e].push(t),!0},r.prototype.removeEventHandler=function(e,t){return!!this.handlerListMap[e]&&(this.handlerListMap[e]=t?this.handlerListMap[e].filter((function(e){return e!==t})):[],!0)},r.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.handlerListMap[e]&&this.handlerListMap[e].forEach((function(n){try{setTimeout((function(){n.apply(void 0,t)}),0)}catch(n){console.error(\"dispatch \"+e+\" \"+n)}}))},t.EventManager=r},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.NetAgentHttpRequest=void 0;var r=n(0),o=n(4),i=n(1);function s(e,t,n){this.logger=e,this.service=t,this.streamManager=n,this.netHttpStream=this.streamManager.createStream(r.StreamType.HTTP)}s.prototype.sendRequest=function(e,t,n,s,a){var c=this;e={service_no:this.service,ack:e.ack,headers:e.headers,body:(0,o.encodeString)(JSON.stringify(e.body)),id_name:e.idName,method_no:e.method_no,stick:e.stick,location:e.location,zegoconn_version:i.NET_ACCESS_CONFIG.connectVer};this.netHttpStream.sendMessage(r.AccessHubMessageType.MSG_TYPE_HTTP_REQUEST,e,(function(e){var n=(null==e?void 0:e.headers).find((function(e){return\"Content-Encoding\"===(null==e?void 0:e.name)}));\"gzip\"===(null==n?void 0:n.val)?c.logger.info(\"zn.nahr.sr gzip\"):e.body&&(n=(0,o.decodeString)(e.body),e.body=n),c.logger.info(\"zn.nahr.sr suc \"+JSON.stringify(e)),t&&t(e)}),(function(e,t,r){c.logger.error(\"zn.nahr.sr fail\"),n&&n(r||e)}),(function(e){c.logger.error(\"zn.nahr.sr ack\"),s&&s(e)}),a),this.netHttpStream.isFirst=!1},t.NetAgentHttpRequest=s},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Method=t.Mode=t.DisconnectedType=t.ConnectedType=t.NET_ACCESS_CONFIG=t.BrokenType=t.BusinessService=t.NetAgentHttpRequest=t.NetAgentPCRequest=t.ZegoConnectionAgent=void 0;var r=n(0),o=(Object.defineProperty(t,\"BrokenType\",{enumerable:!0,get:function(){return r.BrokenType}}),Object.defineProperty(t,\"BusinessService\",{enumerable:!0,get:function(){return r.BusinessService}}),Object.defineProperty(t,\"ConnectedType\",{enumerable:!0,get:function(){return r.ConnectedType}}),Object.defineProperty(t,\"DisconnectedType\",{enumerable:!0,get:function(){return r.DisconnectedType}}),Object.defineProperty(t,\"Mode\",{enumerable:!0,get:function(){return r.Mode}}),Object.defineProperty(t,\"Method\",{enumerable:!0,get:function(){return r.Method}}),n(9)),i=(Object.defineProperty(t,\"ZegoConnectionAgent\",{enumerable:!0,get:function(){return o.ZegoConnectionAgent}}),n(7)),s=(Object.defineProperty(t,\"NetAgentHttpRequest\",{enumerable:!0,get:function(){return i.NetAgentHttpRequest}}),n(1)),a=(Object.defineProperty(t,\"NET_ACCESS_CONFIG\",{enumerable:!0,get:function(){return s.NET_ACCESS_CONFIG}}),n(5));Object.defineProperty(t,\"NetAgentPCRequest\",{enumerable:!0,get:function(){return a.NetAgentPCRequest}})},function(e,t,n){\"use strict\";var r=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||((r=r||Array.prototype.slice.call(t,0,o))[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},o=(Object.defineProperty(t,\"__esModule\",{value:!0}),t.ZegoConnectionAgent=void 0,n(0)),i=n(10),s=n(13),a=n(18),c=n(19),u=n(20),l=n(1),h=n(6),p=n(21),d=n(3),_=n(22),f=n(4),g=n(23),m=n(7),y=n(24);function v(){var e=this;this.linkCheckTimer=null,this.connectServers=[],this.specifiedServers=[],this.getAppConfigFailCount=0,this.getAppConfigTime=0,this.inited=!1,this.linkMsgMaxInterval=90,this.linkMsgCheckInterval=5,this.connectedTime=0,this.connectid=\"\",this.reportSeq=0,this.connectSeq=0,this.primaryDomains=[],this.onConnectedEvent=function(t){var n;e.getConfig(),e.stateCenter.specified||(n=e.reportSeq++,e.eventManager.emit(\"dispatchEvent\",n,\"start\"),e.dispatch().then((function(t){var r=t.servers;t=t.domains;e.eventManager.emit(\"dispatchEvent\",n,\"end\",{domains:t}),0<r.length&&e.eventManager.emit(\"dispatchResultUpdate\",{servers:r})})).catch((function(e){}))),e.eventManager.emit(\"connected\"),e.connectedTime=(new Date).getTime(),e.connectid=(0,f.uuidNum)(16),e.eventManager.emit(\"connectedEvent\",e.connectSeq,\"end\",{servers:t,count:t.length,connectid:e.connectid})},this.onConnectingEvent=function(){e.logger.info(\"zn.zca.oce call\")},this.onDisConnectedEvent=function(t){e.disConnect(),e.netAgentPCRequestMgr.updateConnectState(o.PcConnectState.BROKEN)},this.onPushEvent=function(t,n,r){switch(n){case o.AccessHubMessageType.MSG_TYPE_REDIRECT:e.redirect(r);break;case o.AccessHubMessageType.MSG_TYPE_CLOSE_CONNECTION:e.connectClosed(r);break;case o.AccessHubMessageType.MSG_TYPE_PC_BROKEN:case o.AccessHubMessageType.MSG_TYPE_PC_ESTABLISHED:case o.AccessHubMessageType.MSG_TYPE_PC_DOWNWARD_MESSAGE:e.streamManager.onPushEvent(t,n,r);break;case o.AccessHubMessageType.MSG_TYPE_PUSH_APPCONFIG:e.businessRequestMgr.decodeConfigMessage(r.data)}}}v.prototype.init=function(){this.logger=new g.ZegoLogger,this.protobuf=new i.AccessHubProtoBuf,this.stateCenter=new _.StateCenter,this.eventManager=new h.EventManager,this.checkLinkMsg(),this.inited=!0},v.prototype.unInit=function(){this.inited=!1},v.prototype.setAppInfo=function(e){this.stateCenter.appInfo=e,this.stateCenter.networkState=!navigator||navigator.onLine?o.ENUM_NETWORK_STATE.online:o.ENUM_NETWORK_STATE.offline,0===e.env?this.bindWindowListener():1===e.env&&this.bindWxListener(),this.zegoLink=new s.ZegoWssLink(e.appID,e.env,this.protobuf,this.logger,this.stateCenter),this.zegoLink.initEvent(this.onConnectedEvent,this.onDisConnectedEvent,this.onConnectingEvent,this.onPushEvent),this.streamManager=new y.StreamManager(this.zegoLink),this.businessRequestMgr=new a.NetAgentBusinessRequestMgr(this.streamManager,this.protobuf,this.logger,this.stateCenter),this.netHeartBeatHandler=new c.NetHeartBeatHandler(this.streamManager,this.logger),this.netAgentPCRequestMgr=new u.NetAgentPCRequestMgr(this.streamManager,this.logger),this.heartBeatHandler()},v.prototype.setUserInfo=function(e){this.stateCenter.userId=e},v.prototype.setNetAgentDefaultServers=function(e){this.connectServers=r([],e,!0)},v.prototype.setNetAgentSpecifiedServers=function(e){this.logger.info(\"zn.sss.0 \"+JSON.stringify(e)),this.stateCenter.specified=!0,this.specifiedServers=r([],e,!0)},v.prototype.setBackupDomains=function(e){this.primaryDomains=e},v.prototype.setDispatchConnectServers=function(e){this.connect(e)},v.prototype.startHttpRequest=function(e,t,n,r,o){var i=this,s=this.reportSeq++;this.eventManager.emit(\"requestEvent\",s,\"start\"),this.isConnect()||this.connectUa(),new m.NetAgentHttpRequest(this.logger,e.service,this.streamManager).sendRequest(e,(function(n){i.eventManager.emit(\"requestEvent\",s,\"end\",{na_req_location:e.location,status_code:n.status_code,err_code:0}),t&&t(n)}),(function(t){i.eventManager.emit(\"requestEvent\",s,\"end\",{na_req_location:e.location,err_code:t.code||0}),n&&n(t)}),r,o)},v.prototype.getAppConfigByAgent=function(e,t,n){return this.isConnect()||this.connectUa(),this.getAppConfig(e,this.stateCenter.userId,t,n)},v.prototype.getPCRequest=function(e,t){var n=this;return(t=this.netAgentPCRequestMgr.getRequest(e,t)).on(\"disconnected\",(function(t){n.logger.warn(\"zn.zca.gpr \"+e+\" disconnect \"+t),t===o.DisconnectedType.TEMP&&(n.disConnect(),n.connectStart())})),t.on(\"connectStart\",(function(){n.connectUa()})),t},v.prototype.connectUa=function(){this.logger.info(\"zn.zca.cua call\"),this.retryLinkHandler&&(this.retryLinkHandler.init(),this.connectStart(!1,!0))},v.prototype.destroyConnect=function(){this.logger.info(\"zn.zca.dc.0 call\"),this.resetNetAgent()},v.prototype.isConnect=function(){return this.zegoLink&&this.zegoLink.isConnect()},v.prototype.on=function(e,t){return this.logger.info(\"zn.zca.o.0 \"+e),this.eventManager.addEventHandler(e,t)},v.prototype.off=function(e,t){this.logger.info(\"zn.zca.o.1 \"+e),this.eventManager.removeEventHandler(e,t)},v.prototype.setLogger=function(e){this.logger=e},v.prototype.setAccess=function(e){this.stateCenter.useNetAgent=e},v.prototype.heartBeatHandler=function(){var e=this;this.netHeartBeatHandler.netHbLogout=function(t){e.retryLinkHandler&&([d.errorCodeList.NET_HB_TIMEOUT.code].includes(t.code)?(e.retryLinkHandler.startMaxTime(),e.disConnect(),e.connectStart()):(e.retryLinkHandler.stopMaxTime(),e.retryLinkHandler.invalid(),e.eventManager.emit(\"disconnected\")))}},v.prototype.bindWindowListener=function(){var e=this;window.addEventListener(\"offline\",(function(){e.netOffLineHandle()})),window.addEventListener(\"online\",(function(){e.netOnLineHandle()}))},v.prototype.bindWxListener=function(){var e=this;wx.onNetworkStatusChange((function(t){t.isConnected?e.netOnLineHandle():e.netOffLineHandle()}))},v.prototype.netOnLineHandle=function(){this.logger.info(\"zn.zca.noh.0 network is online\"),this.stateCenter.networkState=o.ENUM_NETWORK_STATE.online,this.stateCenter.useNetAgent&&this.netOnLineHandler()},v.prototype.netOffLineHandle=function(){this.logger.info(\"zn.zca.noh.1 network is broken\"),this.stateCenter.networkState=o.ENUM_NETWORK_STATE.offline,this.stateCenter.useNetAgent&&this.netOffLineHandler()},v.prototype.checkLinkMsg=function(){var e=this;if(this.stateCenter.useNetAgent){if(this.isConnect()){var t=Date.now()-this.zegoLink.updatedMsgTime;if(t>1e3*this.linkMsgMaxInterval)return this.logger.info(\"zn.zca.clm interval: \"+t),void this.resetNetAgent()}this.linkCheckTimer&&clearTimeout(this.linkCheckTimer),this.linkCheckTimer=setTimeout((function(){e.checkLinkMsg()}),1e3*this.linkMsgCheckInterval)}},v.prototype.connect=function(e){var t=this;0<e.length&&(this.connectServers=r([],e,!0)),this.stateCenter.specified&&0<this.specifiedServers.length&&(this.connectServers=this.specifiedServers),this.zegoLink.createSocket(this.connectServers),this.retryLinkHandler||(this.retryLinkHandler=new p.NetRetryLinkHandler(this.logger,this.stateCenter)),this.retryLinkHandler.init(),this.retryLinkHandler.initLink(this.zegoLink),this.retryLinkHandler.onactive=function(e,n){n===d.errorCodeList.NET_SOCKET_TIMEOUT&&(t.eventManager.emit(\"disconnected\",n),t.netAgentPCRequestMgr.updateConnectState(o.PcConnectState.DISCONNECT,o.DisconnectedType.TIMEOUT,n))},this.connectStart(!1,!0)},v.prototype.resetNetAgent=function(){this.netHeartBeatHandler.reset(),this.zegoLink.destroySocket()},v.prototype.getConfig=function(){function e(e,n,r){r?t.logger.info(\"zn.zca.gc fail \"+JSON.stringify(r)):0===e.code?(t.logger.info(\"zn.zca.gc suc \"+JSON.stringify(e)),t.getConfigSuccess(e)):t.logger.info(\"zn.zca.gc fail\")}var t=this;this.businessRequestMgr.getConfig(e,e)},v.prototype.getConfigSuccess=function(e){this.netHeartBeatHandler.init(e),this.netAgentPCRequestMgr.setEstablishTimeout(e.data.pc_establish_timeout)},v.prototype.dispatch=function(){var e=this;return new Promise((function(t,n){e.businessRequestMgr.dispatchURL((function(n){n=n.data.wss_groups;var r=(e.logger.info(\"zn.nab.du wss_groups: \"+JSON.stringify(n)),e.getConnectionDomains(n,e.primaryDomains));r=e.handleWssGroups(r);t({servers:r,domains:n})}),(function(e){n(e)}))}))},v.prototype.handleWssGroups=function(e){return Array.isArray(e)&&0<e.length?e.map((function(e){return l.NET_ACCESS_CONFIG.scheme+\"://\"+e.host+\"/\"+l.NET_ACCESS_CONFIG.location})):[]},v.prototype.getConnectionDomains=function(e,t){var n=r([],e,!0);return t.forEach((function(t){e.forEach((function(e){var r;(r=e.main_domain||(r=e.host.split(\".\"))[r.length-2]+\".\"+r[r.length-1])!==t&&(r=e.host.replace(r,t),n.push({group:e.group,host:r}))}))})),n},v.prototype.getAppConfig=function(e,t,n,r){var i=this;return new Promise((function(s,a){\"string\"==typeof t&&\"string\"==typeof n?i.businessRequestMgr.getAppConfig(e,t,n,r).then((function(e){s(e)})).catch((function(r){if(i.logger.error(\"zn.zca.gac \"+JSON.stringify(r)),-1<o.externalErrorList.indexOf(r.code))return i.getAppConfigFailCount=0,void a(r);i.getAppConfigFailCount++,20008===r.code&&i.getAppConfigFailCount<3?i.getAppConfig(e,t,n).then((function(e){return s(e)})).catch((function(e){return a(e)})):(i.getAppConfigFailCount=0,a(r))})):i.logger.error(\"zn.zca.gac userID or token must be string\")}))},v.prototype.reportDisConnectEvent=function(){var e=(new Date).getTime()-this.connectedTime;this.eventManager.emit(\"disConnectedEvent\",{duration:e,server:this.zegoLink.connectServer})},v.prototype.redirect=function(e){this.logger.info(\"zn.zca.rd\"+\" \".concat(JSON.stringify(e.wss_groups))),(e=this.handleWssGroups(e.wss_groups))&&Array.isArray(e)&&0<e.length?(this.disConnect(),this.stateCenter.specified&&(this.logger.info(\"zn.zca.rd specified\"),e=this.specifiedServers),this.zegoLink.createSocket(e),this.connectStart(!1,!0)):this.logger.warn(\"zn.zca.rd wss_groups null\")},v.prototype.connectClosed=function(e){var t=this;switch(this.logger.info(\"zn.zca.cc\"+\" \".concat(e.reason,\" \").concat(e.msg,\" \").concat(e.action)),e.action){case o.ConnectionClosedAction.ACTION_DISPATCH:var n=this.reportSeq++;this.eventManager.emit(\"dispatchEvent\",n,\"start\"),this.dispatch().then((function(e){var r=e.servers;e=e.domains;t.eventManager.emit(\"dispatchEvent\",n,\"end\",{domains:e,reason:\"ConnectClosed\"}),Array.isArray(r)&&0<r.length&&(t.eventManager.emit(\"dispatchResultUpdate\",{servers:r}),e=t.stateCenter.specified?t.specifiedServers:r,t.disConnect(),t.zegoLink.createSocket(e),t.connectStart(!1,!0))})).catch((function(e){t.logger.info(\"zn.zca.cc dispatch fail\")}));break;case o.ConnectionClosedAction.ACTION_RETRY:this.disConnect(),this.connectStart(!1);break;case o.ConnectionClosedAction.ACTION_NEXT_GROUP:this.netAgentPCRequestMgr.closePCs(),this.eventManager.emit(\"broken\",o.BrokenType.CLOSE),this.connectStart();case o.ConnectionClosedAction.ACTION_ABORT:case o.ConnectionClosedAction.ACTION_RESERVED:}},v.prototype.netOnLineHandler=function(){this.retryLinkHandler&&(this.zegoLink.isConnect()?this.retryLinkHandler.stopMaxTime():this.connectStart())},v.prototype.netOffLineHandler=function(){this.disConnect(),this.retryLinkHandler&&(this.retryLinkHandler.invalid(),this.retryLinkHandler.startMaxTime(),this.zegoLink.setState(o.ENUM_CONNECT_STATE.disconnect))},v.prototype.connectStart=function(e,t){this.retryLinkHandler.active(e,t)&&this.reportConnectEvent()},v.prototype.reportConnectEvent=function(){var e=this.reportSeq++;this.connectSeq=e,this.eventManager.emit(\"connectedEvent\",e,\"start\")},v.prototype.disConnect=function(){this.netAgentPCRequestMgr.closePCs(),this.eventManager.emit(\"broken\"),this.reportDisConnectEvent()},v.prototype.testConnect=function(){this.startHttpRequest({service:o.BusinessService.SERVICE_ClOUD_SETTING,headers:[],body:{appid:3349318446,biztype:0,deviceid:\"27a315ae-ff78-4ded-8581-8b7b7afe6f2e\",files:[\"init\",\"room\"],id_name:\"sample1647345322471\",mode:\"online\",param:{},product:\"Web_SDK\",timestamp:1647345362932,token:\"eyJ2ZXIiOjEsImhhc2giOiIwOGQxMDYzMzQ0M2EzNjk1ZmE4YTg2ZDNmZGRlNGNiNyIsIm5vbmNlIjoiYWEyZDFmMDJmOGRiYjBlM2Q1YjY5NzA3NzMzOGYyODIiLCJleHBpcmVkIjoxNjQ5OTM3MzI2fQ==\"},idName:\"sample1647345322471\",ack:!0,stick:\"zego-action-dispatch\",method_no:o.Method.METHOD_POST,location:\"/cloud-setting/get\"},(function(e){console.warn(\"suc\",e)}),(function(e){console.warn(\"err\",e)}),(function(e){console.warn(\"suc\",e)}))},t.ZegoConnectionAgent=v},function(e,t,n){\"use strict\";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!(\"get\"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){e[r=void 0===r?n:r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\"default\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\"default\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},c=(Object.defineProperty(t,\"__esModule\",{value:!0}),t.AccessHubProtoBuf=void 0,a(n(11))),u=(s=s(n(2)),n(0)),l=a(n(12));function h(){var e;this.protoInstance=l.default,this.protoMap=((e={})[u.AccessHubMessageType.MSG_TYPE_STREAM_CLOSED]=[\"proto_accesshub\",\"ConnectionClosed\"],e[u.AccessHubMessageType.MSG_TYPE_CLOSE_CONNECTION]=[\"proto_accesshub\",\"CloseConnection\"],e[u.AccessHubMessageType.MSG_TYPE_HTTP_REQUEST]=[\"proto_accesshub\",\"HTTPRequest\"],e[u.AccessHubMessageType.MSG_TYPE_HTTP_RESPONSE]=[\"proto_accesshub\",\"HTTPResponse\"],e[u.AccessHubMessageType.MSG_TYPE_HB_REQUEST]=[\"proto_accesshub\",\"HBRequest\"],e[u.AccessHubMessageType.MSG_TYPE_HB_RESPONSE]=[\"proto_accesshub\",\"HBResponse\"],e[u.AccessHubMessageType.MSG_TYPE_GET_CONFIG_REQUEST]=[\"proto_accesshub\",\"GetConfigRequest\"],e[u.AccessHubMessageType.MSG_TYPE_GET_CONFIG_RESPONSE]=[\"proto_accesshub\",\"GetConfigResponse\"],e[u.AccessHubMessageType.MSG_TYPE_HTTP_REQUEST_ACK]=[\"proto_accesshub\",\"HBResponse\"],e[u.AccessHubMessageType.MSG_TYPE_PC_UPWARD_MESSAGE]=[\"proto_accesshub\",\"PCUpwardMessage\"],e[u.AccessHubMessageType.MSG_TYPE_PC_UPWARD_MESSAGE_ACK]=[\"proto_accesshub\",\"PCUpwardMessageAck\"],e[u.AccessHubMessageType.MSG_TYPE_PC_ESTABLISHED]=[\"proto_accesshub\",\"PCEstablished\"],e[u.AccessHubMessageType.MSG_TYPE_PC_BROKEN]=[\"proto_accesshub\",\"PCBroken\"],e[u.AccessHubMessageType.MSG_TYPE_PC_DOWNWARD_MESSAGE]=[\"proto_accesshub\",\"PCDownwardMessage\"],e[u.AccessHubMessageType.MSG_TYPE_REDIRECT]=[\"proto_accesshub\",\"Redirect\"],e[u.AccessHubMessageType.MSG_TYPE_GET_APPCONFIG_REQUEST]=[\"proto_accesshub\",\"GetAppConfigRequest\"],e[u.AccessHubMessageType.MSG_TYPE_GET_APPCONFIG_RESPONSE]=[\"proto_accesshub\",\"GetAppConfigResponse\"],e[u.AccessHubMessageType.MSG_TYPE_PUSH_APPCONFIG]=[\"proto_accesshub\",\"PushAppConfig\"],e[u.AccessHubMessageType.MSG_TYPE_ACCESSHUB_DISPATCH_REQUEST]=[\"proto_accesshub\",\"AccesshubDispatchRequest\"],e[u.AccessHubMessageType.MSG_TYPE_ACCESSHUB_DISPATCH_RESPONSE]=[\"proto_accesshub\",\"AccesshubDispatchResponse\"],e[u.AccessHubMessageType.MSG_TYPE_PUSH_EXCEPTION]=[\"proto_accesshub\",\"PushException\"],e)}s.util.Long=c.default,s.configure(),h.prototype.encodeRequest=function(e,t,n){var r=(o=this.protoMap[e])[0],o=o[1];o=(r=this.encode(this.protoInstance[r][o],t)).length;return(t=new Uint8Array(13+o))[0]=175,t[1]=0,t[2]=e>>8,t[3]=e-(t[2]<<8),t.set(new Uint8Array(Int32Array.from([o]).buffer).reverse(),4),t.set(new Uint8Array(Int32Array.from([n]).buffer).reverse(),8),t[12]=0,t.set(r,13),t},h.prototype.decodeResponse=function(e){var t=(e[2]<<8)+e[3],n=new DataView(e.buffer).getUint32(8),r=e.slice(13);try{var o=this.protoMap[t],i=o[0],s=o[1];return[n,t,this.decode(this.protoInstance[i][s],r)]}catch(e){return[n,t,{code:1}]}},h.prototype.decodeConfigMessage=function(e){return this.decode(this.protoInstance.proto_initconfig.InitConfig,e)},h.prototype.encode=function(e,t){return e.encode(new e(t)).finish()},h.prototype.decode=function(e,t){return r({},e.decode(t))},t.AccessHubProtoBuf=h},function(e,t){e.exports=i},function(e,t,n){\"use strict\";n.r(t),n.d(t,\"proto_accesshub\",(function(){return a})),n.d(t,\"proto_initconfig\",(function(){return c})),n.d(t,\"default\",(function(){return s}));const r=(t=n(2)).Reader,o=t.Writer,i=t.util,s=t.roots.default||(t.roots.default={}),a=s.proto_accesshub=(()=>{const e={};return e.MessageType=function(){const e={},t=Object.create(e);return t[e[0]=\"MSG_TYPE_EMPTY\"]=0,t[e[1]=\"MSG_TYPE_CONNECTION_CLOSED\"]=1,t[e[2]=\"MSG_TYPE_STREAM_CLOSED\"]=2,t[e[3]=\"MSG_TYPE_CLOSE_CONNECTION\"]=3,t[e[4]=\"MSG_TYPE_HTTP_REQUEST\"]=4,t[e[5]=\"MSG_TYPE_HTTP_RESPONSE\"]=5,t[e[6]=\"MSG_TYPE_HTTP_REQUEST_DROPED\"]=6,t[e[7]=\"MSG_TYPE_PROXY_CONNECT\"]=7,t[e[8]=\"MSG_TYPE_PROXY_CONNECTED\"]=8,t[e[9]=\"MSG_TYPE_PROXY_CONNECTION_CLOSED\"]=9,t[e[10]=\"MSG_TYPE_PROXY_SEND_DATA\"]=10,t[e[11]=\"MSG_TYPE_PROXY_RECV_DATA\"]=11,t[e[12]=\"MSG_TYPE_HB_REQUEST\"]=12,t[e[13]=\"MSG_TYPE_HB_RESPONSE\"]=13,t[e[14]=\"MSG_TYPE_GET_CONFIG_REQUEST\"]=14,t[e[15]=\"MSG_TYPE_GET_CONFIG_RESPONSE\"]=15,t[e[16]=\"MSG_TYPE_HTTP_REQUEST_ACK\"]=16,t[e[17]=\"MSG_TYPE_PC_UPWARD_MESSAGE\"]=17,t[e[18]=\"MSG_TYPE_PC_UPWARD_MESSAGE_ACK\"]=18,t[e[19]=\"MSG_TYPE_PC_ESTABLISHED\"]=19,t[e[20]=\"MSG_TYPE_PC_BROKEN\"]=20,t[e[21]=\"MSG_TYPE_PC_DOWNWARD_MESSAGE\"]=21,t[e[22]=\"MSG_TYPE_REDIRECT\"]=22,t[e[23]=\"MSG_TYPE_GET_APPCONFIG_REQUEST\"]=23,t[e[24]=\"MSG_TYPE_GET_APPCONFIG_RESPONSE\"]=24,t[e[25]=\"MSG_TYPE_PUSH_APPCONFIG\"]=25,t[e[26]=\"MSG_TYPE_ACCESSHUB_DISPATCH_REQUEST\"]=26,t[e[27]=\"MSG_TYPE_ACCESSHUB_DISPATCH_RESPONSE\"]=27,t[e[28]=\"MSG_TYPE_GET_IM_CONFIG_REQUEST\"]=28,t[e[29]=\"MSG_TYPE_GET_IM_CONFIG_RESPONSE\"]=29,t[e[30]=\"MSG_TYPE_PUSH_EXCEPTION\"]=30,t[e[50]=\"MSG_TYPE_UA_DISPATCH_REQUEST\"]=50,t[e[51]=\"MSG_TYPE_UA_DISPATCH_RESPONSE\"]=51,t[e[52]=\"MSG_TYPE_UA_ECHO_REQUEST\"]=52,t[e[53]=\"MSG_TYPE_UA_ECHO_RESPONSE\"]=53,t[e[100]=\"MSG_TYPE_NODE_REGISTER_REQUEST\"]=100,t[e[101]=\"MSG_TYPE_NODE_REGISTER_RESPONSE\"]=101,t[e[102]=\"MSG_TYPE_NODE_HB_REQUEST\"]=102,t[e[103]=\"MSG_TYPE_NODE_HB_RESPONSE\"]=103,t}(),e.ErrorCode=function(){const e={},t=Object.create(e);return t[e[0]=\"OK\"]=0,t[e[1e4]=\"DISPATCH_NO_AVAILABLE_NODE\"]=1e4,t[e[10001]=\"DISPATCH_INTERNAL_ERROR\"]=10001,t[e[10002]=\"DISPATCH_INVALID_FRAME\"]=10002,t[e[10003]=\"DISPATCH_UNMARSHAL\"]=10003,t[e[10004]=\"DISPATCH_MSGTYPE\"]=10004,t[e[10005]=\"DISPATCH_MARSHAL\"]=10005,t[e[10006]=\"DISPATCH_TOO_FREQUENTLY\"]=10006,t[e[2e4]=\"ACCESSHUB_INVALID_FRAME\"]=2e4,t[e[20001]=\"ACCESSHUB_NEED_ENCRYPT\"]=20001,t[e[20002]=\"ACCESSHUB_DECRYPT\"]=20002,t[e[20003]=\"ACCESSHUB_MSGTYPE\"]=20003,t[e[20004]=\"ACCESSHUB_UNMARSHAL\"]=20004,t[e[20005]=\"ACCESSHUB_TIMEOUT\"]=20005,t[e[20006]=\"ACCESSHUB_CONNECT\"]=20006,t[e[20007]=\"ACCESSHUB_BROKEN\"]=20007,t[e[20008]=\"ACCESSHUB_INTERNAL_ERROR\"]=20008,t[e[20009]=\"ACCESSHUB_MARSHAL\"]=20009,t[e[20010]=\"ACCESSHUB_UNSUPPORTED_SERVICE\"]=20010,t[e[20011]=\"ACCESSHUB_TOO_FREQUENTLY\"]=20011,t[e[20012]=\"ACCESSHUB_INVALID_APPID\"]=20012,t[e[20013]=\"ACCESSHUB_HB_TIMEOUT\"]=20013,t[e[20014]=\"ACCESSHUB_INVALID_SIGNATURE\"]=20014,t[e[20015]=\"ACCESSHUB_AUTH_FAILED\"]=20015,t[e[3e4]=\"ACCESSHUB_GET_STREAM_FAILED\"]=3e4,t[e[30001]=\"ACCESSHUB_GET_CONN_FAILED\"]=30001,t[e[30002]=\"ACCESSHUB_DO_HTTP_REQUEST_FAILED\"]=30002,t[e[30003]=\"ACCESSHUB_UNMARSHAL_HB_FAILED\"]=30003,t[e[30004]=\"ACCESSHUB_DO_BACKEND_DISPATCH_FAILED\"]=30004,t}(),e.Mode=function(){const e={},t=Object.create(e);return t[e[0]=\"Mode_UNSET\"]=0,t[e[1]=\"MODE_ONLINE\"]=1,t[e[2]=\"MODE_TEST\"]=2,t[e[3]=\"MODE_ALPHA\"]=3,t}(),e.Service=function(){const e={},t=Object.create(e);return t[e[0]=\"SERVICE_UNSET\"]=0,t[e[1]=\"SERVICE_MEDIAGW\"]=1,t[e[2]=\"SERVICE_LIVEROOM\"]=2,t[e[3]=\"SERVICE_MIX\"]=3,t[e[4]=\"SERVICE_ZEUS\"]=4,t[e[5]=\"SERVICE_ZPUSH\"]=5,t[e[6]=\"SERVICE_L3\"]=6,t[e[7]=\"SERVICE_TALKLINE\"]=7,t[e[8]=\"SERVICE_EDUSUITE\"]=8,t[e[9]=\"SERVICE_ZIM\"]=9,t[e[10]=\"SERVICE_ClOUD_SETTING\"]=10,t[e[11]=\"SERVICE_ZEUSHB\"]=11,t[e[12]=\"SERVICE_USER_LOGIC\"]=12,t[e[13]=\"SERVICE_UNIFYDISPATCH\"]=13,t[e[14]=\"SERVICE_QUALITY\"]=14,t[e[15]=\"SERVICE_SECURITY\"]=15,t[e[16]=\"SERVICE_KTVCPR\"]=16,t[e[17]=\"SERVICE_SWITCH4LIVEROOM\"]=17,t[e[18]=\"SERVICE_WEBRTC_SIGNAL\"]=18,t[e[19]=\"SERVICE_L3_WEBRTC_SIGNAL\"]=19,t[e[20]=\"SERVICE_VIDEOCPR\"]=20,t[e[21]=\"SERVICE_CDN\"]=21,t[e[22]=\"SERVICE_CLOUDRECORD\"]=22,t[e[23]=\"SERVICE_INNER_ECHO\"]=23,t[e[24]=\"SERVICE_OUTER_ECHO\"]=24,t[e[25]=\"SERVICE_LOCALHOST_ECHO\"]=25,t[e[26]=\"SERVICE_ECHO\"]=26,t[e[27]=\"SERVICE_DOCSERVICE\"]=27,t[e[28]=\"SERVICE_AUTHSVR\"]=28,t[e[29]=\"SERVICE_WEBLIVEROOM\"]=29,t[e[30]=\"SERVICE_WHITEBOARD\"]=30,t[e[31]=\"SERVICE_METAWORLD\"]=31,t}(),e.Method=function(){const e={},t=Object.create(e);return t[e[0]=\"METHOD_UNSET\"]=0,t[e[1]=\"METHOD_GET\"]=1,t[e[2]=\"METHOD_POST\"]=2,t}(),e.SdkType=function(){const e={},t=Object.create(e);return t[e[0]=\"SDK_TYPE_UNSET\"]=0,t[e[1]=\"SDK_TYPE_QUIC_MTCP_NATIVE\"]=1,t[e[2]=\"SDK_TYPE_WSS_NATIVE\"]=2,t[e[3]=\"SDK_TYPE_WSS_WEB\"]=3,t}(),e.ZegoconnRunEnv=function(){const e={},t=Object.create(e);return t[e[0]=\"ZEGOCONN_RUN_ENV_UNSET\"]=0,t[e[1]=\"ZEGOCONN_RUN_ENV_BROWSER\"]=1,t[e[2]=\"ZEGOCONN_RUN_ENV_APPLET\"]=2,t}(),e.BackendConnType=function(){const e={},t=Object.create(e);return t[e[0]=\"BACKEND_CONN_TYPE_UNSET\"]=0,t[e[1]=\"BACKEND_CONN_TYPE_TCP\"]=1,t[e[2]=\"BACKEND_CONN_TYPE_WSS\"]=2,t}(),e.ConnectionClosed=(A.prototype.code=0,A.prototype.msg=\"\",A.encode=function(e,t){return t=t||o.create(),null!=e.code&&Object.hasOwnProperty.call(e,\"code\")&&t.uint32(8).int32(e.code),null!=e.msg&&Object.hasOwnProperty.call(e,\"msg\")&&t.uint32(18).string(e.msg),t},A.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.ConnectionClosed;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.code=e.int32();break;case 2:o.msg=e.string();break;default:e.skipType(7&i)}}return o},A),e.StreamClosed=(P.prototype.code=0,P.prototype.msg=\"\",P.encode=function(e,t){return t=t||o.create(),null!=e.code&&Object.hasOwnProperty.call(e,\"code\")&&t.uint32(8).int32(e.code),null!=e.msg&&Object.hasOwnProperty.call(e,\"msg\")&&t.uint32(18).string(e.msg),t},P.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.StreamClosed;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.code=e.int32();break;case 2:o.msg=e.string();break;default:e.skipType(7&i)}}return o},P),e.CloseConnection=(L.prototype.reason=0,L.prototype.msg=\"\",L.prototype.action=0,L.encode=function(e,t){return t=t||o.create(),null!=e.reason&&Object.hasOwnProperty.call(e,\"reason\")&&t.uint32(8).int32(e.reason),null!=e.msg&&Object.hasOwnProperty.call(e,\"msg\")&&t.uint32(18).string(e.msg),null!=e.action&&Object.hasOwnProperty.call(e,\"action\")&&t.uint32(24).int32(e.action),t},L.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.CloseConnection;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.reason=e.int32();break;case 2:o.msg=e.string();break;case 3:o.action=e.int32();break;default:e.skipType(7&i)}}return o},L.Action=function(){const e={},t=Object.create(e);return t[e[0]=\"ACTION_RESERVED\"]=0,t[e[1]=\"ACTION_DISPATCH\"]=1,t[e[2]=\"ACTION_RETRY\"]=2,t[e[3]=\"ACTION_NEXT_NODE\"]=3,t[e[4]=\"ACTION_ABORT\"]=4,t[e[5]=\"ACTION_NEXT_GROUP\"]=5,t}(),L),e.HTTPRequest=(I.prototype.txid=i.Long?i.Long.fromBits(0,0,!0):0,I.prototype.appid=0,I.prototype.biz_type=0,I.prototype.mode=\"\",I.prototype.id_name=\"\",I.prototype.reqid=\"\",I.prototype.stick=\"\",I.prototype.service=\"\",I.prototype.location=\"\",I.prototype.method=\"\",I.prototype.headers=i.emptyArray,I.prototype.body=i.newBuffer([]),I.prototype.ack=!1,I.prototype.mode_no=0,I.prototype.service_no=0,I.prototype.method_no=0,I.prototype.sdk_type=0,I.prototype.zegoconn_run_env=0,I.prototype.zegoconn_version=0,I.encode=function(e,t){if(t=t||o.create(),null!=e.txid&&Object.hasOwnProperty.call(e,\"txid\")&&t.uint32(8).uint64(e.txid),null!=e.appid&&Object.hasOwnProperty.call(e,\"appid\")&&t.uint32(16).uint32(e.appid),null!=e.biz_type&&Object.hasOwnProperty.call(e,\"biz_type\")&&t.uint32(24).uint32(e.biz_type),null!=e.mode&&Object.hasOwnProperty.call(e,\"mode\")&&t.uint32(34).string(e.mode),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(42).string(e.id_name),null!=e.reqid&&Object.hasOwnProperty.call(e,\"reqid\")&&t.uint32(50).string(e.reqid),null!=e.stick&&Object.hasOwnProperty.call(e,\"stick\")&&t.uint32(58).string(e.stick),null!=e.service&&Object.hasOwnProperty.call(e,\"service\")&&t.uint32(66).string(e.service),null!=e.location&&Object.hasOwnProperty.call(e,\"location\")&&t.uint32(74).string(e.location),null!=e.method&&Object.hasOwnProperty.call(e,\"method\")&&t.uint32(82).string(e.method),null!=e.headers&&e.headers.length)for(let n=0;n<e.headers.length;++n)s.proto_accesshub.HTTPRequest.HTTPHeader.encode(e.headers[n],t.uint32(90).fork()).ldelim();return null!=e.body&&Object.hasOwnProperty.call(e,\"body\")&&t.uint32(98).bytes(e.body),null!=e.ack&&Object.hasOwnProperty.call(e,\"ack\")&&t.uint32(104).bool(e.ack),null!=e.mode_no&&Object.hasOwnProperty.call(e,\"mode_no\")&&t.uint32(112).int32(e.mode_no),null!=e.service_no&&Object.hasOwnProperty.call(e,\"service_no\")&&t.uint32(120).int32(e.service_no),null!=e.method_no&&Object.hasOwnProperty.call(e,\"method_no\")&&t.uint32(128).int32(e.method_no),null!=e.sdk_type&&Object.hasOwnProperty.call(e,\"sdk_type\")&&t.uint32(136).int32(e.sdk_type),null!=e.zegoconn_run_env&&Object.hasOwnProperty.call(e,\"zegoconn_run_env\")&&t.uint32(144).int32(e.zegoconn_run_env),null!=e.zegoconn_version&&Object.hasOwnProperty.call(e,\"zegoconn_version\")&&t.uint32(152).uint32(e.zegoconn_version),t},I.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.HTTPRequest;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.txid=e.uint64();break;case 2:o.appid=e.uint32();break;case 3:o.biz_type=e.uint32();break;case 4:o.mode=e.string();break;case 5:o.id_name=e.string();break;case 6:o.reqid=e.string();break;case 7:o.stick=e.string();break;case 8:o.service=e.string();break;case 9:o.location=e.string();break;case 10:o.method=e.string();break;case 11:o.headers&&o.headers.length||(o.headers=[]),o.headers.push(s.proto_accesshub.HTTPRequest.HTTPHeader.decode(e,e.uint32()));break;case 12:o.body=e.bytes();break;case 13:o.ack=e.bool();break;case 14:o.mode_no=e.int32();break;case 15:o.service_no=e.int32();break;case 16:o.method_no=e.int32();break;case 17:o.sdk_type=e.int32();break;case 18:o.zegoconn_run_env=e.int32();break;case 19:o.zegoconn_version=e.uint32();break;default:e.skipType(7&i)}}return o},I.HTTPHeader=(M.prototype.name=\"\",M.prototype.val=\"\",M.encode=function(e,t){return t=t||o.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.val&&Object.hasOwnProperty.call(e,\"val\")&&t.uint32(18).string(e.val),t},M.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.HTTPRequest.HTTPHeader;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.name=e.string();break;case 2:o.val=e.string();break;default:e.skipType(7&i)}}return o},M),I),e.HTTPResponse=(N.prototype.txid=i.Long?i.Long.fromBits(0,0,!0):0,N.prototype.headers=i.emptyArray,N.prototype.status_code=0,N.prototype.body=i.newBuffer([]),N.encode=function(e,t){if(t=t||o.create(),null!=e.txid&&Object.hasOwnProperty.call(e,\"txid\")&&t.uint32(8).uint64(e.txid),null!=e.headers&&e.headers.length)for(let n=0;n<e.headers.length;++n)s.proto_accesshub.HTTPRequest.HTTPHeader.encode(e.headers[n],t.uint32(18).fork()).ldelim();return null!=e.status_code&&Object.hasOwnProperty.call(e,\"status_code\")&&t.uint32(24).int32(e.status_code),null!=e.body&&Object.hasOwnProperty.call(e,\"body\")&&t.uint32(34).bytes(e.body),t},N.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.HTTPResponse;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.txid=e.uint64();break;case 2:o.headers&&o.headers.length||(o.headers=[]),o.headers.push(s.proto_accesshub.HTTPRequest.HTTPHeader.decode(e,e.uint32()));break;case 3:o.status_code=e.int32();break;case 4:o.body=e.bytes();break;default:e.skipType(7&i)}}return o},N),e.HTTPRequestAck=(w.prototype.txid=i.Long?i.Long.fromBits(0,0,!0):0,w.encode=function(e,t){return t=t||o.create(),null!=e.txid&&Object.hasOwnProperty.call(e,\"txid\")&&t.uint32(8).uint64(e.txid),t},w.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.HTTPRequestAck;for(;e.pos<n;){var i=e.uint32();i>>>3==1?o.txid=e.uint64():e.skipType(7&i)}return o},w),e.HTTPRequestDroped=(C.prototype.txid=i.Long?i.Long.fromBits(0,0,!0):0,C.prototype.reason=0,C.prototype.msg=\"\",C.encode=function(e,t){return t=t||o.create(),null!=e.txid&&Object.hasOwnProperty.call(e,\"txid\")&&t.uint32(8).uint64(e.txid),null!=e.reason&&Object.hasOwnProperty.call(e,\"reason\")&&t.uint32(16).int32(e.reason),null!=e.msg&&Object.hasOwnProperty.call(e,\"msg\")&&t.uint32(26).string(e.msg),t},C.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.HTTPRequestDroped;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.txid=e.uint64();break;case 2:o.reason=e.int32();break;case 3:o.msg=e.string();break;default:e.skipType(7&i)}}return o},C),e.ProxyConnectionClosed=(k.prototype.code=0,k.prototype.msg=\"\",k.prototype.connected=0,k.encode=function(e,t){return t=t||o.create(),null!=e.code&&Object.hasOwnProperty.call(e,\"code\")&&t.uint32(8).int32(e.code),null!=e.msg&&Object.hasOwnProperty.call(e,\"msg\")&&t.uint32(18).string(e.msg),null!=e.connected&&Object.hasOwnProperty.call(e,\"connected\")&&t.uint32(24).int32(e.connected),t},k.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.ProxyConnectionClosed;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.code=e.int32();break;case 2:o.msg=e.string();break;case 3:o.connected=e.int32();break;default:e.skipType(7&i)}}return o},k),e.HBRequest=(R.prototype.txid=i.Long?i.Long.fromBits(0,0,!0):0,R.prototype.ts=i.Long?i.Long.fromBits(0,0,!1):0,R.encode=function(e,t){return t=t||o.create(),null!=e.txid&&Object.hasOwnProperty.call(e,\"txid\")&&t.uint32(8).uint64(e.txid),null!=e.ts&&Object.hasOwnProperty.call(e,\"ts\")&&t.uint32(16).int64(e.ts),t},R.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.HBRequest;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.txid=e.uint64();break;case 2:o.ts=e.int64();break;default:e.skipType(7&i)}}return o},R),e.HBResponse=(S.prototype.txid=i.Long?i.Long.fromBits(0,0,!0):0,S.prototype.ts=i.Long?i.Long.fromBits(0,0,!1):0,S.encode=function(e,t){return t=t||o.create(),null!=e.txid&&Object.hasOwnProperty.call(e,\"txid\")&&t.uint32(8).uint64(e.txid),null!=e.ts&&Object.hasOwnProperty.call(e,\"ts\")&&t.uint32(16).int64(e.ts),t},S.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.HBResponse;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.txid=e.uint64();break;case 2:o.ts=e.int64();break;default:e.skipType(7&i)}}return o},S),e.GetConfigRequest=(T.prototype.txid=i.Long?i.Long.fromBits(0,0,!0):0,T.prototype.appid=0,T.prototype.biz_type=0,T.prototype.mode=\"\",T.prototype.id_name=\"\",T.prototype.reqid=\"\",T.prototype.zegoconn_version=0,T.prototype.sdk_type=0,T.prototype.zegoconn_run_env=0,T.encode=function(e,t){return t=t||o.create(),null!=e.txid&&Object.hasOwnProperty.call(e,\"txid\")&&t.uint32(8).uint64(e.txid),null!=e.appid&&Object.hasOwnProperty.call(e,\"appid\")&&t.uint32(16).uint32(e.appid),null!=e.biz_type&&Object.hasOwnProperty.call(e,\"biz_type\")&&t.uint32(24).uint32(e.biz_type),null!=e.mode&&Object.hasOwnProperty.call(e,\"mode\")&&t.uint32(34).string(e.mode),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(42).string(e.id_name),null!=e.reqid&&Object.hasOwnProperty.call(e,\"reqid\")&&t.uint32(50).string(e.reqid),null!=e.zegoconn_version&&Object.hasOwnProperty.call(e,\"zegoconn_version\")&&t.uint32(56).uint32(e.zegoconn_version),null!=e.sdk_type&&Object.hasOwnProperty.call(e,\"sdk_type\")&&t.uint32(64).int32(e.sdk_type),null!=e.zegoconn_run_env&&Object.hasOwnProperty.call(e,\"zegoconn_run_env\")&&t.uint32(72).int32(e.zegoconn_run_env),t},T.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.GetConfigRequest;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.txid=e.uint64();break;case 2:o.appid=e.uint32();break;case 3:o.biz_type=e.uint32();break;case 4:o.mode=e.string();break;case 5:o.id_name=e.string();break;case 6:o.reqid=e.string();break;case 7:o.zegoconn_version=e.uint32();break;case 8:o.sdk_type=e.int32();break;case 9:o.zegoconn_run_env=e.int32();break;default:e.skipType(7&i)}}return o},T),e.GetConfigResponseData=(O.prototype.txid=i.Long?i.Long.fromBits(0,0,!0):0,O.prototype.quic_hb_interval=0,O.prototype.quic_hb_timeout=0,O.prototype.logic_hb_interval=0,O.prototype.logic_hb_timeout=0,O.prototype.pc_establish_timeout=0,O.prototype.sdk_link_detect_interval=0,O.prototype.sdk_link_detect_duration=0,O.prototype.client_outer_ip=\"\",O.encode=function(e,t){return t=t||o.create(),null!=e.txid&&Object.hasOwnProperty.call(e,\"txid\")&&t.uint32(8).uint64(e.txid),null!=e.quic_hb_interval&&Object.hasOwnProperty.call(e,\"quic_hb_interval\")&&t.uint32(16).uint32(e.quic_hb_interval),null!=e.quic_hb_timeout&&Object.hasOwnProperty.call(e,\"quic_hb_timeout\")&&t.uint32(24).uint32(e.quic_hb_timeout),null!=e.logic_hb_interval&&Object.hasOwnProperty.call(e,\"logic_hb_interval\")&&t.uint32(32).uint32(e.logic_hb_interval),null!=e.logic_hb_timeout&&Object.hasOwnProperty.call(e,\"logic_hb_timeout\")&&t.uint32(40).uint32(e.logic_hb_timeout),null!=e.pc_establish_timeout&&Object.hasOwnProperty.call(e,\"pc_establish_timeout\")&&t.uint32(48).uint32(e.pc_establish_timeout),null!=e.sdk_link_detect_interval&&Object.hasOwnProperty.call(e,\"sdk_link_detect_interval\")&&t.uint32(56).uint32(e.sdk_link_detect_interval),null!=e.sdk_link_detect_duration&&Object.hasOwnProperty.call(e,\"sdk_link_detect_duration\")&&t.uint32(64).uint32(e.sdk_link_detect_duration),null!=e.client_outer_ip&&Object.hasOwnProperty.call(e,\"client_outer_ip\")&&t.uint32(74).string(e.client_outer_ip),t},O.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.GetConfigResponseData;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.txid=e.uint64();break;case 2:o.quic_hb_interval=e.uint32();break;case 3:o.quic_hb_timeout=e.uint32();break;case 4:o.logic_hb_interval=e.uint32();break;case 5:o.logic_hb_timeout=e.uint32();break;case 6:o.pc_establish_timeout=e.uint32();break;case 7:o.sdk_link_detect_interval=e.uint32();break;case 8:o.sdk_link_detect_duration=e.uint32();break;case 9:o.client_outer_ip=e.string();break;default:e.skipType(7&i)}}return o},O),e.GetConfigResponse=(E.prototype.code=0,E.prototype.message=\"\",E.prototype.data=null,E.encode=function(e,t){return t=t||o.create(),null!=e.code&&Object.hasOwnProperty.call(e,\"code\")&&t.uint32(8).int32(e.code),null!=e.message&&Object.hasOwnProperty.call(e,\"message\")&&t.uint32(18).string(e.message),null!=e.data&&Object.hasOwnProperty.call(e,\"data\")&&s.proto_accesshub.GetConfigResponseData.encode(e.data,t.uint32(26).fork()).ldelim(),t},E.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.GetConfigResponse;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.code=e.int32();break;case 2:o.message=e.string();break;case 3:o.data=s.proto_accesshub.GetConfigResponseData.decode(e,e.uint32());break;default:e.skipType(7&i)}}return o},E),e.PCUpwardMessage=(b.prototype.txid=i.Long?i.Long.fromBits(0,0,!0):0,b.prototype.appid=0,b.prototype.biz_type=0,b.prototype.mode_no=0,b.prototype.id_name=\"\",b.prototype.service_no=0,b.prototype.ack=!1,b.prototype.payload=i.newBuffer([]),b.prototype.sdk_type=0,b.prototype.wss_message_type=0,b.prototype.wss_path=\"\",b.prototype.wss_raw_query=\"\",b.prototype.zegoconn_version=0,b.prototype.zegoconn_run_env=0,b.prototype.backend_conn_type=0,b.encode=function(e,t){return t=t||o.create(),null!=e.txid&&Object.hasOwnProperty.call(e,\"txid\")&&t.uint32(8).uint64(e.txid),null!=e.appid&&Object.hasOwnProperty.call(e,\"appid\")&&t.uint32(16).uint32(e.appid),null!=e.biz_type&&Object.hasOwnProperty.call(e,\"biz_type\")&&t.uint32(24).uint32(e.biz_type),null!=e.mode_no&&Object.hasOwnProperty.call(e,\"mode_no\")&&t.uint32(32).int32(e.mode_no),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(42).string(e.id_name),null!=e.service_no&&Object.hasOwnProperty.call(e,\"service_no\")&&t.uint32(48).int32(e.service_no),null!=e.ack&&Object.hasOwnProperty.call(e,\"ack\")&&t.uint32(56).bool(e.ack),null!=e.payload&&Object.hasOwnProperty.call(e,\"payload\")&&t.uint32(66).bytes(e.payload),null!=e.sdk_type&&Object.hasOwnProperty.call(e,\"sdk_type\")&&t.uint32(72).int32(e.sdk_type),null!=e.wss_message_type&&Object.hasOwnProperty.call(e,\"wss_message_type\")&&t.uint32(80).uint32(e.wss_message_type),null!=e.wss_path&&Object.hasOwnProperty.call(e,\"wss_path\")&&t.uint32(90).string(e.wss_path),null!=e.wss_raw_query&&Object.hasOwnProperty.call(e,\"wss_raw_query\")&&t.uint32(98).string(e.wss_raw_query),null!=e.zegoconn_version&&Object.hasOwnProperty.call(e,\"zegoconn_version\")&&t.uint32(104).uint32(e.zegoconn_version),null!=e.zegoconn_run_env&&Object.hasOwnProperty.call(e,\"zegoconn_run_env\")&&t.uint32(112).int32(e.zegoconn_run_env),null!=e.backend_conn_type&&Object.hasOwnProperty.call(e,\"backend_conn_type\")&&t.uint32(120).int32(e.backend_conn_type),t},b.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.PCUpwardMessage;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.txid=e.uint64();break;case 2:o.appid=e.uint32();break;case 3:o.biz_type=e.uint32();break;case 4:o.mode_no=e.int32();break;case 5:o.id_name=e.string();break;case 6:o.service_no=e.int32();break;case 7:o.ack=e.bool();break;case 8:o.payload=e.bytes();break;case 9:o.sdk_type=e.int32();break;case 10:o.wss_message_type=e.uint32();break;case 11:o.wss_path=e.string();break;case 12:o.wss_raw_query=e.string();break;case 13:o.zegoconn_version=e.uint32();break;case 14:o.zegoconn_run_env=e.int32();break;case 15:o.backend_conn_type=e.int32();break;default:e.skipType(7&i)}}return o},b),e.PCUpwardMessageAck=(v.prototype.txid=i.Long?i.Long.fromBits(0,0,!0):0,v.encode=function(e,t){return t=t||o.create(),null!=e.txid&&Object.hasOwnProperty.call(e,\"txid\")&&t.uint32(8).uint64(e.txid),t},v.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.PCUpwardMessageAck;for(;e.pos<n;){var i=e.uint32();i>>>3==1?o.txid=e.uint64():e.skipType(7&i)}return o},v),e.PCEstablished=(y.prototype.elapse=0,y.prototype.from=0,y.encode=function(e,t){return t=t||o.create(),null!=e.elapse&&Object.hasOwnProperty.call(e,\"elapse\")&&t.uint32(8).uint32(e.elapse),null!=e.from&&Object.hasOwnProperty.call(e,\"from\")&&t.uint32(16).uint32(e.from),t},y.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.PCEstablished;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.elapse=e.uint32();break;case 2:o.from=e.uint32();break;default:e.skipType(7&i)}}return o},y),e.PCBroken=(m.encode=function(e,t){return t||o.create()},m.decode=function(e,t){e instanceof r||(e=r.create(e));var n=void 0===t?e.len:e.pos+t;for(t=new s.proto_accesshub.PCBroken;e.pos<n;){var o=e.uint32();e.skipType(7&o)}return t},m),e.PCDownwardMessage=(g.prototype.payload=i.newBuffer([]),g.prototype.wss_message_type=0,g.encode=function(e,t){return t=t||o.create(),null!=e.payload&&Object.hasOwnProperty.call(e,\"payload\")&&t.uint32(10).bytes(e.payload),null!=e.wss_message_type&&Object.hasOwnProperty.call(e,\"wss_message_type\")&&t.uint32(16).uint32(e.wss_message_type),t},g.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.PCDownwardMessage;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.payload=e.bytes();break;case 2:o.wss_message_type=e.uint32();break;default:e.skipType(7&i)}}return o},g),e.Redirect=(f.prototype.rand=\"\",f.prototype.secret=\"\",f.prototype.groups=i.emptyArray,f.prototype.opt_ports=i.emptyArray,f.prototype.wss_groups=i.emptyArray,f.encode=function(e,t){if(t=t||o.create(),null!=e.rand&&Object.hasOwnProperty.call(e,\"rand\")&&t.uint32(10).string(e.rand),null!=e.secret&&Object.hasOwnProperty.call(e,\"secret\")&&t.uint32(18).string(e.secret),null!=e.groups&&e.groups.length)for(let n=0;n<e.groups.length;++n)s.proto_accesshub.AccesshubDispatchGroup.encode(e.groups[n],t.uint32(26).fork()).ldelim();if(null!=e.opt_ports&&e.opt_ports.length)for(let n=0;n<e.opt_ports.length;++n)t.uint32(32).uint32(e.opt_ports[n]);if(null!=e.wss_groups&&e.wss_groups.length)for(let n=0;n<e.wss_groups.length;++n)s.proto_accesshub.WssAccesshubDispatchGroup.encode(e.wss_groups[n],t.uint32(42).fork()).ldelim();return t},f.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.Redirect;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.rand=e.string();break;case 2:o.secret=e.string();break;case 3:o.groups&&o.groups.length||(o.groups=[]),o.groups.push(s.proto_accesshub.AccesshubDispatchGroup.decode(e,e.uint32()));break;case 4:if(o.opt_ports&&o.opt_ports.length||(o.opt_ports=[]),2==(7&i))for(var a=e.uint32()+e.pos;e.pos<a;)o.opt_ports.push(e.uint32());else o.opt_ports.push(e.uint32());break;case 5:o.wss_groups&&o.wss_groups.length||(o.wss_groups=[]),o.wss_groups.push(s.proto_accesshub.WssAccesshubDispatchGroup.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return o},f),e.GetAppConfigRequest=(_.prototype.txid=i.Long?i.Long.fromBits(0,0,!0):0,_.prototype.appid=0,_.prototype.biz_type=0,_.prototype.mode_no=0,_.prototype.id_name=\"\",_.prototype.config_key=\"\",_.prototype.ts=i.Long?i.Long.fromBits(0,0,!0):0,_.prototype.signature=i.newBuffer([]),_.prototype.lite_sign=\"\",_.prototype.token=\"\",_.prototype.sdk_type=0,_.prototype.zegoconn_version=0,_.prototype.zegoconn_run_env=0,_.encode=function(e,t){return t=t||o.create(),null!=e.txid&&Object.hasOwnProperty.call(e,\"txid\")&&t.uint32(8).uint64(e.txid),null!=e.appid&&Object.hasOwnProperty.call(e,\"appid\")&&t.uint32(16).uint32(e.appid),null!=e.biz_type&&Object.hasOwnProperty.call(e,\"biz_type\")&&t.uint32(24).uint32(e.biz_type),null!=e.mode_no&&Object.hasOwnProperty.call(e,\"mode_no\")&&t.uint32(32).int32(e.mode_no),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(42).string(e.id_name),null!=e.config_key&&Object.hasOwnProperty.call(e,\"config_key\")&&t.uint32(50).string(e.config_key),null!=e.ts&&Object.hasOwnProperty.call(e,\"ts\")&&t.uint32(56).uint64(e.ts),null!=e.signature&&Object.hasOwnProperty.call(e,\"signature\")&&t.uint32(66).bytes(e.signature),null!=e.lite_sign&&Object.hasOwnProperty.call(e,\"lite_sign\")&&t.uint32(74).string(e.lite_sign),null!=e.token&&Object.hasOwnProperty.call(e,\"token\")&&t.uint32(82).string(e.token),null!=e.sdk_type&&Object.hasOwnProperty.call(e,\"sdk_type\")&&t.uint32(88).int32(e.sdk_type),null!=e.zegoconn_version&&Object.hasOwnProperty.call(e,\"zegoconn_version\")&&t.uint32(96).uint32(e.zegoconn_version),null!=e.zegoconn_run_env&&Object.hasOwnProperty.call(e,\"zegoconn_run_env\")&&t.uint32(104).int32(e.zegoconn_run_env),t},_.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.GetAppConfigRequest;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.txid=e.uint64();break;case 2:o.appid=e.uint32();break;case 3:o.biz_type=e.uint32();break;case 4:o.mode_no=e.int32();break;case 5:o.id_name=e.string();break;case 6:o.config_key=e.string();break;case 7:o.ts=e.uint64();break;case 8:o.signature=e.bytes();break;case 9:o.lite_sign=e.string();break;case 10:o.token=e.string();break;case 11:o.sdk_type=e.int32();break;case 12:o.zegoconn_version=e.uint32();break;case 13:o.zegoconn_run_env=e.int32();break;default:e.skipType(7&i)}}return o},_),e.GetAppConfigResponseData=(d.prototype.txid=i.Long?i.Long.fromBits(0,0,!0):0,d.prototype.data=i.newBuffer([]),d.prototype.ts=i.Long?i.Long.fromBits(0,0,!0):0,d.encode=function(e,t){return t=t||o.create(),null!=e.txid&&Object.hasOwnProperty.call(e,\"txid\")&&t.uint32(8).uint64(e.txid),null!=e.data&&Object.hasOwnProperty.call(e,\"data\")&&t.uint32(18).bytes(e.data),null!=e.ts&&Object.hasOwnProperty.call(e,\"ts\")&&t.uint32(24).uint64(e.ts),t},d.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.GetAppConfigResponseData;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.txid=e.uint64();break;case 2:o.data=e.bytes();break;case 3:o.ts=e.uint64();break;default:e.skipType(7&i)}}return o},d),e.GetAppConfigResponse=(p.prototype.code=0,p.prototype.message=\"\",p.prototype.data=null,p.encode=function(e,t){return t=t||o.create(),null!=e.code&&Object.hasOwnProperty.call(e,\"code\")&&t.uint32(8).int32(e.code),null!=e.message&&Object.hasOwnProperty.call(e,\"message\")&&t.uint32(18).string(e.message),null!=e.data&&Object.hasOwnProperty.call(e,\"data\")&&s.proto_accesshub.GetAppConfigResponseData.encode(e.data,t.uint32(26).fork()).ldelim(),t},p.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.GetAppConfigResponse;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.code=e.int32();break;case 2:o.message=e.string();break;case 3:o.data=s.proto_accesshub.GetAppConfigResponseData.decode(e,e.uint32());break;default:e.skipType(7&i)}}return o},p),e.PushAppConfig=(h.prototype.config_key=\"\",h.prototype.data=i.newBuffer([]),h.encode=function(e,t){return t=t||o.create(),null!=e.config_key&&Object.hasOwnProperty.call(e,\"config_key\")&&t.uint32(10).string(e.config_key),null!=e.data&&Object.hasOwnProperty.call(e,\"data\")&&t.uint32(18).bytes(e.data),t},h.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.PushAppConfig;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.config_key=e.string();break;case 2:o.data=e.bytes();break;default:e.skipType(7&i)}}return o},h),e.AccesshubDispatchRequest=(l.prototype.txid=i.Long?i.Long.fromBits(0,0,!0):0,l.prototype.appid=0,l.prototype.biz_type=0,l.prototype.mode_no=0,l.prototype.id_name=\"\",l.prototype.sdk_type=0,l.prototype.zegoconn_version=0,l.prototype.zegoconn_run_env=0,l.encode=function(e,t){return t=t||o.create(),null!=e.txid&&Object.hasOwnProperty.call(e,\"txid\")&&t.uint32(8).uint64(e.txid),null!=e.appid&&Object.hasOwnProperty.call(e,\"appid\")&&t.uint32(16).uint32(e.appid),null!=e.biz_type&&Object.hasOwnProperty.call(e,\"biz_type\")&&t.uint32(24).uint32(e.biz_type),null!=e.mode_no&&Object.hasOwnProperty.call(e,\"mode_no\")&&t.uint32(32).int32(e.mode_no),null!=e.id_name&&Object.hasOwnProperty.call(e,\"id_name\")&&t.uint32(42).string(e.id_name),null!=e.sdk_type&&Object.hasOwnProperty.call(e,\"sdk_type\")&&t.uint32(48).int32(e.sdk_type),null!=e.zegoconn_version&&Object.hasOwnProperty.call(e,\"zegoconn_version\")&&t.uint32(56).uint32(e.zegoconn_version),null!=e.zegoconn_run_env&&Object.hasOwnProperty.call(e,\"zegoconn_run_env\")&&t.uint32(64).int32(e.zegoconn_run_env),t},l.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.AccesshubDispatchRequest;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.txid=e.uint64();break;case 2:o.appid=e.uint32();break;case 3:o.biz_type=e.uint32();break;case 4:o.mode_no=e.int32();break;case 5:o.id_name=e.string();break;case 6:o.sdk_type=e.int32();break;case 7:o.zegoconn_version=e.uint32();break;case 8:o.zegoconn_run_env=e.int32();break;default:e.skipType(7&i)}}return o},l),e.AccesshubDispatchGroup=(u.prototype.group=\"\",u.prototype.quic_nodes=i.emptyArray,u.prototype.mtcp_nodes=i.emptyArray,u.prototype.wss_nodes=i.emptyArray,u.encode=function(e,t){if(t=t||o.create(),null!=e.group&&Object.hasOwnProperty.call(e,\"group\")&&t.uint32(10).string(e.group),null!=e.quic_nodes&&e.quic_nodes.length)for(let n=0;n<e.quic_nodes.length;++n)t.uint32(18).string(e.quic_nodes[n]);if(null!=e.mtcp_nodes&&e.mtcp_nodes.length)for(let n=0;n<e.mtcp_nodes.length;++n)t.uint32(26).string(e.mtcp_nodes[n]);if(null!=e.wss_nodes&&e.wss_nodes.length)for(let n=0;n<e.wss_nodes.length;++n)t.uint32(34).string(e.wss_nodes[n]);return t},u.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.AccesshubDispatchGroup;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.group=e.string();break;case 2:o.quic_nodes&&o.quic_nodes.length||(o.quic_nodes=[]),o.quic_nodes.push(e.string());break;case 3:o.mtcp_nodes&&o.mtcp_nodes.length||(o.mtcp_nodes=[]),o.mtcp_nodes.push(e.string());break;case 4:o.wss_nodes&&o.wss_nodes.length||(o.wss_nodes=[]),o.wss_nodes.push(e.string());break;default:e.skipType(7&i)}}return o},u),e.WssAccesshubDispatchGroup=(c.prototype.group=\"\",c.prototype.host=\"\",c.prototype.main_domain=\"\",c.encode=function(e,t){return t=t||o.create(),null!=e.group&&Object.hasOwnProperty.call(e,\"group\")&&t.uint32(10).string(e.group),null!=e.host&&Object.hasOwnProperty.call(e,\"host\")&&t.uint32(18).string(e.host),null!=e.main_domain&&Object.hasOwnProperty.call(e,\"main_domain\")&&t.uint32(26).string(e.main_domain),t},c.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.WssAccesshubDispatchGroup;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.group=e.string();break;case 2:o.host=e.string();break;case 3:o.main_domain=e.string();break;default:e.skipType(7&i)}}return o},c),e.AccesshubDispatchResponseData=(a.prototype.txid=i.Long?i.Long.fromBits(0,0,!0):0,a.prototype.rand=\"\",a.prototype.secret=\"\",a.prototype.groups=i.emptyArray,a.prototype.opt_ports=i.emptyArray,a.prototype.wss_groups=i.emptyArray,a.encode=function(e,t){if(t=t||o.create(),null!=e.txid&&Object.hasOwnProperty.call(e,\"txid\")&&t.uint32(8).uint64(e.txid),null!=e.rand&&Object.hasOwnProperty.call(e,\"rand\")&&t.uint32(18).string(e.rand),null!=e.secret&&Object.hasOwnProperty.call(e,\"secret\")&&t.uint32(26).string(e.secret),null!=e.groups&&e.groups.length)for(let n=0;n<e.groups.length;++n)s.proto_accesshub.AccesshubDispatchGroup.encode(e.groups[n],t.uint32(34).fork()).ldelim();if(null!=e.opt_ports&&e.opt_ports.length)for(let n=0;n<e.opt_ports.length;++n)t.uint32(40).uint32(e.opt_ports[n]);if(null!=e.wss_groups&&e.wss_groups.length)for(let n=0;n<e.wss_groups.length;++n)s.proto_accesshub.WssAccesshubDispatchGroup.encode(e.wss_groups[n],t.uint32(50).fork()).ldelim();return t},a.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.AccesshubDispatchResponseData;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.txid=e.uint64();break;case 2:o.rand=e.string();break;case 3:o.secret=e.string();break;case 4:o.groups&&o.groups.length||(o.groups=[]),o.groups.push(s.proto_accesshub.AccesshubDispatchGroup.decode(e,e.uint32()));break;case 5:if(o.opt_ports&&o.opt_ports.length||(o.opt_ports=[]),2==(7&i))for(var a=e.uint32()+e.pos;e.pos<a;)o.opt_ports.push(e.uint32());else o.opt_ports.push(e.uint32());break;case 6:o.wss_groups&&o.wss_groups.length||(o.wss_groups=[]),o.wss_groups.push(s.proto_accesshub.WssAccesshubDispatchGroup.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return o},a),e.AccesshubDispatchResponse=(n.prototype.code=0,n.prototype.message=\"\",n.prototype.data=null,n.encode=function(e,t){return t=t||o.create(),null!=e.code&&Object.hasOwnProperty.call(e,\"code\")&&t.uint32(8).int32(e.code),null!=e.message&&Object.hasOwnProperty.call(e,\"message\")&&t.uint32(18).string(e.message),null!=e.data&&Object.hasOwnProperty.call(e,\"data\")&&s.proto_accesshub.AccesshubDispatchResponseData.encode(e.data,t.uint32(26).fork()).ldelim(),t},n.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.AccesshubDispatchResponse;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.code=e.int32();break;case 2:o.message=e.string();break;case 3:o.data=s.proto_accesshub.AccesshubDispatchResponseData.decode(e,e.uint32());break;default:e.skipType(7&i)}}return o},n),e.PushException=(t.prototype.reason=0,t.prototype.msg=\"\",t.prototype.txid=i.Long?i.Long.fromBits(0,0,!0):0,t.encode=function(e,t){return t=t||o.create(),null!=e.reason&&Object.hasOwnProperty.call(e,\"reason\")&&t.uint32(8).int32(e.reason),null!=e.msg&&Object.hasOwnProperty.call(e,\"msg\")&&t.uint32(18).string(e.msg),null!=e.txid&&Object.hasOwnProperty.call(e,\"txid\")&&t.uint32(24).uint64(e.txid),t},t.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_accesshub.PushException;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.reason=e.int32();break;case 2:o.msg=e.string();break;case 3:o.txid=e.uint64();break;default:e.skipType(7&i)}}return o},t),e;function t(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function n(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function a(e){if(this.groups=[],this.opt_ports=[],this.wss_groups=[],e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function c(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function u(e){if(this.quic_nodes=[],this.mtcp_nodes=[],this.wss_nodes=[],e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function l(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function h(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function p(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function d(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function _(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function f(e){if(this.groups=[],this.opt_ports=[],this.wss_groups=[],e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function g(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function m(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function y(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function v(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function b(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function E(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function O(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function T(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function S(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function R(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function k(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function C(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function w(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function N(e){if(this.headers=[],e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function I(e){if(this.headers=[],e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function M(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function L(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function P(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function A(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}})(),c=s.proto_initconfig=(()=>{const e={};return e.ResourceType=function(){const e={},t=Object.create(e);return t[e[0]=\"CDN\"]=0,t[e[1]=\"RTC\"]=1,t[e[2]=\"L3\"]=2,t}(),e.ProtocolType=function(){const e={},t=Object.create(e);return t[e[0]=\"UDP\"]=0,t[e[1]=\"RTMP\"]=1,t[e[2]=\"FLV\"]=2,t[e[3]=\"HLS\"]=3,t[e[4]=\"WEBRTC\"]=4,t}(),e.ResolveType=function(){const e={},t=Object.create(e);return t[e[0]=\"LOCAL_DNS\"]=0,t[e[1]=\"DISPATCH\"]=1,t}(),e.AppConfig=(p.prototype.test_id=null,p.prototype.domain=null,p.prototype.flexible_domain=null,p.prototype.replace_flexible_domain=null,Object.defineProperty(p.prototype,\"_test_id\",{get:i.oneOfGetter(n=[\"test_id\"]),set:i.oneOfSetter(n)}),Object.defineProperty(p.prototype,\"_domain\",{get:i.oneOfGetter(n=[\"domain\"]),set:i.oneOfSetter(n)}),Object.defineProperty(p.prototype,\"_flexible_domain\",{get:i.oneOfGetter(n=[\"flexible_domain\"]),set:i.oneOfSetter(n)}),Object.defineProperty(p.prototype,\"_replace_flexible_domain\",{get:i.oneOfGetter(n=[\"replace_flexible_domain\"]),set:i.oneOfSetter(n)}),p.encode=function(e,t){return t=t||o.create(),null!=e.test_id&&Object.hasOwnProperty.call(e,\"test_id\")&&t.uint32(8).int32(e.test_id),null!=e.domain&&Object.hasOwnProperty.call(e,\"domain\")&&t.uint32(18).string(e.domain),null!=e.flexible_domain&&Object.hasOwnProperty.call(e,\"flexible_domain\")&&t.uint32(26).string(e.flexible_domain),null!=e.replace_flexible_domain&&Object.hasOwnProperty.call(e,\"replace_flexible_domain\")&&t.uint32(34).string(e.replace_flexible_domain),t},p.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_initconfig.AppConfig;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.test_id=e.int32();break;case 2:o.domain=e.string();break;case 3:o.flexible_domain=e.string();break;case 4:o.replace_flexible_domain=e.string();break;default:e.skipType(7&i)}}return o},p),e.MediaServiceProtocolInfo=(h.prototype.config_id=null,h.prototype.protocol=null,h.prototype.url_template=null,h.prototype.resolve_type=null,h.prototype.push_cdn_authentication=null,h.prototype.cdn_quic_version=i.emptyArray,Object.defineProperty(h.prototype,\"_config_id\",{get:i.oneOfGetter(n=[\"config_id\"]),set:i.oneOfSetter(n)}),Object.defineProperty(h.prototype,\"_protocol\",{get:i.oneOfGetter(n=[\"protocol\"]),set:i.oneOfSetter(n)}),Object.defineProperty(h.prototype,\"_url_template\",{get:i.oneOfGetter(n=[\"url_template\"]),set:i.oneOfSetter(n)}),Object.defineProperty(h.prototype,\"_resolve_type\",{get:i.oneOfGetter(n=[\"resolve_type\"]),set:i.oneOfSetter(n)}),Object.defineProperty(h.prototype,\"_push_cdn_authentication\",{get:i.oneOfGetter(n=[\"push_cdn_authentication\"]),set:i.oneOfSetter(n)}),h.encode=function(e,t){if(t=t||o.create(),null!=e.config_id&&Object.hasOwnProperty.call(e,\"config_id\")&&t.uint32(10).string(e.config_id),null!=e.protocol&&Object.hasOwnProperty.call(e,\"protocol\")&&t.uint32(16).int32(e.protocol),null!=e.url_template&&Object.hasOwnProperty.call(e,\"url_template\")&&t.uint32(26).string(e.url_template),null!=e.resolve_type&&Object.hasOwnProperty.call(e,\"resolve_type\")&&t.uint32(32).int32(e.resolve_type),null!=e.push_cdn_authentication&&Object.hasOwnProperty.call(e,\"push_cdn_authentication\")&&t.uint32(40).int32(e.push_cdn_authentication),null!=e.cdn_quic_version&&e.cdn_quic_version.length){t.uint32(50).fork();for(let n=0;n<e.cdn_quic_version.length;++n)t.int32(e.cdn_quic_version[n]);t.ldelim()}return t},h.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_initconfig.MediaServiceProtocolInfo;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.config_id=e.string();break;case 2:o.protocol=e.int32();break;case 3:o.url_template=e.string();break;case 4:o.resolve_type=e.int32();break;case 5:o.push_cdn_authentication=e.int32();break;case 6:if(o.cdn_quic_version&&o.cdn_quic_version.length||(o.cdn_quic_version=[]),2==(7&i))for(var a=e.uint32()+e.pos;e.pos<a;)o.cdn_quic_version.push(e.int32());else o.cdn_quic_version.push(e.int32());break;default:e.skipType(7&i)}}return o},h),e.MediaResourceInfo=(l.prototype.resource_type=null,l.prototype.service_info=i.emptyArray,Object.defineProperty(l.prototype,\"_resource_type\",{get:i.oneOfGetter(n=[\"resource_type\"]),set:i.oneOfSetter(n)}),l.encode=function(e,t){if(t=t||o.create(),null!=e.resource_type&&Object.hasOwnProperty.call(e,\"resource_type\")&&t.uint32(8).int32(e.resource_type),null!=e.service_info&&e.service_info.length)for(let n=0;n<e.service_info.length;++n)s.proto_initconfig.MediaServiceProtocolInfo.encode(e.service_info[n],t.uint32(18).fork()).ldelim();return t},l.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_initconfig.MediaResourceInfo;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.resource_type=e.int32();break;case 2:o.service_info&&o.service_info.length||(o.service_info=[]),o.service_info.push(s.proto_initconfig.MediaServiceProtocolInfo.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return o},l),e.MediaPublishConfig=(u.prototype.resource_info=i.emptyArray,u.encode=function(e,t){if(t=t||o.create(),null!=e.resource_info&&e.resource_info.length)for(let n=0;n<e.resource_info.length;++n)s.proto_initconfig.MediaResourceInfo.encode(e.resource_info[n],t.uint32(18).fork()).ldelim();return t},u.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_initconfig.MediaPublishConfig;for(;e.pos<n;){var i=e.uint32();i>>>3==2?(o.resource_info&&o.resource_info.length||(o.resource_info=[]),o.resource_info.push(s.proto_initconfig.MediaResourceInfo.decode(e,e.uint32()))):e.skipType(7&i)}return o},u),e.MediaPlayConfig=(c.prototype.resource_info=i.emptyArray,c.encode=function(e,t){if(t=t||o.create(),null!=e.resource_info&&e.resource_info.length)for(let n=0;n<e.resource_info.length;++n)s.proto_initconfig.MediaResourceInfo.encode(e.resource_info[n],t.uint32(42).fork()).ldelim();return t},c.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_initconfig.MediaPlayConfig;for(;e.pos<n;){var i=e.uint32();i>>>3==5?(o.resource_info&&o.resource_info.length||(o.resource_info=[]),o.resource_info.push(s.proto_initconfig.MediaResourceInfo.decode(e,e.uint32()))):e.skipType(7&i)}return o},c),e.MediaConfig=(a.prototype.play_config=null,a.prototype.publish_config=null,Object.defineProperty(a.prototype,\"_play_config\",{get:i.oneOfGetter(n=[\"play_config\"]),set:i.oneOfSetter(n)}),Object.defineProperty(a.prototype,\"_publish_config\",{get:i.oneOfGetter(n=[\"publish_config\"]),set:i.oneOfSetter(n)}),a.encode=function(e,t){return t=t||o.create(),null!=e.play_config&&Object.hasOwnProperty.call(e,\"play_config\")&&s.proto_initconfig.MediaPlayConfig.encode(e.play_config,t.uint32(10).fork()).ldelim(),null!=e.publish_config&&Object.hasOwnProperty.call(e,\"publish_config\")&&s.proto_initconfig.MediaPublishConfig.encode(e.publish_config,t.uint32(18).fork()).ldelim(),t},a.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_initconfig.MediaConfig;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.play_config=s.proto_initconfig.MediaPlayConfig.decode(e,e.uint32());break;case 2:o.publish_config=s.proto_initconfig.MediaPublishConfig.decode(e,e.uint32());break;default:e.skipType(7&i)}}return o},a),e.InitConfig=(t.prototype.app_config=null,t.prototype.media_config=null,Object.defineProperty(t.prototype,\"_app_config\",{get:i.oneOfGetter(n=[\"app_config\"]),set:i.oneOfSetter(n)}),Object.defineProperty(t.prototype,\"_media_config\",{get:i.oneOfGetter(n=[\"media_config\"]),set:i.oneOfSetter(n)}),t.encode=function(e,t){return t=t||o.create(),null!=e.app_config&&Object.hasOwnProperty.call(e,\"app_config\")&&s.proto_initconfig.AppConfig.encode(e.app_config,t.uint32(10).fork()).ldelim(),null!=e.media_config&&Object.hasOwnProperty.call(e,\"media_config\")&&s.proto_initconfig.MediaConfig.encode(e.media_config,t.uint32(42).fork()).ldelim(),t},t.decode=function(e,t){e instanceof r||(e=r.create(e));let n=void 0===t?e.len:e.pos+t,o=new s.proto_initconfig.InitConfig;for(;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.app_config=s.proto_initconfig.AppConfig.decode(e,e.uint32());break;case 5:o.media_config=s.proto_initconfig.MediaConfig.decode(e,e.uint32());break;default:e.skipType(7&i)}}return o},t),e;function t(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}var n;function a(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function c(e){if(this.resource_info=[],e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function u(e){if(this.resource_info=[],e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function l(e){if(this.service_info=[],e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function h(e){if(this.cdn_quic_version=[],e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function p(e){if(e)for(let t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}})()},function(e,t,n){\"use strict\";var r,o,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Class extends value \"+String(t)+\" is not a constructor or null\");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=this&&this.__assign||function(){return(s=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},a=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||((r=r||Array.prototype.slice.call(t,0,o))[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},c=(Object.defineProperty(t,\"__esModule\",{value:!0}),t.ZegoWssLink=void 0,n(14)),u=n(0),l=n(15),h=n(16),p=n(3),d=n(1);i(_,o=l.ZegoLink),_.prototype.initEvent=function(e,t,n,r){this.onConnectedEvent=e,this.onDisConnectedEvent=t,this.onConnectingEvent=n,this.onPushEvent=r},_.prototype.createSocket=function(e){this.servers=e,this.urlIndex=0},_.prototype.destroySocket=function(){this.logger.info(\"zn.wl.ds.0 call\"),this.socketService.closeSocket(),this.netLinkState=u.ENUM_CONNECT_STATE.disconnect,this.resetConnect()},_.prototype.refreshServers=function(e){this.servers=a(a([],e,!0),this.servers,!0)},_.prototype.connectSocket=function(e,t,n){var r=this;return void 0===e&&(e=!0),this.logger.info(\"zn.wl.cs.0 call\"),this.connectRsp.suc=t,this.connectRsp.fail=n,this.stateCenter.networkState===u.ENUM_NETWORK_STATE.online&&(e&&(this.urlIndex=(this.urlIndex+1)%this.servers.length),t=this.servers[this.urlIndex],this.connectServer=t,this.logger.info(\"zn.wl.cs.0 server \"+t),this.tryServers.push(t),this.closeSocket(),this.netLinkState=u.ENUM_CONNECT_STATE.connecting,this.socketService.createSocket(t),this.onConnectingEvent&&this.onConnectingEvent(!0),this.bindSocketEvent(),this.connectTimer=setTimeout((function(){r.logger.info(\"zn.wl.cs.0 timeout\"),r.connectRsp.fail&&r.connectRsp.fail()}),this.connectInterval),!0)},_.prototype.bindSocketEvent=function(){var e=this;this.openHandler((function(){e.logger.info(\"zn.wl.bse open\"),e.resetConnect(),e.connectRsp.suc&&e.connectRsp.suc(),e.netLinkState=u.ENUM_CONNECT_STATE.connected,e.onConnectedEvent&&e.onConnectedEvent(e.tryServers),e.checkUnSendMsgs(e.unSendCommandList),e.startCheck()})),this.closeHandler((function(t){e.logger.warn(\"zn.wl.bse close \"+JSON.stringify(t)),e.resetConnect(),e.connectRsp.fail&&e.connectRsp.fail(),e.onDisConnectedEvent&&e.onDisConnectedEvent(!0),e.netLinkState=u.ENUM_CONNECT_STATE.disconnect})),this.errorHandler((function(t){e.logger.warn(\"zn.wl.bse error \"+JSON.stringify(t)),e.resetConnect(),e.connectRsp.fail&&e.connectRsp.fail(),e.onDisConnectedEvent&&e.onDisConnectedEvent(!0),e.netLinkState=u.ENUM_CONNECT_STATE.disconnect})),this.onMessage()},_.prototype.closeSocket=function(){this.logger.info(\"zn.wl.cs.1 call\"),this.socketService.closeSocket(),this.netLinkState=u.ENUM_CONNECT_STATE.disconnect},_.prototype.resetConnect=function(){this.connectTimer&&(clearTimeout(this.connectTimer),this.connectTimer=null),this.stopCheck()},_.prototype.isConnect=function(){return this.netLinkState===u.ENUM_CONNECT_STATE.connected},_.prototype.isDisConnect=function(){return!this.socketService||this.socketService.isDisConnect()},_.prototype.isConnecting=function(){return this.netLinkState===u.ENUM_CONNECT_STATE.connecting},_.prototype.setState=function(e){this.netLinkState=e},_.prototype.closeHandler=function(e){this.socketService.closeHandler(e)},_.prototype.openHandler=function(e){this.socketService.openHandler(e)},_.prototype.errorHandler=function(e){this.socketService.errorHandler(e)},_.prototype.updateMsgTime=function(){this.updatedMsgTime=Date.now()},_.prototype.sendMessage=function(e,t,n,r,o,i,a,c){void 0===r&&(r=!0),void 0===o&&(o=null),void 0===i&&(i=null),void 0===a&&(a=null),void 0===(c=void 0===c?{}:c).timeout&&(c.timeout=5e3),void 0===c.isInSendMap&&(c.isInSendMap=!0),this.txid++,r={appid:this.appID,biz_type:0,mode_no:(null==(r=this.stateCenter.appInfo)?void 0:r.mode)||d.NET_ACCESS_CONFIG.modeNo,id_name:this.stateCenter.userId,sdk_type:d.NET_ACCESS_CONFIG.sdkType,zegoconn_run_env:0===this.env?u.ZegoconnRunEnv.ZEGOCONN_RUN_ENV_BROWSER:u.ZegoconnRunEnv.ZEGOCONN_RUN_ENV_APPLET},n={data:r=s(s({txid:this.txid},r),n),txid:this.txid,sendTime:Date.now(),streamID:t,type:e,timeOut:c.timeout||this.timeout,ack:n.ack,success:o,error:i,ackFunc:a,isSend:!0,isCheck:e!==u.AccessHubMessageType.MSG_TYPE_PC_UPWARD_MESSAGE},c.isInSendMap&&(o=this.sendCommandList.push(n),this.sendCommandMap[this.txid]=o),this.unUpdateMsgTimeTypes.includes(e)||(this.updatedMsgTime=Date.now()),-1===this.unlogTypes.indexOf(e)&&this.logger.info(\"zn.wl.sm type: \"+e+\"-\"+u.typeMap[e]+\" streamID: \"+t+\" txid: \"+this.txid),this.isConnect()?this.sendUint8Data(e,r,t):(n.isSend=!1,i=this.unSendCommandList.push(n),this.unSendCommandMap[this.txid]=i)},_.prototype.checkUnSendMsgs=function(e){for(var t,n=e.getFirst();null!=n;)e.remove(n),n._data&&!1===(null==(t=n._data)?void 0:t.isSend)&&n._data.type&&n._data.streamID&&n._data.data&&(this.sendUint8Data(n._data.type,n._data.data,n._data.streamID),n._data.isSend=!0),n=e.getFirst()},_.prototype.sendUint8Data=function(e,t,n){e=this.protobuf.encodeRequest(e,t,n),this.socketService.sendMessage(e)},_.prototype.onMessage=function(){var e=this;this.socketService.onMessage=function(t){t=new Uint8Array(t);var n,r=(t=e.protobuf.decodeResponse(t))[0],o=t[1];t=t[2];e.unUpdateMsgTimeTypes.includes(o)||(e.updatedMsgTime=Date.now()),-1===e.unlogTypes.indexOf(o)&&e.logger.info(\"zn.wl.om\"+\" streamID: \".concat(r,\", msgType: \").concat(o,\"-\").concat(u.typeMap[o])),(null!=t&&t.txid||null!=(n=null==t?void 0:t.data)&&n.txid)&&e.isRspMsg((null==t?void 0:t.txid)||(null==(n=null==t?void 0:t.data)?void 0:n.txid))?e.handleSendCommandMsgRsp(r,o,(null==t?void 0:t.txid)||(null==(n=null==t?void 0:t.data)?void 0:n.txid),t):e.onPushEvent(r,o,t)}},_.prototype.isRspMsg=function(e){return void 0!==this.sendCommandMap[e]},_.prototype.startCheck=function(){var e=this;this.checkMessageListTimeout(this.sendCommandList,this.sendCommandMap),this.sendDataCheckTimer=setTimeout((function(){e.startCheck()}),this.sendDataCheckInterval)},_.prototype.stopCheck=function(){this.checkSendMessageList(this.sendCommandList),clearTimeout(this.sendDataCheckTimer)},_.prototype.checkMessageListTimeout=function(e,t){for(var n,r=e.getFirst(),o=Date.now(),i=0,s=this;null!=r&&\"break\"!==function(){return r._data&&r._data.sendTime+r._data.timeOut>o?\"break\":(r._data&&delete t[r._data.data.txid],e.remove(r),r._data&&null==r._data.error||r._data&&r._data.sendTime+s.sendDataDropTimeout<o||(a=r&&r._data&&r._data.error,c=r&&r._data&&r._data.txid,u=r&&r._data&&(null==(n=r._data)?void 0:n.isCheck),setTimeout((function(){u&&a&&a({},c,p.errorCodeList.TIMEOUT)}),0)),++i>=s.sendDataCheckOnceCount?\"break\":void(r=e.getFirst()));var a,c,u}(););},_.prototype.checkSendMessageList=function(e){for(var t,n=e.getFirst();null!=n&&n._data;)!function(){var r,o,i;e.remove(n),n._data.isSend&&n._data.error&&(r=n&&n._data&&n._data.error,o=n&&n._data&&n._data.txid,i=n&&n._data&&(null==(t=n._data)?void 0:t.isCheck),setTimeout((function(){i&&r&&r({},o,p.errorCodeList.TIMEOUT)}),0)),n=e.getFirst()}()},_.prototype.handleSendCommandMsgRsp=function(e,t,n,r){var o,i=this.sendCommandMap[n];null!=i&&(null!=(o=i._data)&&o.ack||(delete this.sendCommandMap[n],this.sendCommandList.remove(i)),r.code&&0!==r.code?o&&null!=o.error&&o.error(r,n):t===u.AccessHubMessageType.MSG_TYPE_PUSH_EXCEPTION?(r.code=r.reason,r.message=r.msg,o&&null!=o.error&&o.error(r,n)):t===u.AccessHubMessageType.MSG_TYPE_HTTP_REQUEST_ACK?o&&null!=o.ackFunc&&o.ackFunc(r,n):o&&null!=o.success&&o.success(r,n))},n=_;function _(e,t,n,r,i){var s=o.call(this)||this;return s.appID=e,s.env=t,s.protobuf=n,s.logger=r,s.stateCenter=i,s.socketService=new h.NetSocketService(s.env),s.urlIndex=0,s.updatedMsgTime=0,s.unUpdateMsgTimeTypes=[u.AccessHubMessageType.MSG_TYPE_HB_REQUEST,u.AccessHubMessageType.MSG_TYPE_HB_RESPONSE,u.AccessHubMessageType.MSG_TYPE_GET_CONFIG_REQUEST,u.AccessHubMessageType.MSG_TYPE_GET_CONFIG_RESPONSE],s.netLinkState=u.ENUM_CONNECT_STATE.disconnect,s.sendCommandList=new c.LinkedList,s.unSendCommandList=new c.LinkedList,s.sendCommandMap={},s.unSendCommandMap={},s.sendDataCheckOnceCount=100,s.sendDataDropTimeout=1e4,s.sendDataCheckInterval=2e3,s.timeout=5e3,s.connectInterval=1e4,s.connectTimer=null,s.connectRsp={},s.unlogTypes=[12,13],s.tryServers=[],s.updatedMsgTime=Date.now(),s}t.ZegoWssLink=n},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.LinkedList=t.ListNode=void 0,Object.defineProperty(o.prototype,\"id\",{get:function(){return this._id||null},set:function(e){this._id=e},enumerable:!1,configurable:!0}),Object.defineProperty(o.prototype,\"data\",{get:function(){return this._data},set:function(e){this._data=e},enumerable:!1,configurable:!0}),o.prototype.hasNext=function(){return this.next&&this.next.id},o.prototype.hasPrev=function(){return this.prev&&this.prev.id};var r=o;function o(e,t){void 0===e&&(e=null),void 0===t&&(t=null),this.next=null,this.prev=null,this._id=e,this._data=t}function i(){this.start=new r,this.end=new r,this._idCounter=0,this._numNodes=0,this.start.next=this.end,this.start.prev=null,this.end.prev=this.start,this.end.next=null}t.ListNode=r,i.prototype.insertBefore=function(e,t){return(t=new r(this._idCounter,t)).next=e,t.prev=e.prev,e.prev&&(e.prev.next=t),e.prev=t,++this._idCounter,++this._numNodes,t},i.prototype.addLast=function(e){return this.insertBefore(this.end,e)},i.prototype.add=function(e){return this.addLast(e)},i.prototype.getFirst=function(){return 0===this._numNodes?null:this.start.next},i.prototype.getLast=function(){return 0===this._numNodes?null:this.end.prev},i.prototype.size=function(){return this._numNodes},i.prototype.getFromFirst=function(e){var t=0,n=this.start.next;if(0<=e)for(;t<e&&null!==n;)n=n.next,++t;else n=null;if(null===n)throw\"Index out of bounds.\";return n},i.prototype.get=function(e){return 0===e?this.getFirst():e===this._numNodes-1?this.getLast():this.getFromFirst(e)},i.prototype.remove=function(e){return e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),--this._numNodes,e},i.prototype.removeFirst=function(){var e=null;return 0<this._numNodes&&this.start.next?this.remove(this.start.next):e},i.prototype.removeLast=function(){var e=null;return 0<this._numNodes&&this.end.prev?this.remove(this.end.prev):e},i.prototype.removeAll=function(){this.start.next=this.end,this.end.prev=this.start,this._numNodes=0,this._idCounter=0},i.prototype.each=function(e){for(var t=this.start;t.hasNext();)e(t=t.next)},i.prototype.find=function(e){for(var t=this.start,n=!1,r=null;t.hasNext()&&!n;)e(t=t.next)&&(r=t,n=!0);return r},i.prototype.map=function(e){for(var t=this.start,n=[];t.hasNext();)e(t=t.next)&&n.push(t);return n},i.prototype.push=function(e){return this.addLast(e)},i.prototype.unshift=function(e){0<this._numNodes?this.insertBefore(this.start.next,e):this.insertBefore(this.end,e)},i.prototype.pop=function(){return this.removeLast()},i.prototype.shift=function(){return this.removeFirst()},t.LinkedList=i},function(e,t,n){\"use strict\";function r(){this.txid=0,this.linkRetryTime=60,this.updatedMsgTime=0,this.connectServer=\"\"}Object.defineProperty(t,\"__esModule\",{value:!0}),t.ZegoLink=void 0,r.prototype.createSocket=function(e){},r.prototype.setState=function(e){},r.prototype.initEvent=function(e,t,n,r){},r.prototype.sendMessage=function(e,t,n,r,o,i,s,a){void 0===r&&(r=!0),void 0===o&&(o=null),void 0===i&&(i=null),void 0===s&&(s=null)},t.ZegoLink=r},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.NetSocketService=void 0;var r=n(17);function o(e){this.socket=null,this.ENV=e}o.prototype.createSocket=function(e){this.socket=(0,r.createZegoWebSocket)(e,this.ENV%2)},o.prototype.openHandler=function(e){var t=this;this.socket&&(this.socket.onopen=function(n){t.socket.binaryType=\"arraybuffer\",t.responseHandler(),e(n)})},o.prototype.responseHandler=function(){var e=this;this.socket&&(this.socket.onmessage=function(t){t=\"string\"==typeof t.data?JSON.parse(t.data):t.data,e.onMessage(t)})},o.prototype.onMessage=function(e){},o.prototype.closeHandler=function(e){this.socket&&(this.socket.onclose=function(t){e(t)})},o.prototype.errorHandler=function(e){this.socket&&(this.socket.onerror=e)},o.prototype.closeSocket=function(){this.socket&&(this.socket.onclose=null,this.socket.onerror=null,this.socket.close(),this.socket=null)},o.prototype.isDisConnect=function(){return!this.socket||1!==this.socket.readyState},o.prototype.sendMessage=function(e){this.isDisConnect()||this.socket&&this.ENV%2!=1&&this.socket.send(e)},t.NetSocketService=o},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createZegoWebSocket=t.ZegoWeiXinMiniWebSocket=t.ZEGO_ENV=void 0,(o=r=t.ZEGO_ENV||(t.ZEGO_ENV={}))[o.BROWSER=0]=\"BROWSER\",o[o.WEIXINMINI=1]=\"WEIXINMINI\",s.prototype.init=function(){var e=this;this._websocket&&(this.readyState=0,this._websocket.onOpen((function(t){e.readyState=e._websocket.readyState,\"function\"==typeof e.onopen&&(e.onopen(t),e._websocket.onClose((function(t){e.readyState=e._websocket.readyState,\"function\"==typeof e.onclose&&e.onclose(t)})),e._websocket.onMessage((function(t){\"function\"==typeof e.onmessage&&e.onmessage(t)})))})),this._websocket.onError((function(t){e.readyState=e._websocket.readyState,\"function\"==typeof e.onerror&&e.onerror(t)})))},s.prototype.onopen=function(e){},s.prototype.onerror=function(e){},s.prototype.onclose=function(e){},s.prototype.onmessage=function(e){},s.prototype.send=function(e){this._websocket&&this._websocket.send({data:e})},s.prototype.close=function(){this._websocket&&this._websocket.close()};var r,o,i=s;function s(e,t){this.url=e,this.readyState=3,this._websocket=wx.connectSocket({url:e}),this.init()}t.ZegoWeiXinMiniWebSocket=i,t.createZegoWebSocket=function(e,t){return new(t%2===r.BROWSER?WebSocket:i)(e)}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.NetAgentBusinessRequestMgr=void 0;var r=n(0),o=n(1);function i(e,t,n,r){this.streamManager=e,this.protobuf=t,this.logger=n,this.stateCenter=r}i.prototype.getConfig=function(e,t){this.logger.info(\"zn.nab.gc call\"),this.streamManager.createStream(r.StreamType.OTHER).sendMessage(r.AccessHubMessageType.MSG_TYPE_GET_CONFIG_REQUEST,{zegoconn_version:o.NET_ACCESS_CONFIG.connectVer},e,t)},i.prototype.dispatchURL=function(e,t){var n=this;this.logger.info(\"zn.nab.du call\"),this.streamManager.createStream(r.StreamType.OTHER).sendMessage(r.AccessHubMessageType.MSG_TYPE_ACCESSHUB_DISPATCH_REQUEST,{},(function(t){n.logger.info(\"zn.nab.du suc \"),e&&e(t)}),(function(e,r,o){n.logger.info(\"zn.nab.du fail\"),t&&t(o||e)}))},i.prototype.getAppConfig=function(e,t,n,i){var s=this;return new Promise((function(a,c){function u(e,t,n){if(n)return s.logger.error(\"zn.nab.gac fail \"+JSON.stringify(n)),void c(n);0===e.code?(s.logger.info(\"zn.nab.gac suc\"),n=s.decodeConfigMessage(e.data.data),a({code:0,data:n})):(s.logger.error(\"zn.nab.gac fail \"+e.code),c({code:e.code}))}s.logger.info(\"zn.nab.gac call\");var l={id_name:t,config_key:e,token:n,mode_no:(null==(l=s.stateCenter.appInfo)?void 0:l.mode)||o.NET_ACCESS_CONFIG.modeNo};s.streamManager.createStream(r.StreamType.OTHER).sendMessage(r.AccessHubMessageType.MSG_TYPE_GET_APPCONFIG_REQUEST,l,u,u,null,{timeout:i})}))},i.prototype.decodeConfigMessage=function(e){return this.protobuf.decodeConfigMessage(e)},t.NetAgentBusinessRequestMgr=i},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.NetHeartBeatHandler=void 0;var r=n(3),o=n(0);function i(e,t){this.streamManager=e,this.logger=t,this.hbTimer=null,this.hbInterval=5,this.hbTimeout=10,this.hbTimeoutMaxCount=0,this.tryHbCount=0}i.prototype.init=function(e){var t=this;this.logger.info(\"zn.nhb.ii call\"),this.hbStream||(this.hbStream=this.streamManager.createStream(o.StreamType.OTHER)),1<=e.data.logic_hb_interval&&e.data.logic_hb_interval<=10&&(this.hbInterval=e.data.logic_hb_interval),3<=e.data.logic_hb_timeout&&e.data.logic_hb_timeout<=30&&(this.hbTimeout=e.data.logic_hb_timeout),this.tryHbCount=0,this.hbTimeoutMaxCount=this.hbTimeout/this.hbInterval,this.hbTimer&&clearTimeout(this.hbTimer),this.hbTimer=setTimeout((function(){t.start()}),1e3*this.hbInterval)},i.prototype.start=function(){var e=this;if(this.logger.debug(\"zn.nhb.s call \"),this.tryHbCount++>this.hbTimeoutMaxCount)return this.logger.error(\"zn.nhb.s come to try limit\"),this.reset(),void this.netHbLogout(r.errorCodeList.NET_HB_TIMEOUT);function t(t,r,o){e.logger.debug(\"zn.nhb.s hb callback \"+((new Date).getTime()-n)),o&&0!==(null==o?void 0:o.code)?e.logger.info(\"zn.nhb.s fail \"+JSON.stringify(o)):e.tryHbCount=0}var n=(new Date).getTime(),i={ts:Date.now()};this.hbStream.sendMessage(o.AccessHubMessageType.MSG_TYPE_HB_REQUEST,i,t,t,null),this.hbTimer&&clearTimeout(this.hbTimer),this.hbTimer=setTimeout((function(){e.start()}),1e3*this.hbInterval)},i.prototype.netHbLogout=function(e){},i.prototype.reset=function(){this.hbTimer&&(clearTimeout(this.hbTimer),this.hbTimer=null),this.tryHbCount=0},t.NetHeartBeatHandler=i},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.NetAgentPCRequestMgr=void 0;var r=n(0),o=n(1),i=n(5);function s(e,t){this.streamManager=e,this.logger=t,this.pcStreamRequests=[],this.pcEstablishTimeout=o.NET_ACCESS_CONFIG.pcEstablishTimeout}s.prototype.getRequest=function(e,t){return e=new i.NetAgentPCRequest(this.logger,e,this.streamManager,this.pcEstablishTimeout,t),this.pcStreamRequests.push(e),e},s.prototype.updateConnectState=function(e,t,n){this.pcStreamRequests.forEach((function(o){e===r.PcConnectState.BROKEN?o.eventManager.emit(\"broken\"):e===r.PcConnectState.DISCONNECT&&o.eventManager.emit(\"disconnected\",t,n)}))},s.prototype.closePCs=function(){this.pcStreamRequests.forEach((function(e){e.closePc()}))},s.prototype.setEstablishTimeout=function(e){this.pcEstablishTimeout=e},t.NetAgentPCRequestMgr=s},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.NetRetryLinkHandler=void 0;var r=n(3),o=n(0);function i(e,t){this.logger=e,this.stateCenter=t,this.RETRY_START_TIME_INTERVAL=4,this.RETRY_CONTINUE_COUNT=2,this.RETRY_MAX_TIME_INTERVAL=32,this.retryTimer=null,this.maxTimer=null,this.retryStartTime=0,this.retryActiveCount=1,this.isOverTime=!1,this.RETRY_MAX_TIME=90}i.prototype.initLink=function(e){this.link=e},i.prototype.startMaxTime=function(){var e=this;this.maxTimer||(this.maxTimer=setTimeout((function(){e.logger.warn(\"zn.rlh.sm\"+\" over max time \".concat(e.RETRY_MAX_TIME,\"s, stop retry\")),e.isOverTime=!0,e.link.destroySocket(),e.stopMaxTime(),e.invalid(),e.onactive(!1,r.errorCodeList.NET_SOCKET_TIMEOUT)}),1e3*this.RETRY_MAX_TIME))},i.prototype.stopMaxTime=function(){this.maxTimer&&clearTimeout(this.maxTimer),this.maxTimer=null},i.prototype.active=function(e,t){var n,r=this;return this.logger.info(\"zn.rlh.at call \"+e+\" \"+t),this.stateCenter.networkState==o.ENUM_NETWORK_STATE.offline?(this.logger.info(\"zn.rlh.at network is broken, stop retry\"),!1):this.retryTimer?(this.logger.info(\"zn.rlh.at has actived, ignore\"),!1):this.isOverTime?(this.logger.info(\"zn.rlh.at retry over time, stop retry\"),!1):(1==this.retryActiveCount?this.retryActiveInterval=Math.floor(Math.random()*(1-this.RETRY_START_TIME_INTERVAL)+this.RETRY_START_TIME_INTERVAL):(n=Math.pow(2,Math.round(this.retryActiveCount/this.RETRY_CONTINUE_COUNT+1)),this.retryActiveInterval=n>this.RETRY_MAX_TIME_INTERVAL?this.RETRY_MAX_TIME_INTERVAL:n),this.logger.info(\"zn.rlh.at interval \"+this.retryActiveInterval),this.retryTimer=setTimeout((function(){r.link.destroySocket(),r.link.connectSocket(e,(function(){r.logger.info(\"zn.rlh.at suc\"),r.stopMaxTime(),r.invalid(),r.onactive(!0)}),(function(){r.logger.info(\"zn.rlh.at fail\"),r.maxTimer||r.startMaxTime(),r.active(!0)})),r.retryTimer&&clearTimeout(r.retryTimer),r.retryTimer=null,r.retryActiveCount++}),t?0:1e3*this.retryActiveInterval),!0)},i.prototype.onactive=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]},i.prototype.init=function(e,t,n,r){this.invalid(),this.stopMaxTime(),this.isOverTime=!1,\"number\"==typeof e&&e<3600&&(this.RETRY_MAX_TIME=e),\"number\"==typeof t&&(this.RETRY_START_TIME_INTERVAL=t),\"number\"==typeof n&&(this.RETRY_CONTINUE_COUNT=n),\"number\"==typeof r&&(this.RETRY_MAX_TIME_INTERVAL=r)},i.prototype.invalid=function(){this.retryTimer&&clearTimeout(this.retryTimer),this.retryTimer=null,this.retryStartTime=0,this.retryActiveCount=1},t.NetRetryLinkHandler=i},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.StateCenter=void 0;var r=n(0);t.StateCenter=function(){this.networkState=r.ENUM_NETWORK_STATE.offline,this.useNetAgent=!0,this.specified=!1}},function(e,t,n){\"use strict\";function r(){}Object.defineProperty(t,\"__esModule\",{value:!0}),t.ZegoLogger=void 0,r.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.join(\" \");console.log(n)},r.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.join(\" \");console.debug(n)},r.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.join(\" \");console.info(n)},r.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.join(\" \");console.warn(n)},r.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.join(\" \");console.error(n)},t.ZegoLogger=r},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.StreamManager=void 0;var r=n(0),o=n(25);function i(e){this.zegoLink=e,this.streamID=1,this.httpStreams=[],this.pcStreams=[]}i.prototype.createStream=function(e){return e!==r.StreamType.HTTP&&e===r.StreamType.PC?(t=new o.ZegoLinkStream(e,this.streamID++,this.zegoLink),this.pcStreams.push(t),t):this.getStream(e,this.httpStreams);var t},i.prototype.getStream=function(e,t){return t=t.find((function(e){return!0===e.isFree})),t?(t.isFree=!1,t.isFirst=!1,t):(t=new o.ZegoLinkStream(e,this.streamID++,this.zegoLink),this.httpStreams.push(t),t)},i.prototype.onPushEvent=function(e,t,n){var r=this.pcStreams.find((function(t){return t.StreamID===e}));r&&r.onPushEvent(t,n)},i.prototype.getStreamID=function(){return this.streamID++},t.StreamManager=i},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.ZegoLinkStream=void 0;var r=n(0);function o(e,t,n){this.type=e,this.streamID=t,this.zegoLink=n,this.isFree=!1,this.isFirst=!0}Object.defineProperty(o.prototype,\"StreamID\",{get:function(){return this.streamID},enumerable:!1,configurable:!0}),o.prototype.refresh=function(e){this.streamID=e},o.prototype.sendMessage=function(e,t,n,o,i,s){var a=this;void 0===n&&(n=null),void 0===o&&(o=null),this.zegoLink.sendMessage(e,this.streamID,t,this.isFirst,(function(e){a.type!==r.StreamType.PC&&(a.isFree=!0),n&&n(e)}),(function(e,t,n){a.type!==r.StreamType.PC&&(a.isFree=!0),o&&o(e,t,n)}),i=void 0===i?null:i,s=void 0===s?{timeout:5e3,isInSendMap:!0}:s)},o.prototype.onPushEvent=function(e,t){},o.prototype.closeStream=function(e,t){this.zegoLink.sendMessage(r.AccessHubMessageType.MSG_TYPE_STREAM_CLOSED,this.streamID,{code:e,msg:t})},o.prototype.isConnect=function(){return this.zegoLink.isConnect()},t.ZegoLinkStream=o}],a={},r.m=s,r.c=a,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=8))},function(e,t,n){var r;e.exports=(r=n(2),function(){var e,t;\"function\"==typeof ArrayBuffer&&(e=r.lib.WordArray,t=e.init,(e.init=function(e){if((e=(e=e instanceof ArrayBuffer?new Uint8Array(e):e)instanceof Int8Array||\"undefined\"!=typeof Uint8ClampedArray&&e instanceof Uint8ClampedArray||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?new Uint8Array(e.buffer,e.byteOffset,e.byteLength):e)instanceof Uint8Array){for(var n=e.byteLength,r=[],o=0;o<n;o++)r[o>>>2]|=e[o]<<24-o%4*8;t.call(this,r,n)}else t.apply(this,arguments)}).prototype=e)}(),r.lib.WordArray)},function(e,t,n){(function(t){e.exports=function e(t,n,r){function o(s,a){if(!n[s]){if(!t[s]){if(i)return i(s,!0);var c=new Error(\"Cannot find module '\"+s+\"'\");throw c.code=\"MODULE_NOT_FOUND\",c}c=n[s]={exports:{}},t[s][0].call(c.exports,(function(e){return o(t[s][1][e]||e)}),c,c.exports,e,t,n,r)}return n[s].exports}for(var i=!1,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(e,n,r){(function(e){\"use strict\";var t,r,o,i,s=e.MutationObserver||e.WebKitMutationObserver,a=s?(t=0,s=new s(u),r=e.document.createTextNode(\"\"),s.observe(r,{characterData:!0}),function(){r.data=t=++t%2}):e.setImmediate||void 0===e.MessageChannel?\"document\"in e&&\"onreadystatechange\"in e.document.createElement(\"script\")?function(){var t=e.document.createElement(\"script\");t.onreadystatechange=function(){u(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(u,0)}:((o=new e.MessageChannel).port1.onmessage=u,function(){o.port2.postMessage(0)}),c=[];function u(){i=!0;for(var e,t,n=c.length;n;){for(t=c,c=[],e=-1;++e<n;)t[e]();n=c.length}i=!1}n.exports=function(e){1!==c.push(e)||i||a()}}).call(this,void 0!==t?t:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],2:[function(e,t,n){\"use strict\";var r=e(1);function o(){}var i={},s=[\"REJECTED\"],a=[\"FULFILLED\"],c=[\"PENDING\"];function u(e){if(\"function\"!=typeof e)throw new TypeError(\"resolver must be a function\");this.state=c,this.queue=[],this.outcome=void 0,e!==o&&d(this,e)}function l(e,t,n){this.promise=e,\"function\"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),\"function\"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function h(e,t,n){r((function(){var r;try{r=t(n)}catch(r){return i.reject(e,r)}r===e?i.reject(e,new TypeError(\"Cannot resolve promise with itself\")):i.resolve(e,r)}))}function p(e){var t=e&&e.then;if(e&&(\"object\"==typeof e||\"function\"==typeof e)&&\"function\"==typeof t)return function(){t.apply(e,arguments)}}function d(e,t){var n=!1;function r(t){n||(n=!0,i.reject(e,t))}function o(t){n||(n=!0,i.resolve(e,t))}var s=_((function(){t(o,r)}));\"error\"===s.status&&r(s.value)}function _(e,t){var n={};try{n.value=e(t),n.status=\"success\"}catch(e){n.status=\"error\",n.value=e}return n}(t.exports=u).prototype.catch=function(e){return this.then(null,e)},u.prototype.then=function(e,t){if(\"function\"!=typeof e&&this.state===a||\"function\"!=typeof t&&this.state===s)return this;var n=new this.constructor(o);return this.state!==c?h(n,this.state===a?e:t,this.outcome):this.queue.push(new l(n,e,t)),n},l.prototype.callFulfilled=function(e){i.resolve(this.promise,e)},l.prototype.otherCallFulfilled=function(e){h(this.promise,this.onFulfilled,e)},l.prototype.callRejected=function(e){i.reject(this.promise,e)},l.prototype.otherCallRejected=function(e){h(this.promise,this.onRejected,e)},i.resolve=function(e,t){var n=_(p,t);if(\"error\"===n.status)return i.reject(e,n.value);if(n=n.value)d(e,n);else{e.state=a,e.outcome=t;for(var r=-1,o=e.queue.length;++r<o;)e.queue[r].callFulfilled(t)}return e},i.reject=function(e,t){e.state=s,e.outcome=t;for(var n=-1,r=e.queue.length;++n<r;)e.queue[n].callRejected(t);return e},u.resolve=function(e){return e instanceof this?e:i.resolve(new this(o),e)},u.reject=function(e){var t=new this(o);return i.reject(t,e)},u.all=function(e){var t=this;if(\"[object Array]\"!==Object.prototype.toString.call(e))return this.reject(new TypeError(\"must be an array\"));var n=e.length,r=!1;if(!n)return this.resolve([]);for(var s=new Array(n),a=0,c=-1,u=new this(o);++c<n;)!function(e,o){t.resolve(e).then((function(e){s[o]=e,++a!==n||r||(r=!0,i.resolve(u,s))}),(function(e){r||(r=!0,i.reject(u,e))}))}(e[c],c);return u},u.race=function(e){var t=this;if(\"[object Array]\"!==Object.prototype.toString.call(e))return this.reject(new TypeError(\"must be an array\"));var n=e.length,r=!1;if(!n)return this.resolve([]);for(var s=-1,a=new this(o);++s<n;)!function(e){t.resolve(e).then((function(e){r||(r=!0,i.resolve(a,e))}),(function(e){r||(r=!0,i.reject(a,e))}))}(e[s]);return a}},{1:1}],3:[function(e,n,r){(function(t){\"use strict\";\"function\"!=typeof t.Promise&&(t.Promise=e(2))}).call(this,void 0!==t?t:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{2:2}],4:[function(e,t,n){\"use strict\";var r=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},o=function(){try{if(\"undefined\"!=typeof indexedDB)return indexedDB;if(\"undefined\"!=typeof webkitIndexedDB)return webkitIndexedDB;if(\"undefined\"!=typeof mozIndexedDB)return mozIndexedDB;if(\"undefined\"!=typeof OIndexedDB)return OIndexedDB;if(\"undefined\"!=typeof msIndexedDB)return msIndexedDB}catch(e){return}}();function i(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(o){if(\"TypeError\"!==o.name)throw o;for(var n=new(\"undefined\"!=typeof BlobBuilder?BlobBuilder:\"undefined\"!=typeof MSBlobBuilder?MSBlobBuilder:\"undefined\"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),r=0;r<e.length;r+=1)n.append(e[r]);return n.getBlob(t.type)}}\"undefined\"==typeof Promise&&e(3);var s=Promise;function a(e,t){t&&e.then((function(e){t(null,e)}),(function(e){t(e)}))}function c(e,t,n){\"function\"==typeof t&&e.then(t),\"function\"==typeof n&&e.catch(n)}function u(e){return\"string\"!=typeof e&&(console.warn(e+\" used as a key, but it is not a string.\"),e=String(e)),e}function l(){if(arguments.length&&\"function\"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}var h=\"local-forage-detect-blob-support\",p=void 0,d={},_=Object.prototype.toString,f=\"readonly\",g=\"readwrite\";function m(e){return\"boolean\"==typeof p?s.resolve(p):(t=e,new s((function(e){var n=t.transaction(h,g),r=i([\"\"]);n.objectStore(h).put(r,\"key\"),n.onabort=function(t){t.preventDefault(),t.stopPropagation(),e(!1)},n.oncomplete=function(){var t=navigator.userAgent.match(/Chrome\\/(\\d+)/),n=navigator.userAgent.match(/Edge\\//);e(n||!t||43<=parseInt(t[1],10))}})).catch((function(){return!1})).then((function(e){return p=e})));var t}function y(e){e=d[e.name];var t={};t.promise=new s((function(e,n){t.resolve=e,t.reject=n})),e.deferredOperations.push(t),e.dbReady?e.dbReady=e.dbReady.then((function(){return t.promise})):e.dbReady=t.promise}function v(e){(e=d[e.name].deferredOperations.pop())&&(e.resolve(),e.promise)}function b(e,t){if(e=d[e.name].deferredOperations.pop())return e.reject(t),e.promise}function E(e,t){return new s((function(n,r){if(d[e.name]=d[e.name]||{forages:[],db:null,dbReady:null,deferredOperations:[]},e.db){if(!t)return n(e.db);y(e),e.db.close()}var i=[e.name],s=(t&&i.push(e.version),o.open.apply(o,i));t&&(s.onupgradeneeded=function(t){var n=s.result;try{n.createObjectStore(e.storeName),t.oldVersion<=1&&n.createObjectStore(h)}catch(n){if(\"ConstraintError\"!==n.name)throw n;console.warn('The database \"'+e.name+'\" has been upgraded from version '+t.oldVersion+\" to version \"+t.newVersion+', but the storage \"'+e.storeName+'\" already exists.')}}),s.onerror=function(e){e.preventDefault(),r(s.error)},s.onsuccess=function(){n(s.result),v(e)}}))}function O(e){return E(e,!1)}function T(e){return E(e,!0)}function S(e,t){if(!e.db)return 1;var n=!e.db.objectStoreNames.contains(e.storeName),r=e.version<e.db.version,o=e.version>e.db.version;return r&&(e.version!==t&&console.warn('The database \"'+e.name+\"\\\" can't be downgraded from version \"+e.db.version+\" to version \"+e.version+\".\"),e.version=e.db.version),(o||n)&&(n&&(r=e.db.version+1)>e.version&&(e.version=r),1)}function R(e){return i([function(e){for(var t=e.length,n=new ArrayBuffer(t),r=new Uint8Array(n),o=0;o<t;o++)r[o]=e.charCodeAt(o);return n}(atob(e.data))],{type:e.type})}function k(e){return e&&e.__local_forage_encoded_blob}function C(e){var t=this,n=t._initReady().then((function(){var e=d[t._dbInfo.name];if(e&&e.dbReady)return e.dbReady}));return c(n,e,e),n}function w(e,t,n,r){void 0===r&&(r=1);try{var o=e.db.transaction(e.storeName,t);n(null,o)}catch(o){if(0<r&&(!e.db||\"InvalidStateError\"===o.name||\"NotFoundError\"===o.name))return s.resolve().then((function(){if(!e.db||\"NotFoundError\"===o.name&&!e.db.objectStoreNames.contains(e.storeName)&&e.version<=e.db.version)return e.db&&(e.version=e.db.version+1),T(e)})).then((function(){return function(e){y(e);for(var t=d[e.name],n=t.forages,r=0;r<n.length;r++){var o=n[r];o._dbInfo.db&&(o._dbInfo.db.close(),o._dbInfo.db=null)}return e.db=null,O(e).then((function(t){return e.db=t,S(e)?T(e):t})).then((function(r){e.db=t.db=r;for(var o=0;o<n.length;o++)n[o]._dbInfo.db=r})).catch((function(t){throw b(e,t),t}))}(e).then((function(){w(e,t,n,r-1)}))})).catch(n);n(o)}}e={_driver:\"asyncStorage\",_initStorage:function(e){var t=this,n={db:null};if(e)for(var r in e)n[r]=e[r];var o=d[n.name],i=(o||(o={forages:[],db:null,dbReady:null,deferredOperations:[]},d[n.name]=o),o.forages.push(t),t._initReady||(t._initReady=t.ready,t.ready=C),[]);function a(){return s.resolve()}for(var c=0;c<o.forages.length;c++){var u=o.forages[c];u!==t&&i.push(u._initReady().catch(a))}var l=o.forages.slice(0);return s.all(i).then((function(){return n.db=o.db,O(n)})).then((function(e){return n.db=e,S(n,t._defaultConfig.version)?T(n):e})).then((function(e){n.db=o.db=e,t._dbInfo=n;for(var r=0;r<l.length;r++){var i=l[r];i!==t&&(i._dbInfo.db=n.db,i._dbInfo.version=n.version)}}))},_support:function(){try{if(!o||!o.open)return!1;var e=\"undefined\"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),t=\"function\"==typeof fetch&&-1!==fetch.toString().indexOf(\"[native code\");return(!e||t)&&\"undefined\"!=typeof indexedDB&&\"undefined\"!=typeof IDBKeyRange}catch(e){return!1}}(),iterate:function(e,t){var n=this,r=new s((function(t,r){n.ready().then((function(){w(n._dbInfo,f,(function(o,i){if(o)return r(o);try{var s=i.objectStore(n._dbInfo.storeName).openCursor(),a=1;s.onsuccess=function(){var n,r=s.result;r?(k(n=r.value)&&(n=R(n)),void 0!==(n=e(n,r.key,a++))?t(n):r.continue()):t()},s.onerror=function(){r(s.error)}}catch(o){r(o)}}))})).catch(r)}));return a(r,t),r},getItem:function(e,t){var n=this,r=(e=u(e),new s((function(t,r){n.ready().then((function(){w(n._dbInfo,f,(function(o,i){if(o)return r(o);try{var s=i.objectStore(n._dbInfo.storeName).get(e);s.onsuccess=function(){var e=s.result;k(e=void 0===e?null:e)&&(e=R(e)),t(e)},s.onerror=function(){r(s.error)}}catch(o){r(o)}}))})).catch(r)})));return a(r,t),r},setItem:function(e,t,n){var r=this,o=(e=u(e),new s((function(n,o){var i;r.ready().then((function(){return i=r._dbInfo,\"[object Blob]\"===_.call(t)?m(i.db).then((function(e){return e?t:(n=t,new s((function(e,t){var r=new FileReader;r.onerror=t,r.onloadend=function(t){t=btoa(t.target.result||\"\"),e({__local_forage_encoded_blob:!0,data:t,type:n.type})},r.readAsBinaryString(n)})));var n})):t})).then((function(t){w(r._dbInfo,g,(function(i,s){if(i)return o(i);try{var a=s.objectStore(r._dbInfo.storeName),c=(null===t&&(t=void 0),a.put(t,e));s.oncomplete=function(){n(t=void 0===t?null:t)},s.onabort=s.onerror=function(){var e=c.error||c.transaction.error;o(e)}}catch(i){o(i)}}))})).catch(o)})));return a(o,n),o},removeItem:function(e,t){var n=this,r=(e=u(e),new s((function(t,r){n.ready().then((function(){w(n._dbInfo,g,(function(o,i){if(o)return r(o);try{var s=i.objectStore(n._dbInfo.storeName).delete(e);i.oncomplete=function(){t()},i.onerror=function(){r(s.error)},i.onabort=function(){var e=s.error||s.transaction.error;r(e)}}catch(o){r(o)}}))})).catch(r)})));return a(r,t),r},clear:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){w(t._dbInfo,g,(function(r,o){if(r)return n(r);try{var i=o.objectStore(t._dbInfo.storeName).clear();o.oncomplete=function(){e()},o.onabort=o.onerror=function(){var e=i.error||i.transaction.error;n(e)}}catch(r){n(r)}}))})).catch(n)}));return a(n,e),n},length:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){w(t._dbInfo,f,(function(r,o){if(r)return n(r);try{var i=o.objectStore(t._dbInfo.storeName).count();i.onsuccess=function(){e(i.result)},i.onerror=function(){n(i.error)}}catch(r){n(r)}}))})).catch(n)}));return a(n,e),n},key:function(e,t){var n=this,r=new s((function(t,r){e<0?t(null):n.ready().then((function(){w(n._dbInfo,f,(function(o,i){if(o)return r(o);try{var s=i.objectStore(n._dbInfo.storeName),a=!1,c=s.openKeyCursor();c.onsuccess=function(){var n=c.result;n?0===e||a?t(n.key):(a=!0,n.advance(e)):t(null)},c.onerror=function(){r(c.error)}}catch(o){r(o)}}))})).catch(r)}));return a(r,t),r},keys:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){w(t._dbInfo,f,(function(r,o){if(r)return n(r);try{var i=o.objectStore(t._dbInfo.storeName).openKeyCursor(),s=[];i.onsuccess=function(){var t=i.result;t?(s.push(t.key),t.continue()):e(s)},i.onerror=function(){n(i.error)}}catch(r){n(r)}}))})).catch(n)}));return a(n,e),n},dropInstance:function(e,t){t=l.apply(this,arguments);var n=this.config();return(e=\"function\"!=typeof e&&e||{}).name||(e.name=e.name||n.name,e.storeName=e.storeName||n.storeName),a(n=e.name?(n=e.name===n.name&&this._dbInfo.db?s.resolve(this._dbInfo.db):O(e).then((function(t){var n=d[e.name],r=n.forages;n.db=t;for(var o=0;o<r.length;o++)r[o]._dbInfo.db=t;return t})),e.storeName?n.then((function(t){if(t.objectStoreNames.contains(e.storeName)){var n=t.version+1,r=(y(e),d[e.name]),i=r.forages;t.close();for(var a=0;a<i.length;a++){var c=i[a];c._dbInfo.db=null,c._dbInfo.version=n}return new s((function(t,r){var i=o.open(e.name,n);i.onerror=function(e){i.result.close(),r(e)},i.onupgradeneeded=function(){i.result.deleteObjectStore(e.storeName)},i.onsuccess=function(){var e=i.result;e.close(),t(e)}})).then((function(e){r.db=e;for(var t=0;t<i.length;t++){var n=i[t];n._dbInfo.db=e,v(n._dbInfo)}})).catch((function(t){throw(b(e,t)||s.resolve()).catch((function(){})),t}))}})):n.then((function(t){y(e);var n=d[e.name],r=n.forages;t.close();for(var i=0;i<r.length;i++)r[i]._dbInfo.db=null;return new s((function(t,n){var r=o.deleteDatabase(e.name);r.onerror=r.onblocked=function(e){var t=r.result;t&&t.close(),n(e)},r.onsuccess=function(){var e=r.result;e&&e.close(),t(e)}})).then((function(e){n.db=e;for(var t=0;t<r.length;t++)v(r[t]._dbInfo)})).catch((function(t){throw(b(e,t)||s.resolve()).catch((function(){})),t}))}))):s.reject(\"Invalid arguments\"),t),n}};var N=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",I=/^~~local_forage_type~([^~]+)~/,M=\"__lfsc__:\",L=M.length,P=L+\"arbf\".length,A=Object.prototype.toString;function D(e){for(var t,n,r,o,i=.75*e.length,s=e.length,a=0,c=(i=(\"=\"===e[e.length-1]&&(i--,\"=\"===e[e.length-2]&&i--),new ArrayBuffer(i)),new Uint8Array(i)),u=0;u<s;u+=4)t=N.indexOf(e[u]),n=N.indexOf(e[u+1]),r=N.indexOf(e[u+2]),o=N.indexOf(e[u+3]),c[a++]=t<<2|n>>4,c[a++]=(15&n)<<4|r>>2,c[a++]=(3&r)<<6|63&o;return i}function H(e){for(var t=new Uint8Array(e),n=\"\",r=0;r<t.length;r+=3)n=(n=(n=(n+=N[t[r]>>2])+N[(3&t[r])<<4|t[r+1]>>4])+N[(15&t[r+1])<<2|t[r+2]>>6])+N[63&t[r+2]];return t.length%3==2?n=n.substring(0,n.length-1)+\"=\":t.length%3==1&&(n=n.substring(0,n.length-2)+\"==\"),n}var j={serialize:function(e,t){var n=\"\";if(e&&(n=A.call(e)),e&&(\"[object ArrayBuffer]\"===n||e.buffer&&\"[object ArrayBuffer]\"===A.call(e.buffer))){var r,o=M;e instanceof ArrayBuffer?(r=e,o+=\"arbf\"):(r=e.buffer,\"[object Int8Array]\"===n?o+=\"si08\":\"[object Uint8Array]\"===n?o+=\"ui08\":\"[object Uint8ClampedArray]\"===n?o+=\"uic8\":\"[object Int16Array]\"===n?o+=\"si16\":\"[object Uint16Array]\"===n?o+=\"ur16\":\"[object Int32Array]\"===n?o+=\"si32\":\"[object Uint32Array]\"===n?o+=\"ui32\":\"[object Float32Array]\"===n?o+=\"fl32\":\"[object Float64Array]\"===n?o+=\"fl64\":t(new Error(\"Failed to get type for BinaryArray\"))),t(o+H(r))}else if(\"[object Blob]\"===n)(o=new FileReader).onload=function(){var n=\"~~local_forage_type~\"+e.type+\"~\"+H(this.result);t(M+\"blob\"+n)},o.readAsArrayBuffer(e);else try{t(JSON.stringify(e))}catch(n){console.error(\"Couldn't convert value into a JSON string: \",e),t(null,n)}},deserialize:function(e){if(e.substring(0,L)!==M)return JSON.parse(e);var t,n=e.substring(P),r=e.substring(L,P),o=(\"blob\"===r&&I.test(n)&&(t=(e=n.match(I))[1],n=n.substring(e[0].length)),D(n));switch(r){case\"arbf\":return o;case\"blob\":return i([o],{type:t});case\"si08\":return new Int8Array(o);case\"ui08\":return new Uint8Array(o);case\"uic8\":return new Uint8ClampedArray(o);case\"si16\":return new Int16Array(o);case\"ur16\":return new Uint16Array(o);case\"si32\":return new Int32Array(o);case\"ui32\":return new Uint32Array(o);case\"fl32\":return new Float32Array(o);case\"fl64\":return new Float64Array(o);default:throw new Error(\"Unkown type: \"+r)}},stringToBuffer:D,bufferToString:H};function q(e,t,n,r){e.executeSql(\"CREATE TABLE IF NOT EXISTS \"+t.storeName+\" (id INTEGER PRIMARY KEY, key unique, value)\",[],n,r)}function U(e,t,n,r,o,i){e.executeSql(n,r,o,(function(e,s){s.code===s.SYNTAX_ERR?e.executeSql(\"SELECT name FROM sqlite_master WHERE type='table' AND name = ?\",[t.storeName],(function(e,a){a.rows.length?i(e,s):q(e,t,(function(){e.executeSql(n,r,o,i)}),i)}),i):i(e,s)}),i)}function B(e,t,n,r){var o=this,i=(e=u(e),new s((function(i,s){o.ready().then((function(){var a=t=void 0===t?null:t,c=o._dbInfo;c.serializer.serialize(t,(function(t,u){u?s(u):c.db.transaction((function(n){U(n,c,\"INSERT OR REPLACE INTO \"+c.storeName+\" (key, value) VALUES (?, ?)\",[e,t],(function(){i(a)}),(function(e,t){s(t)}))}),(function(t){t.code===t.QUOTA_ERR&&(0<r?i(B.apply(o,[e,a,n,r-1])):s(t))}))}))})).catch(s)})));return a(i,n),i}var x={_driver:\"webSQLStorage\",_initStorage:function(e){var t=this,n={db:null};if(e)for(var r in e)n[r]=\"string\"!=typeof e[r]?e[r].toString():e[r];var o=new s((function(e,r){try{n.db=openDatabase(n.name,String(n.version),n.description,n.size)}catch(e){return r(e)}n.db.transaction((function(o){q(o,n,(function(){t._dbInfo=n,e()}),(function(e,t){r(t)}))}),r)}));return n.serializer=j,o},_support:\"function\"==typeof openDatabase,iterate:function(e,t){var n=this,r=new s((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){U(n,o,\"SELECT * FROM \"+o.storeName,[],(function(n,r){for(var i=r.rows,s=i.length,a=0;a<s;a++){var c=i.item(a),u=(u=c.value)&&o.serializer.deserialize(u);if(void 0!==(u=e(u,c.key,a+1)))return void t(u)}t()}),(function(e,t){r(t)}))}))})).catch(r)}));return a(r,t),r},getItem:function(e,t){var n=this,r=(e=u(e),new s((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){U(n,o,\"SELECT * FROM \"+o.storeName+\" WHERE key = ? LIMIT 1\",[e],(function(e,n){n=(n=n.rows.length?n.rows.item(0).value:null)&&o.serializer.deserialize(n),t(n)}),(function(e,t){r(t)}))}))})).catch(r)})));return a(r,t),r},setItem:function(e,t,n){return B.apply(this,[e,t,n,1])},removeItem:function(e,t){var n=this,r=(e=u(e),new s((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){U(n,o,\"DELETE FROM \"+o.storeName+\" WHERE key = ?\",[e],(function(){t()}),(function(e,t){r(t)}))}))})).catch(r)})));return a(r,t),r},clear:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){U(t,r,\"DELETE FROM \"+r.storeName,[],(function(){e()}),(function(e,t){n(t)}))}))})).catch(n)}));return a(n,e),n},length:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){U(t,r,\"SELECT COUNT(key) as c FROM \"+r.storeName,[],(function(t,n){n=n.rows.item(0).c,e(n)}),(function(e,t){n(t)}))}))})).catch(n)}));return a(n,e),n},key:function(e,t){var n=this,r=new s((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){U(n,o,\"SELECT key FROM \"+o.storeName+\" WHERE id = ? LIMIT 1\",[e+1],(function(e,n){n=n.rows.length?n.rows.item(0).key:null,t(n)}),(function(e,t){r(t)}))}))})).catch(r)}));return a(r,t),r},keys:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){U(t,r,\"SELECT key FROM \"+r.storeName,[],(function(t,n){for(var r=[],o=0;o<n.rows.length;o++)r.push(n.rows.item(o).key);e(r)}),(function(e,t){n(t)}))}))})).catch(n)}));return a(n,e),n},dropInstance:function(e,t){t=l.apply(this,arguments);var n=this.config(),r=((e=\"function\"!=typeof e&&e||{}).name||(e.name=e.name||n.name,e.storeName=e.storeName||n.storeName),this),o=e.name?new s((function(t){var o,i=e.name===n.name?r._dbInfo.db:openDatabase(e.name,\"\",\"\",0);e.storeName?t({db:i,storeNames:[e.storeName]}):t((o=i,new s((function(e,t){o.transaction((function(n){n.executeSql(\"SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\",[],(function(t,n){for(var r=[],i=0;i<n.rows.length;i++)r.push(n.rows.item(i).name);e({db:o,storeNames:r})}),(function(e,n){t(n)}))}),(function(e){t(e)}))}))))})).then((function(e){return new s((function(t,n){e.db.transaction((function(r){for(var o=[],i=0,a=e.storeNames.length;i<a;i++)o.push(function(e){return new s((function(t,n){r.executeSql(\"DROP TABLE IF EXISTS \"+e,[],(function(){t()}),(function(e,t){n(t)}))}))}(e.storeNames[i]));s.all(o).then((function(){t()})).catch((function(e){n(e)}))}),(function(e){n(e)}))}))})):s.reject(\"Invalid arguments\");return a(o,t),o}};function G(e,t){var n=e.name+\"/\";return e.storeName!==t.storeName&&(n+=e.storeName+\"/\"),n}function V(e,t){for(var n,r,o=e.length,i=0;i<o;){if((n=e[i])===(r=t)||\"number\"==typeof n&&\"number\"==typeof r&&isNaN(n)&&isNaN(r))return 1;i++}}var z={_driver:\"localStorageWrapper\",_initStorage:function(e){var t={};if(e)for(var n in e)t[n]=e[n];return t.keyPrefix=G(e,this._defaultConfig),!function(){var e=\"_localforage_support_test\";try{return localStorage.setItem(e,!0),localStorage.removeItem(e),0}catch(e){return 1}}()||0<localStorage.length?((this._dbInfo=t).serializer=j,s.resolve()):s.reject()},_support:function(){try{return\"undefined\"!=typeof localStorage&&\"setItem\"in localStorage&&!!localStorage.setItem}catch(e){return!1}}(),iterate:function(e,t){var n=this,r=n.ready().then((function(){for(var t=n._dbInfo,r=t.keyPrefix,o=r.length,i=localStorage.length,s=1,a=0;a<i;a++){var c=localStorage.key(a);if(0===c.indexOf(r)){var u=(u=localStorage.getItem(c))&&t.serializer.deserialize(u);if(void 0!==(u=e(u,c.substring(o),s++)))return u}}}));return a(r,t),r},getItem:function(e,t){var n=this,r=(e=u(e),n.ready().then((function(){var t=n._dbInfo,r=localStorage.getItem(t.keyPrefix+e);return r&&t.serializer.deserialize(r)})));return a(r,t),r},setItem:function(e,t,n){var r=this,o=(e=u(e),r.ready().then((function(){var n=t=void 0===t?null:t;return new s((function(o,i){var s=r._dbInfo;s.serializer.serialize(t,(function(t,r){if(r)i(r);else try{localStorage.setItem(s.keyPrefix+e,t),o(n)}catch(t){\"QuotaExceededError\"!==t.name&&\"NS_ERROR_DOM_QUOTA_REACHED\"!==t.name||i(t),i(t)}}))}))})));return a(o,n),o},removeItem:function(e,t){var n=this,r=(e=u(e),n.ready().then((function(){var t=n._dbInfo;localStorage.removeItem(t.keyPrefix+e)})));return a(r,t),r},clear:function(e){var t=this,n=t.ready().then((function(){for(var e=t._dbInfo.keyPrefix,n=localStorage.length-1;0<=n;n--){var r=localStorage.key(n);0===r.indexOf(e)&&localStorage.removeItem(r)}}));return a(n,e),n},length:function(e){var t=this.keys().then((function(e){return e.length}));return a(t,e),t},key:function(e,t){var n=this,r=n.ready().then((function(){var t,r=n._dbInfo;try{t=localStorage.key(e)}catch(r){t=null}return t&&t.substring(r.keyPrefix.length)}));return a(r,t),r},keys:function(e){var t=this,n=t.ready().then((function(){for(var e=t._dbInfo,n=localStorage.length,r=[],o=0;o<n;o++){var i=localStorage.key(o);0===i.indexOf(e.keyPrefix)&&r.push(i.substring(e.keyPrefix.length))}return r}));return a(n,e),n},dropInstance:function(e,t){t=l.apply(this,arguments),(e=\"function\"!=typeof e&&e||{}).name||(r=this.config(),e.name=e.name||r.name,e.storeName=e.storeName||r.storeName);var n=this,r=e.name?new s((function(t){e.storeName?t(G(e,n._defaultConfig)):t(e.name+\"/\")})).then((function(e){for(var t=localStorage.length-1;0<=t;t--){var n=localStorage.key(t);0===n.indexOf(e)&&localStorage.removeItem(n)}})):s.reject(\"Invalid arguments\");return a(r,t),r}},F=Array.isArray||function(e){return\"[object Array]\"===Object.prototype.toString.call(e)},W={},Z={},Y={INDEXEDDB:e,WEBSQL:x,LOCALSTORAGE:z},K=(e=[Y.INDEXEDDB._driver,Y.WEBSQL._driver,Y.LOCALSTORAGE._driver],[\"dropInstance\"]),X=[\"clear\",\"getItem\",\"iterate\",\"key\",\"keys\",\"length\",\"removeItem\",\"setItem\"].concat(K),J={description:\"\",driver:e.slice(),name:\"localforage\",size:4980736,storeName:\"keyvaluepairs\",version:1};function Q(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];if(n)for(var r in n)n.hasOwnProperty(r)&&(F(n[r])?e[r]=n[r].slice():e[r]=n[r])}return e}function $(e){var t,n,r;if(!(this instanceof $))throw new TypeError(\"Cannot call a class as a function\");for(t in Y)Y.hasOwnProperty(t)&&(r=(n=Y[t])._driver,this[t]=r,W[r]||this.defineDriver(n));this._defaultConfig=Q({},J),this._config=Q({},this._defaultConfig,e),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch((function(){}))}$.prototype.config=function(e){if(\"object\"!==(void 0===e?\"undefined\":r(e)))return\"string\"==typeof e?this._config[e]:this._config;if(this._ready)return new Error(\"Can't call config() after localforage has been used.\");for(var t in e){if(\"storeName\"===t&&(e[t]=e[t].replace(/\\W/g,\"_\")),\"version\"===t&&\"number\"!=typeof e[t])return new Error(\"Database version must be a number.\");this._config[t]=e[t]}return!(\"driver\"in e&&e.driver)||this.setDriver(this._config.driver)},$.prototype.defineDriver=function(e,t,n){var r=new s((function(t,n){try{var r=e._driver,o=new Error(\"Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver\");if(!e._driver)return void n(o);for(var i=X.concat(\"_initStorage\"),c=0,u=i.length;c<u;c++){var l=i[c];if((!V(K,l)||e[l])&&\"function\"!=typeof e[l])return void n(o)}for(var h=0,p=K.length;h<p;h++){var d=K[h];e[d]||(e[d]=function(e){return function(){var t=new Error(\"Method \"+e+\" is not implemented by the current driver\");return a(t=s.reject(t),arguments[arguments.length-1]),t}}(d))}var _=function(n){W[r]&&console.info(\"Redefining LocalForage driver: \"+r),W[r]=e,Z[r]=n,t()};\"_support\"in e?e._support&&\"function\"==typeof e._support?e._support().then(_,n):_(!!e._support):_(!0)}catch(o){n(o)}}));return c(r,t,n),r},$.prototype.driver=function(){return this._driver||null},$.prototype.getDriver=function(e,t,n){return c(e=W[e]?s.resolve(W[e]):s.reject(new Error(\"Driver not found.\")),t,n),e},$.prototype.getSerializer=function(e){var t=s.resolve(j);return c(t,e),t},$.prototype.ready=function(e){var t=this,n=t._driverSet.then((function(){return null===t._ready&&(t._ready=t._initDriver()),t._ready}));return c(n,e,e),n},$.prototype.setDriver=function(e,t,n){var r=this,o=(F(e)||(e=[e]),this._getSupportedDrivers(e));function i(){r._config.driver=r.driver()}function a(e){return r._extend(e),i(),r._ready=r._initStorage(r._config),r._ready}return e=null!==this._driverSet?this._driverSet.catch((function(){return s.resolve()})):s.resolve(),this._driverSet=e.then((function(){var e=o[0];return r._dbInfo=null,r._ready=null,r.getDriver(e).then((function(e){r._driver=e._driver,i(),r._wrapLibraryMethodsWithReady(),r._initDriver=function(e){return function(){var t=0;return function n(){for(;t<e.length;){var o=e[t];return t++,r._dbInfo=null,r._ready=null,r.getDriver(o).then(a).catch(n)}i();var c=new Error(\"No available storage method found.\");return r._driverSet=s.reject(c),r._driverSet}()}}(o)}))})).catch((function(){i();var e=new Error(\"No available storage method found.\");return r._driverSet=s.reject(e),r._driverSet})),c(this._driverSet,t,n),this._driverSet},$.prototype.supports=function(e){return!!Z[e]},$.prototype._extend=function(e){Q(this,e)},$.prototype._getSupportedDrivers=function(e){for(var t=[],n=0,r=e.length;n<r;n++){var o=e[n];this.supports(o)&&t.push(o)}return t},$.prototype._wrapLibraryMethodsWithReady=function(){for(var e=0,t=X.length;e<t;e++)!function(e,t){e[t]=function(){var n=arguments;return e.ready().then((function(){return e[t].apply(e,n)}))}}(this,X[e])},$.prototype.createInstance=function(e){return new $(e)},x=new $,t.exports=x},{3:3}]},{},[4])(4)}).call(this,n(10))},function(e,t){},function(e,t,n){var r;e.exports=(e=n(2),r=e.lib.WordArray,e.enc.Base64={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=this._map,o=(e.clamp(),[]),i=0;i<n;i+=3)for(var s=(t[i>>>2]>>>24-i%4*8&255)<<16|(t[i+1>>>2]>>>24-(i+1)%4*8&255)<<8|t[i+2>>>2]>>>24-(i+2)%4*8&255,a=0;a<4&&i+.75*a<n;a++)o.push(r.charAt(s>>>6*(3-a)&63));var c=r.charAt(64);if(c)for(;o.length%4;)o.push(c);return o.join(\"\")},parse:function(e){var t=e.length,n=this._map;if(!(o=this._reverseMap))for(var o=this._reverseMap=[],i=0;i<n.length;i++)o[n.charCodeAt(i)]=i;var s=n.charAt(64);return s&&-1!==(s=e.indexOf(s))&&(t=s),function(e,t,n){for(var o,i,s=[],a=0,c=0;c<t;c++)c%4&&(o=n[e.charCodeAt(c-1)]<<c%4*2,i=n[e.charCodeAt(c)]>>>6-c%4*2,s[a>>>2]|=(o|i)<<24-a%4*8,a++);return r.create(s,a)}(e,t,o)},_map:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"},e.enc.Base64)},function(e,t,n){var r,o,i,s;e.exports=(e=n(2),s=(n=e).lib,r=s.WordArray,o=s.Hasher,s=n.algo,i=[],s=s.SHA1=o.extend({_doReset:function(){this._hash=new r.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var n=this._hash.words,r=n[0],o=n[1],s=n[2],a=n[3],c=n[4],u=0;u<80;u++){u<16?i[u]=0|e[t+u]:(l=i[u-3]^i[u-8]^i[u-14]^i[u-16],i[u]=l<<1|l>>>31);var l=(r<<5|r>>>27)+c+i[u];l+=u<20?1518500249+(o&s|~o&a):u<40?1859775393+(o^s^a):u<60?(o&s|o&a|s&a)-1894007588:(o^s^a)-899497514,c=a,a=s,s=o<<30|o>>>2,o=r,r=l}n[0]=n[0]+r|0,n[1]=n[1]+o|0,n[2]=n[2]+s|0,n[3]=n[3]+a|0,n[4]=n[4]+c|0},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,r=8*e.sigBytes;return t[r>>>5]|=128<<24-r%32,t[14+(64+r>>>9<<4)]=Math.floor(n/4294967296),t[15+(64+r>>>9<<4)]=n,e.sigBytes=4*t.length,this._process(),this._hash},clone:function(){var e=o.clone.call(this);return e._hash=this._hash.clone(),e}}),n.SHA1=o._createHelper(s),n.HmacSHA1=o._createHmacHelper(s),e.SHA1)},function(e,t,n){var r;e.exports=(e=n(2),n=e.lib.Base,r=e.enc.Utf8,void(e.algo.HMAC=n.extend({init:function(e,t){e=this._hasher=new e.init,\"string\"==typeof t&&(t=r.parse(t));for(var n=e.blockSize,o=4*n,i=(e=((t=t.sigBytes>o?e.finalize(t):t).clamp(),this._oKey=t.clone()),t=this._iKey=t.clone(),e.words),s=t.words,a=0;a<n;a++)i[a]^=1549556828,s[a]^=909522486;e.sigBytes=t.sigBytes=o,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher;e=t.finalize(e);return t.reset(),t.finalize(this._oKey.clone().concat(e))}})))},function(e,t,n){var r,o,i,s,a,c,u,l,h,p,d,_;e.exports=(e=n(2),n(11),void(e.lib.Cipher||(n=e.lib,r=n.Base,o=n.WordArray,i=n.BufferedBlockAlgorithm,(h=e.enc).Utf8,s=h.Base64,a=e.algo.EvpKDF,c=n.Cipher=i.extend({cfg:r.extend(),createEncryptor:function(e,t){return this.create(this._ENC_XFORM_MODE,e,t)},createDecryptor:function(e,t){return this.create(this._DEC_XFORM_MODE,e,t)},init:function(e,t,n){this.cfg=this.cfg.extend(n),this._xformMode=e,this._key=t,this.reset()},reset:function(){i.reset.call(this),this._doReset()},process:function(e){return this._append(e),this._process()},finalize:function(e){return e&&this._append(e),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function e(e){return\"string\"==typeof e?_:p}return function(t){return{encrypt:function(n,r,o){return e(r).encrypt(t,n,r,o)},decrypt:function(n,r,o){return e(r).decrypt(t,n,r,o)}}}}()}),n.StreamCipher=c.extend({_doFinalize:function(){return this._process(!0)},blockSize:1}),h=e.mode={},u=n.BlockCipherMode=r.extend({createEncryptor:function(e,t){return this.Encryptor.create(e,t)},createDecryptor:function(e,t){return this.Decryptor.create(e,t)},init:function(e,t){this._cipher=e,this._iv=t}}),h=h.CBC=function(){var e=u.extend();function t(e,t,n){var r,o=this._iv;o?(r=o,this._iv=void 0):r=this._prevBlock;for(var i=0;i<n;i++)e[t+i]^=r[i]}return e.Encryptor=e.extend({processBlock:function(e,n){var r=this._cipher,o=r.blockSize;t.call(this,e,n,o),r.encryptBlock(e,n),this._prevBlock=e.slice(n,n+o)}}),e.Decryptor=e.extend({processBlock:function(e,n){var r=this._cipher,o=r.blockSize,i=e.slice(n,n+o);r.decryptBlock(e,n),t.call(this,e,n,o),this._prevBlock=i}}),e}(),d=(e.pad={}).Pkcs7={pad:function(e,t){for(var n=(t=4*t)-e.sigBytes%t,r=n<<24|n<<16|n<<8|n,i=[],s=0;s<n;s+=4)i.push(r);t=o.create(i,n),e.concat(t)},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},n.BlockCipher=c.extend({cfg:c.cfg.extend({mode:h,padding:d}),reset:function(){c.reset.call(this);var e,t=(n=this.cfg).iv,n=n.mode;this._xformMode==this._ENC_XFORM_MODE?e=n.createEncryptor:(e=n.createDecryptor,this._minBufferSize=1),this._mode&&this._mode.__creator==e?this._mode.init(this,t&&t.words):(this._mode=e.call(n,this,t&&t.words),this._mode.__creator=e)},_doProcessBlock:function(e,t){this._mode.processBlock(e,t)},_doFinalize:function(){var e,t=this.cfg.padding;return this._xformMode==this._ENC_XFORM_MODE?(t.pad(this._data,this.blockSize),e=this._process(!0)):(e=this._process(!0),t.unpad(e)),e},blockSize:4}),l=n.CipherParams=r.extend({init:function(e){this.mixIn(e)},toString:function(e){return(e||this.formatter).stringify(this)}}),h=(e.format={}).OpenSSL={stringify:function(e){var t=e.ciphertext;return(e=(e=e.salt)?o.create([1398893684,1701076831]).concat(e).concat(t):t).toString(s)},parse:function(e){var t,n=(e=s.parse(e)).words;return 1398893684==n[0]&&1701076831==n[1]&&(t=o.create(n.slice(2,4)),n.splice(0,4),e.sigBytes-=16),l.create({ciphertext:e,salt:t})}},p=n.SerializableCipher=r.extend({cfg:r.extend({format:h}),encrypt:function(e,t,n,r){r=this.cfg.extend(r);t=(o=e.createEncryptor(n,r)).finalize(t);var o=o.cfg;return l.create({ciphertext:t,key:n,iv:o.iv,algorithm:e,mode:o.mode,padding:o.padding,blockSize:e.blockSize,formatter:r.format})},decrypt:function(e,t,n,r){return r=this.cfg.extend(r),t=this._parse(t,r.format),e.createDecryptor(n,r).finalize(t.ciphertext)},_parse:function(e,t){return\"string\"==typeof e?t.parse(e,this):e}}),d=(e.kdf={}).OpenSSL={execute:function(e,t,n,r){return r=r||o.random(8),e=a.create({keySize:t+n}).compute(e,r),n=o.create(e.words.slice(t),4*n),e.sigBytes=4*t,l.create({key:e,iv:n,salt:r})}},_=n.PasswordBasedCipher=p.extend({cfg:p.cfg.extend({kdf:d}),encrypt:function(e,t,n,r){return n=(r=this.cfg.extend(r)).kdf.execute(n,e.keySize,e.ivSize),r.iv=n.iv,(e=p.encrypt.call(this,e,t,n.key,r)).mixIn(n),e},decrypt:function(e,t,n,r){return r=this.cfg.extend(r),t=this._parse(t,r.format),n=r.kdf.execute(n,e.keySize,e.ivSize,t.salt),r.iv=n.iv,p.decrypt.call(this,e,t,n.key,r)}}))))},function(e,t,n){\"use strict\";n.r(t),n.d(t,\"ZegoExpressWebRTMEngine\",(function(){return Xe})),n.d(t,\"getReportSeq\",(function(){return g})),n.d(t,\"getSeq\",(function(){return f})),n.d(t,\"ZegoLogger\",(function(){return c.ZegoLogger})),n.d(t,\"ZegoDataReport\",(function(){return c.ZegoDataReport})),n.d(t,\"ZegoExpressWebRTM\",(function(){return Fe})),n.d(t,\"BusinessService\",(function(){return R})),n.d(t,\"NetConnection\",(function(){return N}));var r,o,i,s,a,c=n(5),u={debug:0,info:1,warn:2,error:3,report:99,disable:100};(t=r=r||{})[t.TT_NONE=0]=\"TT_NONE\",t[t.TT_PC=1]=\"TT_PC\",t[t.TT_IOS=2]=\"TT_IOS\",t[t.TT_ANDROID=3]=\"TT_ANDROID\",t[t.TT_MAC=4]=\"TT_MAC\",t[t.TT_LINUX=5]=\"TT_LINUX\",t[t.TT_WEB=6]=\"TT_WEB\",t[t.TT_MINIPROGRAM=7]=\"TT_MINIPROGRAM\",t[t.TT_UNKNOWN=32]=\"TT_UNKNOWN\",(t=o=o||{})[t.logout=0]=\"logout\",t[t.trylogin=1]=\"trylogin\",t[t.login=2]=\"login\",(t=i=i||{})[t.offline=0]=\"offline\",t[t.online=1]=\"online\",(t=s=s||{})[t.NT_NONE=0]=\"NT_NONE\",t[t.NT_LINE=1]=\"NT_LINE\",t[t.NT_WIFI=2]=\"NT_WIFI\",t[t.NT_2G=3]=\"NT_2G\",t[t.NT_3G=4]=\"NT_3G\",t[t.NT_4G=5]=\"NT_4G\",t[t.NT_UNKNOWN=32]=\"NT_UNKNOWN\",(t=a=a||{})[t.ClientType_None=0]=\"ClientType_None\",t[t.ClientType_H5=1]=\"ClientType_H5\",t[t.ClientType_SmallProgram=2]=\"ClientType_SmallProgram\",t[t.ClientType_Webrtc=3]=\"ClientType_Webrtc\";var l,h,p=\"eventStart\",d=\"eventEndWithMsgInfo\",_=\"addEventMsg\",f=function(){return l++},g=(h=l=1,function(){return h++}),m=(Object.defineProperty(y.prototype,\"id\",{get:function(){return this._id||null},set:function(e){this._id=e},enumerable:!1,configurable:!0}),Object.defineProperty(y.prototype,\"data\",{get:function(){return this._data},set:function(e){this._data=e},enumerable:!1,configurable:!0}),y.prototype.hasNext=function(){return this.next&&this.next.id},y.prototype.hasPrev=function(){return this.prev&&this.prev.id},y);function y(e,t){void 0===e&&(e=null),void 0===t&&(t=null),this.next=null,this.prev=null,this._id=e,this._data=t}b.prototype.insertBefore=function(e,t){return(t=new m(this._idCounter,t)).next=e,t.prev=e.prev,e.prev&&(e.prev.next=t),e.prev=t,++this._idCounter,++this._numNodes,t},b.prototype.addLast=function(e){return this.insertBefore(this.end,e)},b.prototype.add=function(e){return this.addLast(e)},b.prototype.getFirst=function(){return 0===this._numNodes?null:this.start.next},b.prototype.getLast=function(){return 0===this._numNodes?null:this.end.prev},b.prototype.size=function(){return this._numNodes},b.prototype.getFromFirst=function(e){var t=0,n=this.start.next;if(0<=e)for(;t<e&&null!==n;)n=n.next,++t;else n=null;if(null===n)throw\"Index out of bounds.\";return n},b.prototype.get=function(e){return 0===e?this.getFirst():e===this._numNodes-1?this.getLast():this.getFromFirst(e)},b.prototype.remove=function(e){return e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),--this._numNodes,e},b.prototype.removeFirst=function(){var e=null;return 0<this._numNodes&&this.start.next?this.remove(this.start.next):e},b.prototype.removeLast=function(){var e=null;return 0<this._numNodes&&this.end.prev?this.remove(this.end.prev):e},b.prototype.removeAll=function(){this.start.next=this.end,this.end.prev=this.start,this._numNodes=0,this._idCounter=0},b.prototype.each=function(e){for(var t=this.start;t.hasNext();)e(t=t.next)},b.prototype.find=function(e){for(var t=this.start,n=!1,r=null;t.hasNext()&&!n;)e(t=t.next)&&(r=t,n=!0);return r},b.prototype.map=function(e){for(var t=this.start,n=[];t.hasNext();)e(t=t.next)&&n.push(t);return n},b.prototype.push=function(e){return this.addLast(e)},b.prototype.unshift=function(e){0<this._numNodes?this.insertBefore(this.start.next,e):this.insertBefore(this.end,e)},b.prototype.pop=function(){return this.removeLast()},b.prototype.shift=function(){return this.removeFirst()};var v=b;function b(){this.start=new m,this.end=new m,this._idCounter=0,this._numNodes=0,this.start.next=this.end,this.start.prev=null,this.end.prev=this.start,this.end.next=null}var E,O,T,S,R,k,C=\"未引入消息模块\",w=n(13),N=(I.prototype.init=function(){var e;null!=(e=this.connection)&&e.init()},I.prototype.unInit=function(){var e;null!=(e=this.connection)&&e.unInit()},I.prototype.setAppInfo=function(e){var t;null!=(t=this.connection)&&t.setAppInfo(e)},I.prototype.setUserInfo=function(e){var t;null!=(t=this.connection)&&t.setUserInfo(e)},I.prototype.setNetAgentDefaultServers=function(e){var t;null!=(t=this.connection)&&t.setNetAgentDefaultServers(e)},I.prototype.setBackupDomains=function(e){var t;null!=(t=this.connection)&&t.setBackupDomains(e)},I.prototype.setDispatchConnectServers=function(e){var t;null!=(t=this.connection)&&t.setDispatchConnectServers(e)},I.prototype.setNetAgentSpecifiedServers=function(e){var t;null!=(t=this.connection)&&t.setNetAgentSpecifiedServers(e)},I.prototype.startHttpRequest=function(e,t,n,r,o){var i;null!=(i=this.connection)&&i.startHttpRequest(e,t,n,r,o)},I.prototype.getAppConfigByAgent=function(e,t,n){var r;return null==(r=this.connection)?void 0:r.getAppConfigByAgent(e,t,n)},I.prototype.getPCRequest=function(e,t){var n;return(null==(n=this.connection)?void 0:n.getPCRequest(e,t))||null},I.prototype.connectUa=function(){var e;null!=(e=this.connection)&&e.connectUa()},I.prototype.destroyConnect=function(){var e;null!=(e=this.connection)&&e.destroyConnect()},I.prototype.isConnect=function(){return!!this.connection&&this.connection.isConnect()},I.prototype.on=function(e,t){var n;return(null==(n=this.connection)?void 0:n.on(e,t))||!0},I.prototype.off=function(e,t){var n;return null==(n=this.connection)?void 0:n.off(e,t)},I.prototype.setLogger=function(e){var t;return null==(t=this.connection)?void 0:t.setLogger(e)},I.prototype.setAccess=function(e){var t;return null==(t=this.connection)?void 0:t.setAccess(e)},I);function I(){this.isLoad=!1,this.callBackList=[],this.connection=new w.ZegoConnectionAgent}(t=E=E||{})[t.AUTO=0]=\"AUTO\",t[t.MANUAL=1]=\"MANUAL\",(t=O=O||{})[t.EMPTY=0]=\"EMPTY\",t[t.CLOSE=1]=\"CLOSE\",(t=T=T||{})[t.Mode_UNSET=0]=\"Mode_UNSET\",t[t.MODE_ONLINE=1]=\"MODE_ONLINE\",t[t.MODE_TEST=2]=\"MODE_TEST\",t[t.MODE_ALPHA=3]=\"MODE_ALPHA\",(t=S=S||{})[t.CLOSE=0]=\"CLOSE\",t[t.TEMP=1]=\"TEMP\",t[t.TIMEOUT=2]=\"TIMEOUT\",(t=R=R||{})[t.SERVICE_UNSET=0]=\"SERVICE_UNSET\",t[t.SERVICE_MEDIAGW=1]=\"SERVICE_MEDIAGW\",t[t.SERVICE_LIVEROOM=2]=\"SERVICE_LIVEROOM\",t[t.SERVICE_MIX=3]=\"SERVICE_MIX\",t[t.SERVICE_ZEUS=4]=\"SERVICE_ZEUS\",t[t.SERVICE_ZPUSH=5]=\"SERVICE_ZPUSH\",t[t.SERVICE_L3=6]=\"SERVICE_L3\",t[t.SERVICE_TALKLINE=7]=\"SERVICE_TALKLINE\",t[t.SERVICE_EDUSUITE=8]=\"SERVICE_EDUSUITE\",t[t.SERVICE_ZIM=9]=\"SERVICE_ZIM\",t[t.SERVICE_ClOUD_SETTING=10]=\"SERVICE_ClOUD_SETTING\",t[t.SERVICE_ZEUSHB=11]=\"SERVICE_ZEUSHB\",t[t.SERVICE_USER_LOGIC=12]=\"SERVICE_USER_LOGIC\",t[t.SERVICE_UNIFYDISPATCH=13]=\"SERVICE_UNIFYDISPATCH\",t[t.SERVICE_QUALITY=14]=\"SERVICE_QUALITY\",t[t.SERVICE_SECURITY=15]=\"SERVICE_SECURITY\",t[t.SERVICE_KTVCPR=16]=\"SERVICE_KTVCPR\",t[t.SERVICE_SWITCH4LIVEROOM=17]=\"SERVICE_SWITCH4LIVEROOM\",t[t.SERVICE_WEBRTC_SIGNAL=18]=\"SERVICE_WEBRTC_SIGNAL\",t[t.SERVICE_L3_WEBRTC_SIGNAL=19]=\"SERVICE_L3_WEBRTC_SIGNAL\",t[t.SERVICE_VIDEOCPR=20]=\"SERVICE_VIDEOCPR\",t[t.SERVICE_CDN=21]=\"SERVICE_CDN\",t[t.SERVICE_CLOUDRECORD=22]=\"SERVICE_CLOUDRECORD\",t[t.SERVICE_INNER_ECHO=23]=\"SERVICE_INNER_ECHO\",t[t.SERVICE_OUTER_ECHO=24]=\"SERVICE_OUTER_ECHO\",t[t.SERVICE_LOCALHOST_ECHO=25]=\"SERVICE_LOCALHOST_ECHO\",t[t.SERVICE_ECHO=26]=\"SERVICE_ECHO\",t[t.SERVICE_DOCSERVICE=27]=\"SERVICE_DOCSERVICE\",t[t.SERVICE_AUTHSVR=28]=\"SERVICE_AUTHSVR\",(t=k=k||{}).Logining=\"LOGINING\",t.Logined=\"LOGINED\",t.LoginFailed=\"LOGIN_FAILED\",t.Reconnecting=\"RECONNECTING\",t.Reconnected=\"RECONNECTED\",t.ReconnectFailed=\"RECONNECT_FAILED\",t.Kickout=\"KICKOUT\",t.Logout=\"LOGOUT\",t.LogoutFailed=\"LOGOUT_FAILED\";var M={SERVER:{code:0,msg:\"liverooom cmd error\"},SUCCESS:{code:0,msg:\"success.\"},INIT:{code:2000000001,msg:\"init sdk wrong\"},NOT_LOGIN:{code:1000002,msg:\"not login\"},APPID_INVALID:{code:1001004,msg:\"appid invalid\"},NETWORK_BROKEN:{code:1000017,msg:\"network is broken\"},INPUT_PARAM:{code:1100001,msg:\"input parm error.\"},TIMEOUT:{code:1100002,msg:\"network timeout.\"},SOCKET_CLOSE:{code:1100003,msg:\"socket close\"},NET_SOCKET_TIMEOUT:{code:1100004,msg:\"net agent timeout\"},NET_HB_TIMEOUT:{code:1100005,msg:\"net hb timeout\"},INIT_SDK_WRONG:{code:1101e3,msg:\"init sdk wrong\"},ROOM_COUNT_EXCEED:{code:1002001,msg:\"login rooms exceeds the upper limit\"},USER_ID_NULL:{code:1002005,msg:\"user ID is empty\"},USER_ID_INVALID_CHARACTER:{code:1002006,msg:\"user ID contains illegal characters\"},USER_ID_TOO_LONG:{code:1002007,msg:\"user ID is too long\"},USER_NAME_NULL:{code:1002008,msg:\"username is empty\"},USER_NAME_TOO_LONG:{code:1002010,msg:\"username is too long\"},ROOM_ID_NULL:{code:1002011,msg:\"room ID is empty\"},ROOM_ID_INVALID_CHARACTER:{code:1002012,msg:\"room ID contains illegal characters\"},ROOM_ID_TOO_LONG:{code:1002013,msg:\"room ID is too long\"},ROOM_NOT_EXIST:{code:1002014,msg:\"room not exist\"},LOGIN_TIMEOUT:{code:1002031,msg:\"login timeout\"},ROOM_MAX_USER_COUNT:{code:1002034,msg:\"users logging into the room exceeds the maximum number\"},MULTI_ROOM_UNABLE:{code:1002036,msg:\"multi room unable\"},MULTIPLE_LOGIN_KICKOUT:{code:1002050,msg:\"kickout may be the same user ID login other\"},NETWORK_RECOVERY:{code:1002051,msg:\"network recovery\"},ROOM_RETRY_TIMEOUT:{code:1002053,msg:\"network is broken and login fail.\"},MANUAL_KICKOUT:{code:1002055,msg:\"server has sent a signal to kick out\"},REPEATEDLY_LOGIN:{code:1002056,msg:\"user repeatedly login\"},REPEATEDLY_ENTER_ROOM:{code:1002057,msg:\"user repeatedly enter room\"},ALREADY_LOGIN:{code:1002058,msg:\"user already logged in\"},ROOM_INNER_ERROR:{code:1002099,msg:\"room inner error\"},HEARTBEAT_TIMEOUT:{code:1102001,msg:\"heartbeat timeout.\"},PARSE_JSON_ERROR:{code:1102011,msg:\"parse json error.\"},LOGIN_PROCESSING:{code:1102012,msg:\"login is processing.\"},LIVEROMM_REQUEST_ERROR:{code:1102013,msg:\"liveroom request error.\"},ZPUSH_REQUEST_FAIL:{code:1102014,msg:\"zpush request fail.\"},LOGIN_STATE_WRONG:{code:1102015,msg:\"user login state is wrong.\"},TOKEN_ERROR:{code:1102016,msg:\"token error\"},DIAPATCH_ERROR:{code:1102017,msg:\"dispatch error\"},TOKEN_EXPIRED:{code:1102018,msg:\"token expired\"},SUBCMD_ERROR:{code:1102019,msg:\"subcmd error.\"},ZEGO_AUTH_ERROR:{code:1102020,msg:\"zego auth error.\"},BIZ_CHANNEL_ERROR:{code:1102021,msg:\"biz channel error.\"}},L=(P.base64encode=function(e){for(var t,n,r,o=e.length,i=0,s=\"\";i<o;){if(t=255&e.charCodeAt(i++),i==o){s=(s+=P.base64EncodeChars.charAt(t>>2))+P.base64EncodeChars.charAt((3&t)<<4)+\"==\";break}if(n=e.charCodeAt(i++),i==o){s=(s=(s+=P.base64EncodeChars.charAt(t>>2))+P.base64EncodeChars.charAt((3&t)<<4|(240&n)>>4))+P.base64EncodeChars.charAt((15&n)<<2)+\"=\";break}r=e.charCodeAt(i++),s=(s=(s=(s+=P.base64EncodeChars.charAt(t>>2))+P.base64EncodeChars.charAt((3&t)<<4|(240&n)>>4))+P.base64EncodeChars.charAt((15&n)<<2|(192&r)>>6))+P.base64EncodeChars.charAt(63&r)}return s},P.base64decode=function(e){for(var t,n,r,o,i=e.length,s=0,a=\"\";s<i;){for(;t=P.base64DecodeChars[255&e.charCodeAt(s++)],s<i&&-1==t;);if(-1==t)break;for(;n=P.base64DecodeChars[255&e.charCodeAt(s++)],s<i&&-1==n;);if(-1==n)break;a+=String.fromCharCode(t<<2|(48&n)>>4);do{if(61==(r=255&e.charCodeAt(s++)))return a}while(r=P.base64DecodeChars[r],s<i&&-1==r);if(-1==r)break;a+=String.fromCharCode((15&n)<<4|(60&r)>>2);do{if(61==(o=255&e.charCodeAt(s++)))return a}while(o=P.base64DecodeChars[o],s<i&&-1==o);if(-1==o)break;a+=String.fromCharCode((3&r)<<6|o)}return a},P.utf16to8=function(e){for(var t,n=\"\",r=e.length,o=0;o<r;o++)1<=(t=e.charCodeAt(o))&&t<=127?n+=e.charAt(o):n=2047<t?(n=(n+=String.fromCharCode(224|t>>12&15))+String.fromCharCode(128|t>>6&63))+String.fromCharCode(128|t>>0&63):(n+=String.fromCharCode(192|t>>6&31))+String.fromCharCode(128|t>>0&63);return n},P.utf8to16=function(e){for(var t,n,r,o=\"\",i=e.length,s=0;s<i;)switch((t=e.charCodeAt(s++))>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:o+=e.charAt(s-1);break;case 12:case 13:n=e.charCodeAt(s++),o+=String.fromCharCode((31&t)<<6|63&n);break;case 14:n=e.charCodeAt(s++),r=e.charCodeAt(s++),o+=String.fromCharCode((15&t)<<12|(63&n)<<6|(63&r)<<0)}return o},P.base64EncodeChars=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",P.base64DecodeChars=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,63,52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-1,-1,-1,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1],P);function P(){}t=n(3);var A=n.n(t),D=(t=n(7),n.n(t)),H=function(){return(H=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},j=(q.checkConfigParam=function(e,t,n){return e&&\"number\"==typeof e&&this.checkInteger(e)?!(!t||\"string\"!=typeof t&&!Array.isArray(t)||\"\"==t)||(n.error(\"ccp.0 server must be string or string array and not empty\"),!1):(n.error(\"ccp.0 appid must be positive integer number and not empty\"),!1)},q.checkPriConfigParam=function(e,t,n,r,o){return e&&\"number\"==typeof e&&this.checkInteger(e)?t&&\"string\"==typeof t?\"object\"!=typeof n||\"string\"!=typeof n.deviceID?(o.error(\"ccp.0 deviceID must be string and not empty\"),!1):1===r||0===r||(o.error(\"ccp.0 anType must be 0 or 1\"),!1):(o.error(\"ccp.0 dispatchServer must be string and not empty\"),!1):(o.error(\"ccp.0 appid must be positive integer number and not empty\"),!1)},q.checkIllegalCharacters=function(e){return/^([0-9a-zA-Z#!$%&()`'+-;<=.>@^_~,\\\\*])+$/.test(e)&&/^[^:/]*$/g.test(e)},q.isUrl=function(e){return!!(e.startsWith(\"rtmp://\")||e.startsWith(\"https://\")&&e.endsWith(\".flv\")||e.startsWith(\"https://\")&&e.endsWith(\".m3u8\"))},q.registerCallback=function(e,t,n){var r;t.success&&(r=t.success,n[e+\"SuccessCallback\"]=r),t.error&&(r=t.error,n[e+\"ErrorCallback\"]=r)},q.actionErrorCallback=function(e,t){return t[e+\"ErrorCallback\"]},q.actionSuccessCallback=function(e,t){return t[e+\"SuccessCallback\"]},q.logReportCallback=function(e,t,n,r){q.registerCallback(e,{success:function(e,r){for(var o=[],i=2;i<arguments.length;i++)o[i-2]=arguments[i];q.dataReportEvent(t,n,e,r,o)}},r)},q.proxyRes=function(e,t,n,r){return{interResolve:function(r){e.uploadReport(t),n(r)},interReject:function(n,o){var i;void 0===o&&(o=\"\"),(i=n.code<2e9&&1e9<n.code?q.decodeServerError(n.code,n.msg):{code:n.code,message:n.msg})&&e.addMsgInfo(t,{error:i.code,message:i.message+o}),e.uploadReport(t),r({errorCode:n.code||n.errorCode})}}},q.getServerError=function(e){var t={1:\"parse json error.\",1001:\"login is processing.\",1002:\"liveroom request error.\",1003:\"zpush connect fail.\",1004:\"zpush handshake fail.\",1005:\"zpush login fail.\",1006:\"user login state is wrong.\",1007:\"got no zpush addr\",1008:\"token error\",1009:\"dispatch error\",1010:\"token expired\",1011:\"token format error\",2002:\"biz channel error\",1e9:\"liveroom cmd error, code:\",1000002001:\"need relogin\",1000002002:\"third token auth error\",1000002003:\"token nonce type should be int64\",1000002004:\"token appid type  should be uint32\",1000002005:\"token timeout type should be int64\",1000002006:\"token user_id type should be string\",1000002007:\"token room_id type should be string\",1000002008:\"token format error\",1000002009:\"token privilege type should be map\",1000002010:\"token expire_time type should be int64\",1000002011:\"token user_id type should be string\",1000002012:\"token not exist\",1000002013:\"token update error\",1000002014:\"token not need to check\"};if(0===e)return M.SUCCESS;var n,r=H({},M.ROOM_INNER_ERROR);return r.code=e,r.msg=1e9<e?(n=t[e])?\"liveroom cmd error, code: \"+e+\", message: \"+n:t[1e9]+e:t[e]?t[e]+\" code:\"+e:\"unknown error code:\"+e,r},q.unregisterCallback=function(e,t){delete t[e+\"SuccessCallback\"],delete t[e+\"ErrorCallback\"]},q.decodeServerError=function(e,t){var n={code:-1,message:\"server error\"};return n.code=1e9<e?e-1e9+52e6:e+2002e6,t&&(n.message=t),n},q.getLiveRoomError=function(e,t){var n={1016:\"MULTI_ROOM_UNABLE\",1105:\"ROOM_MAX_USER_COUNT\",1012:\"PUBLISHER_ERROR_REPETITIVE_PUBLISH_STREAM\",2002:\"TOKEN_ERROR\",2003:\"ROOM_ERROR_LOGIN_TIMEOUT\",2010:\"TOKEN_ERROR\",5022:\"ROOM_COUNT_EXCEED\"};return t?2e5<e&&e<3e5?n[e-2e5]:e<2e5?{50116:\"TOKEN_ERROR\",50117:\"TOKEN_EXPIRED\",50118:\"TOKEN_ERROR\",50119:\"TOKEN_ERROR\",50120:\"TOKEN_ERROR\",50121:\"TOKEN_ERROR\",50122:\"TOKEN_ERROR\",50123:\"TOKEN_EXPIRED\",50124:\"TOKEN_ERROR\",50125:\"TOKEN_ERROR\",50126:\"TOKEN_ERROR\",50127:\"TOKEN_ERROR\",50128:\"TOKEN_ERROR\"}[e]||n[e]||\"ROOM_INNER_ERROR\":n[e]||\"ROOM_INNER_ERROR\":1e9<e?n[e-1e9]||\"\":{1:\"PARSE_JSON_ERROR\",1001:\"LOGIN_PROCESSING\",1002:\"LIVEROMM_REQUEST_ERROR\",1003:\"ZPUSH_REQUEST_FAIL\",1004:\"ZPUSH_REQUEST_FAIL\",1005:\"ZPUSH_REQUEST_FAIL\",1006:\"LOGIN_STATE_WRONG\",1007:\"ZPUSH_REQUEST_FAIL\",1008:\"TOKEN_ERROR\",1009:\"DIAPATCH_ERROR\",1010:\"TOKEN_EXPIRED\",1011:\"TOKEN_ERROR\",1012:\"SUBCMD_ERROR\",1101:\"ZEGO_AUTH_ERROR\",2001:\"BIZ_CHANNEL_ERROR\",2002:\"BIZ_CHANNEL_ERROR\"}[e]||\"ROOM_INNER_ERROR\"},q.getKickoutError=function(e,t){var n={code:e,message:\"kickout reason = \"+e};if(t)switch(e){case 1:n.code=63000001,n.message=\"zpush multiple login kickout\",n.name=\"MULTIPLE_LOGIN_KICKOUT\";break;case 2:n.code=63000002,n.message=\"zpush manual kickout\",n.name=\"MANUAL_KICKOUT\";break;case 4:n.code=63000005,n.message=\"zpush token expired\",n.name=\"TOKEN_EXPIRED\";break;default:n.code=e,n.message=\"kickout reason = \"+e}else switch(e){case 1:n.code=63000001,n.message=\"zpush multiple login kickout\",n.name=\"MULTIPLE_LOGIN_KICKOUT\";break;case 2:n.code=63000002,n.message=\"zpush manual kickout\",n.name=\"MANUAL_KICKOUT\";break;case 3:n.code=63000003,n.message=\"kickout reason = \"+e;break;case 4:n.code=63000004,n.message=\"zpush multiple login kickout\",n.name=\"MULTIPLE_LOGIN_KICKOUT\";break;case 5:n.code=63000005,n.message=\"zpush token expired\",n.name=\"TOKEN_EXPIRED\";break;default:n.code=e,n.message=\"kickout reason = \"+e}return n},q.dataReportEvent=function(e,t,n,r,o){switch(n){case\"eventStart\":e.eventStart(t,r);break;case\"eventEndWithMsgInfo\":e.eventEndWithMsgInfo(t,r,o[0]);break;case\"addEventMsg\":e.addEventMsg(t,r,o[0],o[1]);break;case\"addEvent\":e.addEvent(t,r);break;case\"eventEnd\":e.eventEnd(t,r);break;case\"addMsgInfo\":e.addMsgInfo(t,o[0])}},q.isKeepTryLogin=function(e){switch(e){case 1002:case 1003:return!0;default:return!1}},q.mergeUserList=function(e,t,n,r){e.debug(\"msl.0 call\");var o=[],i=[];n=n||[];for(var s=0;s<n.length;s++){for(var a=!1,c=0;c<t.length;c++)if(n[s].userID===t[c].userID){a=!0;break}a||o.push(n[s])}for(var u=0;u<t.length;u++){a=!1;for(var l=0;l<n.length;l++)if(t[u].userID===n[l].userID){a=!0;break}a||i.push(t[u])}for(t.splice(0),s=0;s<n.length;s++)t.push(t[s]);r(o,i),e.debug(\"msl.0 call success\")},q.checkInteger=function(e,t){return 0==t?\"number\"==typeof e&&e%1==0&&0<=e:\"number\"==typeof e&&e%1==0&&0<e},q.checkValidNumber=function(e,t,n){return t=t||1,n=n||1e4,\"number\"==typeof e&&e%1==0&&t<=e&&e<=n},q.generateRandumNumber=function(e){return parseInt(Math.random()*(e+1)+\"\",10)},q.uuid=function(e,t){var n,r,o=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".split(\"\"),i=[];if(t=t||o.length,e)for(n=0;n<e;n++)i[n]=o[0|Math.random()*t];else for(i[8]=i[13]=i[18]=i[23]=\"-\",i[14]=\"4\",n=0;n<36;n++)i[n]||(r=0|16*Math.random(),i[n]=o[19==n?3&r|8:r]);return i.join(\"\")},q.compareVersion=function(e,t){e=e.split(\".\"),t=t.split(\".\");for(var n=Math.max(e.length,t.length);e.length<n;)e.push(\"0\");for(;t.length<n;)t.push(\"0\");for(var r=0;r<n;r++){var o=parseInt(e[r]),i=parseInt(t[r]);if(i<o)return 1;if(o<i)return-1}return 0},q.getBrowser=function(){var e=window.navigator.userAgent,t=null!=window.ActiveXObject&&-1!=e.indexOf(\"MSIE\"),n=-1!=e.indexOf(\"Firefox\"),r=null!=window.opr,o=e.indexOf(\"Chrome\")&&window.chrome;e=-1!=e.indexOf(\"Safari\")&&-1!=e.indexOf(\"Version\");return t?\"IE\":n?\"Firefox\":r?\"Opera\":o?\"Chrome\":e?\"Safari\":\"Unkown\"},q.isTestEnv=function(e){return-1!=e.indexOf(\"wss://wssliveroom-test.zego.im/ws\")||-1!=e.indexOf(\"wss://test2-wsliveroom-api.zego.im/ws\")||-1!=e.indexOf(\"wss://wsliveroom-test.zegocloud.com/ws\")||-1!=e.indexOf(\"wss://wsliveroom-test.zego.im/ws\")||-1!=e.indexOf(\"wss://webliveroom-test.zego.im/ws\")||-1!=e.indexOf(\"wss://webliveroom-test-bak.zego.im/ws\")||-1!=e.indexOf(\"wss://webliveroom-hk-test.zegocloud.com/ws\")||-1!=e.indexOf(\"wss://webliveroom-hk-test-bak.zegocloud.com/ws\")},q.getLogLevel=function(e){return u[e]},q.getUint64=function(e,t,n){var r=n.getUint32(e,t);n=n.getUint32(e+4,t),e=t?r+Math.pow(2,32)*n:Math.pow(2,32)*r+n;return Number.isSafeInteger(e)||console.warn(e,\"exceeds MAX_SAFE_INTEGER. Precision may be lost\"),e},q.decodeTokenExpire=function(e){try{var t,n=Uint8Array.from(L.base64decode(e),(function(e){return e.charCodeAt(0)})),r=new DataView(n.buffer);return 0<(t=\"function\"==typeof r.getBigInt64?r.getBigUint64(0):q.getUint64(0,!1,r))?Number(t):Number(r.getBigUint64(0,!0))}catch(e){console.error(\"token error\")}return-1},q.bin2hex=function(e){for(var t,n=\"\",r=0,o=(e+=\"\").length;r<o;r++)n+=(t=e.charCodeAt(r).toString(16)).length<2?\"0\"+t:t;return n},q.getCanvasFingerprint=function(e){var t=document.createElement(\"canvas\"),n=((n=t.getContext(\"2d\")).textBaseline=\"top\",n.font=\"14px 'Arial'\",n.fillStyle=\"#f60\",n.fillRect(125,1,62,20),n.fillStyle=\"#069\",n.fillText(e,2,15),n.fillStyle=\"rgba(102, 204, 0, 0.7)\",n.fillText(e,4,17),t.toDataURL().replace(\"data:image/png;base64,\",\"\"));e=atob(n);return this.bin2hex(e.slice(-16,-12))},q.generateUUID=function(e){var t,n;return 0===(e=void 0===e?0:e)?n=localStorage.getItem(\"z_deviceID\"):wx.getStorageSync(\"z_deviceID\"),n||(t=(new Date).getTime(),n=\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g,(function(e){var n=(t+16*Math.random())%16|0;return t=Math.floor(t/16),(\"x\"==e?n:3&n|8).toString(36)})),0===e?(e=this.getCanvasFingerprint(\"hello, zego\")+n.slice(8),localStorage.setItem(\"z_deviceID\",e)):wx.setStorageSync(\"z_deviceID\",n),n)},q.getNetType=function(){var e=navigator.connection||navigator.mozConnection||navigator.webkitConnection;return((null==e?void 0:e.effectiveType)||(null==e?void 0:e.type)||\"unknwon\").toUpperCase()},q.getNetTypeNum=function(){var e;return e=-1<(e=((null==(e=navigator.connection||navigator.mozConnection||navigator.webkitConnection)?void 0:e.effectiveType)||(null==e?void 0:e.type)||\"unknwon\").toUpperCase()).indexOf(\"4G\")?s.NT_4G:-1<e.indexOf(\"2G\")?s.NT_2G:-1<e.indexOf(\"3G\")?s.NT_3G:-1<e.indexOf(\"WIFI\")?s.NT_WIFI:-1<e.indexOf(\"LINE\")?s.NT_LINE:-1<e.indexOf(\"NONE\")?s.NT_NONE:s.NT_UNKNOWN},q.encryptStores=function(e,t){return A.a.encrypt(e,t).toString()},q.decryptStores=function(e,t){try{return A.a.decrypt(e,t).toString(D.a)}catch(e){return\"\"}},q);function q(){}var U,B={product:\"Web_SDK\",URL:[\"https://cloud-setting-api.zego.im/cloud-setting/get\",\"https://cloud-setting-api.zegocloud.com/cloud-setting/get\"],ONLINE:!1},x=\"init\",G=\"0c9e6e0f8c0a8f4e\",V=\"z_net_access_servers\",z=\"z_appconfig\",F={domains:[\"accesshub-wss.zego.im\",\"accesshub-wss.coolzcloud.com\",\"accesshub-wss.zegocloud.com\"],primaryDomains:[\"zego.im\",\"coolzcloud.com\",\"zegocloud.com\"],mode:\"online\",modeNo:T.MODE_ONLINE,sdkType:3,connectVer:4,pcEstablishTimeout:15,scheme:\"wss\",location:\"accesshub\",wssMessageType:1};W.prototype.init=function(e,t,n,r){this.invalid(),this.stopMaxTime(),this.isOverTime=!1,\"number\"==typeof e&&e<3600&&(this.RETRY_MAX_TIME=e),\"number\"==typeof t&&(this.RETRY_START_TIME_INTERVAL=t),\"number\"==typeof n&&(this.RETRY_CONTINUE_COUNT=n),\"number\"==typeof r&&(this.RETRY_MAX_TIME_INTERVAL=r)},W.prototype.invalid=function(){this.retryTimer&&clearTimeout(this.retryTimer),this.retryTimer=null,this.retryStartTime=0,this.retryActiveCount=1},t=W;function W(e,t){this.logger=e,this.stateCenter=t,this.RETRY_MAX_TIME=300,this.RETRY_START_TIME_INTERVAL=4,this.RETRY_CONTINUE_COUNT=2,this.RETRY_MAX_TIME_INTERVAL=32,this.retryTimer=null,this.maxTimer=null,this.retryStartTime=0,this.retryActiveCount=1,this.isOverTime=!1}(Te=U=U||{}).RTM_CONSTRUCTOR=\"zm.0\",Te.RTM_BIND_WINDOW_LISTENER=\"zm.wl\",Te.RTM_SET_LOG_CONFIG=\"zm.slf\",Te.RTM_SET_DEBUG_VERBOSE=\"zm.sdv\",Te.RTM_LOGIN_ROOM=\"zm.lg\",Te.RTM_LOGOUT_ROOM=\"zm.lo\",Te.RTM_GET_SETTING_UNIFY=\"zm.gsu\",Te.RTM_FETCH_APP_CONFIG=\"zm.fac\",Te.RTM_SET_ACCESS=\"zm.sa\",Te.RTM_CREATENETAGENT=\"zm.cna\",Te.RTM_GETSTOREAPPCONFIG=\"zm.gsac\",Te.LIVEROOMMODULES_BINDROOMHANDLER=\"zm.lrm.brh\",Te.RTM_SET_CLOUD_SETTING_URLS=\"zm.scsu\",Te.RTM_ON=\"zm.on\",Te.RTM_OFF=\"zm.off\",Te.RTM_RENEWTOKEN=\"zm.rntk\",Te.RTM_RESETTOKENTIMER=\"zm.rstt\",Te.RTM_ENABLE_MULTI_ROOM=\"zm.emr\",Te.RTM_SEND_PB=\"zm.spb\",Te.RTM_GET_HEADER=\"zm.gh\",Te.ROOM_LOGIN_ROOM=\"zm.rm.lg\",Te.ROOM_TRY_LOGIN=\"zm.rm.tl\",Te.ROOM_OPEN_HANDLER=\"zm.rm.op\",Te.ROOM_HANDLE_LOGINRSP=\"zm.rm.lgr\",Te.ROOM_CLOSEHANDLER=\"zm.rm.clh\",Te.ROOM_LOGOUT=\"zm.rm.lo\",Te.ROOM_RESET_ROOM=\"zm.rm.rr\",Te.ROOM_DISCONNECT=\"zm.rm.dcn\",Te.ROOM_KICK_OUT=\"zm.rm.kco\",Te.ROOM_STATUS_CALLBACK=\"zm.rm.scb\",Te.ROOM_RESETTOKEN_TIMER=\"zm.rm.rst\",Te.ROOM_HANDLE_Hb_LOGOUT=\"zm.hhl\",Te.HEARTBEAT_START=\"zm.hb.st\",Te.HEARTBEAT_HEARTBEAT_RSP=\"zm.hb.rsp\",Te.HEARTBEAT_RESET=\"zm.hb.rst\",Te.SERVICE_START_CHECK=\"zm.sc.0\",Te.SERVICE_STOP_CHECK=\"zm.sc.1\",Te.SERVICE_PUSH=\"zm.sv.ps\",Te.SERVICE_SEND=\"zm.sv.sd\",Te.RETRYROOMHANDLER_HANDLE_LOGIN_FINISH=\"zm.rrh.hlf\",Te.RETRYROOMHANDLER_HANDLE_ERROR=\"zm.rrh.he\",Te.USER_LOGIN_RSP=\"zm.us.lgr\",Te.USER_FETCH_USER=\"zm.us.ftu\",Te.USER_FETCH_USER_RSP=\"zm.us.urp\",Te.USER_USER_PUSH=\"zm.us.uph\",Te.USER_MERGE_SEQ=\"zm.us.mg\",Te.USER_MERGE_TIMEOUT=\"zm.us.mto\",Te.USER_MERGE=\"zm.us.mg\",Te.USER_HB_PATCH=\"zm.us.pt\",Te.STATE_ACTION=\"zm.st.at\",Te.ON_LISTENER=\"ON_LISTENER\",Te.LIVEROOMHANDLER_SENDMESSAGE=\"zm.lrh.sm\",Te.LIVEROOMHANDLER_HANDLEPUSH=\"zm.lrh.hp\",Te.LIVEROOMHANDLER_HANDLESWITCHPUSH=\"zm.lrh.hsp\",Te.LIVEROOMHANDLER_PUSHUSERUPDATE=\"zm.lrh.puu\",Te.LIVEROOMHANDLER_PUSHKICKOUT=\"zm.lrh.pk\",Te.LIVEROOMHANDLER_GETSTREAMLIST=\"zm.lrh.gs\",Te.LIVEROOMHANDLER_LOGIN=\"zm.lrh.lgi\",Te.LIVEROOMHANDLER_FETCH_USER_LIST=\"zm.lrh.ful\",Te.LIVEROOMHANDLER_LOGOUT=\"zm.lrh.lgo\",Te.LIVEROOMHANDLER_SENDSTREAMUPDATE=\"zm.lrh.sru\",Te.LIVEROOMHANDLER_RENEW_TOKEN=\"zm.lrh.rt\",Te.LIVEROOMHANDLER_SENDSIGNALCMD=\"zm.lrh.ssc\",Te.LIVEROOMHANDLER_SENDBIGROOMMESSAGE=\"zm.lrh.sbrm\",Te.LIVEROOMHANDLER_SENDCUSTOMCOMMAND=\"zm.lrh.scc\",Te.LIVEROOMHANDLER_FETCHRELIABLEMESSAGE=\"zm.lrh.frm\",Te.LIVEROOMHANDLER_SENDRELIABLEMESSAGE=\"zm.lrh.srm.0\",Te.LIVEROOMHANDLER_SENDROOMMSG=\"zm.lrh.srm.1\",Te.LIVEROOMHANDLER_HANDLEDISCONNECTED=\"zm.lrh.hd\",Te.LIVEROOMHANDLER_HANDLEBROKEN=\"zm.lrh.hb\",Te.LIVEROOMHANDLER_HANDLECONNECTED=\"zm.lrh.hc\",Te.LIVEROOMHANDLER_RESET=\"zm.lrh.r.0\",Z=function(e,t){return(Z=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Class extends value \"+String(t)+\" is not a constructor or null\");function n(){this.constructor=e}Z(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}(J,Y=t),J.prototype.renewLocalToken=function(e,t){this.token=e,this.room.token=this.token;var n=(new Date).getTime(),r=void 0;t&&\"number\"==typeof t?r=1e3*t:[\"03\",\"04\"].includes(e.substring(0,2))&&(r=1e3*j.decodeTokenExpire(e.substring(2))-n),r&&this.roomHandler.resetTokenTimer(r-this.stateCenter.local_time_deviation),this.stateCenter.actionListener(\"_tokenRenewed\",e,this.room.roomID)},J.prototype.initRoom=function(e,t,n,r,o,i,s){this.roomHandler=e,this.roomID=t,this.renewLocalToken(n),this.user=r,this.server=o,this.serverBak=i||o,this.config=s},J.prototype.active=function(e){var t,n=this;this.logger.info(U.ROOM_LOGIN_ROOM+\" retry call\"),this.roomHandler.setRunState(o.trylogin),this.room.isMulti&&(null==(t=this.stateCenter.roomModulesList.find((function(e){return!e.isMulti})))?void 0:t.runState)!==o.login?this.logger.info(U.ROOM_LOGIN_ROOM+\" service is disconnected, multi room stop retry\"):this.stateCenter.networkState==i.offline?this.logger.info(U.ROOM_LOGIN_ROOM+\" network is broken, stop retry\"):this.retryTimer?this.logger.info(U.ROOM_LOGIN_ROOM+\" has actived, ignore\"):this.isOverTime?this.logger.info(U.ROOM_LOGIN_ROOM+\" retry over time, stop retry\"):(1==this.retryActiveCount?this.retryActiveInterval=Math.floor(Math.random()*(1-this.RETRY_START_TIME_INTERVAL)+this.RETRY_START_TIME_INTERVAL):(t=Math.pow(2,Math.round(this.retryActiveCount/this.RETRY_CONTINUE_COUNT+1)),this.retryActiveInterval=t>this.RETRY_MAX_TIME_INTERVAL?this.RETRY_MAX_TIME_INTERVAL:t),this.retryTimer=setTimeout((function(){n.roomHandler.login(n.retryActiveCount%2==1?n.server:n.serverBak,n.roomID,n.token,n.user,n.config,(function(e){n.handleLoginFinish(e)}),(function(e,t){n.handleLoginFinish(!1,e,t)})),n.retryTimer&&clearTimeout(n.retryTimer),n.retryTimer=null,n.retryActiveCount++}),e?0:1e3*this.retryActiveInterval))},J.prototype.startMaxTime=function(){var e=this;this.maxTimer||(this.maxTimer=setTimeout((function(){e.logger.info(U.ROOM_LOGIN_ROOM+\" over max time \".concat(e.RETRY_MAX_TIME,\"s, stop retry\")),e.isOverTime=!0,e.roomHandler.resetRoom(),e.stopMaxTime(),e.invalid(),e.onactive(!1,M.LOGIN_TIMEOUT),e.loginRoomCallback.fail&&(e.loginRoomCallback.fail(M.LOGIN_TIMEOUT),e.roomHandler.disconnectedHandle(M.LOGIN_TIMEOUT),e.resetCallBack())}),1e3*this.RETRY_MAX_TIME))},J.prototype.stopMaxTime=function(){this.maxTimer&&clearTimeout(this.maxTimer),this.maxTimer=null},J.prototype.onactive=function(e,t){},J.prototype.handleError=function(e,t){if(this.RETRY_MAX_TIME<3)return!1;if(t){t=void 0;var n=void 0,r=void 0,i=(this.stateCenter.useNetAgent?(t=[\"202002\",\"205030\",\"205035\",\"50116\",\"50117\",\"50118\",\"50119\",\"50120\",\"50121\",\"50122\",\"50123\",\"50124\",\"50125\",\"50126\",\"50127\",\"50128\"],n=[\"40001\",\"40100\"],r=[\"201002\",\"30019\"]):(t=[\"1000002002\",\"1000005030\",\"1000005035\",\"1010\",\"1011\",\"1013\",\"1014\",\"1015\",\"1016\",\"1017\",\"1018\",\"1019\",\"1020\",\"1021\",\"1023\"],n=[\"1100040001\",\"1100040100\"]),e.code+\"\");if(this.stateCenter.useNetAgent){if(10015===e.code)return this.room.retryConnect(),!0;if(40001<=e.code&&e.code<=40100||50200<=e.code&&e.code<=50299||null!=r&&r.includes(i))return this.room.resetSessionInfo(),!0}return!t.includes(i)&&(!!n.includes(i)||this.room.lastRunState==o.login&&(this.logger.warn(U.RETRYROOMHANDLER_HANDLE_ERROR+\" reset\"),this.room.sessionID=\"0\",this.invalid(),!0))}return!0},J.prototype.setLoginRoomCallback=function(e,t){this.loginRoomCallback.success=e,this.loginRoomCallback.fail=t},J.prototype.loginFail=function(e){this.roomHandler.resetRoom(),this.stopMaxTime(),this.invalid(),this.onactive(!1,e),this.loginRoomCallback.fail&&(this.loginRoomCallback.fail(e),this.roomHandler.disconnectedHandle(e),this.resetCallBack())},J.prototype.handleLoginFinish=function(e,t,n){this.logger.info(U.RETRYROOMHANDLER_HANDLE_LOGIN_FINISH+\" \"+e+\" \"+JSON.stringify(t)),t?this.handleError(t,n)?(this.maxTimer||this.startMaxTime(),this.active()):(this.roomHandler.resetRoom(),this.stopMaxTime(),this.invalid(),this.onactive(e,t),this.loginRoomCallback.fail&&(this.loginRoomCallback.fail(t),this.roomHandler.disconnectedHandle(t),this.resetCallBack())):(this.stopMaxTime(),this.invalid(),this.onactive(e,{code:0,msg:\"\"}),this.loginRoomCallback.success&&(this.loginRoomCallback.success(e),this.resetCallBack()))},J.prototype.resetCallBack=function(){this.loginRoomCallback.success=void 0,this.loginRoomCallback.fail=void 0};var Z,Y,K,X=J;function J(e,t,n){var r=Y.call(this,e,t)||this;return r.logger=e,r.stateCenter=t,r.room=n,r.loginRoomCallback={},r}(Te=K=K||{}).NOT_EMPTY=\"NOT_EMPTY\",Te.ILLEGAL_CHARACTERS=\"ILLEGAL_CHARACTERS\",Te.TYPE_STRING=\"TYPE_STRING\",Te.TYPE_INTEGER=\"TYPE_INTEGER\",Te.TYPE_OBJECT=\"TYPE_OBJECT\",Te.MAX_LENGTH_10=\"MAX_LENGTH_10\",Te.MAX_LENGTH_64=\"MAX_LENGTH_64\",Te.MAX_LENGTH_100=\"MAX_LENGTH_100\",Te.MAX_LENGTH_128=\"MAX_LENGTH_128\",Te.MAX_LENGTH_256=\"MAX_LENGTH_256\",Te.MAX_LENGTH_1024=\"MAX_LENGTH_1024\";var Q={error:{code:0,msg:\"suc\"}},$={NOT_EMPTY:function(e,t,n,r,o){return void 0===t||\"\"===t||null===t?(r.error(\"\".concat(n,\" \").concat(e,\" is empty\")),o):Q},ILLEGAL_CHARACTERS:function(e,t,n,r,o){return j.checkIllegalCharacters(t)?Q:(r.error(\"\".concat(n,\" \").concat(e,\" contains illegal characters\")),o)},TYPE_STRING:function(e,t,n,r,o){return\"string\"!=typeof t?(r.error(\"\".concat(n,\" \").concat(e,\" must be string\")),o):Q},TYPE_INTEGER:function(e,t,n,r,o){return j.checkInteger(t,!1)?Q:(r.error(\"\".concat(n,\" \").concat(e,\"  must be integer number\")),o)},TYPE_OBJECT:function(e,t,n,r,o){return t&&\"object\"==typeof t?Q:(r.error(\"\".concat(n,\" \").concat(e,\"  must be object\")),o)},MAX_LENGTH_10:function(e,t,n,r,o){return 10<t.length?(r.error(\"\".concat(n,\" \").concat(e,\" is too long\")),o):Q},MAX_LENGTH_64:function(e,t,n,r,o){return 64<t.length?(r.error(\"\".concat(n,\" \").concat(e,\" is too long\")),o):Q},MAX_LENGTH_100:function(e,t,n,r,o){return 100<t.length?(r.error(\"\".concat(n,\" \").concat(e,\" is too long\")),o):Q},MAX_LENGTH_128:function(e,t,n,r,o){return 128<t.length?(r.error(\"\".concat(n,\" \").concat(e,\" is too long\")),o):Q},MAX_LENGTH_256:function(e,t,n,r,o){return 256<t.length?(r.error(\"\".concat(n,\" \").concat(e,\" is too long\")),o):Q},MAX_LENGTH_1024:function(e,t,n,r,o){return 1024<t.length?(r.error(\"\".concat(n,\" \").concat(e,\" is too long\")),o):Q}};function ee(e){return e}function te(e){return e}var ne={kZegoTaskInitSetting:{event:\"/sdk/init\",error:{kInvalidParamError:M.INPUT_PARAM},system_info:navigator?navigator.appVersion:\"\"},kZegoTaskSetDebug:{event:\"/sdk/set_debug\",debug:ee},kZegoTaskSetLog:{event:\"/sdk/set_log_config\",error:{kInvalidParamError:M.INPUT_PARAM},log_level:function(e){return e},remote_log_level:ee,log_url:ee},kZegoTaskLoginRoom:{event:\"/sdk/login\",user_update:ee,max_member_count:ee,message:ee,token:ee,use_na:ee,error:{ROOM_ID_NULL:M.ROOM_ID_NULL,INPUT_PARAM:M.INPUT_PARAM,ROOM_ID_TOO_LONG:M.ROOM_ID_TOO_LONG,ROOM_ID_INVALID_CHARACTER:M.ROOM_ID_INVALID_CHARACTER,USER_ID_NULL:M.USER_ID_NULL,USER_ID_TOO_LONG:M.USER_ID_TOO_LONG,USER_ID_INVALID_CHARACTER:M.USER_ID_INVALID_CHARACTER,USER_NAME_NULL:M.USER_NAME_NULL,USER_NAME_TOO_LONG:M.USER_NAME_TOO_LONG,REPEATEDLY_LOGIN:M.REPEATEDLY_LOGIN,LOGIN_TIMEOUT:M.LOGIN_TIMEOUT,INNER_ERROR:M.ROOM_INNER_ERROR,NETWORK_BROKEN:M.NETWORK_BROKEN},subEvent:{create_socket:{event:\"create_socket\",server:ee,try_cnt:ee},liveroom_login:{event:\"liveroom_login\",server:ee,respond_info:ee}}},kZegoTaskReNewToken:{event:\"/sdk/reNewToken\",error:{INPUT_PARAM:M.INPUT_PARAM,NOT_LOGIN:M.NOT_LOGIN}},kZegoTaskLogoutRoom:{event:\"/sdk/logout\",error:{INPUT_PARAM:M.INPUT_PARAM,ROOM_NOT_EXIST:M.ROOM_NOT_EXIST}},kZegoTaskReLoginRoom:{event:\"/sdk/relogin\",error:{ROOM_ID_NULL:M.ROOM_ID_NULL,ROOM_DISCONNECT:M.NETWORK_BROKEN},subEvent:{create_socket:{event:\"create_socket\",server:ee,try_cnt:ee},liveroom_login:{event:\"liveroom_login\",server:ee,respond_info:ee}}},kZegoTaskKickout:{event:\"/sdk/kickout\",user_id:ee,error:{}},kZegoTaskRoomKickout:{event:\"/sdk/room_kickout\",user_id:ee,room_id:ee,message:ee},kZegoTaskLiveRoomHB:{event:\"/liveroom/hb\",room_sid:ee,error:{NOT_LOGIN:M.NOT_LOGIN,HB_TIMEOUT:M.TIMEOUT}},kZegoTaskLiveRoomGetUserUpdateInfo:{event:\"/liveroom/get_user_update_info\",user_update_type:ee},kZegoListener:{event:\"/sdk/listener\"},kZegoEnableMultiRoom:{event:\"sdk/enable_multi_room\",error:{kInvalidParamError:M.INPUT_PARAM,kAlreadyLoginError:M.ALREADY_LOGIN}},kZegoTaskCloudSettingCache:{event:\"/cloud_setting/cache\"},kZegoTaskCloudSettingRefresh:{event:\"/cloud_setting/refresh\"},kZegoTaskCloudSettingRequest:{event:\"/cloud_setting/request\"},kZegoConnConnect:{event:\"/zegoconn/connect\",request_count:te,svr_env:ee,server_list:ee},kZegoConnDisConnect:{event:\"/zegoconn/disconnect\",server:ee},kZegoConnDispatch:{event:\"/zegoconn/auto_dispatch\",trigger_reason:ee,domain_list:function(e){return e}},kZegoRequest:{event:\"/zegoconn/request\",na_req_location:ee},kZegoSDKConfigInit:{event:\"/sdk_config/init\",trigger_reason:ee},kZegoSDKProxyConnect:{event:\"/zegoconn/proxy_connect\",proxy_link_sources:te,recv_time:te}},re=(Object.defineProperty(oe.prototype,\"debug\",{get:function(){return this._debug},set:function(e){this._debug=e,c.LoggerStateCenter.getInstance().debug=e},enumerable:!1,configurable:!0}),Object.defineProperty(oe.prototype,\"testEnvironment\",{get:function(){return this._testEnvironment},set:function(e){this._testEnvironment=e,c.LoggerStateCenter.getInstance().testEnvironment=e},enumerable:!1,configurable:!0}),Object.defineProperty(oe.prototype,\"ENV\",{get:function(){return this._env},set:function(e){this._env=e,c.LoggerStateCenter.getInstance().ENV=e},enumerable:!1,configurable:!0}),Object.defineProperty(oe.prototype,\"roomid\",{get:function(){return this.roomModulesList[0]?this.roomModulesList[0].roomID:\"\"},enumerable:!1,configurable:!0}),Object.defineProperty(oe.prototype,\"serverTimeOffset\",{get:function(){return this.roomModulesList[0]?this.roomModulesList[0].messageHandler.serverTimeOffset:0},enumerable:!1,configurable:!0}),oe.prototype.getRequestId=function(){return this.idName+\"-\"+f()},oe.prototype.actionListener=function(e){for(var t,n=this,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];this.listenerList[e]&&(t=g(),this.dataReport.newReport(t,ne.kZegoListener.event),this.dataReport.addMsgInfo(t,{listener:e,params:r}),this.dataReport.uploadReport(t)),[\"roomStateChanged\",\"tokenWillExpire\"].includes(e)&&this.logger.info(\"zm.al \".concat(e,\" \").concat(JSON.stringify(r))),this.listenerList[e]&&this.listenerList[e].forEach((function(t){try{t.apply(void 0,r)}catch(t){n.logger.error(U.STATE_ACTION+\" \",e,\" \",JSON.stringify(t))}}))},oe.prototype.onListener=function(e,t){return this.listenerList[e]?\"function\"!=typeof t?(this.logger.error(U.ON_LISTENER+\" listener callBack must be funciton\"),!1):(-1==this.listenerList[e].indexOf(t)&&this.listenerList[e].push(t),!0):(this.logger.error(U.ON_LISTENER+\" event \"+e+\" no found\"),!1)},Object.defineProperty(oe.prototype,\"sdKVersion\",{get:function(){return this._sdkVersion},set:function(e){this._sdkVersion=e},enumerable:!1,configurable:!0}),oe);function oe(e,t){this.logger=e,this.dataReport=t,this._debug=!1,this.appConfigFetched=!1,this.requestList={},this.mode=T.MODE_ONLINE,this.connectState=\"connected\",this._testEnvironment=!1,this._env=0,this.type=\"PUBLIC\",this.debugCustom=!1,this.configOK=!1,this.role=2,this.relateService=[],this.maxMemberCount=0,this.roomCreateFlag=1,this.local_time_deviation=0,this.callbackList={},this.listenerList={roomUserUpdate:[],roomOnlineUserCountUpdate:[],getAnchorInfo:[],_getAnchorInfo:[],IMRecvCustomCommand:[],IMRecvBroadcastMessage:[],recvReliableMessage:[],roomExtraInfoUpdate:[],IMRecvBarrageMessage:[],recvJoinLiveRequest:[],recvInviteJoinLiveRequest:[],recvEndJoinLiveCommand:[],roomLoginResponse:[],_roomLogin:[],_appConfigRsp:[],_connectChanged:[],HBResponse:[],roomStateUpdate:[],_roomStateUpdate:[],_getTotalUserList:[],_userStateUpdate:[],_recvBigRoomMessage:[],_recvRoomMsg:[],_kickout:[],tokenWillExpire:[],_tokenExpired:[],roomStateChanged:[],hallStateUpdate:[],_hallStateUpdate:[],roomTokenWillExpire:[],_tokenRenewed:[],_protobufResponse:[],_cloudSettingNotify:[],_settingCanFetch:[]},this.reportList={},this.reportSeqList={login:0,relogin:0},this.networkState=i.offline,this.roomRetryTime=300,this.roomModulesList=[],this.isMultiRoom=!1,this.setMultiRoom=!1,this.protoFormat=\"json\",this.settingFetched=!1,this.useNetAgent=!0,this.netHasSet=!1,this.configRoomAuth=!1,this.configCheckToken=!1,this._sdkVersion=\"unknown\",this.mode=F.modeNo}se.prototype.init=function(e){var t=this,n=e.body.hearbeat_interval<3e3?3e3:e.body.hearbeat_interval;this.tryHeartbeatCount=0,this.heartbeatTimer&&clearTimeout(this.heartbeatTimer),this.loginHeartbeatTimer=setTimeout((function(){t.start(n)}),n),this.initCount++},se.prototype.start=function(e){var t=this,n=(this.logger.info(U.HEARTBEAT_START+\" call\"),g());if(this.dataReport.newReport(n,ne.kZegoTaskLiveRoomHB.event),this.dataReport.addMsgInfo(n,{room_sid:ne.kZegoTaskLiveRoomHB.room_sid(this.room.sessionID)}),!this.room.isLogin())return this.logger.error(U.HEARTBEAT_START+\" state error\"),this.dataReport.addMsgInfo(n,{error:ne.kZegoTaskLiveRoomHB.error.NOT_LOGIN.code,message:ne.kZegoTaskLiveRoomHB.error.NOT_LOGIN.msg}),void this.dataReport.uploadReport(n);if(3<++this.tryHeartbeatCount)return this.logger.error(U.HEARTBEAT_START+\" come to try limit\"),this.dataReport.addMsgInfo(n,{error:ne.kZegoTaskLiveRoomHB.error.HB_TIMEOUT.code,message:ne.kZegoTaskLiveRoomHB.error.HB_TIMEOUT.msg}),this.dataReport.uploadReport(n),void this.hbLogout(M.HEARTBEAT_TIMEOUT);function r(e,r){var o=e.body&&e.body.err_code;e.header&&e.body?0!==o&&(o=j.decodeServerError(e.body.err_code||e.body.code,e.body.err_message||e.body.message),t.dataReport.addMsgInfo(n,{error:o.code,message:o.message+e.body.err_code})):t.dataReport.addMsgInfo(n,{error:(0<e.code?e:M.ROOM_INNER_ERROR).code,message:e.msg||M.ROOM_INNER_ERROR}),t.dataReport.uploadReport(n),t.handleHeartbeatRsp(e,r)}(this.stateCenter.useNetAgent?this.liveRoomHandler:this.service).heartBeat(r,r,this.room),this.heartbeatInterval=e,e=this.heartbeatInterval,2<=this.initCount?(e=Math.round(Math.random()*(this.heartbeatInterval+1)),this.initCount=1):e=this.heartbeatInterval,this.heartbeatTimer=setTimeout((function(){t.start(t.heartbeatInterval)}),e),this.logger.info(U.HEARTBEAT_START+\" call success\")},se.prototype.handleHeartbeatRsp=function(e,t){return e.body&&e.body.err_code&&0!==e.body.err_code?(this.logger.error(U.HEARTBEAT_HEARTBEAT_RSP+\" disconnect, server error=\",e.body.err_code),1000000152==e.body.err_code?void this.hbLogout(M.HEARTBEAT_TIMEOUT):void this.hbLogout(j.getServerError(e.body.err_code))):e.header&&e.body?((this.tryHeartbeatCount=0)!==e.body.hearbeat_interval&&(this.heartbeatInterval=e.body.hearbeat_interval,this.heartbeatInterval<3e3&&(this.heartbeatInterval=3e3)),this.heartbeatRspNotiFy(e),void this.logger.info(U.HEARTBEAT_HEARTBEAT_RSP+\" call success\")):(this.logger.error(U.HEARTBEAT_HEARTBEAT_RSP+\" disconnect, error=\",JSON.stringify(e)+\", seq = \"+t),void this.hbLogout(e))},se.prototype.heartbeatRspNotiFy=function(e){},se.prototype.hbLogout=function(e){},se.prototype.resetHeartbeat=function(){clearTimeout(this.heartbeatTimer),this.heartbeatTimer=null,clearTimeout(this.loginHeartbeatTimer),this.loginHeartbeatTimer=null,this.tryHeartbeatCount=0,this.initCount=0,this.logger.info(U.HEARTBEAT_RESET+\" call success\")};var ie=se;function se(e,t,n,r,o,i){this.logger=e,this.stateCenter=t,this.dataReport=n,this.service=r,this.liveRoomHandler=o,this.room=i,this.tryHeartbeatCount=0,this.heartbeatTimer=null,this.loginHeartbeatTimer=null,this.initCount=0}ce.prototype.resetTokenTimer=function(e){var t=this;this.logger.info(U.ROOM_RESETTOKEN_TIMER+\"  call: \"+(e=2147483647<(e=(e-=3e4)<0?0:e)?2147483647:e)),this.tokenTimer&&clearTimeout(this.tokenTimer),this.tokenTimer=setTimeout((function(){t.stateCenter.actionListener(\"tokenWillExpire\",t.room.roomID),t.stateCenter.actionListener(\"roomTokenWillExpire\",t.room.roomID)}),e)},ce.prototype.stopTokenTimer=function(){this.tokenTimer&&clearTimeout(this.tokenTimer),this.tokenTimer=null},ce.prototype.setRunState=function(e){this.room.runState!==e&&(this.room.lastRunState=this.room.runState,this.room.runState=e)},ce.prototype.resetTryLogin=function(){this.tryLoginTimer&&clearTimeout(this.tryLoginTimer),this.tryLoginTimer=null},ce.prototype.resetRoom=function(e){var t=this;(e=(this.logger.info(U.ROOM_RESET_ROOM+\" call\"),1<this.stateCenter.roomModulesList.length&&!e&&(this.room.isMulti=!0),this.resetTryLogin(),\"0\"===this.room.sessionID||this.room.runState===o.logout||this.room.isDisConnect()||(this.stateCenter.useNetAgent?this.liveRoomHandler:this.service).logout(this.room,e=function(e){t.handleLogoutRsp(e,!t.room.isMulti)},e),this.setRunState(o.logout),this.room.sessionID=\"0\",this.room.roomSessionID=\"0\",this.room.isMulti||(this.stateCenter.userid=\"\",this.logger.setSessionInfo(this.stateCenter.appid,this.room.roomID,this.room.sessionID,this.stateCenter.idName,this.stateCenter.nickName,this.stateCenter.sdKVersion),this.stateCenter.useNetAgent?null!=(e=this.liveRoomHandler)&&e.reset():this.service.closeSocket()),this.resetRoomCallBack(),this.stateCenter.roomModulesList=this.stateCenter.roomModulesList.filter((function(e){return e!==t.room})),this.stateCenter.roomModulesList[0]))&&(e.isMulti=!1,e.runState!==o.login&&e.roomTryHandler&&(e.roomTryHandler.startMaxTime(),e.roomTryHandler.active())),this.logger.info(U.ROOM_RESET_ROOM+\" call success\")},ce.prototype.resetRoomCallBack=function(){},ce.prototype.loginSuccessCallBack=function(e,t){},ce.prototype.handlePushKickout=function(e,t,n){var r,i=this;this.logger.info(U.ROOM_KICK_OUT+\"  call \"+JSON.stringify(e)),n||this.room.sessionID===e.header.session_id||this.room.sessionID===e.body.session_id?(n=g(),this.dataReport.newReport(n,ne.kZegoTaskKickout.event),this.dataReport.addMsgInfo(n,{user_id:ne.kZegoTaskKickout.user_id(this.stateCenter.idName)}),r=j.getKickoutError(e.body.reason||e.body.kickout_reason,this.stateCenter.useNetAgent),this.dataReport.addMsgInfo(n,{error:r.code,message:r.message}),this.dataReport.uploadReport(n),(n=this.room.roomTryHandler)?(n.onactive=function(e,t){i.disconnectedHandle(t),i.stateCenter.actionListener(\"_kickout\",t)},e.body.need_relogin&&1==e.body.need_relogin?(this.room.sessionID=\"0\",n.startMaxTime(),n.active()):(this.setRunState(o.logout),this.resetRoom(t),n={},e&&e.body.custom_reason?n.custom_kickout_message=e.body.custom_reason:r.name&&M[r.name]&&(t=e.body.reason||e.body.kickout_reason,n.custom_kickout_message=M[r.name].msg+\"; kickout reason: \"+t),r.name&&M[r.name]?this.disconnectedHandle(M[r.name],{extendedData:JSON.stringify(n),isKickout:!0}):this.disconnectedHandle(M.ROOM_INNER_ERROR,{extendedData:JSON.stringify(n),isKickout:!0}),this.stateCenter.actionListener(\"_kickout\",{code:M.MANUAL_KICKOUT.code,msg:M.MANUAL_KICKOUT.msg+e.body.reason||e.body.kickout_reason}))):this.logger.info(U.ROOM_KICK_OUT+\" try handler no found\")):this.logger.info(U.ROOM_KICK_OUT+\" session id wrong, ignore\")},ce.prototype.handleHbLogout=function(e){var t=this,n=this.room.roomTryHandler;n&&(n.onactive=function(e,n){t.disconnectedHandle(n)},[M.HEARTBEAT_TIMEOUT,M.SOCKET_CLOSE].includes(e)||[105,152,2001].includes(null==e?void 0:e.code)||e.msg.endsWith(\"1000002001\")||e.msg.endsWith(\"1000000152\")||e.msg.endsWith(\"1000000105\")?(n.startMaxTime(),n.active()):[M.TIMEOUT].includes(e)?this.logger.warn(U.ROOM_HANDLE_Hb_LOGOUT+\" timeout\"):(this.logger.warn(U.ROOM_HANDLE_Hb_LOGOUT+\" unexpected error: \".concat(JSON.stringify(e))),n.stopMaxTime(),n.invalid(),this.resetRoom(),this.disconnectedHandle(e)))},ce.prototype.onDisconnect=function(e){var t,n=this;(e=(this.logger.error(U.ROOM_DISCONNECT+\" \"+e.msg),\"string\"==typeof e.code&&\"Error.Network\"===e.code?this.dataReport.addMsgInfo(this.stateCenter.reportSeqList.relogin,{error:ne.kZegoTaskReLoginRoom.error.ROOM_DISCONNECT.code,message:ne.kZegoTaskReLoginRoom.error.ROOM_DISCONNECT.msg}):\"number\"==typeof e.code&&(void 0,(t=e.code<2e9&&1e9<e.code||e.code<1e6?j.decodeServerError(e.code,e.msg):{code:e.code,message:e.msg})&&this.dataReport.addMsgInfo(this.stateCenter.reportSeqList.relogin,{error:t.code,message:t.message})),this.dataReport.uploadReport(this.stateCenter.reportSeqList.relogin),this.stateCenter.reportSeqList.relogin=0,j.unregisterCallback(ne.kZegoTaskReLoginRoom.event,this.stateCenter.reportList),this.room.roomTryHandler))?(e.onactive=function(e,t){t&&0!==t.code?n.roomStateHandle(\"DISCONNECTED\",k.ReconnectFailed,t):n.roomStateHandle(\"CONNECTED\",k.Reconnected,t)},e.startMaxTime(),e.active()):this.logger.error(U.ROOM_DISCONNECT+\" try handler no found\")},ce.prototype.onConnecting=function(e){this.roomStateHandle(\"CONNECTING\",k.Logining,e)},ce.prototype.disconnectedHandle=function(e,t){var n;e&&0!==e.code?(this.stopTokenTimer(),n=null!=t&&t.isKickout?k.Kickout:k.ReconnectFailed,this.roomStateHandle(\"DISCONNECTED\",n,e,null==t?void 0:t.extendedData)):this.roomStateHandle(\"CONNECTED\",k.Reconnected,e,null==t?void 0:t.extendedData)},ce.prototype.roomStateHandle=function(e,t,n,r,o){var i;t&&t==k.Reconnecting&&1==++ce.reconectTimes||(this.logger.info(U.ROOM_STATUS_CALLBACK+\" \"+e+\" \"+JSON.stringify(n)),[\"CONNECTED\",\"DISCONNECTED\"].includes(e)&&(ce.reconectTimes=0),(t=(t=t&&[k.LoginFailed,k.ReconnectFailed].includes(t)?null!=(i=this.room.roomTryHandler)&&i.loginRoomCallback.fail?k.LoginFailed:k.ReconnectFailed:t)&&[k.Logined,k.Reconnected].includes(t)?null!=(i=this.room.roomTryHandler)&&i.loginRoomCallback.success?k.Logined:k.Reconnected:t)&&[k.Logining,k.Reconnecting].includes(t)&&(t=null!=(i=this.room.roomTryHandler)&&i.loginRoomCallback.success?k.Logining:k.Reconnecting),this.room.lastRoomState=this.room.roomState,this.room.roomState=e,this.room.roomState!==this.room.lastRoomState&&(this.stateCenter.actionListener(\"_roomStateUpdate\",this.room.roomID,e,n?n.code:0,r,o),o||(this.stateCenter.actionListener(\"roomStateUpdate\",this.room.roomID,e,n?n.code:0,r),this.stateCenter.actionListener(\"roomStateChanged\",this.room.roomID,t,n?n.code:0,r))))},ce.prototype.login=function(e,t,n,r,i,s,a){if(this.logger.info(U.ROOM_LOGIN_ROOM+\" call:\"+t+\" \"+n),this.room.isMulti||this.logger.setSessionInfo(this.stateCenter.appid,t,\"\",r.userID,\"\",this.stateCenter.sdKVersion),i&&(i.userUpdate&&\"boolean\"==typeof i.userUpdate&&(this.stateCenter.userStateUpdate=i.userUpdate),i.maxMemberCount&&\"number\"==typeof i.maxMemberCount&&(this.room.maxMemberCount=i.maxMemberCount)),!this.stateCenter.configOK)return this.logger.error(U.ROOM_LOGIN_ROOM+\" init sdk wrong\"),void a(M.INIT);this.room.runState!==o.trylogin&&this.setRunState(o.trylogin),this.room.roomID=t,this.room.token=n,this.room.thirdToken=n,this.stateCenter.idName=r.userID,this.stateCenter.nickName=r.userName||r.userID,this.loginCallback.success=s,this.loginCallback.fail=a,0===this.stateCenter.reportSeqList.login&&(i=g(),this.stateCenter.reportSeqList.relogin=i,this.dataReport.newReport(i,ne.kZegoTaskReLoginRoom.event),this.dataReport.addMsgInfo(i,{server:e}),j.logReportCallback(ne.kZegoTaskReLoginRoom.event,this.dataReport,i,this.stateCenter.reportList)),this.resetTryLogin(),this.onConnecting({code:0,msg:\"\"}),this.tryLogin(e),this.logger.info(U.ROOM_LOGIN_ROOM+\" call success\")},ce.prototype.tryLogin=function(e){var t,n=this;if(this.room.runState!==o.trylogin)this.logger.error(\"zb.rh.tl state error\");else{var r=(0!==this.stateCenter.reportSeqList.login?ne.kZegoTaskLoginRoom:ne.kZegoTaskReLoginRoom).event;if(this.stateCenter.useNetAgent)this.room.isMulti&&this.room.isDisConnect()?this.logger.warn(U.ROOM_TRY_LOGIN+\" liveroom is not connected\"):(i=function(e,t){n.handleLoginRsp(e,t)},null!=(t=this.liveRoomHandler)&&t.isUaConnect()?this.liveRoomHandler.login(this.room,i,i):(this.tryLoginTimer=setTimeout((function(){n.logger.info(U.ROOM_TRY_LOGIN+\" over time no response, login timeout\"),n.loginCallback.fail&&n.loginCallback.fail(ne.kZegoTaskLoginRoom.error.LOGIN_TIMEOUT)}),this.tryLoginInterval),this.logger.warn(U.ROOM_TRY_LOGIN+\" ua is not connected\")));else{if(this.service.isDisConnect())try{this.service.closeSocket(),this.logger.debug(U.ROOM_TRY_LOGIN+\" new websocket\"),j.actionSuccessCallback(r,this.stateCenter.reportList)&&(1<this.tryLoginCount&&j.actionSuccessCallback(r,this.stateCenter.reportList)(\"eventEnd\",ne.kZegoTaskLoginRoom.subEvent.create_socket.event),j.actionSuccessCallback(r,this.stateCenter.reportList)(p,ne.kZegoTaskLoginRoom.subEvent.create_socket.event),j.actionSuccessCallback(r,this.stateCenter.reportList)(_,ne.kZegoTaskLoginRoom.subEvent.create_socket.event,ne.kZegoTaskLoginRoom.subEvent.create_socket.server(\"server\"),e)),this.service.createSocket(e),this.service.openHandler((function(){n.openHandler()})),this.service.closeHandler((function(e){n.logger.error(U.ROOM_TRY_LOGIN+\" close \"+JSON.stringify(e.code||e)),n.service.closeSocket(),n.closeHandler(e)})),this.service.errorHandler((function(e){n.logger.error(U.ROOM_TRY_LOGIN+\" error \"+JSON.stringify(e.code||e)),n.service.closeSocket(),n.closeHandler(e)}))}catch(e){this.logger.error(U.ROOM_TRY_LOGIN+\"  websocket err:\"+JSON.stringify(e))}else{this.logger.info(U.ROOM_TRY_LOGIN+\" use current websocket and sent login\"),j.actionSuccessCallback(r,this.stateCenter.reportList)&&j.actionSuccessCallback(r,this.stateCenter.reportList)(p,ne.kZegoTaskLoginRoom.subEvent.liveroom_login.event);var i=function(e,t){n.handleLoginRsp(e,t)};this.service.login(this.room,i,i)}this.tryLoginTimer=setTimeout((function(){n.logger.info(U.ROOM_TRY_LOGIN+\" over time no response, login timeout\"),n.loginCallback.fail&&n.loginCallback.fail(ne.kZegoTaskLoginRoom.error.LOGIN_TIMEOUT)}),this.tryLoginInterval),this.logger.info(U.ROOM_TRY_LOGIN+\" call success\")}}},ce.prototype.openHandler=function(){function e(e,n){t.handleLoginRsp(e,n)}var t=this,n=(this.logger.info(U.ROOM_OPEN_HANDLER+\" websocket.onpen call\"),(0!==this.stateCenter.reportSeqList.login?ne.kZegoTaskLoginRoom:ne.kZegoTaskReLoginRoom).event);j.actionSuccessCallback(n,this.stateCenter.reportList)&&j.actionSuccessCallback(n,this.stateCenter.reportList)(d,ne.kZegoTaskLoginRoom.subEvent.create_socket.event,{try_cnt:this.tryLoginCount}),this.service.onPush(),j.actionSuccessCallback(n,this.stateCenter.reportList)&&j.actionSuccessCallback(n,this.stateCenter.reportList)(p,ne.kZegoTaskLoginRoom.subEvent.liveroom_login.event),this.service.login(this.room,e,e)},ce.prototype.handleLoginRsp=function(e,t){this.logger.info(U.ROOM_HANDLE_LOGINRSP+\" seq: \"+t+\" \"+JSON.stringify(e));var n=(0!==this.stateCenter.reportSeqList.login?ne.kZegoTaskLoginRoom:ne.kZegoTaskReLoginRoom).event;j.actionSuccessCallback(n,this.stateCenter.reportList)&&j.actionSuccessCallback(n,this.stateCenter.reportList)(d,ne.kZegoTaskLoginRoom.subEvent.liveroom_login.event),this.room.runState!==o.trylogin?this.logger.error(U.ROOM_HANDLE_LOGINRSP+\" state error\"):e.header&&e.body?e.header.seq!==t&&0==this.room.isMulti?this.logger.error(U.ROOM_HANDLE_LOGINRSP+\" in wrong seq, local=\",t+\"\",\",recv=\",e.header.seq):0!==e.body.err_code?(this.logger.error(U.ROOM_HANDLE_LOGINRSP+\" server error=\",e.body.err_code),this.handleLoginFail(e)):(this.logger.info(U.ROOM_HANDLE_LOGINRSP+\" call success.\"),this.handleLoginSuccess(e)):(this.logger.error(U.ROOM_HANDLE_LOGINRSP+\" \"+JSON.stringify(e)),this.handleLoginFail(e))},ce.prototype.handleLoginFail=function(e){this.resetTryLogin();var t=ne.kZegoTaskLoginRoom.error.INNER_ERROR;e.header&&e.body?t=j.getServerError(e.body.err_code):e.code&&e.msg&&(t=e),this.loginCallback.fail&&this.loginCallback.fail(t,!0)},ce.prototype.handleLoginSuccess=function(e){var t,n={},r=this.room.lastRunState,i=(this.setRunState(o.login),this.stateCenter.userid=e.body.user_id,this.room.sessionID=e.body.session_id,this.room.roomSessionID=e.body.room_session_id,this.room.lvKey=e.body.lv_key,null==(i=null==e?void 0:e.body)?void 0:i.token_remain_time),s=(this.stateCenter.configRoomAuth=0<i,e.body.ret_timestamp&&[\"03\",\"04\"].includes(this.room.token.substring(0,2))&&(t=(s=(new Date).getTime())-e.body.ret_timestamp,this.stateCenter.local_time_deviation=t<5e3?0:t,t=0<i?1e3*i:1e3*j.decodeTokenExpire(this.room.token.substring(2))-s,this.resetTokenTimer(t-this.stateCenter.local_time_deviation)),this.room.isMulti||this.logger.setSessionInfo(this.stateCenter.appid,this.room.roomID,this.room.sessionID,this.stateCenter.idName,this.stateCenter.nickName,this.stateCenter.sdKVersion),this.stateCenter.useNetAgent||(e.body.config_info&&(i=this.stateCenter.settingConfig.getSetting(\"remote_log_level\",!0)||e.body.config_info.log_level,this.logger.setRemoteLogLevel(i),n.log_level=i,\"\"==e.body.config_info.log_url||this.logger.url||(this.logger.setLogServer(e.body.config_info.log_url),n.log_url=e.body.config_info.log_url)),e.body.cluster_env&&1===e.body.cluster_env&&(this.stateCenter.testEnvironment=!0,n.test_environment=\"true\",this.stateCenter.debugCustom||(this.stateCenter.debug=!0))),(0!==this.stateCenter.reportSeqList.login?ne.kZegoTaskLoginRoom:ne.kZegoTaskReLoginRoom).event);j.actionSuccessCallback(s,this.stateCenter.reportList)&&j.actionSuccessCallback(s,this.stateCenter.reportList)(_,ne.kZegoTaskLoginRoom.subEvent.liveroom_login.event,ne.kZegoTaskLoginRoom.subEvent.liveroom_login.respond_info(\"respond_info\"),n),this.resetTryLogin(),this.loginSuccessCallBack(r,e),this.roomStateHandle(\"CONNECTED\",k.Logined,{code:0,msg:\"\"}),this.loginCallback.success&&this.loginCallback.success(!0)},ce.prototype.closeHandler=function(e){this.logger.error(U.ROOM_CLOSEHANDLER+\" room websocket close \"+JSON.stringify(e.code||e)),this.room.runState!==o.logout?this.room.runState===o.trylogin?(this.resetTryLogin(),this.loginCallback.fail&&this.loginCallback.fail(1006==e.code?ne.kZegoTaskLoginRoom.error.LOGIN_TIMEOUT:e)):this.room.runState===o.login&&(this.logger.info(U.ROOM_CLOSEHANDLER+\" is called because of network broken\"),this.resetTryLogin(),this.onDisconnect(ne.kZegoTaskLoginRoom.error.NETWORK_BROKEN)):this.logger.info(U.ROOM_CLOSEHANDLER+\" onclose logout flow call websocket.close\")},ce.prototype.logout=function(e,t){this.logger.info(U.ROOM_LOGOUT+\" call\"),this.room.runState===o.logout?this.logger.warn(\"zb.rh.lo at logout\"):(this.resetRoom(e),this.roomStateHandle(\"DISCONNECTED\",k.Logout,{code:0,msg:\"\"},void 0,t),this.stopTokenTimer(),this.logger.info(U.ROOM_LOGOUT+\" call success\"))},ce.prototype.handleLogoutRsp=function(e,t){this.logger.info(U.ROOM_LOGOUT+\" result=\",e.body&&e.body.err_code?e.body.err_code:\"-1\"),this.stateCenter.useNetAgent&&t&&null!=(e=this.liveRoomHandler)&&e.closeRequest()},ce.reconectTimes=0;var ae=ce;function ce(e,t,n,r,o,i){this.logger=e,this.stateCenter=t,this.dataReport=n,this.service=r,this.room=o,this.liveRoomHandler=i,this.tryLoginTimer=null,this.tryLoginCount=0,this.tryLoginInterval=1e4,this.tokenTimer=null,this.beforeExpire=30,this.loginCallback={}}var ue=function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||((r=r||Array.prototype.slice.call(t,0,o))[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},le=(he.prototype.loginRsp=function(e,t){this.anchor_info=e.body.anchor_info||this.anchor_info,this.userListInterval=e.body.userlist_interval||this.userListInterval,this.userListMergeInterval=e.body.userlist_merge_timeout||this.userListMergeInterval,e.body.anchor_info&&(this.stateCenter.actionListener(\"getAnchorInfo\",e.body.anchor_info.anchor_id_name,e.body.anchor_info.anchor_nick_name),this.stateCenter.actionListener(\"_getAnchorInfo\",e.body.anchor_info.anchor_id_name,e.body.anchor_info.anchor_nick_name)),e.body.online_count&&this.stateCenter.actionListener(\"roomOnlineUserCountUpdate\",this.room.roomID,e.body.online_count),this.logger.info(U.USER_LOGIN_RSP+\"  userStateUpdate \"+this.stateCenter.userStateUpdate),this.stateCenter.userStateUpdate&&this.fetchUserList(t)},he.prototype.patchUserList=function(e){var t=this;e.body.server_user_seq!==this.userSeq&&this.stateCenter.userStateUpdate&&!this.userSeqMergeMap&&(this.logger.info(U.USER_HB_PATCH+\" call update user \"+this.userSeq+\" server \"+e.body.server_user_seq),this.userSeqMergeMap||(this.userSeqMergeMap={}),this.userSeqMergeTimer&&clearTimeout(this.userSeqMergeTimer),this.userSeqMergeTimer=setTimeout((function(){t.handleMergeTimeout()}),this.userListMergeInterval)),this.minUserSeq=e.body.server_user_seq,null!=e.body.online_count&&0!=e.body.online_count&&this.stateCenter.actionListener(\"roomOnlineUserCountUpdate\",this.room.roomID,e.body.online_count)},he.prototype.resetUserHandler=function(){this.userQuerying=!1,this.lastUserQueryTime=0,this.userTempList=[],this.userSeq=0,this.minUserSeq=0,this.userList=void 0,this.userSeqMergeMap={},this.userSeqMergeTimer=void 0,this.userQueryTimer=void 0,this.userListInterval=3e4,this.userListMergeInterval=5e3,this.anchor_info={anchor_id:\"\",anchor_id_name:\"\",anchor_nick_name:\"\"}},he.prototype.fetchUserList=function(e){this.userQuerying?this.logger.warn(U.USER_FETCH_USER+\" is already querying\"):(this.userQuerying=!0,this.userTempList=[],this.fetchUserListWithPage(0,e||0),this.logger.info(U.USER_FETCH_USER+\" the first time call\"))},he.prototype.fetchUserListWithPage=function(e,t){function n(e){r.handleFetchUserListRsp(e,t)}var r=this;(this.stateCenter.useNetAgent?this.liveRoomHandler:this.service).fetchUserList({user_index:e,sort_type:0},n,n,this.room)},he.prototype.handleFetchUserListRsp=function(e,t){var n=this;if(e.body&&0!=e.body.err_code)return this.userQuerying=!1,this.lastUserQueryTime=Date.now()+this.userListInterval,void this.logger.info(U.USER_FETCH_USER_RSP+\" fetch error \"+e.body.err_code);if(!e.header||!e.body)return this.userQuerying=!1,this.lastUserQueryTime=Date.now()+this.userListInterval,void this.logger.info(U.USER_FETCH_USER_RSP+\" fetch error \"+e);if(this.stateCenter.userStateUpdate){this.userTempList=ue(ue([],this.userTempList,!0),e.body.user_baseinfos,!0);var r=e.body.ret_user_index;if(r!=e.body.server_user_index)return this.logger.info(U.USER_FETCH_USER_RSP+\" fetch another page\"),void this.fetchUserListWithPage(r+1,t);this.userSeq=e.body.server_user_seq;for(var i=[],s=[],a=0;a<this.userTempList.length;a++){var c={userID:this.userTempList[a].id_name,userName:this.userTempList[a].nick_name,role:this.userTempList[a].role};i.push(c),s.push({idName:this.userTempList[a].id_name,nickName:this.userTempList[a].nick_name,role:this.userTempList[a].role})}this.stateCenter.actionListener(\"_getTotalUserList\",this.room.roomID,s),t==o.login?(this.userList&&j.mergeUserList(this.logger,this.userList,i,(function(e,t){0!==e.length&&n.onUserStateUpdate(n.room.roomID,\"ADD\",e),0!==t.length&&n.onUserStateUpdate(n.room.roomID,\"DELETE\",t)})),this.userList=i):0!==(this.userList=i).length&&this.onUserStateUpdate(this.room.roomID,\"ADD\",i),this.userQuerying=!1,this.lastUserQueryTime=Date.now()+this.userListInterval,this.userTempList=[],this.logger.info(U.USER_FETCH_USER_RSP+\" call success user_list \"+i+\" count \"+i.length)}},he.prototype.handlePushUserStateUpdateMsg=function(e){if(this.logger.info(U.USER_USER_PUSH+\" call\"),this.stateCenter.userStateUpdate)if(this.userSeq===e.body.user_list_seq)this.logger.warn(U.USER_USER_PUSH+\" user_list_seq is the same with local seq\");else if(this.userSeq+e.body.user_actions.length!==e.body.user_list_seq)this.mergeUserByUserSeq(e.body.user_list_seq,e.body.user_actions);else{this.userSeq=e.body.user_list_seq;for(var t=[],n=0;n<e.body.user_actions.length;n++){var r={action:e.body.user_actions[n].Action,idName:e.body.user_actions[n].IdName,nickName:e.body.user_actions[n].NickName,role:e.body.user_actions[n].Role,loginTime:e.body.user_actions[n].LoginTime};t.push(r)}this.stateCenter.actionListener(\"_userStateUpdate\",e.body.room_id,t);var o=[],i=[];t.forEach((function(e){1==e.action?o.push({userID:e.idName,userName:e.nickName,role:e.role}):2==e.action&&i.push({userID:e.idName,userName:e.nickName,role:e.role})})),this.userList&&(this.userList=this.userList.concat(o).filter((function(e){return!i.some((function(t){return t.userID==e.userID}))}))),0!==o.length&&this.onUserStateUpdate(e.body.room_id||e.body.room_pushheader.room_id,\"ADD\",o),0!==i.length&&this.onUserStateUpdate(e.body.room_id||e.body.room_pushheader.room_id,\"DELETE\",i),this.logger.info(U.USER_USER_PUSH+\" call success\")}else this.logger.info(U.USER_USER_PUSH+\" userStateUpdate is false\")},he.prototype.onUserStateUpdate=function(e,t,n){var r=this,o=g();this.dataReport.newReport(o,ne.kZegoTaskLiveRoomGetUserUpdateInfo.event),n=n.filter((function(e){return e.userID!==r.stateCenter.idName}));0!=n.length&&(n=n.map((function(e){return{userID:e.userID,userName:e.userName}})),this.stateCenter.actionListener(\"roomUserUpdate\",e,t,n),this.dataReport.addMsgInfo(o,{user_update_type:\"ADD\"==t?ne.kZegoTaskLiveRoomGetUserUpdateInfo.user_update_type(\"added\"):ne.kZegoTaskLiveRoomGetUserUpdateInfo.user_update_type(\"deleted\")}),this.dataReport.uploadReport(o))},he.prototype.mergeUserByUserSeq=function(e,t){var n=this;this.userSeqMergeMap||(this.logger.warn(U.USER_MERGE_SEQ+\" new merge userlist \"+this.userSeq+\" server \"+e),this.userSeqMergeMap={},this.userSeqMergeTimer&&clearTimeout(this.userSeqMergeTimer),this.userSeqMergeTimer=setTimeout((function(){n.handleMergeTimeout()}),this.userListMergeInterval)),this.userSeqMergeMap[e]=t,this.logger.warn(U.USER_MERGE_SEQ+\"  merge userlist \"+this.userSeq+\" server \"+e+\" userlist \"+t.length)},he.prototype.mergeUser=function(e){var t=this,n=(this.logger.info(U.USER_MERGE+\" merge userlist \"+this.userSeq+\" userSeqList \"+e.join(\",\")),this.userSeq=e[e.length-1],this.lastUserQueryTime=Date.now()+this.userListInterval,{}),r=((e=(e.forEach((function(e){t.userSeqMergeMap&&t.userSeqMergeMap[e].forEach((function(e){n[e.IdName]=e}))})),this.userSeqMergeMap=null,Object.values(n).map((function(e){return{action:e.Action,idName:e.IdName,nickName:e.NickName,role:e.Role,loginTime:e.LoginTime?String(e.LoginTime):\"\"}})))).sort((function(e,t){return e.loginTime.localeCompare(t.loginTime)})),[]),o=[];e.forEach((function(e){1==e.action?r.push({userID:e.idName,userName:e.nickName,role:e.role}):2==e.action&&o.push({userID:e.idName,userName:e.nickName,role:e.role})})),this.userList=this.userList&&this.userList.concat(r).filter((function(e){return!o.some((function(t){return t.userID==e.userID}))})),0!==r.length&&this.onUserStateUpdate(this.room.roomID,\"ADD\",r),0!==o.length&&this.onUserStateUpdate(this.room.roomID,\"DELETE\",o),this.stateCenter.actionListener(\"_userStateUpdate\",this.room.roomID,e)},he.prototype.handleMergeTimeout=function(){var e,t=this,n=Object.keys(this.userSeqMergeMap).map((function(e){return+e})).sort((function(e,t){return e-t}));n[n.length-1]-n[0]+1===n.length||n[n.length-1]>=this.minUserSeq?this.mergeUser(n):(this.userSeqMergeMap=null,e=this.lastUserQueryTime-Date.now(),this.logger.info(U.USER_MERGE_TIMEOUT+\"  fetch merge userlist \"+this.userSeq+\" userSeqList \"+n.join(\",\")+\" wait \"+e),0<e?(this.userQueryTimer&&clearTimeout(this.userQueryTimer),this.userQueryTimer=setTimeout((function(){t.fetchUserList()}),e)):this.fetchUserList())},he.prototype.loginPrivateRsp=function(e){this.logger.info(U.USER_FETCH_USER,\" userStateUpdate \"+this.stateCenter.userStateUpdate),this.stateCenter.userStateUpdate&&this.fetchUserList()},he);function he(e,t,n,r,o,i){this.logger=e,this.stateCenter=t,this.dataReport=n,this.service=r,this.liveRoomHandler=o,this.room=i,this.userQuerying=!1,this.userTempList=[],this.userSeq=0,this.minUserSeq=0,this.userList=[],this.userSeqMergeMap=null,this.userListInterval=3e4,this.userListMergeInterval=5e3,this.anchor_info={anchor_id:\"\",anchor_id_name:\"\",anchor_nick_name:\"\"}}de.prototype.initMessageHandler=function(){},de.prototype.initLiveHandler=function(){},de.prototype.init=function(){this.bindHeatBeatHandler(),this.bindRoomHandler(),this.bindMessageHandler(),this.bindLiveHandler()},de.prototype.bindHeatBeatHandler=function(){var e=this;this.heartBeatHandler.hbLogout=function(t){e.roomHandler.handleHbLogout(t)},this.heartBeatHandler.heartbeatRspNotiFy=function(t){e.messageHandler&&e.messageHandler.loginRsp(t),e.userHandler.patchUserList(t),e.HBResponse(t)}},de.prototype.bindRoomHandler=function(){var e=this;this.roomHandler.loginSuccessCallBack=function(t,n){e.logger.info(U.LIVEROOMMODULES_BINDROOMHANDLER+\" login suc \"+t),e.heartBeatHandler.init(n),e.stateCenter.useNetAgent?e.liveRoomHandler.startCheck():(e.service.stopCheck(),e.service.startCheck()),e.userHandler.loginRsp(n,t),e.messageHandler&&e.messageHandler.loginRsp(n),e.isMulti||e.handleMultiRoom(),e.roomLoginResponse(n)},this.roomHandler.resetRoomCallBack=function(){e.heartBeatHandler.resetHeartbeat(),e.liveHandler&&e.liveHandler.resetLiveHandler(),e.messageHandler&&e.messageHandler.resetMessageInfo(),e.stateCenter.useNetAgent&&e.liveRoomHandler&&e.liveRoomHandler.stopCheck(),e.userHandler.resetUserHandler(),e.service.stopCheck(),e.roomTryHandler&&(e.roomTryHandler.invalid(),e.roomTryHandler.stopMaxTime())}},de.prototype.bindUserHandler=function(){},de.prototype.bindMessageHandler=function(){},de.prototype.bindLiveHandler=function(){},de.prototype.HBResponse=function(e){this.stateCenter.actionListener(\"HBResponse\",e)},de.prototype.roomLoginResponse=function(e){this.stateCenter.actionListener(\"roomLoginResponse\",e)},de.prototype.handleMultiRoom=function(){var e=this;this.stateCenter.roomModulesList.forEach((function(t){t.runState!==o.login&&t.roomTryHandler&&1==t.isMulti&&(t.roomTryHandler.onactive=function(n,r){var o;r&&0!==r.code?(0!==r.code&&(o=j.getLiveRoomError(r.code,e.stateCenter.useNetAgent))&&M[o]&&(r=M[o]),t.roomHandler.roomStateHandle(\"DISCONNECTED\",k.ReconnectFailed,r,r.msg)):t.roomHandler.roomStateHandle(\"CONNECTED\",k.Reconnected,r)},t.roomTryHandler.startMaxTime(),t.roomTryHandler.active())}))},de.prototype.isLogin=function(){return this.runState===o.login},de.prototype.isDisConnect=function(){return(this.stateCenter.useNetAgent?this.liveRoomHandler:this.service).isDisConnect()},de.prototype.retryConnect=function(){this.logger.info(\"zm.lrm.rc call\"),this.stateCenter.useNetAgent&&(this.resetSessionInfo(),this.liveRoomHandler.closeRequest())},de.prototype.retryRoom=function(){this.logger.info(\"zm.lrm.rr.0 call\"),this.roomTryHandler&&this.rtm.netAgent.isConnect()&&(this.sessionID=\"0\",this.roomSessionID=\"0\",this.roomTryHandler.active(!0))},de.prototype.resetSessionInfo=function(){var e;this.logger.info(\"zm.lrm.rsi call\"),this.sessionID=\"0\",this.roomSessionID=\"0\",null!=(e=this.liveRoomHandler)&&e.reset()};var pe=de;function de(e,t,n,r,i,s,a){this.roomID=e,this.stateCenter=t,this.logger=n,this.dataReport=r,this.service=i,this.rtm=s,this.liveRoomHandler=a,this.runState=o.logout,this.lastRunState=o.logout,this.lastRoomState=\"DISCONNECTED\",this.roomState=\"DISCONNECTED\",this.roomSessionID=\"0\",this.sessionID=\"0\",this.isMulti=!1,this.token=\"\",this.thirdToken=\"\",this.maxMemberCount=0,this.lvKey=\"\",this.roomName=\"\",this.roomHandler=new ae(this.logger,this.stateCenter,this.dataReport,this.service,this,a),this.heartBeatHandler=new ie(this.logger,this.stateCenter,this.dataReport,this.service,this.liveRoomHandler,this),this.userHandler=new le(this.logger,this.stateCenter,this.dataReport,this.service,this.liveRoomHandler,this),this.initMessageHandler(),this.initLiveHandler(),this.init()}fe.prototype.createSocket=function(e){this.socket=Object(c.createZegoWebSocket)(e,this.ENV%2)},fe.prototype.closeSocket=function(){this.socket&&(this.socket.onclose=null,this.socket.onerror=null,this.socket.close(),this.socket=null)},fe.prototype.isDisConnect=function(){return!this.socket||1!==this.socket.readyState},fe.prototype.sendMessage=function(e,t,n,r,o){return void 0===n&&(n=null),void 0===r&&(r=null),void 0===o&&(o={timeOut:6e3}),o={data:t={header:e,body:t},seq:e.seq,deleted:!1,sendTime:Date.parse(new Date+\"\"),timeOut:o.timeOut,success:n,error:r},n=this.sendCommandList.push(o),this.sendCommandMap[o.seq]=n,this.socket&&this.socket.send(JSON.stringify(t)),e.seq},fe.prototype.sendPB=function(e){return this.socket&&this.socket.send(e),!0},fe.prototype.checkSendMessageList=function(e){for(var t=e.getFirst();null!=t;)!function(){var n,r,o;e.remove(t),t&&t._data&&(n=t._data.error,r=t._data.seq,o=t._data.data.body.custom_msg,setTimeout((function(){n&&n(M.TIMEOUT,r,o)}),0)),t=e.getFirst()}()},fe.prototype.checkMessageListTimeout=function(e,t){for(var n=e.getFirst(),r=Date.parse(new Date+\"\"),o=0,i=this;null!=n&&\"break\"!==function(){return n._data&&n._data.sendTime+n._data.timeOut>r?\"break\":(n._data&&delete t[n._data.data.header.seq],e.remove(n),n._data&&null==n._data.error||n._data&&n._data.sendTime+i.sendDataDropTimeout<r||n&&n._data&&(s=n._data.error,a=n._data.seq,c=n._data.data.body.custom_msg,setTimeout((function(){s&&s(M.TIMEOUT,a,c)}),0)),++o>=i.sendDataCheckOnceCount?\"break\":void(n=e.getFirst()));var s,a,c}(););},fe.prototype.startCheck=function(){var e=this;this.checkMessageListTimeout(this.sendCommandList,this.sendCommandMap),this.sendDataCheckTimer=setTimeout((function(){e.startCheck()}),this.sendDataCheckInterval)},fe.prototype.stopCheck=function(){this.checkSendMessageList(this.sendCommandList),this.sendCommandMap={},clearTimeout(this.sendDataCheckTimer)},fe.prototype.openHandler=function(e){var t=this;this.socket&&(this.socket.onopen=function(n){t.socket.binaryType=\"arraybuffer\",t.responseHandler(),e(n)})},fe.prototype.responseHandler=function(){var e=this;this.socket&&(this.socket.onmessage=function(t){t=\"string\"==typeof t.data?JSON.parse(t.data):t.data,e.onMessage(t)})},fe.prototype.closeHandler=function(e){this.socket&&(this.socket.onclose=function(t){e(t)})},fe.prototype.errorHandler=function(e){this.socket&&(this.socket.onerror=e)},fe.prototype.onMessage=function(e){};var _e=fe;function fe(e){this.socket=null,this.sendCommandList=new v,this.sendCommandMap={},this.sendDataCheckOnceCount=100,this.sendDataDropTimeout=1e4,this.sendDataCheckInterval=2e3,this.ENV=e}var ge=function(){return(ge=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},me=(ye.prototype.checkResponse=function(e){return 0!=this.stateCenter.roomModulesList.filter((function(e){return e.runState!==o.logout})).length&&(e.header.appid!==this.stateCenter.appid||e.header.user_id!==this.stateCenter.userid)},ye.prototype.handleSendCommandMsgRsp=function(e){var t,n=this,r=this.service.sendCommandMap[e.header.seq];null!=r&&(t=r._data,delete this.service.sendCommandMap[e.header.seq],this.service.sendCommandList.remove(r),0===e.body.err_code?setTimeout((function(){t&&null!=t.success&&t.success(e,n.cmdSeq)}),0):setTimeout((function(){t&&null!=t.error&&t.error(e,n.cmdSeq)}),0))},ye.prototype.onPush=function(){var e=this;this.service.onMessage=function(t){t instanceof ArrayBuffer?e.stateCenter.actionListener(\"_protobufResponse\",t):t.header?(0!==t.body.err_code?t.body.err_message&&e.logger.error(\"\".concat(U.SERVICE_PUSH,\" cmd=\").concat(t.header.cmd,\", err_code=\").concat(t.body.err_code,\", err_message=\").concat(t.body.err_message,\" \")):e.logger.info(\"\".concat(U.SERVICE_PUSH,\" cmd=\").concat(t.header.cmd,\", msg=\").concat(JSON.stringify(t),\" \")),-1<[\"login\",\"logout\"].indexOf(t.header.cmd)?e.handleSendCommandMsgRsp(t):e.checkResponse(t)?e.logger.error(U.SERVICE_PUSH+\"  check session fail.\"):(e.logger.info(\"\".concat(U.SERVICE_PUSH,\" cmd=\").concat(t.header.cmd,\",function=\").concat(!!e.responseRouters[t.header.cmd])),e.handleSendCommandMsgRsp(t),e.responseRouters[t.header.cmd]&&e.responseRouters[t.header.cmd](t,e.cmdSeq))):e.logger.error(\"\".concat(U.SERVICE_PUSH,\" msg type error \"))}},ye.prototype.handlePushKickout=function(e){var t,n;void 0===(null==(n=null==e?void 0:e.body)?void 0:n.protocol)||1===(null==(n=null==e?void 0:e.body)?void 0:n.protocol)?function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||((r=r||Array.prototype.slice.call(t,0,o))[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}([],this.stateCenter.roomModulesList,!0).forEach((function(t){return t.roomHandler.handlePushKickout(e,!0)})):(t=null==(n=null==e?void 0:e.header)?void 0:n.room_id,(n=this.stateCenter.roomModulesList.find((function(e){return e.roomID==t})))?n.roomHandler.handlePushKickout(e):this.logger.error(U.SERVICE_PUSH+\" room no found ignore \"+JSON.stringify(null==(n=e.header)?void 0:n.room_id)))},ye.prototype.handlePushCustomMsg=function(e){},ye.prototype.handlePushRoomMsg=function(e){},ye.prototype.handlePushUserStateUpdateMsg=function(e){var t=null==(n=null==e?void 0:e.header)?void 0:n.room_id,n=this.stateCenter.roomModulesList.find((function(e){return e.roomID==t}));n?n.userHandler.handlePushUserStateUpdateMsg(e):this.logger.error(U.SERVICE_PUSH+\" room no found ignore \"+JSON.stringify(e))},ye.prototype.handlePushMergeMsg=function(e){},ye.prototype.handlePushTransMsg=function(e){},ye.prototype.handleBigImMsgRsp=function(e){},ye.prototype.handlePushSignalMsg=function(e){},ye.prototype.handlePushTokenExpire=function(e){this.stateCenter.actionListener(\"_tokenExpired\",e)},ye.prototype.closeHandler=function(e){this.service.closeHandler(e)},ye.prototype.openHandler=function(e){this.service.openHandler(e)},ye.prototype.errorHandler=function(e){this.service.errorHandler(e)},ye.prototype.getHeader=function(e,t,n,r){return{Protocol:\"req\",cmd:e,appid:this.stateCenter.appid,seq:++this.cmdSeq,user_id:this.stateCenter.userid,session_id:t||\"\",room_id:n||\"\",room_session_id:r||\"\",biz_version:this.stateCenter.bizVersion||\"\"}},ye.prototype.startCheck=function(){this.logger.info(U.SERVICE_START_CHECK+\" start\"),this.service.startCheck()},ye.prototype.stopCheck=function(){this.logger.info(U.SERVICE_STOP_CHECK+\" stop\"),this.service.stopCheck()},ye.prototype.isDisConnect=function(){return!this.service||this.service.isDisConnect()},ye.prototype.createSocket=function(e){var t=this;this.service.createSocket(e),this.responseRouters=ge(ge({},this.responseRouters),{push_kickout:function(e){t.handlePushKickout(e)},push_custommsg:function(e){t.handlePushCustomMsg(e)},push_im_chat:function(e){t.handlePushRoomMsg(e)},push_userlist_update:function(e){t.handlePushUserStateUpdateMsg(e)},push_merge_message:function(e){t.handlePushMergeMsg(e)},push_trans:function(e){t.handlePushTransMsg(e)},push_signal:function(e){t.handlePushSignalMsg(e)},push_token_expire:function(e){t.handlePushTokenExpire(e)}})},ye.prototype.closeSocket=function(){this.service.closeSocket()},ye.prototype.sendMessage=function(e,t,n,r,o,i){var s,a;return this.service.isDisConnect()?(this.logger.error(U.SERVICE_SEND+\" socket is disconnect\"),r(M.SOCKET_CLOSE),0):(s=null!=i&&i.roomID?i.roomID:null==(s=this.stateCenter.roomModulesList[0])?void 0:s.roomID,a=null!=i&&i.roomSessionID?i.roomSessionID:null==(a=this.stateCenter.roomModulesList[0])?void 0:a.roomSessionID,i=null!=i&&i.sessionID?i.sessionID:null==(i=this.stateCenter.roomModulesList[0])?void 0:i.sessionID,o=o||this.getHeader(e,i,s,a),this.logger.info(U.SERVICE_SEND+\" sendMsg:\"+JSON.stringify({header:o,body:t})),this.service.sendMessage(o,t,n,r))},ye.prototype.on=function(e,t){this.responseRouters[e]=t},ye.prototype.login=function(e,t,n){var r=this.getHeader(e.isMulti?\"enter\":\"login\",e.sessionID,e.roomID,e.roomSessionID);e={id_name:this.stateCenter.idName,nick_name:this.stateCenter.nickName,role:this.stateCenter.role,token:e.token,version:this.stateCenter.sdKVersion,room_name:e.roomID,user_state_flag:this.stateCenter.userStateUpdate?1:0,room_create_flag:this.stateCenter.roomCreateFlag,client_type:0===this.stateCenter.ENV?a.ClientType_Webrtc:a.ClientType_SmallProgram,third_token:e.thirdToken,user_count_limit:e.maxMemberCount,relate_service:this.stateCenter.relateService.join()||\"\",login_logic:this.stateCenter.isMultiRoom?3:1,proto_format:this.stateCenter.protoFormat};return this.sendMessage(\"\",e,t,n,r)},ye.prototype.logout=function(e,t,n){var r=e.isMulti?\"quit\":\"logout\",o={reserve:0};return\"logout\"==r&&(o.login_logic=this.stateCenter.isMultiRoom?3:1),this.sendMessage(r,o,t,n,void 0,{sessionID:e.sessionID,roomID:e.roomID,roomSessionID:e.roomSessionID})},ye.prototype.heartBeat=function(e,t,n){return this.sendMessage(\"hb\",{reserve:0},e,t,void 0,n)},ye.prototype.fetchUserList=function(e,t,n,r){return this.sendMessage(\"user_list\",e,t,n,void 0,r)},ye.prototype.fetchUserListV2=function(e,t,n,r){return this.sendMessage(\"user_list_v2\",e,t,n,void 0,r)},ye.prototype.fetchReliableMessage=function(e,t,n,r){return this.sendMessage(\"trans_fetch\",e,t,n,void 0,r)},ye.prototype.sendReliableMessage=function(e,t,n,r){return this.sendMessage(\"trans\",e,t,n,void 0,r)},ye.prototype.sendRoomMsg=function(e,t,n,r){return this.sendMessage(\"im_chat\",e,t,n,void 0,r)},ye.prototype.sendCustomCommand=function(e,t,n,r){return this.sendMessage(\"custommsg\",e,t,n,void 0,r)},ye.prototype.sendBigRoomMessage=function(e,t,n,r){return this.sendMessage(\"bigim_chat\",e,t,n,void 0,r)},ye.prototype.sendRelayMessage=function(e,t,n,r){return this.sendMessage(\"relay\",e,t,n,void 0,r)},ye.prototype.sendSignalCmd=function(e,t,n,r){return this.sendMessage(\"signal\",e,t,n,void 0,r)},ye.prototype.sendPB=function(e){return this.service.isDisConnect()||this.stateCenter.networkState==i.offline?(this.logger.error(U.RTM_SEND_PB+\" socket is disconnected\"),!1):this.service.sendPB(e)},ye);function ye(e,t,n){this.stateCenter=e,this.logger=t,this.rtm=n,this.service=new _e(this.stateCenter.ENV),this.cmdSeq=0,this.responseRouters={}}be.getInstance=function(){return be.instance=be.instance?be.instance:new be},be.prototype.setSetting=function(e,t){var n,r,o=Array.isArray(t)&&0<t.length;for(n in e)if(\"number\"==typeof e[n].ctrlmode&&[1,2].includes(e[n].ctrlmode))this.setting[n]=e[n],this.setting[n+\"_ctrlmode\"]=e[n].ctrlmode;else for(var i in e[n])i.endsWith(\"_ctrlmode\")||o&&-1==t.indexOf(i)||(1===(r=e[n][i+\"_ctrlmode\"])||2===r?this.setting[i]=e[n][i]:this.defaultSetting[i]&&(this.setting[i]=this.defaultSetting[i]),\"number\"==typeof r&&(this.setting[i+\"_ctrlmode\"]=e[n][i+\"_ctrlmode\"]))},be.prototype.getSetting=function(e,t){return(t=void 0!==t&&t)&&2!=this.setting[e+\"_ctrlmode\"]?void 0:this.setting[e]};var ve=be;function be(){this.defaultSetting={remote_log_level:\"info\"},this.requestList={},this.setting=JSON.parse(JSON.stringify(this.defaultSetting))}var Ee=n(0),Oe=n.n(Ee),Te=(t=n(6),n(8)),Se=n.n(Te),Re=(Te=n(9),n.n(Te)),ke=(Te=n(14),n.n(Te)),Ce=(Te=n(4),n.n(Te)),we={d:(e,t)=>{for(var n in t)we.o(t,n)&&!we.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},Ne=(((e,t,n)=>{function r(e){return\"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(e)}function o(e,t){return e&t}function i(e,t){return e|t}function s(e,t){return e^t}function a(e,t){return e&~t}n.d(t,{default:()=>ie});var c,u=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";function l(e){for(var t,n=\"\",r=0;r+3<=e.length;r+=3)t=parseInt(e.substring(r,r+3),16),n+=u.charAt(t>>6)+u.charAt(63&t);for(r+1==e.length?(t=parseInt(e.substring(r,r+1),16),n+=u.charAt(t<<2)):r+2==e.length&&(t=parseInt(e.substring(r,r+2),16),n+=u.charAt(t>>2)+u.charAt((3&t)<<4));0<(3&n.length);)n+=\"=\";return n}function h(e){for(var t=\"\",n=0,o=0,i=0;i<e.length&&\"=\"!=e.charAt(i);++i){var s=u.indexOf(e.charAt(i));s<0||(n=0==n?(t+=r(s>>2),o=3&s,1):1==n?(t+=r(o<<2|s>>4),o=15&s,2):2==n?(t=(t+=r(o))+r(s>>2),o=3&s,3):(t=(t+=r(o<<2|s>>4))+r(15&s),0))}return 1==n&&(t+=r(o<<2)),t}var p,d={decode:function(e){if(void 0===p){var t=\"= \\f\\n\\r\\t \\u2028\\u2029\";for(p=Object.create(null),i=0;i<64;++i)p[\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".charAt(i)]=i;for(p[\"-\"]=62,p._=63,i=0;i<t.length;++i)p[t.charAt(i)]=-1}for(var n=[],r=0,o=0,i=0;i<e.length;++i){var s=e.charAt(i);if(\"=\"==s)break;if(-1!=(s=p[s])){if(void 0===s)throw new Error(\"Illegal character at offset \"+i);r|=s,4<=++o?(n[n.length]=r>>16,n[n.length]=r>>8&255,n[n.length]=255&r,o=r=0):r<<=6}}switch(o){case 1:throw new Error(\"Base64 encoding incomplete: at least 2 bits missing\");case 2:n[n.length]=r>>10;break;case 3:n[n.length]=r>>16,n[n.length]=r>>8&255}return n},re:/-----BEGIN [^-]+-----([A-Za-z0-9+\\/=\\s]+)-----END [^-]+-----|begin-base64[^\\n]+\\n([A-Za-z0-9+\\/=\\s]+)====/,unarmor:function(e){var t=d.re.exec(e);if(t)if(t[1])e=t[1];else{if(!t[2])throw new Error(\"RegExp out of sync\");e=t[2]}return d.decode(e)}},_=(m.prototype.mulAdd=function(e,t){for(var n,r=this.buf,o=r.length,i=0;i<o;++i)(n=r[i]*e+t)<1e13?t=0:n-=1e13*(t=0|n/1e13),r[i]=n;0<t&&(r[i]=t)},m.prototype.sub=function(e){for(var t,n=this.buf,r=n.length,o=0;o<r;++o)e=(t=n[o]-e)<0?(t+=1e13,1):0,n[o]=t;for(;0===n[n.length-1];)n.pop()},m.prototype.toString=function(e){if(10!=(e||10))throw new Error(\"only base 10 is supported\");for(var t=this.buf,n=t[t.length-1].toString(),r=t.length-2;0<=r;--r)n+=(1e13+t[r]).toString().substring(1);return n},m.prototype.valueOf=function(){for(var e=this.buf,t=0,n=e.length-1;0<=n;--n)t=1e13*t+e[n];return t},m.prototype.simplify=function(){var e=this.buf;return 1==e.length?e[0]:this},m),f=/^(\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/,g=/^(\\d\\d\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/;function m(e){this.buf=[+e||0]}function y(e,t){return e.length>t?e.substring(0,t)+\"…\":e}H.prototype.get=function(e){if((e=void 0===e?this.pos++:e)>=this.enc.length)throw new Error(\"Requesting byte offset \"+e+\" on a stream of length \"+this.enc.length);return\"string\"==typeof this.enc?this.enc.charCodeAt(e):this.enc[e]},H.prototype.hexByte=function(e){return this.hexDigits.charAt(e>>4&15)+this.hexDigits.charAt(15&e)},H.prototype.hexDump=function(e,t,n){for(var r=\"\",o=e;o<t;++o)if(r+=this.hexByte(this.get(o)),!0!==n)switch(15&o){case 7:r+=\"  \";break;case 15:r+=\"\\n\";break;default:r+=\" \"}return r},H.prototype.isASCII=function(e,t){for(var n=e;n<t;++n){var r=this.get(n);if(r<32||176<r)return!1}return!0},H.prototype.parseStringISO=function(e,t){for(var n=\"\",r=e;r<t;++r)n+=String.fromCharCode(this.get(r));return n},H.prototype.parseStringUTF=function(e,t){for(var n=\"\",r=e;r<t;){var o=this.get(r++);n+=o<128?String.fromCharCode(o):191<o&&o<224?String.fromCharCode((31&o)<<6|63&this.get(r++)):String.fromCharCode((15&o)<<12|(63&this.get(r++))<<6|63&this.get(r++))}return n},H.prototype.parseStringBMP=function(e,t){for(var n,r,o=\"\",i=e;i<t;)n=this.get(i++),r=this.get(i++),o+=String.fromCharCode(n<<8|r);return o},H.prototype.parseTime=function(e,t,n){return e=this.parseStringISO(e,t),(t=(n?f:g).exec(e))?(n&&(t[1]=+t[1],t[1]+=+t[1]<70?2e3:1900),e=t[1]+\"-\"+t[2]+\"-\"+t[3]+\" \"+t[4],t[5]&&(e+=\":\"+t[5],t[6]&&(e+=\":\"+t[6],t[7]&&(e+=\".\"+t[7]))),t[8]&&(e+=\" UTC\",\"Z\"!=t[8]&&(e+=t[8],t[9]&&(e+=\":\"+t[9]))),e):\"Unrecognized time: \"+e},H.prototype.parseInteger=function(e,t){for(var n,r=this.get(e),o=127<r,i=o?255:0,s=\"\";r==i&&++e<t;)r=this.get(e);if(0==(n=t-e))return o?-1:0;if(4<n){for(s=r,n<<=3;0==(128&(+s^i));)s=+s<<1,--n;s=\"(\"+n+\" bit)\\n\"}o&&(r-=256);for(var a=new _(r),c=e+1;c<t;++c)a.mulAdd(256,this.get(c));return s+a.toString()},H.prototype.parseBitString=function(e,t,n){for(var r=this.get(e),o=\"(\"+((t-e-1<<3)-r)+\" bit)\\n\",i=\"\",s=e+1;s<t;++s){for(var a=this.get(s),c=s==t-1?r:0,u=7;c<=u;--u)i+=a>>u&1?\"1\":\"0\";if(i.length>n)return o+y(i,n)}return o+i},H.prototype.parseOctetString=function(e,t,n){if(this.isASCII(e,t))return y(this.parseStringISO(e,t),n);var r=t-e,o=\"(\"+r+\" byte)\\n\";r>(n/=2)&&(t=e+n);for(var i=e;i<t;++i)o+=this.hexByte(this.get(i));return n<r&&(o+=\"…\"),o},H.prototype.parseOID=function(e,t,n){for(var r=\"\",o=new _,i=0,s=e;s<t;++s){var a=this.get(s);if(o.mulAdd(128,127&a),i+=7,!(128&a)){if(\"\"===r?r=(o=o.simplify())instanceof _?(o.sub(80),\"2.\"+o.toString()):(a=o<80?o<40?0:1:2)+\".\"+(o-40*a):r+=\".\"+o.toString(),r.length>n)return y(r,n);o=new _,i=0}}return 0<i&&(r+=\".incomplete\"),r};var v=H,b=(D.prototype.typeName=function(){switch(this.tag.tagClass){case 0:switch(this.tag.tagNumber){case 0:return\"EOC\";case 1:return\"BOOLEAN\";case 2:return\"INTEGER\";case 3:return\"BIT_STRING\";case 4:return\"OCTET_STRING\";case 5:return\"NULL\";case 6:return\"OBJECT_IDENTIFIER\";case 7:return\"ObjectDescriptor\";case 8:return\"EXTERNAL\";case 9:return\"REAL\";case 10:return\"ENUMERATED\";case 11:return\"EMBEDDED_PDV\";case 12:return\"UTF8String\";case 16:return\"SEQUENCE\";case 17:return\"SET\";case 18:return\"NumericString\";case 19:return\"PrintableString\";case 20:return\"TeletexString\";case 21:return\"VideotexString\";case 22:return\"IA5String\";case 23:return\"UTCTime\";case 24:return\"GeneralizedTime\";case 25:return\"GraphicString\";case 26:return\"VisibleString\";case 27:return\"GeneralString\";case 28:return\"UniversalString\";case 30:return\"BMPString\"}return\"Universal_\"+this.tag.tagNumber.toString();case 1:return\"Application_\"+this.tag.tagNumber.toString();case 2:return\"[\"+this.tag.tagNumber.toString()+\"]\";case 3:return\"Private_\"+this.tag.tagNumber.toString()}},D.prototype.content=function(e){if(void 0!==this.tag){void 0===e&&(e=1/0);var t=this.posContent(),n=Math.abs(this.length);if(!this.tag.isUniversal())return null!==this.sub?\"(\"+this.sub.length+\" elem)\":this.stream.parseOctetString(t,t+n,e);switch(this.tag.tagNumber){case 1:return 0===this.stream.get(t)?\"false\":\"true\";case 2:return this.stream.parseInteger(t,t+n);case 3:return this.sub?\"(\"+this.sub.length+\" elem)\":this.stream.parseBitString(t,t+n,e);case 4:return this.sub?\"(\"+this.sub.length+\" elem)\":this.stream.parseOctetString(t,t+n,e);case 6:return this.stream.parseOID(t,t+n,e);case 16:case 17:return null!==this.sub?\"(\"+this.sub.length+\" elem)\":\"(no elem)\";case 12:return y(this.stream.parseStringUTF(t,t+n),e);case 18:case 19:case 20:case 21:case 22:case 26:return y(this.stream.parseStringISO(t,t+n),e);case 30:return y(this.stream.parseStringBMP(t,t+n),e);case 23:case 24:return this.stream.parseTime(t,t+n,23==this.tag.tagNumber)}}return null},D.prototype.toString=function(){return this.typeName()+\"@\"+this.stream.pos+\"[header:\"+this.header+\",length:\"+this.length+\",sub:\"+(null===this.sub?\"null\":this.sub.length)+\"]\"},D.prototype.toPrettyString=function(e){var t=(e=void 0===e?\"\":e)+this.typeName()+\" @\"+this.stream.pos;if(0<=this.length&&(t+=\"+\"),t+=this.length,this.tag.tagConstructed?t+=\" (constructed)\":!this.tag.isUniversal()||3!=this.tag.tagNumber&&4!=this.tag.tagNumber||null===this.sub||(t+=\" (encapsulates)\"),t+=\"\\n\",null!==this.sub){e+=\"  \";for(var n=0,r=this.sub.length;n<r;++n)t+=this.sub[n].toPrettyString(e)}return t},D.prototype.posStart=function(){return this.stream.pos},D.prototype.posContent=function(){return this.stream.pos+this.header},D.prototype.posEnd=function(){return this.stream.pos+this.header+Math.abs(this.length)},D.prototype.toHexString=function(){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)},D.decodeLength=function(e){var t=127&(n=e.get());if(t==n)return t;if(6<t)throw new Error(\"Length over 48 bits not supported at position \"+(e.pos-1));if(0==t)return null;for(var n=0,r=0;r<t;++r)n=256*n+e.get();return n},D.prototype.getHexStringValue=function(){var e=this.toHexString(),t=2*this.header,n=2*this.length;return e.substr(t,n)},D.decode=function(e){function t(){var e=[];if(null!==o){for(var t=i+o;n.pos<t;)e[e.length]=D.decode(n);if(n.pos!=t)throw new Error(\"Content size is not correct for container starting at offset \"+i)}else try{for(;;){var r=D.decode(n);if(r.tag.isEOC())break;e[e.length]=r}o=i-n.pos}catch(e){throw new Error(\"Exception while decoding undefined length content: \"+e)}return e}var n=e instanceof v?e:new v(e,0),r=(e=new v(n),new E(n)),o=D.decodeLength(n),i=n.pos,s=i-e.pos,a=null;if(r.tagConstructed)a=t();else if(r.isUniversal()&&(3==r.tagNumber||4==r.tagNumber))try{if(3==r.tagNumber&&0!=n.get())throw new Error(\"BIT STRINGs with unused bits cannot encapsulate.\");a=t();for(var c=0;c<a.length;++c)if(a[c].tag.isEOC())throw new Error(\"EOC is not supposed to be actual content.\")}catch(e){a=null}if(null===a){if(null===o)throw new Error(\"We can't skip over an invalid tag with undefined length at offset \"+i);n.pos=i+Math.abs(o)}return new D(e,s,o,r,a)},D),E=(A.prototype.isUniversal=function(){return 0===this.tagClass},A.prototype.isEOC=function(){return 0===this.tagClass&&0===this.tagNumber},A),O=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],T=(1<<26)/O[O.length-1],S=(P.prototype.toString=function(e){if(this.s<0)return\"-\"+this.negate().toString(e);var t;if(16==e)t=4;else if(8==e)t=3;else if(2==e)t=1;else if(32==e)t=5;else{if(4!=e)return this.toRadix(e);t=2}var n,o=(1<<t)-1,i=!1,s=\"\",a=this.t,c=this.DB-a*this.DB%t;if(0<a--)for(c<this.DB&&0<(n=this[a]>>c)&&(i=!0,s=r(n));0<=a;)c<t?(n=(this[a]&(1<<c)-1)<<t-c,n|=this[--a]>>(c+=this.DB-t)):(n=this[a]>>(c-=t)&o,c<=0&&(c+=this.DB,--a)),(i=0<n||i)&&(s+=r(n));return i?s:\"0\"},P.prototype.negate=function(){var e=j();return P.ZERO.subTo(this,e),e},P.prototype.abs=function(){return this.s<0?this.negate():this},P.prototype.compareTo=function(e){var t=this.s-e.s;if(0!=t)return t;var n=this.t;if(0!=(t=n-e.t))return this.s<0?-t:t;for(;0<=--n;)if(0!=(t=this[n]-e[n]))return t;return 0},P.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+z(this[this.t-1]^this.s&this.DM)},P.prototype.mod=function(e){var t=j();return this.abs().divRemTo(e,null,t),this.s<0&&0<t.compareTo(P.ZERO)&&e.subTo(t,t),t},P.prototype.modPowInt=function(e,t){return t=new(e<256||t.isEven()?k:C)(t),this.exp(e,t)},P.prototype.clone=function(){var e=j();return this.copyTo(e),e},P.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},P.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},P.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},P.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},P.prototype.toByteArray=function(){var e=this.t,t=[];t[0]=this.s;var n,r=this.DB-e*this.DB%8,o=0;if(0<e--)for(r<this.DB&&(n=this[e]>>r)!=(this.s&this.DM)>>r&&(t[o++]=n|this.s<<this.DB-r);0<=e;)r<8?(n=(this[e]&(1<<r)-1)<<8-r,n|=this[--e]>>(r+=this.DB-8)):(n=this[e]>>(r-=8)&255,r<=0&&(r+=this.DB,--e)),0!=(128&n)&&(n|=-256),0==o&&(128&this.s)!=(128&n)&&++o,(0<o||n!=this.s)&&(t[o++]=n);return t},P.prototype.equals=function(e){return 0==this.compareTo(e)},P.prototype.min=function(e){return this.compareTo(e)<0?this:e},P.prototype.max=function(e){return 0<this.compareTo(e)?this:e},P.prototype.and=function(e){var t=j();return this.bitwiseTo(e,o,t),t},P.prototype.or=function(e){var t=j();return this.bitwiseTo(e,i,t),t},P.prototype.xor=function(e){var t=j();return this.bitwiseTo(e,s,t),t},P.prototype.andNot=function(e){var t=j();return this.bitwiseTo(e,a,t),t},P.prototype.not=function(){for(var e=j(),t=0;t<this.t;++t)e[t]=this.DM&~this[t];return e.t=this.t,e.s=~this.s,e},P.prototype.shiftLeft=function(e){var t=j();return e<0?this.rShiftTo(-e,t):this.lShiftTo(e,t),t},P.prototype.shiftRight=function(e){var t=j();return e<0?this.lShiftTo(-e,t):this.rShiftTo(e,t),t},P.prototype.getLowestSetBit=function(){for(var e=0;e<this.t;++e)if(0!=this[e])return e*this.DB+function(e){if(0==e)return-1;var t=0;return 0==(65535&e)&&(e>>=16,t+=16),0==(255&e)&&(e>>=8,t+=8),0==(15&e)&&(e>>=4,t+=4),0==(3&e)&&(e>>=2,t+=2),0==(1&e)&&++t,t}(this[e]);return this.s<0?this.t*this.DB:-1},P.prototype.bitCount=function(){for(var e=0,t=this.s&this.DM,n=0;n<this.t;++n)e+=function(e){for(var t=0;0!=e;)e&=e-1,++t;return t}(this[n]^t);return e},P.prototype.testBit=function(e){var t=Math.floor(e/this.DB);return t>=this.t?0!=this.s:0!=(this[t]&1<<e%this.DB)},P.prototype.setBit=function(e){return this.changeBit(e,i)},P.prototype.clearBit=function(e){return this.changeBit(e,a)},P.prototype.flipBit=function(e){return this.changeBit(e,s)},P.prototype.add=function(e){var t=j();return this.addTo(e,t),t},P.prototype.subtract=function(e){var t=j();return this.subTo(e,t),t},P.prototype.multiply=function(e){var t=j();return this.multiplyTo(e,t),t},P.prototype.divide=function(e){var t=j();return this.divRemTo(e,t,null),t},P.prototype.remainder=function(e){var t=j();return this.divRemTo(e,null,t),t},P.prototype.divideAndRemainder=function(e){var t=j(),n=j();return this.divRemTo(e,t,n),[t,n]},P.prototype.modPow=function(e,t){var n=e.bitLength(),r=V(1);if(n<=0)return r;var o=n<18?1:n<48?3:n<144?4:n<768?5:6,i=new(n<8?k:t.isEven()?w:C)(t),s=[],a=3,c=o-1,u=(1<<o)-1;if(s[1]=i.convert(this),1<o){var l=j();for(i.sqrTo(s[1],l);a<=u;)s[a]=j(),i.mulTo(l,s[a-2],s[a]),a+=2}var h,p,d=e.t-1,_=!0,f=j();for(n=z(e[d])-1;0<=d;){for(c<=n?h=e[d]>>n-c&u:(h=(e[d]&(1<<n+1)-1)<<c-n,0<d&&(h|=e[d-1]>>this.DB+n-c)),a=o;0==(1&h);)h>>=1,--a;if((n-=a)<0&&(n+=this.DB,--d),_)s[h].copyTo(r),_=!1;else{for(;1<a;)i.sqrTo(r,f),i.sqrTo(f,r),a-=2;0<a?i.sqrTo(r,f):(p=r,r=f,f=p),i.mulTo(f,s[h],r)}for(;0<=d&&0==(e[d]&1<<n);)i.sqrTo(r,f),p=r,r=f,f=p,--n<0&&(n=this.DB-1,--d)}return i.revert(r)},P.prototype.modInverse=function(e){var t=e.isEven();if(this.isEven()&&t||0==e.signum())return P.ZERO;for(var n=e.clone(),r=this.clone(),o=V(1),i=V(0),s=V(0),a=V(1);0!=n.signum();){for(;n.isEven();)n.rShiftTo(1,n),t?(o.isEven()&&i.isEven()||(o.addTo(this,o),i.subTo(e,i)),o.rShiftTo(1,o)):i.isEven()||i.subTo(e,i),i.rShiftTo(1,i);for(;r.isEven();)r.rShiftTo(1,r),t?(s.isEven()&&a.isEven()||(s.addTo(this,s),a.subTo(e,a)),s.rShiftTo(1,s)):a.isEven()||a.subTo(e,a),a.rShiftTo(1,a);0<=n.compareTo(r)?(n.subTo(r,n),t&&o.subTo(s,o),i.subTo(a,i)):(r.subTo(n,r),t&&s.subTo(o,s),a.subTo(i,a))}return 0!=r.compareTo(P.ONE)?P.ZERO:0<=a.compareTo(e)?a.subtract(e):a.signum()<0?(a.addTo(e,a),a.signum()<0?a.add(e):a):a},P.prototype.pow=function(e){return this.exp(e,new R)},P.prototype.gcd=function(e){var t=this.s<0?this.negate():this.clone(),n=e.s<0?e.negate():e.clone(),r=(t.compareTo(n)<0&&(e=t,t=n,n=e),t.getLowestSetBit());if((e=n.getLowestSetBit())<0)return t;for(0<(e=r<e?r:e)&&(t.rShiftTo(e,t),n.rShiftTo(e,n));0<t.signum();)0<(r=t.getLowestSetBit())&&t.rShiftTo(r,t),0<(r=n.getLowestSetBit())&&n.rShiftTo(r,n),0<=t.compareTo(n)?(t.subTo(n,t),t.rShiftTo(1,t)):(n.subTo(t,n),n.rShiftTo(1,n));return 0<e&&n.lShiftTo(e,n),n},P.prototype.isProbablePrime=function(e){var t,n=this.abs();if(1==n.t&&n[0]<=O[O.length-1]){for(t=0;t<O.length;++t)if(n[0]==O[t])return!0;return!1}if(n.isEven())return!1;for(t=1;t<O.length;){for(var r=O[t],o=t+1;o<O.length&&r<T;)r*=O[o++];for(r=n.modInt(r);t<o;)if(r%O[t++]==0)return!1}return n.millerRabin(e)},P.prototype.copyTo=function(e){for(var t=this.t-1;0<=t;--t)e[t]=this[t];e.t=this.t,e.s=this.s},P.prototype.fromInt=function(e){this.t=1,this.s=e<0?-1:0,0<e?this[0]=e:e<-1?this[0]=e+this.DV:this.t=0},P.prototype.fromString=function(e,t){var n;if(16==t)n=4;else if(8==t)n=3;else if(256==t)n=8;else if(2==t)n=1;else if(32==t)n=5;else{if(4!=t)return void this.fromRadix(e,t);n=2}this.t=0,this.s=0;for(var r=e.length,o=!1,i=0;0<=--r;){var s=8==n?255&+e[r]:G(e,r);s<0?\"-\"==e.charAt(r)&&(o=!0):(o=!1,0==i?this[this.t++]=s:i+n>this.DB?(this[this.t-1]|=(s&(1<<this.DB-i)-1)<<i,this[this.t++]=s>>this.DB-i):this[this.t-1]|=s<<i,(i+=n)>=this.DB&&(i-=this.DB))}8==n&&0!=(128&+e[0])&&(this.s=-1,0<i&&(this[this.t-1]|=(1<<this.DB-i)-1<<i)),this.clamp(),o&&P.ZERO.subTo(this,this)},P.prototype.clamp=function(){for(var e=this.s&this.DM;0<this.t&&this[this.t-1]==e;)--this.t},P.prototype.dlShiftTo=function(e,t){for(var n=this.t-1;0<=n;--n)t[n+e]=this[n];for(n=e-1;0<=n;--n)t[n]=0;t.t=this.t+e,t.s=this.s},P.prototype.drShiftTo=function(e,t){for(var n=e;n<this.t;++n)t[n-e]=this[n];t.t=Math.max(this.t-e,0),t.s=this.s},P.prototype.lShiftTo=function(e,t){for(var n=e%this.DB,r=this.DB-n,o=(1<<r)-1,i=Math.floor(e/this.DB),s=this.s<<n&this.DM,a=this.t-1;0<=a;--a)t[a+i+1]=this[a]>>r|s,s=(this[a]&o)<<n;for(a=i-1;0<=a;--a)t[a]=0;t[i]=s,t.t=this.t+i+1,t.s=this.s,t.clamp()},P.prototype.rShiftTo=function(e,t){t.s=this.s;var n=Math.floor(e/this.DB);if(n>=this.t)t.t=0;else{var r=e%this.DB,o=this.DB-r,i=(1<<r)-1;t[0]=this[n]>>r;for(var s=n+1;s<this.t;++s)t[s-n-1]|=(this[s]&i)<<o,t[s-n]=this[s]>>r;0<r&&(t[this.t-n-1]|=(this.s&i)<<o),t.t=this.t-n,t.clamp()}},P.prototype.subTo=function(e,t){for(var n=0,r=0,o=Math.min(e.t,this.t);n<o;)r+=this[n]-e[n],t[n++]=r&this.DM,r>>=this.DB;if(e.t<this.t){for(r-=e.s;n<this.t;)r+=this[n],t[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<e.t;)r-=e[n],t[n++]=r&this.DM,r>>=this.DB;r-=e.s}t.s=r<0?-1:0,r<-1?t[n++]=this.DV+r:0<r&&(t[n++]=r),t.t=n,t.clamp()},P.prototype.multiplyTo=function(e,t){var n=this.abs(),r=e.abs(),o=n.t;for(t.t=o+r.t;0<=--o;)t[o]=0;for(o=0;o<r.t;++o)t[o+n.t]=n.am(0,r[o],t,o,0,n.t);t.s=0,t.clamp(),this.s!=e.s&&P.ZERO.subTo(t,t)},P.prototype.squareTo=function(e){for(var t=this.abs(),n=e.t=2*t.t;0<=--n;)e[n]=0;for(n=0;n<t.t-1;++n){var r=t.am(n,t[n],e,2*n,0,1);(e[n+t.t]+=t.am(n+1,2*t[n],e,2*n+1,r,t.t-n-1))>=t.DV&&(e[n+t.t]-=t.DV,e[n+t.t+1]=1)}0<e.t&&(e[e.t-1]+=t.am(n,t[n],e,2*n,0,1)),e.s=0,e.clamp()},P.prototype.divRemTo=function(e,t,n){if(!((u=e.abs()).t<=0)){var r=this.abs();if(r.t<u.t)return null!=t&&t.fromInt(0),void(null!=n&&this.copyTo(n));null==n&&(n=j());var o=j(),i=this.s,s=(e=e.s,this.DB-z(u[u.t-1])),a=(0<s?(u.lShiftTo(s,o),r.lShiftTo(s,n)):(u.copyTo(o),r.copyTo(n)),o.t),c=o[a-1];if(0!=c){var u=c*(1<<this.F1)+(1<a?o[a-2]>>this.F2:0),l=this.FV/u,h=(1<<this.F1)/u,p=1<<this.F2,d=n.t,_=d-a,f=null==t?j():t;for(o.dlShiftTo(_,f),0<=n.compareTo(f)&&(n[n.t++]=1,n.subTo(f,n)),P.ONE.dlShiftTo(a,f),f.subTo(o,o);o.t<a;)o[o.t++]=0;for(;0<=--_;){var g=n[--d]==c?this.DM:Math.floor(n[d]*l+(n[d-1]+p)*h);if((n[d]+=o.am(0,g,n,_,0,a))<g)for(o.dlShiftTo(_,f),n.subTo(f,n);n[d]<--g;)n.subTo(f,n)}null!=t&&(n.drShiftTo(a,t),i!=e&&P.ZERO.subTo(t,t)),n.t=a,n.clamp(),0<s&&n.rShiftTo(s,n),i<0&&P.ZERO.subTo(n,n)}}},P.prototype.invDigit=function(){if(this.t<1)return 0;var e=this[0];if(0==(1&e))return 0;var t=3&e;return 0<(t=(t=(t=(t=t*(2-(15&e)*t)&15)*(2-(255&e)*t)&255)*(2-((65535&e)*t&65535))&65535)*(2-e*t%this.DV)%this.DV)?this.DV-t:-t},P.prototype.isEven=function(){return 0==(0<this.t?1&this[0]:this.s)},P.prototype.exp=function(e,t){if(4294967295<e||e<1)return P.ONE;var n,r=j(),o=j(),i=t.convert(this),s=z(e)-1;for(i.copyTo(r);0<=--s;)t.sqrTo(r,o),0<(e&1<<s)?t.mulTo(o,i,r):(n=r,r=o,o=n);return t.revert(r)},P.prototype.chunkSize=function(e){return Math.floor(Math.LN2*this.DB/Math.log(e))},P.prototype.toRadix=function(e){if(null==e&&(e=10),0==this.signum()||e<2||36<e)return\"0\";var t=this.chunkSize(e),n=Math.pow(e,t),r=V(n),o=j(),i=j(),s=\"\";for(this.divRemTo(r,o,i);0<o.signum();)s=(n+i.intValue()).toString(e).substr(1)+s,o.divRemTo(r,o,i);return i.intValue().toString(e)+s},P.prototype.fromRadix=function(e,t){this.fromInt(0);for(var n=this.chunkSize(t=null==t?10:t),r=Math.pow(t,n),o=!1,i=0,s=0,a=0;a<e.length;++a){var c=G(e,a);c<0?\"-\"==e.charAt(a)&&0==this.signum()&&(o=!0):(s=t*s+c,++i>=n&&(this.dMultiply(r),this.dAddOffset(s,0),s=i=0))}0<i&&(this.dMultiply(Math.pow(t,i)),this.dAddOffset(s,0)),o&&P.ZERO.subTo(this,this)},P.prototype.fromNumber=function(e,t,n){if(\"number\"==typeof t)if(e<2)this.fromInt(1);else for(this.fromNumber(e,n),this.testBit(e-1)||this.bitwiseTo(P.ONE.shiftLeft(e-1),i,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(t);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(P.ONE.shiftLeft(e-1),this);else{var r=7&e;(n=[]).length=1+(e>>3),t.nextBytes(n),0<r?n[0]&=(1<<r)-1:n[0]=0,this.fromString(n,256)}},P.prototype.bitwiseTo=function(e,t,n){for(var r,o=Math.min(e.t,this.t),i=0;i<o;++i)n[i]=t(this[i],e[i]);if(e.t<this.t){for(r=e.s&this.DM,i=o;i<this.t;++i)n[i]=t(this[i],r);n.t=this.t}else{for(r=this.s&this.DM,i=o;i<e.t;++i)n[i]=t(r,e[i]);n.t=e.t}n.s=t(this.s,e.s),n.clamp()},P.prototype.changeBit=function(e,t){return e=P.ONE.shiftLeft(e),this.bitwiseTo(e,t,e),e},P.prototype.addTo=function(e,t){for(var n=0,r=0,o=Math.min(e.t,this.t);n<o;)r+=this[n]+e[n],t[n++]=r&this.DM,r>>=this.DB;if(e.t<this.t){for(r+=e.s;n<this.t;)r+=this[n],t[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<e.t;)r+=e[n],t[n++]=r&this.DM,r>>=this.DB;r+=e.s}t.s=r<0?-1:0,0<r?t[n++]=r:r<-1&&(t[n++]=this.DV+r),t.t=n,t.clamp()},P.prototype.dMultiply=function(e){this[this.t]=this.am(0,e-1,this,0,0,this.t),++this.t,this.clamp()},P.prototype.dAddOffset=function(e,t){if(0!=e){for(;this.t<=t;)this[this.t++]=0;for(this[t]+=e;this[t]>=this.DV;)this[t]-=this.DV,++t>=this.t&&(this[this.t++]=0),++this[t]}},P.prototype.multiplyLowerTo=function(e,t,n){var r=Math.min(this.t+e.t,t);for(n.s=0,n.t=r;0<r;)n[--r]=0;for(var o=n.t-this.t;r<o;++r)n[r+this.t]=this.am(0,e[r],n,r,0,this.t);for(o=Math.min(e.t,t);r<o;++r)this.am(0,e[r],n,r,0,t-r);n.clamp()},P.prototype.multiplyUpperTo=function(e,t,n){var r=n.t=this.t+e.t- --t;for(n.s=0;0<=--r;)n[r]=0;for(r=Math.max(t-this.t,0);r<e.t;++r)n[this.t+r-t]=this.am(t-r,e[r],n,0,0,this.t+r-t);n.clamp(),n.drShiftTo(1,n)},P.prototype.modInt=function(e){if(e<=0)return 0;var t=this.DV%e,n=this.s<0?e-1:0;if(0<this.t)if(0==t)n=this[0]%e;else for(var r=this.t-1;0<=r;--r)n=(t*n+this[r])%e;return n},P.prototype.millerRabin=function(e){var t=this.subtract(P.ONE),n=t.getLowestSetBit();if(n<=0)return!1;var r=t.shiftRight(n);(e=e+1>>1)>O.length&&(e=O.length);for(var o=j(),i=0;i<e;++i){o.fromInt(O[Math.floor(Math.random()*O.length)]);var s=o.modPow(r,this);if(0!=s.compareTo(P.ONE)&&0!=s.compareTo(t)){for(var a=1;a++<n&&0!=s.compareTo(t);)if(0==(s=s.modPowInt(2,this)).compareTo(P.ONE))return!1;if(0!=s.compareTo(t))return!1}}return!0},P.prototype.square=function(){var e=j();return this.squareTo(e),e},P.prototype.gcda=function(e,t){var n,r=this.s<0?this.negate():this.clone(),o=e.s<0?e.negate():e.clone(),i=(r.compareTo(o)<0&&(e=r,r=o,o=e),r.getLowestSetBit()),s=o.getLowestSetBit();s<0?t(r):(0<(s=i<s?i:s)&&(r.rShiftTo(s,r),o.rShiftTo(s,o)),n=function(){0<(i=r.getLowestSetBit())&&r.rShiftTo(i,r),0<(i=o.getLowestSetBit())&&o.rShiftTo(i,o),0<=r.compareTo(o)?(r.subTo(o,r),r.rShiftTo(1,r)):(o.subTo(r,o),o.rShiftTo(1,o)),0<r.signum()?setTimeout(n,0):(0<s&&o.lShiftTo(s,o),setTimeout((function(){t(o)}),0))},setTimeout(n,10))},P.prototype.fromNumberAsync=function(e,t,n,r){var o,s,a;\"number\"==typeof t?e<2?this.fromInt(1):(this.fromNumber(e,n),this.testBit(e-1)||this.bitwiseTo(P.ONE.shiftLeft(e-1),i,this),this.isEven()&&this.dAddOffset(1,0),o=this,s=function(){o.dAddOffset(2,0),o.bitLength()>e&&o.subTo(P.ONE.shiftLeft(e-1),o),o.isProbablePrime(t)?setTimeout((function(){r()}),0):setTimeout(s,0)},setTimeout(s,0)):(n=7&e,(a=[]).length=1+(e>>3),t.nextBytes(a),0<n?a[0]&=(1<<n)-1:a[0]=0,this.fromString(a,256))},P),R=(L.prototype.convert=function(e){return e},L.prototype.revert=function(e){return e},L.prototype.mulTo=function(e,t,n){e.multiplyTo(t,n)},L.prototype.sqrTo=function(e,t){e.squareTo(t)},L),k=(M.prototype.convert=function(e){return e.s<0||0<=e.compareTo(this.m)?e.mod(this.m):e},M.prototype.revert=function(e){return e},M.prototype.reduce=function(e){e.divRemTo(this.m,null,e)},M.prototype.mulTo=function(e,t,n){e.multiplyTo(t,n),this.reduce(n)},M.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},M),C=(I.prototype.convert=function(e){var t=j();return e.abs().dlShiftTo(this.m.t,t),t.divRemTo(this.m,null,t),e.s<0&&0<t.compareTo(S.ZERO)&&this.m.subTo(t,t),t},I.prototype.revert=function(e){var t=j();return e.copyTo(t),this.reduce(t),t},I.prototype.reduce=function(e){for(;e.t<=this.mt2;)e[e.t++]=0;for(var t=0;t<this.m.t;++t){var n=32767&e[t],r=n*this.mpl+((n*this.mph+(e[t]>>15)*this.mpl&this.um)<<15)&e.DM;for(e[n=t+this.m.t]+=this.m.am(0,r,e,t,0,this.m.t);e[n]>=e.DV;)e[n]-=e.DV,e[++n]++}e.clamp(),e.drShiftTo(this.m.t,e),0<=e.compareTo(this.m)&&e.subTo(this.m,e)},I.prototype.mulTo=function(e,t,n){e.multiplyTo(t,n),this.reduce(n)},I.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},I),w=(N.prototype.convert=function(e){if(e.s<0||e.t>2*this.m.t)return e.mod(this.m);if(e.compareTo(this.m)<0)return e;var t=j();return e.copyTo(t),this.reduce(t),t},N.prototype.revert=function(e){return e},N.prototype.reduce=function(e){for(e.drShiftTo(this.m.t-1,this.r2),e.t>this.m.t+1&&(e.t=this.m.t+1,e.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);e.compareTo(this.r2)<0;)e.dAddOffset(1,this.m.t+1);for(e.subTo(this.r2,e);0<=e.compareTo(this.m);)e.subTo(this.m,e)},N.prototype.mulTo=function(e,t,n){e.multiplyTo(t,n),this.reduce(n)},N.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},N);function N(e){this.m=e,this.r2=j(),this.q3=j(),S.ONE.dlShiftTo(2*e.t,this.r2),this.mu=this.r2.divide(e)}function I(e){this.m=e,this.mp=e.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<e.DB-15)-1,this.mt2=2*e.t}function M(e){this.m=e}function L(){}function P(e,t,n){null!=e&&(\"number\"==typeof e?this.fromNumber(e,t,n):null==t&&\"string\"!=typeof e?this.fromString(e,256):this.fromString(e,t))}function A(e){var t=e.get();if(this.tagClass=t>>6,this.tagConstructed=0!=(32&t),this.tagNumber=31&t,31==this.tagNumber){for(var n=new _;t=e.get(),n.mulAdd(128,127&t),128&t;);this.tagNumber=n.simplify()}}function D(e,t,n,r,o){if(!(r instanceof E))throw new Error(\"Invalid tag value.\");this.stream=e,this.header=t,this.length=n,this.tag=r,this.sub=o}function H(e,t){this.hexDigits=\"0123456789ABCDEF\",e instanceof H?(this.enc=e.enc,this.pos=e.pos):(this.enc=e,this.pos=t)}function j(){return new S(null)}function q(e,t){return new S(e,t)}t=(n=\"undefined\"!=typeof navigator)&&\"Microsoft Internet Explorer\"==navigator.appName?(S.prototype.am=function(e,t,n,r,o,i){for(var s=32767&t,a=t>>15;0<=--i;){var c=32767&this[e],u=this[e++]>>15,l=a*c+u*s;o=((c=s*c+((32767&l)<<15)+n[r]+(1073741823&o))>>>30)+(l>>>15)+a*u+(o>>>30),n[r++]=1073741823&c}return o},30):n&&\"Netscape\"!=navigator.appName?(S.prototype.am=function(e,t,n,r,o,i){for(;0<=--i;){var s=t*this[e++]+n[r]+o;o=Math.floor(s/67108864),n[r++]=67108863&s}return o},26):(S.prototype.am=function(e,t,n,r,o,i){for(var s=16383&t,a=t>>14;0<=--i;){var c=16383&this[e],u=this[e++]>>14,l=a*c+u*s;o=((c=s*c+((16383&l)<<14)+n[r]+o)>>28)+(l>>14)+a*u,n[r++]=268435455&c}return o},28),S.prototype.DB=t,S.prototype.DM=(1<<t)-1,S.prototype.DV=1<<t,S.prototype.FV=Math.pow(2,52),S.prototype.F1=52-t,S.prototype.F2=2*t-52;for(var U=[],B=\"0\".charCodeAt(0),x=0;x<=9;++x)U[B++]=x;for(B=\"a\".charCodeAt(0),x=10;x<36;++x)U[B++]=x;for(B=\"A\".charCodeAt(0),x=10;x<36;++x)U[B++]=x;function G(e,t){return null==(e=U[e.charCodeAt(t)])?-1:e}function V(e){var t=j();return t.fromInt(e),t}function z(e){var t,n=1;return 0!=(t=e>>>16)&&(e=t,n+=16),0!=(t=e>>8)&&(e=t,n+=8),0!=(t=e>>4)&&(e=t,n+=4),0!=(t=e>>2)&&(e=t,n+=2),0!=(t=e>>1)&&(e=t,n+=1),n}S.ZERO=V(0),S.ONE=V(1),Y.prototype.init=function(e){for(var t,n,r=0;r<256;++r)this.S[r]=r;for(r=t=0;r<256;++r)t=t+this.S[r]+e[r%e.length]&255,n=this.S[r],this.S[r]=this.S[t],this.S[t]=n;this.i=0,this.j=0},Y.prototype.next=function(){var e;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,e=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=e,this.S[e+this.S[this.i]&255]};var F,W=Y,Z=null;function Y(){this.i=0,this.j=0,this.S=[]}Z=[];var K=0,X=void 0;if(\"undefined\"!=typeof window&&window.crypto&&window.crypto.getRandomValues){var J=new Uint32Array(256);for(window.crypto.getRandomValues(J),X=0;X<J.length;++X)Z[K++]=255&J[X]}te.prototype.nextBytes=function(e){for(var t=0;t<e.length;++t)e[t]=function(){if(null==F){for(F=new W;K<256;){var e=Math.floor(65536*Math.random());Z[K++]=255&e}for(F.init(Z),K=0;K<Z.length;++K)Z[K]=0;K=0}return F.next()}()};var Q=te,$=(n=(ee.prototype.doPublic=function(e){return e.modPowInt(this.e,this.n)},ee.prototype.doPrivate=function(e){if(null==this.p||null==this.q)return e.modPow(this.d,this.n);for(var t=e.mod(this.p).modPow(this.dmp1,this.p),n=e.mod(this.q).modPow(this.dmq1,this.q);t.compareTo(n)<0;)t=t.add(this.p);return t.subtract(n).multiply(this.coeff).mod(this.p).multiply(this.q).add(n)},ee.prototype.setPublic=function(e,t){null!=e&&null!=t&&0<e.length&&0<t.length?(this.n=q(e,16),this.e=parseInt(t,16)):console.error(\"Invalid RSA public key\")},ee.prototype.encrypt=function(e){var t=this.n.bitLength()+7>>3;e=function(e,t){if(t<e.length+11)return console.error(\"Message too long for RSA\"),null;for(var n=[],r=e.length-1;0<=r&&0<t;){var o=e.charCodeAt(r--);o<128?n[--t]=o:127<o&&o<2048?(n[--t]=63&o|128,n[--t]=o>>6|192):(n[--t]=63&o|128,n[--t]=o>>6&63|128,n[--t]=o>>12|224)}n[--t]=0;for(var i=new Q,s=[];2<t;){for(s[0]=0;0==s[0];)i.nextBytes(s);n[--t]=s[0]}return n[--t]=2,n[--t]=0,new S(n)}(e,t);if(null==e)return null;if(null==(e=this.doPublic(e)))return null;for(var n=e.toString(16),r=n.length,o=0;o<2*t-r;o++)n=\"0\"+n;return n},ee.prototype.setPrivate=function(e,t,n){null!=e&&null!=t&&0<e.length&&0<t.length?(this.n=q(e,16),this.e=parseInt(t,16),this.d=q(n,16)):console.error(\"Invalid RSA private key\")},ee.prototype.setPrivateEx=function(e,t,n,r,o,i,s,a){null!=e&&null!=t&&0<e.length&&0<t.length?(this.n=q(e,16),this.e=parseInt(t,16),this.d=q(n,16),this.p=q(r,16),this.q=q(o,16),this.dmp1=q(i,16),this.dmq1=q(s,16),this.coeff=q(a,16)):console.error(\"Invalid RSA private key\")},ee.prototype.generate=function(e,t){var n=new Q,r=e>>1;this.e=parseInt(t,16);for(var o=new S(t,16);;){for(;this.p=new S(e-r,1,n),0!=this.p.subtract(S.ONE).gcd(o).compareTo(S.ONE)||!this.p.isProbablePrime(10););for(;this.q=new S(r,1,n),0!=this.q.subtract(S.ONE).gcd(o).compareTo(S.ONE)||!this.q.isProbablePrime(10););this.p.compareTo(this.q)<=0&&(i=this.p,this.p=this.q,this.q=i);var i=this.p.subtract(S.ONE),s=this.q.subtract(S.ONE),a=i.multiply(s);if(0==a.gcd(o).compareTo(S.ONE)){this.n=this.p.multiply(this.q),this.d=o.modInverse(a),this.dmp1=this.d.mod(i),this.dmq1=this.d.mod(s),this.coeff=this.q.modInverse(this.p);break}}},ee.prototype.decrypt=function(e){if(e=q(e,16),null==(e=this.doPrivate(e)))return null;for(var t=this.n.bitLength()+7>>3,n=e.toByteArray(),r=0;r<n.length&&0==n[r];)++r;if(n.length-r!=t-1||2!=n[r])return null;for(++r;0!=n[r];)if(++r>=n.length)return null;for(var o=\"\";++r<n.length;){var i=255&n[r];i<128?o+=String.fromCharCode(i):191<i&&i<224?(o+=String.fromCharCode((31&i)<<6|63&n[r+1]),++r):(o+=String.fromCharCode((15&i)<<12|(63&n[r+1])<<6|63&n[r+2]),r+=2)}return o},ee.prototype.generateAsync=function(e,t,n){var r=new Q,o=e>>1,i=(this.e=parseInt(t,16),new S(t,16)),s=this,a=function(){var t=function(){s.p.compareTo(s.q)<=0&&(e=s.p,s.p=s.q,s.q=e);var e=s.p.subtract(S.ONE),t=s.q.subtract(S.ONE),r=e.multiply(t);0==r.gcd(i).compareTo(S.ONE)?(s.n=s.p.multiply(s.q),s.d=i.modInverse(r),s.dmp1=s.d.mod(e),s.dmq1=s.d.mod(t),s.coeff=s.q.modInverse(s.p),setTimeout((function(){n()}),0)):setTimeout(a,0)},c=function(){s.q=j(),s.q.fromNumberAsync(o,1,r,(function(){s.q.subtract(S.ONE).gcda(i,(function(e){0==e.compareTo(S.ONE)&&s.q.isProbablePrime(10)?setTimeout(t,0):setTimeout(c,0)}))}))};setTimeout((function t(){s.p=j(),s.p.fromNumberAsync(e-o,1,r,(function(){s.p.subtract(S.ONE).gcda(i,(function(e){0==e.compareTo(S.ONE)&&s.p.isProbablePrime(10)?setTimeout(c,0):setTimeout(t,0)}))}))}),0)};setTimeout(a,0)},ee.prototype.sign=function(e,t,n){return n=function(e,t){if(t<e.length+22)return console.error(\"Message too long for RSA\"),null;for(var n=t-e.length-6,r=\"\",o=0;o<n;o+=2)r+=\"ff\";return q(\"0001\"+r+\"00\"+e,16)}(($[n]||\"\")+t(e).toString(),this.n.bitLength()/4),null==n||null==(t=this.doPrivate(n))?null:0==(1&(e=t.toString(16)).length)?e:\"0\"+e},ee.prototype.verify=function(e,t,n){return t=q(t,16),null==(t=this.doPublic(t))?null:function(e){for(var t in $)if($.hasOwnProperty(t)){var n=(t=$[t]).length;if(e.substr(0,n)==t)return e.substr(n)}return e}(t.toString(16).replace(/^1f+00/,\"\"))==n(e).toString()},ee),{md2:\"3020300c06082a864886f70d020205000410\",md5:\"3020300c06082a864886f70d020505000410\",sha1:\"3021300906052b0e03021a05000414\",sha224:\"302d300d06096086480165030402040500041c\",sha256:\"3031300d060960864801650304020105000420\",sha384:\"3041300d060960864801650304020205000430\",sha512:\"3051300d060960864801650304020305000440\",ripemd160:\"3021300906052b2403020105000414\"});function ee(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}function te(){}(t={}).lang={extend:function(e,t,n){if(!t||!e)throw new Error(\"YAHOO.lang.extend failed, please check that all dependencies are included.\");function r(){}if(r.prototype=t.prototype,e.prototype=new r,(e.prototype.constructor=e).superclass=t.prototype,t.prototype.constructor==Object.prototype.constructor&&(t.prototype.constructor=t),n){for(var o in n)e.prototype[o]=n[o];t=function(){};var i=[\"toString\",\"valueOf\"];try{\"undefined\"!=typeof navigator&&/MSIE/.test(navigator.userAgent)&&(t=function(e,t){for(o=0;o<i.length;o+=1){var n=i[o],r=t[n];\"function\"==typeof r&&r!=Object.prototype[n]&&(e[n]=r)}})}catch(e){}t(e.prototype,n)}}};var ne={};void 0!==ne.asn1&&ne.asn1||(ne.asn1={}),ne.asn1.ASN1Util=new function(){this.integerToByteHex=function(e){return(e=e.toString(16)).length%2==1?\"0\"+e:e},this.bigIntToMinTwosComplementsHex=function(e){var t=e.toString(16);if(\"-\"!=t.substr(0,1))t.length%2==1?t=\"0\"+t:t.match(/^[0-7]/)||(t=\"00\"+t);else{var n=t.substr(1).length;n%2==1?n+=1:t.match(/^[0-7]/)||(n+=2);for(var r=\"\",o=0;o<n;o++)r+=\"f\";t=new S(r,16).xor(e).add(S.ONE).toString(16).replace(/^-/,\"\")}return t},this.getPEMStringFromHex=function(e,t){return hextopem(e,t)},this.newObject=function(e){var t,n=(t=ne.asn1).DERBoolean,r=t.DERInteger,o=t.DERBitString,i=t.DEROctetString,s=t.DERNull,a=t.DERObjectIdentifier,c=t.DEREnumerated,u=t.DERUTF8String,l=t.DERNumericString,h=t.DERPrintableString,p=t.DERTeletexString,d=t.DERIA5String,_=t.DERUTCTime,f=t.DERGeneralizedTime,g=t.DERSequence,m=t.DERSet,y=t.DERTaggedObject,v=t.ASN1Util.newObject;if(1!=(t=Object.keys(e)).length)throw\"key of param shall be only one.\";if(t=t[0],-1==\":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:\".indexOf(\":\"+t+\":\"))throw\"undefined key: \"+t;if(\"bool\"==t)return new n(e[t]);if(\"int\"==t)return new r(e[t]);if(\"bitstr\"==t)return new o(e[t]);if(\"octstr\"==t)return new i(e[t]);if(\"null\"==t)return new s(e[t]);if(\"oid\"==t)return new a(e[t]);if(\"enum\"==t)return new c(e[t]);if(\"utf8str\"==t)return new u(e[t]);if(\"numstr\"==t)return new l(e[t]);if(\"prnstr\"==t)return new h(e[t]);if(\"telstr\"==t)return new p(e[t]);if(\"ia5str\"==t)return new d(e[t]);if(\"utctime\"==t)return new _(e[t]);if(\"gentime\"==t)return new f(e[t]);if(\"seq\"==t){for(var b=e[t],E=[],O=0;O<b.length;O++){var T=v(b[O]);E.push(T)}return new g({array:E})}if(\"set\"==t){for(b=e[t],E=[],O=0;O<b.length;O++)T=v(b[O]),E.push(T);return new m({array:E})}if(\"tag\"==t){if(n=e[t],\"[object Array]\"===Object.prototype.toString.call(n)&&3==n.length)return r=v(n[2]),new y({tag:n[0],explicit:n[1],obj:r});if(o={},void 0!==n.explicit&&(o.explicit=n.explicit),void 0!==n.tag&&(o.tag=n.tag),void 0===n.obj)throw\"obj shall be specified for 'tag'.\";return o.obj=v(n.obj),new y(o)}},this.jsonToASN1HEX=function(e){return this.newObject(e).getEncodedHex()}},ne.asn1.ASN1Util.oidHexToInt=function(e){for(var t=\"\",n=parseInt(e.substr(0,2),16),r=(t=Math.floor(n/40)+\".\"+n%40,\"\"),o=2;o<e.length;o+=2){var i=(\"00000000\"+parseInt(e.substr(o,2),16).toString(2)).slice(-8);r+=i.substr(1,7),\"0\"==i.substr(0,1)&&(t=t+\".\"+new S(r,2).toString(10),r=\"\")}return t},ne.asn1.ASN1Util.oidIntToHex=function(e){function t(e){return 1==(e=e.toString(16)).length?\"0\"+e:e}if(!e.match(/^[0-9.]+$/))throw\"malformed oid string: \"+e;var n=\"\",r=e.split(\".\");n+=t(e=40*parseInt(r[0])+parseInt(r[1])),r.splice(0,2);for(var o=0;o<r.length;o++)n+=function(e){var n=\"\",r=new S(e,10).toString(2),o=7-r.length%7;7==o&&(o=0);for(var i=\"\",s=0;s<o;s++)i+=\"0\";for(r=i+r,s=0;s<r.length-1;s+=7){var a=r.substr(s,7);s!=r.length-7&&(a=\"1\"+a),n+=t(parseInt(a,2))}return n}(r[o]);return n},ne.asn1.ASN1Object=function(){this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw\"this.hV is null or undefined.\";if(this.hV.length%2==1)throw\"value hex must be even length: n=\"+\"\".length+\",v=\"+this.hV;var e=this.hV.length/2,t=e.toString(16);if(t.length%2==1&&(t=\"0\"+t),e<128)return t;var n=t.length/2;if(15<n)throw\"ASN.1 length too long to represent by 8x: n = \"+e.toString(16);return(128+n).toString(16)+t},this.getEncodedHex=function(){return null!=this.hTLV&&!this.isModified||(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return\"\"}},ne.asn1.DERAbstractString=function(e){ne.asn1.DERAbstractString.superclass.constructor.call(this),this.getString=function(){return this.s},this.setString=function(e){this.hTLV=null,this.isModified=!0,this.s=e,this.hV=stohex(this.s)},this.setStringHex=function(e){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=e},this.getFreshValueHex=function(){return this.hV},void 0!==e&&(\"string\"==typeof e?this.setString(e):void 0!==e.str?this.setString(e.str):void 0!==e.hex&&this.setStringHex(e.hex))},t.lang.extend(ne.asn1.DERAbstractString,ne.asn1.ASN1Object),ne.asn1.DERAbstractTime=function(e){ne.asn1.DERAbstractTime.superclass.constructor.call(this),this.localDateToUTC=function(e){return utc=e.getTime()+6e4*e.getTimezoneOffset(),new Date(utc)},this.formatDate=function(e,t,n){var r=this.zeroPadding,o=(e=this.localDateToUTC(e),String(e.getFullYear()));t=(o=\"utc\"==t?o.substr(2,2):o)+r(String(e.getMonth()+1),2)+r(String(e.getDate()),2)+r(String(e.getHours()),2)+r(String(e.getMinutes()),2)+r(String(e.getSeconds()),2);return(t=!0===n&&0!=(o=e.getMilliseconds())?t+\".\"+r(String(o),3).replace(/[0]+$/,\"\"):t)+\"Z\"},this.zeroPadding=function(e,t){return e.length>=t?e:new Array(t-e.length+1).join(\"0\")+e},this.getString=function(){return this.s},this.setString=function(e){this.hTLV=null,this.isModified=!0,this.s=e,this.hV=stohex(e)},this.setByDateValue=function(e,t,n,r,o,i){e=new Date(Date.UTC(e,t-1,n,r,o,i,0)),this.setByDate(e)},this.getFreshValueHex=function(){return this.hV}},t.lang.extend(ne.asn1.DERAbstractTime,ne.asn1.ASN1Object),ne.asn1.DERAbstractStructured=function(e){ne.asn1.DERAbstractString.superclass.constructor.call(this),this.setByASN1ObjectArray=function(e){this.hTLV=null,this.isModified=!0,this.asn1Array=e},this.appendASN1Object=function(e){this.hTLV=null,this.isModified=!0,this.asn1Array.push(e)},this.asn1Array=new Array,void 0!==e&&void 0!==e.array&&(this.asn1Array=e.array)},t.lang.extend(ne.asn1.DERAbstractStructured,ne.asn1.ASN1Object),ne.asn1.DERBoolean=function(){ne.asn1.DERBoolean.superclass.constructor.call(this),this.hT=\"01\",this.hTLV=\"0101ff\"},t.lang.extend(ne.asn1.DERBoolean,ne.asn1.ASN1Object),ne.asn1.DERInteger=function(e){ne.asn1.DERInteger.superclass.constructor.call(this),this.hT=\"02\",this.setByBigInteger=function(e){this.hTLV=null,this.isModified=!0,this.hV=ne.asn1.ASN1Util.bigIntToMinTwosComplementsHex(e)},this.setByInteger=function(e){e=new S(String(e),10),this.setByBigInteger(e)},this.setValueHex=function(e){this.hV=e},this.getFreshValueHex=function(){return this.hV},void 0!==e&&(void 0!==e.bigint?this.setByBigInteger(e.bigint):void 0!==e.int?this.setByInteger(e.int):\"number\"==typeof e?this.setByInteger(e):void 0!==e.hex&&this.setValueHex(e.hex))},t.lang.extend(ne.asn1.DERInteger,ne.asn1.ASN1Object),ne.asn1.DERBitString=function(e){var t;void 0!==e&&void 0!==e.obj&&(t=ne.asn1.ASN1Util.newObject(e.obj),e.hex=\"00\"+t.getEncodedHex()),ne.asn1.DERBitString.superclass.constructor.call(this),this.hT=\"03\",this.setHexValueIncludingUnusedBits=function(e){this.hTLV=null,this.isModified=!0,this.hV=e},this.setUnusedBitsAndHexValue=function(e,t){if(e<0||7<e)throw\"unused bits shall be from 0 to 7: u = \"+e;e=\"0\"+e,this.hTLV=null,this.isModified=!0,this.hV=e+t},this.setByBinaryString=function(e){var t=8-(e=e.replace(/0+$/,\"\")).length%8;8==t&&(t=0);for(var n=0;n<=t;n++)e+=\"0\";var r=\"\";for(n=0;n<e.length-1;n+=8){var o=e.substr(n,8);r+=o=1==(o=parseInt(o,2).toString(16)).length?\"0\"+o:o}this.hTLV=null,this.isModified=!0,this.hV=\"0\"+t+r},this.setByBooleanArray=function(e){for(var t=\"\",n=0;n<e.length;n++)1==e[n]?t+=\"1\":t+=\"0\";this.setByBinaryString(t)},this.newFalseArray=function(e){for(var t=new Array(e),n=0;n<e;n++)t[n]=!1;return t},this.getFreshValueHex=function(){return this.hV},void 0!==e&&(\"string\"==typeof e&&e.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(e):void 0!==e.hex?this.setHexValueIncludingUnusedBits(e.hex):void 0!==e.bin?this.setByBinaryString(e.bin):void 0!==e.array&&this.setByBooleanArray(e.array))},t.lang.extend(ne.asn1.DERBitString,ne.asn1.ASN1Object),ne.asn1.DEROctetString=function(e){var t;void 0!==e&&void 0!==e.obj&&(t=ne.asn1.ASN1Util.newObject(e.obj),e.hex=t.getEncodedHex()),ne.asn1.DEROctetString.superclass.constructor.call(this,e),this.hT=\"04\"},t.lang.extend(ne.asn1.DEROctetString,ne.asn1.DERAbstractString),ne.asn1.DERNull=function(){ne.asn1.DERNull.superclass.constructor.call(this),this.hT=\"05\",this.hTLV=\"0500\"},t.lang.extend(ne.asn1.DERNull,ne.asn1.ASN1Object),ne.asn1.DERObjectIdentifier=function(e){var t=function(e){return 1==(e=e.toString(16)).length?\"0\"+e:e};ne.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT=\"06\",this.setValueHex=function(e){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=e},this.setValueOidString=function(e){if(!e.match(/^[0-9.]+$/))throw\"malformed oid string: \"+e;var n=\"\",r=e.split(\".\");e=40*parseInt(r[0])+parseInt(r[1]);n+=t(e),r.splice(0,2);for(var o=0;o<r.length;o++)n+=function(e){var n=\"\",r=new S(e,10).toString(2),o=7-r.length%7;7==o&&(o=0);for(var i=\"\",s=0;s<o;s++)i+=\"0\";for(r=i+r,s=0;s<r.length-1;s+=7){var a=r.substr(s,7);s!=r.length-7&&(a=\"1\"+a),n+=t(parseInt(a,2))}return n}(r[o]);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=n},this.setValueName=function(e){var t=ne.asn1.x509.OID.name2oid(e);if(\"\"===t)throw\"DERObjectIdentifier oidName undefined: \"+e;this.setValueOidString(t)},this.getFreshValueHex=function(){return this.hV},void 0!==e&&(\"string\"==typeof e?e.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(e):this.setValueName(e):void 0!==e.oid?this.setValueOidString(e.oid):void 0!==e.hex?this.setValueHex(e.hex):void 0!==e.name&&this.setValueName(e.name))},t.lang.extend(ne.asn1.DERObjectIdentifier,ne.asn1.ASN1Object),ne.asn1.DEREnumerated=function(e){ne.asn1.DEREnumerated.superclass.constructor.call(this),this.hT=\"0a\",this.setByBigInteger=function(e){this.hTLV=null,this.isModified=!0,this.hV=ne.asn1.ASN1Util.bigIntToMinTwosComplementsHex(e)},this.setByInteger=function(e){e=new S(String(e),10),this.setByBigInteger(e)},this.setValueHex=function(e){this.hV=e},this.getFreshValueHex=function(){return this.hV},void 0!==e&&(void 0!==e.int?this.setByInteger(e.int):\"number\"==typeof e?this.setByInteger(e):void 0!==e.hex&&this.setValueHex(e.hex))},t.lang.extend(ne.asn1.DEREnumerated,ne.asn1.ASN1Object),ne.asn1.DERUTF8String=function(e){ne.asn1.DERUTF8String.superclass.constructor.call(this,e),this.hT=\"0c\"},t.lang.extend(ne.asn1.DERUTF8String,ne.asn1.DERAbstractString),ne.asn1.DERNumericString=function(e){ne.asn1.DERNumericString.superclass.constructor.call(this,e),this.hT=\"12\"},t.lang.extend(ne.asn1.DERNumericString,ne.asn1.DERAbstractString),ne.asn1.DERPrintableString=function(e){ne.asn1.DERPrintableString.superclass.constructor.call(this,e),this.hT=\"13\"},t.lang.extend(ne.asn1.DERPrintableString,ne.asn1.DERAbstractString),ne.asn1.DERTeletexString=function(e){ne.asn1.DERTeletexString.superclass.constructor.call(this,e),this.hT=\"14\"},t.lang.extend(ne.asn1.DERTeletexString,ne.asn1.DERAbstractString),ne.asn1.DERIA5String=function(e){ne.asn1.DERIA5String.superclass.constructor.call(this,e),this.hT=\"16\"},t.lang.extend(ne.asn1.DERIA5String,ne.asn1.DERAbstractString),ne.asn1.DERUTCTime=function(e){ne.asn1.DERUTCTime.superclass.constructor.call(this,e),this.hT=\"17\",this.setByDate=function(e){this.hTLV=null,this.isModified=!0,this.date=e,this.s=this.formatDate(this.date,\"utc\"),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,\"utc\"),this.hV=stohex(this.s)),this.hV},void 0!==e&&(void 0!==e.str?this.setString(e.str):\"string\"==typeof e&&e.match(/^[0-9]{12}Z$/)?this.setString(e):void 0!==e.hex?this.setStringHex(e.hex):void 0!==e.date&&this.setByDate(e.date))},t.lang.extend(ne.asn1.DERUTCTime,ne.asn1.DERAbstractTime),ne.asn1.DERGeneralizedTime=function(e){ne.asn1.DERGeneralizedTime.superclass.constructor.call(this,e),this.hT=\"18\",this.withMillis=!1,this.setByDate=function(e){this.hTLV=null,this.isModified=!0,this.date=e,this.s=this.formatDate(this.date,\"gen\",this.withMillis),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,\"gen\",this.withMillis),this.hV=stohex(this.s)),this.hV},void 0!==e&&(void 0!==e.str?this.setString(e.str):\"string\"==typeof e&&e.match(/^[0-9]{14}Z$/)?this.setString(e):void 0!==e.hex?this.setStringHex(e.hex):void 0!==e.date&&this.setByDate(e.date),!0===e.millis&&(this.withMillis=!0))},t.lang.extend(ne.asn1.DERGeneralizedTime,ne.asn1.DERAbstractTime),ne.asn1.DERSequence=function(e){ne.asn1.DERSequence.superclass.constructor.call(this,e),this.hT=\"30\",this.getFreshValueHex=function(){for(var e=\"\",t=0;t<this.asn1Array.length;t++)e+=this.asn1Array[t].getEncodedHex();return this.hV=e,this.hV}},t.lang.extend(ne.asn1.DERSequence,ne.asn1.DERAbstractStructured),ne.asn1.DERSet=function(e){ne.asn1.DERSet.superclass.constructor.call(this,e),this.hT=\"31\",this.sortFlag=!0,this.getFreshValueHex=function(){for(var e=new Array,t=0;t<this.asn1Array.length;t++){var n=this.asn1Array[t];e.push(n.getEncodedHex())}return 1==this.sortFlag&&e.sort(),this.hV=e.join(\"\"),this.hV},void 0!==e&&void 0!==e.sortflag&&0==e.sortflag&&(this.sortFlag=!1)},t.lang.extend(ne.asn1.DERSet,ne.asn1.DERAbstractStructured),ne.asn1.DERTaggedObject=function(e){ne.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT=\"a0\",this.hV=\"\",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(e,t,n){this.hT=t,this.isExplicit=e,this.asn1Object=n,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=n.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,t),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},void 0!==e&&(void 0!==e.tag&&(this.hT=e.tag),void 0!==e.explicit&&(this.isExplicit=e.explicit),void 0!==e.obj&&(this.asn1Object=e.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},t.lang.extend(ne.asn1.DERTaggedObject,ne.asn1.ASN1Object),re=function(e,t){return(re=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};var re,oe=function(e){function t(n){var r=e.call(this)||this;return n&&(\"string\"==typeof n?r.parseKey(n):(t.hasPrivateKeyProperty(n)||t.hasPublicKeyProperty(n))&&r.parsePropertiesFrom(n)),r}var n=t,r=e;if(\"function\"!=typeof r&&null!==r)throw new TypeError(\"Class extends value \"+String(r)+\" is not a constructor or null\");function o(){this.constructor=n}return re(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o),t.prototype.parseKey=function(e){try{var t=0,n=0,r=/^\\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\\s*)+$/.test(e)?function(e){if(void 0===c){var t=\"0123456789ABCDEF\",n=\" \\f\\n\\r\\t \\u2028\\u2029\";for(c={},s=0;s<16;++s)c[t.charAt(s)]=s;for(t=t.toLowerCase(),s=10;s<16;++s)c[t.charAt(s)]=s;for(s=0;s<n.length;++s)c[n.charAt(s)]=-1}for(var r=[],o=0,i=0,s=0;s<e.length;++s){var a=e.charAt(s);if(\"=\"==a)break;if(-1!=(a=c[a])){if(void 0===a)throw new Error(\"Illegal character at offset \"+s);o|=a,2<=++i?(r[r.length]=o,i=o=0):o<<=4}}if(i)throw new Error(\"Hex encoding incomplete: 4 bits missing\");return r}(e):d.unarmor(e),o=b.decode(r);if(9===(o=3===o.sub.length?o.sub[2].sub[0]:o).sub.length){t=o.sub[1].getHexStringValue(),this.n=q(t,16),n=o.sub[2].getHexStringValue(),this.e=parseInt(n,16);var i=o.sub[3].getHexStringValue(),s=(this.d=q(i,16),o.sub[4].getHexStringValue()),a=(this.p=q(s,16),o.sub[5].getHexStringValue()),u=(this.q=q(a,16),o.sub[6].getHexStringValue()),l=(this.dmp1=q(u,16),o.sub[7].getHexStringValue()),h=(this.dmq1=q(l,16),o.sub[8].getHexStringValue());this.coeff=q(h,16)}else{if(2!==o.sub.length)return!1;var p=o.sub[1].sub[0];t=p.sub[0].getHexStringValue();this.n=q(t,16),n=p.sub[1].getHexStringValue(),this.e=parseInt(n,16)}return!0}catch(e){return!1}},t.prototype.getPrivateBaseKey=function(){var e={array:[new ne.asn1.DERInteger({int:0}),new ne.asn1.DERInteger({bigint:this.n}),new ne.asn1.DERInteger({int:this.e}),new ne.asn1.DERInteger({bigint:this.d}),new ne.asn1.DERInteger({bigint:this.p}),new ne.asn1.DERInteger({bigint:this.q}),new ne.asn1.DERInteger({bigint:this.dmp1}),new ne.asn1.DERInteger({bigint:this.dmq1}),new ne.asn1.DERInteger({bigint:this.coeff})]};return new ne.asn1.DERSequence(e).getEncodedHex()},t.prototype.getPrivateBaseKeyB64=function(){return l(this.getPrivateBaseKey())},t.prototype.getPublicBaseKey=function(){var e=new ne.asn1.DERSequence({array:[new ne.asn1.DERObjectIdentifier({oid:\"1.2.840.113549.1.1.1\"}),new ne.asn1.DERNull]}),t=new ne.asn1.DERSequence({array:[new ne.asn1.DERInteger({bigint:this.n}),new ne.asn1.DERInteger({int:this.e})]});t=new ne.asn1.DERBitString({hex:\"00\"+t.getEncodedHex()});return new ne.asn1.DERSequence({array:[e,t]}).getEncodedHex()},t.prototype.getPublicBaseKeyB64=function(){return l(this.getPublicBaseKey())},t.wordwrap=function(e,t){return e?(t=\"(.{1,\"+(t=t||64)+\"})( +|$\\n?)|(.{1,\"+t+\"})\",e.match(RegExp(t,\"g\")).join(\"\\n\")):e},t.prototype.getPrivateKey=function(){return\"-----BEGIN RSA PRIVATE KEY-----\\n\"+t.wordwrap(this.getPrivateBaseKeyB64())+\"\\n-----END RSA PRIVATE KEY-----\"},t.prototype.getPublicKey=function(){return\"-----BEGIN PUBLIC KEY-----\\n\"+t.wordwrap(this.getPublicBaseKeyB64())+\"\\n-----END PUBLIC KEY-----\"},t.hasPublicKeyProperty=function(e){return(e=e||{}).hasOwnProperty(\"n\")&&e.hasOwnProperty(\"e\")},t.hasPrivateKeyProperty=function(e){return(e=e||{}).hasOwnProperty(\"n\")&&e.hasOwnProperty(\"e\")&&e.hasOwnProperty(\"d\")&&e.hasOwnProperty(\"p\")&&e.hasOwnProperty(\"q\")&&e.hasOwnProperty(\"dmp1\")&&e.hasOwnProperty(\"dmq1\")&&e.hasOwnProperty(\"coeff\")},t.prototype.parsePropertiesFrom=function(e){this.n=e.n,this.e=e.e,e.hasOwnProperty(\"d\")&&(this.d=e.d,this.p=e.p,this.q=e.q,this.dmp1=e.dmp1,this.dmq1=e.dmq1,this.coeff=e.coeff)},t}(n);se.prototype.setKey=function(e){this.log&&this.key&&console.warn(\"A key was already set, overriding existing.\"),this.key=new oe(e)},se.prototype.setPrivateKey=function(e){this.setKey(e)},se.prototype.setPublicKey=function(e){this.setKey(e)},se.prototype.decrypt=function(e){try{return this.getKey().decrypt(h(e))}catch(e){return!1}},se.prototype.encrypt=function(e){try{return l(this.getKey().encrypt(e))}catch(e){return!1}},se.prototype.sign=function(e,t,n){try{return l(this.getKey().sign(e,t,n))}catch(e){return!1}},se.prototype.verify=function(e,t,n){try{return this.getKey().verify(e,h(t),n)}catch(e){return!1}},se.prototype.getKey=function(e){if(!this.key){if(this.key=new oe,e&&\"[object Function]\"==={}.toString.call(e))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,e);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key},se.prototype.getPrivateKey=function(){return this.getKey().getPrivateKey()},se.prototype.getPrivateKeyB64=function(){return this.getKey().getPrivateBaseKeyB64()},se.prototype.getPublicKey=function(){return this.getKey().getPublicKey()},se.prototype.getPublicKeyB64=function(){return this.getKey().getPublicBaseKeyB64()},se.version=\"3.2.1\";const ie=se;function se(e){this.default_key_size=(e=(e=void 0===e?{}:e)||{}).default_key_size?parseInt(e.default_key_size,10):1024,this.default_public_exponent=e.default_public_exponent||\"010001\",this.log=e.log||!1,this.key=null}})(0,Te={},we),Te.default),Ie=(Object.defineProperty(Me.prototype,\"publicKey\",{get:function(){return\"-----BEGIN PUBLIC KEY-----\\n        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxtEM51skf+Bg29Mdb+WN\\n        IkgbGDZ/wOP4MTntlut65WpPpXOkg2m9EKscmzfE6kUNLYnYV77fZGFSjr+Wkmoz\\n        VK1lJ3seswBNyP6X5LUszkf1WoeEyBbfegTf3XkHEeWJ5BlD9syurlA2Fh+cTaNO\\n        RNlAGBZO7SdgTHPYAcHu0fAnJZwCZ9+ZZkVnjyTBqQckovMttKqvtoUKcp7NgGve\\n        w0OJxFKwIITu1keGdZ+yN9wBul4qJfTy8otOcwGL4bnoABMhCNvJc3xA70BuaaF0\\n        fvhxA8diV/2W+qg+LAzdqajLaNciuDHIY5Y+z5kZI1eBa3J3aqUASse4YzzTYv48\\n        7wIDAQAB\\n        -----END PUBLIC KEY-----\"},enumerable:!1,configurable:!0}),Me.prototype.encrypt=function(e){return e=A.a.encrypt(this.uint8Array2WordArray(e),this.key2,{iv:this.iv2}).toString(),Se.a.toByteArray(e)},Me.prototype.decrypt=function(e){return this.wordArray2Uint8Array(A.a.decrypt(Se.a.fromByteArray(e),this.key2,{iv:this.iv2}))},Me.prototype.generateK1Sign=function(){var e=this.generateNonce(),t=((t=(this.key1=D.a.parse(e),this.iv1=Re.a.parse(Ce()(e).toString().toLowerCase()),new Ne)).setPublicKey(this.publicKey),t.getKey().encrypt(e));return this.wordArray2Uint8Array(Re.a.parse(t))},Me.prototype.decryptK2Sign=function(e){try{this.key2=A.a.decrypt(Se.a.fromByteArray(e),this.key1,{iv:this.iv1}),this.iv2=Ce()(this.key2)}catch(e){}},Me.prototype.generateNonce=function(){var e=Math.random().toString().substr(2,16);return e.length<16&&(e+=e.substr(0,16-e.length)),e},Me.prototype.md5=function(e){return Ce()(e).toString()},Me.prototype.md5Bytes=function(e){return this.wordArray2Uint8Array(Ce()(this.uint8Array2WordArray(e)))},Me.prototype.wordArray2Uint8Array=function(e){for(var t=e.words,n=e.sigBytes,r=new Uint8Array(n),o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r[o]=i}return r},Me.prototype.uint8Array2WordArray=function(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r>>>2]|=(255&e[r])<<24-r%4*8;return ke.a.create(n,t)},Me);function Me(){}function Le(e){return Uint8Array.from(Array.from(unescape(encodeURIComponent(e))).map((function(e){return e.charCodeAt(0)})))}function Pe(e){return decodeURIComponent(escape(String.fromCharCode.apply(String,Array.from(e))))}var Ae={\"/lr/login_room_rsp\":\"LoginRoomRsp\",\"/lr/logout_room_rsp\":\"LogoutRoomRsp\",\"/sw/push_kickout\":\"PushKickout\",\"/sw/push\":\"PushReq\",\"/sw/merge_push\":\"CmdMergePushReq\",\"/lr/room/hb_rsp\":\"HbRsp\",\"/lr/userlist/userlist_rsp\":\"UserlistRsp\",\"/lr/stream/add_rsp\":\"StreamAddRsp\",\"/lr/stream/delete_rsp\":\"StreamDeleteRsp\",\"/lr/stream/update_rsp\":\"StreamUpdateRsp\",\"/lr/stream/list_rsp\":\"StreamListRsp\",\"/lr/push/stream_add\":\"PushStream\",\"/lr/push/stream_delete\":\"PushStream\",\"/lr/push/stream_update\":\"PushStream\",\"/lr/signal/liverequest_rsp\":\"SignalLiveRsp\",\"/lr/signal/liverresult_rsp\":\"SignalLiveResulRsp\",\"/lr/signal/liveinvite_rsp\":\"SignalLiveInviteRsp\",\"/lr/signal/livestop_rsp\":\"SignalLiveStopRsp\",\"/lr/signal/livescustom_rsp\":\"SignalLiveCustomRsp\",\"/lr/im/chat_rsp\":\"ImChatRsp\",\"/lr/room/enter_rsp\":\"EnterRsp\",\"/lr/room/quit_rsp\":\"QuitRsp\",\"/lr/trans/trans_rsp\":\"TransRsp\",\"/lr/trans/transfetch_rsp\":\"TransFetchRsp\",\"/lr/bigim/chat_rsp\":\"BigimChatRsp\",\"/lr/relay_rsp\":\"RelayRsp\",\"/lr/token/renew_token_rsp\":\"RenewTokenRsp\",\"/lr/push/user_updated\":\"PushUserInfoUpdated\",\"/lr/push/user_token_expire\":\"PushUserTokenExpire\",\"/lr/push/im_chat\":\"PushImChat\",\"/lr/push/bigim_chat\":\"PushBigImChat\",\"/lr/push/trans\":\"PushTrans\",\"/lr/push/user_kickout\":\"PushUserKickout\",\"/lr/push/user_logreport\":\"PushUserLogReport\",\"/lr/push/usertrans\":\"PushUserTrans\"},De=(Te=n(1),n.n(Te)),He=function(){return(He=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};t.util.Long=De.a,t.configure();var je,qe=((Te=je=je||{})[Te.disconnected=0]=\"disconnected\",Te[Te.broken=1]=\"broken\",Te[Te.connected=2]=\"connected\",Object.defineProperty(Ue.prototype,\"nickName\",{get:function(){return Le(this.stateCenter.nickName)},enumerable:!1,configurable:!0}),Ue.prototype.isDisConnect=function(){return this.state!==je.connected},Ue.prototype.getHeader=function(e){e={cmd:e,seq:++this.seq,timestamp:(new Date).getTime(),session_id:this.switchSessionID,controls:this.controls,flags:this.flags};var t=Ee.proto_switch.Header.create(e);t=Ee.proto_switch.Header.encode(t).finish();return[e.seq,t]},Ue.prototype.isUaConnect=function(){return this.ua.isConnect()},Ue.prototype.sendMessage=function(e,t,n,r,o,i,s){var a=this;if(void 0===o&&(o={timeout:6e3}),void 0===i&&(i=!0),this.logger.info(U.LIVEROOMHANDLER_SENDMESSAGE+\" call\"),\"/lr/login_room\"!==e&&this.state!==je.connected)return this.logger.warn(U.LIVEROOMHANDLER_SENDMESSAGE+\" state \"+this.state),-1;var c=this.getHeader(e),u=c[1],l=t;!this.unEncryptCmdList.includes(e)&&this.isEncrypt&&(l=this.crypto.encrypt(t)),t=this.getHead(u.length,l.length),t=new Uint8Array(Array.from(t).concat(Array.from(u)).concat(Array.from(l))),i&&(u={seq:this.seq,deleted:!1,sendTime:Date.parse(new Date+\"\"),timeout:o.timeout,success:n,error:function(e,t,n){var o;if(a.logger.info(U.LIVEROOMHANDLER_SENDMESSAGE+\" seq: \"+t+\" \"+JSON.stringify(e)+\" \"+JSON.stringify(n)),\"/lr/login_room_rsp\"!==(null==(o=null==e?void 0:e.header)?void 0:o.cmd)&&-1<[1002,105].indexOf(null==(o=null==e?void 0:e.body)?void 0:o.err_code))return null!=n&&n.roomID?(o=a.stateCenter.roomModulesList.find((function(e){return e.roomID==n.roomID})))?void o.retryRoom():void a.logger.error(U.LIVEROOMHANDLER_SENDMESSAGE+\" room no found ignore \"):void a.rtm.retryRoom();[207,208].indexOf(null==(o=null==e?void 0:e.body)?void 0:o.err_code),r&&r(e,t)},params:s},l=this.sendCommandList.push(u),this.sendCommandMap[u.seq]=l),this.logger.info(U.LIVEROOMHANDLER_SENDMESSAGE+\" seq: \"+c[0]+\" cmd: \"+e),i=\"/lr/login_room\"===e;return null!=(o=this.liveroomRequest)&&o.sendRequest({payload:t,ack:i},(function(e){a.logger.info(U.LIVEROOMHANDLER_SENDMESSAGE+\" fail\")}),(function(){a.logger.info(U.LIVEROOMHANDLER_SENDMESSAGE+\" ack\")})),c[0]},Ue.prototype.getHead=function(e,t){var n=new Uint8Array(7);return n[0]=33,n[1]=e>>8,n[2]=e-(n[1]<<8),n.set(new Uint8Array(Int32Array.from([t]).buffer).reverse(),3),n},Ue.prototype.handlePush=function(e,t){if(void 0===t&&(t=!1),33===(n=e[0])){var n=(e[1]<<8)+e[2],r=Ee.proto_switch.Header.decode(e.slice(7,7+n)),o=n=e.slice(7+n);if(!this.unEncryptCmdList.includes(r.cmd)&&this.isEncrypt){if(!this.hasCryptSign)return this.logger.warn(U.LIVEROOMHANDLER_HANDLEPUSH+\" decrypt early \"+r.cmd),void this.waitDecryptCmdList.push(e);try{o=this.crypto.decrypt(n)}catch(e){this.logger.warn(U.LIVEROOMHANDLER_HANDLEPUSH+\" decrypt fail \"+r.cmd)}}if(!Ae[r.cmd])return this.logger.info(U.LIVEROOMHANDLER_HANDLEPUSH+\" cmd is not rtc\"),void this.onSwitchMessage(r,o);if(e=this.decodeResponseBody(r,o),this.swPushCmdList.includes(r.cmd))return t&&\"/lr/push/user_updated\"===(null==(n=null==e?void 0:e.head)?void 0:n.sub_cmd)?void this.logger.info(U.LIVEROOMHANDLER_HANDLEPUSH+\" ignore user updated\"):void this.handleSwitchPush(r,e);this.logger.info(U.LIVEROOMHANDLER_HANDLEPUSH+\" down \"+r.cmd+\" \"+JSON.stringify(this.transBuf(e))),o={header:this.transHeader(r),body:this.transRsp(e)},this.handleSendCommandMsgRsp(o)}},Ue.prototype.handleSwitchPush=function(e,t){if(\"/sw/push\"===e.cmd){var n=(a=this.transRsp(t.head)).room_id;if(this.stateCenter.roomModulesList.find((function(e){return e.roomID==n}))){var r=void 0,o={header:a,body:r=this.unStructCmdList.includes(t.head.sub_cmd)?{signal_msg:Pe(t.msg_body),sub_cmd:this.joinLiveMap[t.head.sub_cmd]}:\"/lr/push/signal_custom\"===t.head.sub_cmd?{custommsg:Pe(t.msg_body)}:Ae[t.head.sub_cmd]?this.transRsp(this.decode(Ee.liveroom_cs[Ae[t.head.sub_cmd]],t.msg_body)):{}};if(this.logger.info(U.LIVEROOMHANDLER_HANDLESWITCHPUSH+\" push \"+JSON.stringify(this.transBuf(o))),this.whiteboardPushCmdList.includes(t.head.sub_cmd))this.logger.info(U.LIVEROOMHANDLER_HANDLESWITCHPUSH+\" white \"),this.onSwitchMessage(e,t);else switch(t.head.sub_cmd){case\"/lr/push/user_updated\":this.handlePushUserStateUpdateMsg(o);break;case\"/lr/push/user_kickout\":this.handlePushKickout(o,!1);break;case\"/lr/push/trans\":this.handlePushTransMsg(o);break;case\"/lr/push/im_chat\":this.handlePushRoomMsg(o);break;case\"/lr/push/signal_custom\":this.handlePushCustomMsg(o);break;case\"/lr/push/stream_add\":case\"/lr/push/stream_delete\":case\"/lr/push/stream_update\":this.handlePushStreamMsg(o);break;case\"/lr/push/joinlive_request\":case\"/lr/push/joinlive_result\":case\"/lr/push/joinlive_invite\":case\"/lr/push/joinlive_stop\":this.handlePushSignalMsg(o);break;case\"/lr/push/user_token_expire\":this.handlePushTokenExpire(o)}1==t.head.qos_flag&&(c={code:0,message:\"\",sub_cmd:t.head.sub_cmd,msg_id:t.head.msg_id,server_send_time:t.head.send_time},u=Ee.proto_switch.PushRsp.create(c),l=Ee.proto_switch.PushRsp.encode(u).finish(),this.sendMessage(\"/sw/push_rsp\",l,void 0,void 0))}else this.logger.warn(U.LIVEROOMHANDLER_HANDLESWITCHPUSH+\" room no found ignore \")}else{var i,s,a,c,u,l;\"/sw/merge_push\"===e.cmd?(i=(a=this.transRsp(t.head)).room_id,this.stateCenter.roomModulesList.find((function(e){return e.roomID==i}))?(s=[],t.messages.forEach((function(e){var t;s.push({sub_cmd:e.sub_cmd,sub_seq:e.sub_seq,msg_id:e.msg_id}),\"/lr/push/bigim_chat\"===e.sub_cmd&&(t=Ee.liveroom_cs.PushBigImChat.decode(e.msg_body),e.msg_body=t)})),delete(a={header:(r=this.transRsp(t)).head,body:r}).body.head,this.handlePushMergeMsg(a),1==t.head.qos_flag&&(u=Ee.proto_switch.CmdMergePushRsp.create(c={messages:s}),l=Ee.proto_switch.CmdMergePushRsp.encode(u).finish(),this.sendMessage(\"/sw/merge_push_rsp\",l,void 0,void 0))):this.logger.warn(U.LIVEROOMHANDLER_HANDLESWITCHPUSH+\" room no found ignore \")):\"/sw/push_kickout\"===e.cmd&&(r={reason:900<t.reason?t.reason-900:t.reason,msg:t.message,need_relogin:void 0!==t.need_relogin?t.need_relogin:0},this.handlePushKickout({header:e,body:r},!0))}},Ue.prototype.handlePushTokenExpire=function(e){},Ue.prototype.handlePushKickout=function(e,t){},Ue.prototype.handlePushStreamMsg=function(e){},Ue.prototype.handlePushSignalMsg=function(e){},Ue.prototype.handlePushMergeMsg=function(e){},Ue.prototype.handlePushCustomMsg=function(e){},Ue.prototype.handlePushRoomMsg=function(e){},Ue.prototype.handlePushTransMsg=function(e){},Ue.prototype.onSwitchMessage=function(e,t){},Ue.prototype.decodeResponseBody=function(e,t){var n=this.onSwitchCmdList.includes(e.cmd)?\"proto_switch\":\"liveroom_cs\";return this.decode(this.protoInstance[n][Ae[e.cmd]],t)},Ue.prototype.handleWaitDecryptCmdList=function(){var e=this;this.waitDecryptCmdList.forEach((function(t){e.handlePush(t,!0)})),this.waitDecryptCmdList=[]},Ue.prototype.handlePushUserStateUpdateMsg=function(e){},Ue.prototype.login=function(e,t,n){var o,i,s,a,c=this,u=(this.state==je.disconnected&&(this.logger.info(U.LIVEROOMHANDLER_LOGIN+\" state disconnect\"),this.closeRequest()),(new Date).getTime()+\"\");e.isMulti?(s={req_head:this.getReqHead(e),switch_session_id:this.switchSessionID,nick_name:this.nickName,role:this.stateCenter.role,net_type:j.getNetTypeNum(),config:{room_create_flag:this.stateCenter.roomCreateFlag,user_state_flag:this.stateCenter.userStateUpdate?1:0},lv_key:e.lvKey,third_token:Le(e.token),user_count_limit:e.maxMemberCount,relate_service:this.stateCenter.relateService.join()||\"\",conn_type:2,room_name:Le(e.roomName)},i=He(He({},s),{room_name:e.roomName,third_token:e.token}),this.logger.info(U.LIVEROOMHANDLER_LOGIN+\" enter \"+JSON.stringify(i)),s=Ee.liveroom_cs.EnterReq.create(s),a=Ee.liveroom_cs.EnterReq.encode(s).finish(),this.sendMessage(\"/lr/room/enter\",a,(function(e,n){c.longToStringNumber(e.body,[\"user_session_id\",\"room_session_id\",\"ret_timestamp\"],\"toString\"),c.transKeysName(e.body,[[\"user_session_id\",\"session_id\"],[\"hb_interval\",\"hearbeat_interval\"]]),c.keysExist(e.body,[\"token_remain_time\",\"stream_seq\"]),t&&t(e,n)}),(function(e,t){n&&n(e,t)}),void 0,void 0,{roomID:e.roomID})):(o={app_id:this.stateCenter.appid,id_name:Le(this.stateCenter.idName),device_id:this.stateCenter.deviceID,term_type:this.stateCenter.ENV%2==0?r.TT_WEB:r.TT_MINIPROGRAM,net_type:j.getNetTypeNum(),sdk_ver:parseInt(this.rtm.version.replace(/\\./g,\"\")),proto_ver:131072,nick_name:this.nickName,client_stamp:Le(u),crypt_version:1,k1_sign:this.crypto.generateK1Sign(),relogin_token:this.switchSessionID.notEquals(De.a.fromInt(0))?Le(this.reloginToken):\"\",role:this.stateCenter.role,liveroom_session_id:De.a.fromString(e.sessionID),room_id:Le(e.roomID),room_name:Le(e.roomName),biz_type:0,room_create_flag:this.stateCenter.roomCreateFlag,user_state_flag:this.stateCenter.userStateUpdate?1:0,lv_key:e.lvKey,third_token:Le(e.token),user_count_limit:e.maxMemberCount,relate_service:this.stateCenter.relateService.join()||\"\",biz_version:this.stateCenter.bizVersion||\"\",login_logic:this.stateCenter.isMultiRoom?3:1,sdk_conn_type:2},i=He(He({},o),{id_name:this.stateCenter.idName,nick_name:this.stateCenter.nickName,client_stamp:u,k1_sign:void 0,relogin_token:this.reloginToken,liveroom_session_id:e.sessionID,room_id:e.roomID,room_name:e.roomName,third_token:e.token}),this.logger.info(U.LIVEROOMHANDLER_LOGIN+\" login \"+JSON.stringify(i)),this.k1SignLogoutBuffer=this.crypto.md5Bytes(o.k1_sign),s=Ee.proto_switch.LoginRoomReq.create(o),a=Ee.proto_switch.LoginRoomReq.encode(s).finish(),this.sendMessage(\"/lr/login_room\",a,(function(e,n){c.switchSessionID=e.header.session_id,c.reloginToken=e.body.relogin_token,c.logger.info(U.LIVEROOMHANDLER_LOGIN+\" login rsp\"),c.crypto.decryptK2Sign(e.body.k2_sign),1===e.body.crypt_option?c.isEncrypt=!1:void 0===e.body.crypt_option&&(c.isEncrypt=!0),c.hasCryptSign=!0,c.waitDecryptTimer=setTimeout((function(){c.handleWaitDecryptCmdList()}),0),c.longToStringNumber(e.body,[\"liveroom_session_id\",\"room_session_id\",\"ret_timestamp\"],\"toString\"),delete e.body.heartbeat_interval,delete e.body.heartbeat_timeout,c.transKeysName(e.body,[[\"liveroom_session_id\",\"session_id\"],[\"liveroom_hb_interval\",\"hearbeat_interval\"]]),c.keysExist(e.body,[\"token_remain_time\",\"stream_seq\"]),t&&t(e,n)}),(function(e,t){n&&n(e,t)})))},Ue.prototype.transKeysName=function(e,t){t.forEach((function(t){e[t[1]]=e[t[0]],delete e[t[0]]}))},Ue.prototype.keysExist=function(e,t){t.forEach((function(t){void 0===e[t]&&(e[t]=0)}))},Ue.prototype.longToStringNumber=function(e,t,n){t.forEach((function(t){De.a.isLong(e[t])&&(e[t]=e[t][n]())}))},Ue.prototype.logout=function(e,t,n){var r,o,i,s;return e.isMulti?(r={req_head:this.getReqHead(e),switch_session_id:this.switchSessionID,nick_name:this.nickName,role:this.stateCenter.role,config_list:{room_create_flag:this.stateCenter.roomCreateFlag,user_state_flag:this.stateCenter.userStateUpdate?1:0}},o=this.transBuf(r),this.logger.info(U.LIVEROOMHANDLER_LOGOUT+\" quit \"+JSON.stringify(o)),i=Ee.liveroom_cs.QuitReq.create(r),s=Ee.liveroom_cs.QuitReq.encode(i).finish(),this.sendMessage(\"/lr/room/quit\",s,t,n)):(r={logout_code:0,logout_check:this.crypto.md5Bytes(Le(e.token)),liveroom_session_id:De.a.fromString(e.sessionID),room_id:Le(e.roomID),role:this.stateCenter.role,nickname:this.nickName,logout_logic:this.stateCenter.isMultiRoom?3:1},o=this.transBuf(r),this.logger.info(U.LIVEROOMHANDLER_LOGOUT+\" logout \"+JSON.stringify(o)),i=Ee.proto_switch.LogoutRoomReq.create(r),s=Ee.proto_switch.LogoutRoomReq.encode(i).finish(),this.sendMessage(\"/lr/logout_room\",s,t,n))},Ue.prototype.checkSendMessageList=function(e){for(var t=e.getFirst();null!=t;)e.remove(t),t._data&&t._data.error&&setTimeout((function(){t&&t._data&&t._data.error&&t._data.error(M.TIMEOUT,t._data.seq)}),0),t=e.getFirst()},Ue.prototype.checkMessageListTimeout=function(e,t){for(var n=e.getFirst(),r=Date.parse(new Date+\"\"),o=0,i=this;null!=n&&\"break\"!==function(){return n._data&&n._data.sendTime+n._data.timeout>r?\"break\":(n._data&&delete t[n._data.seq],e.remove(n),n._data&&null==n._data.error||n._data&&n._data.sendTime+i.sendDataDropTimeout<r||(s=n&&n._data&&n._data.error,a=n&&n._data&&n._data.seq,setTimeout((function(){s&&s(M.TIMEOUT,a)}),0)),++o>=i.sendDataCheckOnceCount?\"break\":void(n=e.getFirst()));var s,a}(););},Ue.prototype.startCheck=function(){var e=this;this.checkMessageListTimeout(this.sendCommandList,this.sendCommandMap),this.sendDataCheckTimer=setTimeout((function(){e.startCheck()}),this.sendDataCheckInterval)},Ue.prototype.stopCheck=function(){this.checkSendMessageList(this.sendCommandList),clearTimeout(this.sendDataCheckTimer)},Ue.prototype.handleSendCommandMsgRsp=function(e){var t,n,r=this,o=this.sendCommandMap[e.header.seq];null!=o&&(t=o._data,n=null==t?void 0:t.params,delete this.sendCommandMap[e.header.seq],this.sendCommandList.remove(o),0===e.body.err_code?setTimeout((function(){t&&null!=t.success&&t.success(e,r.seq)}),0):setTimeout((function(){t&&null!=t.error&&t.error(e,r.seq,n)}),0))},Ue.prototype.getReqHead=function(e){return{room_id:e.roomID,user_session_id:De.a.fromString(e.sessionID),room_session_id:De.a.fromString(e.roomSessionID)}},Ue.prototype.heartBeat=function(e,t,n){var r=this;n={req_head:this.getReqHead(n),role:this.stateCenter.role,lv_key:n.lvKey},n=Ee.liveroom_cs.HbReq.create(n),n=Ee.liveroom_cs.HbReq.encode(n).finish();this.sendMessage(\"/lr/room/hb\",n,(function(t){r.transKeysName(t.body,[[\"hb_interval\",\"hearbeat_interval\"],[\"hb_timeout\",\"hearbeat_timeout\"]]),t.body.server_user_seq=t.body.user_seq.toNumber(),r.longToStringNumber(t.body,[\"dati_time_window\"],\"toNumber\"),e&&e(t)}),t)},Ue.prototype.fetchUserList=function(e,t,n,r){var o=this;r=this.getReqHead(r),r=He({req_head:r},e),e=this.transBuf(r),this.logger.info(U.LIVEROOMHANDLER_FETCH_USER_LIST+\" \"+JSON.stringify(e)),e=Ee.liveroom_cs.UserlistReq.create(r),r=Ee.liveroom_cs.UserlistReq.encode(e).finish();return this.sendMessage(\"/lr/userlist/userlist\",r,(function(e,n){o.logger.info(U.LIVEROOMHANDLER_FETCH_USER_LIST+\" suc \"+n),o.transKeysName(e.body,[[\"user_basic_list\",\"user_baseinfos\"]]),o.longToStringNumber(e.body,[\"server_user_seq\",\"server_user_index\",\"ret_user_index\"],\"toNumber\"),t&&t(e,n)}),n)},Ue.prototype.sendRoomMsg=function(e,t,n,r){var o=this;r={req_head:this.getReqHead(r),msg_category:e.msg_category,msg_priority:e.msg_priority,msg_type:e.msg_type,msg_content:Le(e.msg_content)},e=this.transBuf(r),this.logger.info(U.LIVEROOMHANDLER_SENDROOMMSG+\" \"+JSON.stringify(e)),e=Ee.liveroom_cs.ImChatReq.create(r),r=Ee.liveroom_cs.ImChatReq.encode(e).finish();return this.sendMessage(\"/lr/im/chat\",r,(function(e){o.longToStringNumber(e.body,[\"msg_id\"],\"toNumber\"),t&&t(e)}),n)},Ue.prototype.sendReliableMessage=function(e,t,n,r){return r={req_head:this.getReqHead(r),role:this.stateCenter.role,nick_name:this.nickName,trans_type:Le(e.trans_type),trans_data:Le(e.trans_data),trans_local_seq:e.trans_local_seq,trans_channel:Le(e.trans_channel)},e=this.transBuf(r),this.logger.info(U.LIVEROOMHANDLER_SENDRELIABLEMESSAGE+\" \"+JSON.stringify(e)),e=Ee.liveroom_cs.TransReq.create(r),r=Ee.liveroom_cs.TransReq.encode(e).finish(),this.sendMessage(\"/lr/trans/trans\",r,t,n)},Ue.prototype.fetchReliableMessage=function(e,t,n,r){r=this.getReqHead(r);var o=e.fetch_array.map((function(e){return{trans_type:Le(e.trans_type),trans_local_seq:e.trans_seq}}));r={req_head:r,trans_channel:Le(e.trans_channel),fetch_array:o},e=this.transBuf(r),this.logger.info(U.LIVEROOMHANDLER_FETCHRELIABLEMESSAGE+\" \"+JSON.stringify(e)),o=Ee.liveroom_cs.TransFetchReq.create(r),e=Ee.liveroom_cs.TransFetchReq.encode(o).finish();return this.sendMessage(\"/lr/trans/transfetch\",e,t,n)},Ue.prototype.sendCustomCommand=function(e,t,n,r){var o=this,i=(r=this.getReqHead(r),e.dest_id_name.map((function(e){return{id_name:Le(e)}})));r=He({req_head:r,dst_userlist:i,push_message:Le(e.custom_msg)},e),i=this.transBuf(r),this.logger.info(U.LIVEROOMHANDLER_SENDCUSTOMCOMMAND+\" \"+JSON.stringify(i)),e=Ee.liveroom_cs.SignalLiveReq.create(r),i=Ee.liveroom_cs.SignalLiveReq.encode(e).finish();return this.sendMessage(\"/lr/signal/livescustom\",i,(function(e){t&&t(o.transRsp(e))}),(function(e){n&&n(o.transRspHead(e.rsp_head))}))},Ue.prototype.sendBigRoomMessage=function(e,t,n,r){return r=this.getReqHead(r),e=e.msgs.map((function(e){return{msg_category:e.msg_category,msg_type:e.msg_type,msg_timestamp:De.a.fromNumber(Date.now()),msg_content:Le(e.msg_content),bigmsg_client_id:Le(e.bigmsg_client_id)}})),r={req_head:r,nick_name:this.nickName,role:this.stateCenter.role,msgs:e},e=this.transBuf(r),this.logger.info(U.LIVEROOMHANDLER_SENDBIGROOMMESSAGE+\" \"+JSON.stringify(e)),e=Ee.liveroom_cs.BigimChatReq.create(r),r=Ee.liveroom_cs.BigimChatReq.encode(e).finish(),this.sendMessage(\"/lr/bigim/chat\",r,t,n)},Ue.prototype.sendRelayMessage=function(e,t,n,r){return r={req_head:this.getReqHead(r),nick_name:this.nickName,role:this.stateCenter.role,relay_type:Le(e.relay_type),relay_data:Le(e.relay_data)},e=Ee.liveroom_cs.RelayReq.create(r),r=Ee.liveroom_cs.RelayReq.encode(e).finish(),this.sendMessage(\"/lr/relay\",r,t,n)},Ue.prototype.sendSignalCmd=function(e,t,n,r){var o=\"\",i=\"\";switch(e.sub_cmd){case 1003:o=\"/lr/signal/liveinvite\",i=\"SignalLiveInviteReq\";break;case 1001:o=\"/lr/signal/liverequest\",i=\"SignalLiveReq\";break;case 1002:o=\"/lr/signal/liverresult\",i=\"SignalLiveResultReq\";break;case 1004:o=\"/lr/signal/livestop\",i=\"SignalLiveStopReq\"}r=this.getReqHead(r);var s=e.dest_id_name.map((function(e){return{id_name:Le(e)}}));r={req_head:r,push_message:Le(e.signal_msg),dst_userlist:s},e=this.transBuf(r),this.logger.info(U.LIVEROOMHANDLER_SENDSIGNALCMD+\" \"+JSON.stringify(e)),s=Ee.liveroom_cs[i].create(r),e=Ee.liveroom_cs[i].encode(s).finish();return Ee.liveroom_cs[i].decode(e),this.sendMessage(o,e,t,n)},Ue.prototype.sendStreamUpdate=function(e,t,n,r){var o,i=this;try{o=JSON.parse(e.stream_msg)}catch(e){}var s,a,c=\"\",u=(this.logger.info(U.LIVEROOMHANDLER_SENDSTREAMUPDATE+\" \"+JSON.stringify(e)),this.stateCenter.roomModulesList.find((function(e){return e.roomID==r.roomID})));if(!u)return this.logger.error(U.LIVEROOMHANDLER_SENDSTREAMUPDATE+\" room no found ignore \"),-1;switch(e.sub_cmd){case 2001:c=\"/lr/stream/add\",s=\"StreamAddReq\",a={req_head:this.getReqHead(u),stream_id:Le(o.stream_id),extra_info:Le(o.extra_info),client_req_seq:this.seq+1,login_mode:1,third_token:Le(e.third_token||\"\")};break;case 2002:c=\"/lr/stream/delete\",s=\"StreamDeleteReq\",a={req_head:this.getReqHead(u),stream_id:Le(o.stream_id),stream_sid:o.stream_sid,client_req_seq:this.seq+1};break;case 2003:c=\"/lr/stream/update\",s=\"StreamUpdateReq\",a={req_head:this.getReqHead(u),stream_id:Le(o.stream_id),stream_sid:o.stream_sid,client_req_seq:this.seq+1,extra_info:Le(o.extra_info)}}var l=this.transBuf(a);this.logger.info(U.LIVEROOMHANDLER_SENDSTREAMUPDATE+\" \"+JSON.stringify(l)),l=Ee.liveroom_cs[s].create(a),l=Ee.liveroom_cs[s].encode(l).finish();return this.sendMessage(c,l,(function(e){i.logger.info(U.LIVEROOMHANDLER_SENDSTREAMUPDATE+\" suc \"+c+\" \"+JSON.stringify(e)),e.header.room_id=u.roomID,t&&t(e)}),(function(e){i.logger.info(U.LIVEROOMHANDLER_SENDSTREAMUPDATE+\" fail \"+c+\" \"+JSON.stringify(e)),n&&n(e)}))},Ue.prototype.getStreamList=function(e,t,n,r){var o,i=this.stateCenter.roomModulesList.find((function(e){return e.roomID==r.roomID}));i?(i={req_head:this.getReqHead(i)},o=this.transBuf(i),this.logger.info(U.LIVEROOMHANDLER_GETSTREAMLIST+\" \"+JSON.stringify(o)),o=Ee.liveroom_cs.StreamListReq.create(i),i=Ee.liveroom_cs.StreamListReq.encode(o).finish(),this.sendMessage(\"/lr/stream/list\",i,(function(e){t&&t(e)}),(function(e){n&&n(e)}))):this.logger.error(U.LIVEROOMHANDLER_GETSTREAMLIST+\" room no found ignore \"+r.roomID)},Ue.prototype.transBuf=function(e){var t=this,n={};return Object.keys(e).forEach((function(r){[\"logout_check\",\"k2_sign\",\"k1_sign\"].includes(r)?n[r]=e[r]:t.transReqBytes(n,e,r)})),n},Ue.prototype.transReqBytes=function(e,t,n){var r=this;if(De.a.isLong(t[n]))e[n]=t[n].toString();else if(\"[object Object]\"===Object.prototype.toString.call(t[n]))e[n]={},Object.keys(t[n]).forEach((function(o){return r.transReqBytes(e[n],t[n],o)}));else if(\"[object Array]\"===Object.prototype.toString.call(t[n])&&\"[object Object]\"===Object.prototype.toString.call(t[n][0])){e[n]=[];for(var o=0;o<t[n].length;o++)!function(o){var i={};Object.keys(t[n][o]).forEach((function(e){r.transReqBytes(i,t[n][o],e)})),e[n].push(i)}(o)}else\"[object Uint8Array]\"===Object.prototype.toString.call(t[n])?e[n]=Pe(t[n]):e[n]=t[n]},Ue.prototype.transHeader=function(e){return e.timestamp=De.a.isLong(e.timestamp)?e.timestamp.toString():e.timestamp,e},Ue.prototype.transRsp=function(e){var t=this,n=e&&e.rsp_head?this.transRspHead(e.rsp_head):{},r=He(He({},e),n),o=(delete r.rsp_head,{});return Object.keys(r).forEach((function(e){\"k2_sign\"===e?o[e]=r[e]:t.transBytes(o,r,e)})),o},Ue.prototype.transBytes=function(e,t,n){var r=this;if(De.a.isLong(t[n]))e[n]=t[n];else if(\"[object Object]\"===Object.prototype.toString.call(t[n]))e[n]={},Object.keys(t[n]).forEach((function(o){return r.transBytes(e[n],t[n],o)}));else if(\"[object Array]\"===Object.prototype.toString.call(t[n])&&\"[object Object]\"===Object.prototype.toString.call(t[n][0])){e[n]=[];for(var o=0;o<t[n].length;o++)!function(o){var i={};Object.keys(t[n][o]).forEach((function(e){r.transBytes(i,t[n][o],e)})),e[n].push(i)}(o)}else\"[object Uint8Array]\"===Object.prototype.toString.call(t[n])?e[n]=Pe(t[n]):e[n]=t[n]},Ue.prototype.transRspHead=function(e){return e?{err_code:e.code||0,err_message:e.message}:{}},Ue.prototype.decode=function(e,t){return He({},e.decode(t))},Ue.prototype.handleDisconnected=function(e,t){var n=this;this.logger.info(U.LIVEROOMHANDLER_HANDLEDISCONNECTED+\" call\"),this.state=je.disconnected,this.resetWaitCmd(),this.stateCenter.useNetAgent&&e===S.TIMEOUT&&this.stateCenter.roomModulesList.forEach((function(e){e.roomTryHandler&&(n.ua.isConnect()?(n.logger.info(U.LIVEROOMHANDLER_HANDLEDISCONNECTED+\" ua is connect\"),e.roomTryHandler.active()):(n.logger.info(U.LIVEROOMHANDLER_HANDLEDISCONNECTED+\" ua is disconnect\"),n.ua.connectUa()))}))},Ue.prototype.handleBroken=function(){this.logger.info(U.LIVEROOMHANDLER_HANDLEBROKEN+\" call\"),this.state=je.broken,this.stateCenter.useNetAgent&&this.stateCenter.roomModulesList.forEach((function(e){e.roomTryHandler&&(e.roomTryHandler.invalid(),e.roomTryHandler.onactive=function(t,n){e.roomHandler.disconnectedHandle(n)},e.roomTryHandler.startMaxTime(),e.roomHandler.roomStateHandle(\"CONNECTING\",k.Reconnecting,M.NETWORK_BROKEN))}))},Ue.prototype.handleConnected=function(e){var t=this;this.logger.info(U.LIVEROOMHANDLER_HANDLECONNECTED+\" call \"+e),this.state=je.connected,this.hasCryptSign=!1,this.resetWaitCmd(),this.stateCenter.useNetAgent&&(e===E.AUTO?this.stateCenter.roomModulesList.forEach((function(e){e.roomTryHandler&&t.ua.isConnect()&&e.roomTryHandler.active()})):this.stateCenter.roomModulesList.forEach((function(e){e.roomTryHandler&&(e.roomTryHandler.stopMaxTime(),e.roomTryHandler.invalid())})))},Ue.prototype.resetWaitCmd=function(){this.waitDecryptCmdList=[],clearTimeout(this.waitDecryptTimer),this.waitDecryptTimer=null},Ue.prototype.renewToken=function(e,t,n,r){var o=this;r={req_head:this.getReqHead(r),token:e.token},e=Ee.liveroom_cs.RenewTokenReq.create(r),e=Ee.liveroom_cs.RenewTokenReq.encode(e).finish(),r=this.transBuf(r);this.logger.info(U.LIVEROOMHANDLER_RENEW_TOKEN+\" \"+JSON.stringify(r)),this.sendMessage(\"/lr/token/renew_token\",e,(function(e,n){o.keysExist(e.body,[\"token_remain_time\"]),t&&t(e,n)}),n)},Ue.prototype.reset=function(){this.logger.info(U.LIVEROOMHANDLER_RESET+\" call \"),this.state=je.disconnected,this.switchSessionID=De.a.fromInt(0),this.sendDataCheckTimer&&clearTimeout(this.sendDataCheckTimer)},Ue.prototype.closeRequest=function(){var e;null!=(e=this.liveroomRequest)&&e.closeRequest()},Ue.prototype.resetSessionInfo=function(){this.switchSessionID=De.a.fromInt(0)},Ue);function Ue(e,t,n,r,o){var i=this;this.logger=e,this.stateCenter=t,this.ua=n,this.dataReport=r,this.rtm=o,this.seq=0,this.controls=new Uint8Array(1),this.flags=new Uint8Array(1),this.sendCommandList=new v,this.sendCommandMap={},this.isEncrypt=!1,this.hasCryptSign=!1,this.waitDecryptCmdList=[],this.sendDataCheckOnceCount=100,this.sendDataDropTimeout=1e4,this.sendDataCheckInterval=2e3,this.protoInstance=Oe.a,this.swPushCmdList=[\"/sw/push\",\"/sw/merge_push\",\"/sw/push_kickout\",\"/sw/push_redirect\"],this.onSwitchCmdList=[\"/lr/login_room_rsp\",\"/lr/logout_room_rsp\",\"/sw/push_kickout\",\"/sw/push\",\"/sw/merge_push\"],this.unEncryptCmdList=[\"/lr/login_room\",\"/lr/login_room_rsp\"],this.whiteboardPushCmdList=[\"/edu/push/set_room\",\"/edu/push/set_user\",\"/edu/push/joinlive\",\"/edu/push/set_mod\",\"/edu/push/draw_graphics\",\"/edu/push/clear_graphics\",\"/edu/push/draw_page_graphics\",\"/edu/push/clear_page_graphics\",\"/edu/push/clear_user_graphic_list\",\"/edu/push/qaa\",\"/edu/push/set_user_auth\",\"/edu/push/set_room_auth\"],this.state=je.disconnected,this.unStructCmdList=[\"/lr/push/joinlive_request\",\"/lr/push/joinlive_result\",\"/lr/push/joinlive_invite\",\"/lr/push/joinlive_stop\"],this.joinLiveMap={\"/lr/push/joinlive_request\":11001,\"/lr/push/joinlive_result\":11002,\"/lr/push/joinlive_invite\":11003,\"/lr/push/joinlive_stop\":11004},this.reloginToken=\"\",this.crypto=new Ie,this.liveroomRequest=this.ua.getPCRequest(R.SERVICE_SWITCH4LIVEROOM),this.switchSessionID=De.a.fromInt(0),null!=(e=this.liveroomRequest)&&e.on(\"connected\",(function(e){i.handleConnected(e)})),null!=(t=this.liveroomRequest)&&t.on(\"broken\",(function(){i.handleBroken()})),null!=(n=this.liveroomRequest)&&n.on(\"disconnected\",(function(e,t){i.handleDisconnected(e,t)})),null!=(r=this.liveroomRequest)&&r.on(\"downLoadMessage\",(function(e){i.handlePush(e)})),null!=(o=this.liveroomRequest)&&o.on(\"pcConnectedEvent\",(function(e){var t=g();i.dataReport.newReport(t,ne.kZegoSDKProxyConnect.event),i.dataReport.addMsgInfo(t,{recv_time:(new Date).getTime(),proxy_link_sources:e.proxy_link_sources}),i.dataReport.uploadReport(t)}))}var Be=(xe.prototype.listenCallBack=function(){var e=this;this.roomServicer.handlePushCustomMsg=function(t){e.handlePushCustomMsg(t)},this.roomServicer.handlePushTokenExpire=function(t){var n,r=null==(r=null==(r=null==t?void 0:t.body)?void 0:r.stop_stream)?void 0:r.stream_id_list.map(Pe);null!=(n=null==(n=null==t?void 0:t.body)?void 0:n.stop_stream)&&(n.stream_id_list=r),e.stateCenter.actionListener(\"_tokenExpired\",t)},this.roomServicer.handlePushKickout=function(t,n){var r;n?function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||((r=r||Array.prototype.slice.call(t,0,o))[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}([],e.stateCenter.roomModulesList,!0).forEach((function(e){e.roomHandler.handlePushKickout(t,!0,!0)})):(r=null==(n=null==t?void 0:t.header)?void 0:n.room_id,n=e.stateCenter.roomModulesList.find((function(e){return e.roomID==r})),e.roomServicer.longToStringNumber(t.body,[\"session_id\"],\"toString\"),n?n.roomHandler.handlePushKickout(t):e.logger.error(U.LIVEROOMHANDLER_PUSHKICKOUT+\" room no found ignore \"+JSON.stringify(null==(n=t.header)?void 0:n.room_id)))},this.roomServicer.handlePushStreamMsg=function(t){e.handlePushStreamMsg(t)},this.roomServicer.handlePushSignalMsg=function(t){e.handlePushSignalMsg(t)},this.roomServicer.handlePushMergeMsg=function(t){e.handlePushMergeMsg(t)},this.roomServicer.handlePushRoomMsg=function(t){e.handlePushRoomMsg(t)},this.roomServicer.handlePushTransMsg=function(t){e.handlePushTransMsg(t)},this.roomServicer.onSwitchMessage=function(t,n){e.onSwitchMessage(t,n)},this.roomServicer.handlePushUserStateUpdateMsg=function(t){var n,r=null==(o=null==t?void 0:t.header)?void 0:o.room_id,o=e.stateCenter.roomModulesList.find((function(e){return e.roomID==r}));o?(n={body:{user_actions:t.body.user_list.map((function(e){return{Action:e.action,IdName:e.id_name,NickName:e.nick_name,Role:e.role,LoginTime:e.login_time.toString()}})),user_list_seq:t.body.server_user_seq.toNumber(),room_id:t.body.room_id}},o.userHandler.handlePushUserStateUpdateMsg(n)):e.logger.error(U.LIVEROOMHANDLER_PUSHUSERUPDATE+\" room no found ignore \"+JSON.stringify(t))}},xe.prototype.isDisConnect=function(){return!!this.roomServicer&&this.roomServicer.isDisConnect()},xe.prototype.isUaConnect=function(){var e;return null==(e=this.roomServicer)?void 0:e.isUaConnect()},xe.prototype.sendMessage=function(e,t,n,r,o,i){var s;return null==(s=this.roomServicer)?void 0:s.sendMessage(e,t,n,r,o)},xe.prototype.handlePushTokenExpire=function(e){},xe.prototype.handlePushKickout=function(e,t){},xe.prototype.handlePushStreamMsg=function(e){},xe.prototype.handlePushSignalMsg=function(e){},xe.prototype.handlePushMergeMsg=function(e){},xe.prototype.handlePushCustomMsg=function(e){},xe.prototype.handlePushRoomMsg=function(e){},xe.prototype.handlePushTransMsg=function(e){},xe.prototype.onSwitchMessage=function(e,t){},xe.prototype.handlePushUserStateUpdateMsg=function(e){},xe.prototype.login=function(e,t,n){var r;null!=(r=this.roomServicer)&&r.login(e,t,n)},xe.prototype.logout=function(e,t,n){var r;return null==(r=this.roomServicer)?void 0:r.logout(e,t,n)},xe.prototype.startCheck=function(){var e;null!=(e=this.roomServicer)&&e.startCheck()},xe.prototype.stopCheck=function(){var e;null!=(e=this.roomServicer)&&e.stopCheck()},xe.prototype.getReqHead=function(e){var t;return null==(t=this.roomServicer)?void 0:t.getReqHead(e)},xe.prototype.heartBeat=function(e,t,n){var r;null!=(r=this.roomServicer)&&r.heartBeat(e,t,n)},xe.prototype.fetchUserList=function(e,t,n,r){var o;return null==(o=this.roomServicer)?void 0:o.fetchUserList(e,t,n,r)},xe.prototype.sendRoomMsg=function(e,t,n,r){var o;return null==(o=this.roomServicer)?void 0:o.sendRoomMsg(e,t,n,r)},xe.prototype.sendReliableMessage=function(e,t,n,r){var o;return null==(o=this.roomServicer)?void 0:o.sendReliableMessage(e,t,n,r)},xe.prototype.fetchReliableMessage=function(e,t,n,r){var o;return null==(o=this.roomServicer)?void 0:o.fetchReliableMessage(e,t,n,r)},xe.prototype.sendCustomCommand=function(e,t,n,r){var o;return null==(o=this.roomServicer)?void 0:o.sendCustomCommand(e,t,n,r)},xe.prototype.sendBigRoomMessage=function(e,t,n,r){var o;return null==(o=this.roomServicer)?void 0:o.sendBigRoomMessage(e,t,n,r)},xe.prototype.sendRelayMessage=function(e,t,n,r){var o;return null==(o=this.roomServicer)?void 0:o.sendRelayMessage(e,t,n,r)},xe.prototype.sendSignalCmd=function(e,t,n,r){var o;return null==(o=this.roomServicer)?void 0:o.sendSignalCmd(e,t,n,r)},xe.prototype.sendStreamUpdate=function(e,t,n,r){var o;return null==(o=this.roomServicer)?void 0:o.sendStreamUpdate(e,t,n,r)},xe.prototype.getStreamList=function(e,t,n,r){var o;return null==(o=this.roomServicer)?void 0:o.getStreamList(e,t,n,r)},xe.prototype.renewToken=function(e,t,n,r){var o;null!=(o=this.roomServicer)&&o.renewToken(e,t,n,r)},xe.prototype.reset=function(){var e;null!=(e=this.roomServicer)&&e.reset()},xe.prototype.closeRequest=function(){var e;null!=(e=this.roomServicer)&&e.closeRequest()},xe);function xe(e,t,n,r,o){this.logger=e,this.stateCenter=t,this.ua=n,this.dataReport=r,this.rtm=o,this.roomServicer=new qe(e,t,n,r,o),this.listenCallBack()}var Ge=function(e,t,n,r){return new(n=n||Promise)((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):((t=e.value)instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},Ve=function(e,t){var n,r,o,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},s={next:a(0),throw:a(1),return:a(2)};return\"function\"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){var c=[s,a];if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,(c=o?[2&c[0],o.value]:c)[0]){case 0:case 1:o=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!(o=0<(o=i.trys).length&&o[o.length-1])&&(6===c[0]||2===c[0])){i=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){i.label=c[1];break}if(6===c[0]&&i.label<o[1]){i.label=o[1],o=c;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(c);break}o[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(a){c=[6,a],r=0}finally{n=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}}},ze=function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||((r=r||Array.prototype.slice.call(t,0,o))[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},Fe=(Object.defineProperty(We.prototype,\"modules\",{get:function(){return{service:this.service}},enumerable:!1,configurable:!0}),We.prototype.getSettingUnify=function(e){var t=this.stateCenter.settingConfig.getSetting(\"unify\",e=void 0!==e&&e);return this.logger.info(U.RTM_GET_SETTING_UNIFY+\" \"+e+\" \"+JSON.stringify(t)),t?(e=t.enable,t=t.sdk_conn_ver,!!(e&&t<=F.connectVer)):this.stateCenter.useNetAgent},We.prototype.initCallback=function(){this.proxyRes=j.proxyRes,this.actionSuccessCallback=j.actionSuccessCallback,this.actionErrorCallback=j.actionErrorCallback,this.getServerError=j.getServerError,this.generateRandumNumber=j.generateRandumNumber,this.unregisterCallback=j.unregisterCallback,this.logReportCallback=j.logReportCallback,this.registerCallback=j.registerCallback},We.prototype.getStoreAppConfig=function(){this.logger.info(U.RTM_GETSTOREAPPCONFIG+\" call\");var e=localStorage.getItem(z+\"_\"+this.getAppID()+\"_\"+(this.stateCenter.mode||F.modeNo));if(e)try{var t=j.decryptStores(e,G);t?(this.stateCenter.appConfig=JSON.parse(t),this.stateCenter.actionListener(\"_appConfigRsp\"),this.handleLogUpload()):localStorage.removeItem(z+\"_\"+this.getAppID()+\"_\"+(this.stateCenter.mode||F.modeNo))}catch(e){this.logger.warn(U.RTM_GETSTOREAPPCONFIG+\" \"+JSON.stringify(e))}else this.logger.info(U.RTM_GETSTOREAPPCONFIG+\" no store config\")},We.prototype.createNetAgent=function(){var e=this,t=(this.logger.info(U.RTM_CREATENETAGENT+\" call\"),this.netAgent.on(\"disconnected\",(function(t){e.logger.info(\"\".concat(U.RTM_CREATENETAGENT,\" netAgent disconnect\"))})),this.netAgent.on(\"connected\",(function(){e.logger.info(\"\".concat(U.RTM_CREATENETAGENT,\" netAgent connect\")),e.stateCenter.useNetAgent?(e.fetchAppConfig(),e.stateCenter.roomModulesList.forEach((function(t){t.roomTryHandler&&e.netAgent.isConnect()&&t.roomTryHandler.active(!0)}))):e.logger.info(\"\".concat(U.RTM_CREATENETAGENT,\" unify false\"))})),this.netAgent.on(\"broken\",(function(t){e.logger.info(\"\".concat(U.RTM_CREATENETAGENT,\" netAgent broken\")),t===O.CLOSE&&e.stateCenter.roomModulesList.forEach((function(e){e.resetSessionInfo()}))})),this.netAgent.on(\"dispatchEvent\",(function(t,n,r){var o;e.logger.info(\"\".concat(U.RTM_CREATENETAGENT,\" dispatch\")),\"start\"===n?(o=g(),e.dataReport.newReport(o,ne.kZegoConnDispatch.event),e.stateCenter.requestList[t]=o):\"end\"===n&&(o=e.stateCenter.requestList[t])&&(n=\"\",n=null!=r&&r.reason?r.reason:e.dispatchServers?\"UpdateDispatchResult\":\"NoDispatchResult\",e.dataReport.addMsgInfo(o,{domain_list:ne.kZegoConnDispatch.domain_list(r.domains),trigger_reason:ne.kZegoConnDispatch.trigger_reason(n)}),e.dataReport.uploadReport(o))})),this.netAgent.on(\"dispatchResultUpdate\",(function(t){t=t.servers,e.logger.info(\"\".concat(U.RTM_CREATENETAGENT,\" dispatchResult \").concat(JSON.stringify(t))),t=j.encryptStores(JSON.stringify(t),G),localStorage.setItem(V+\"_\"+e.stateCenter.appid+\"_\"+(e.stateCenter.mode||F.modeNo),t)})),this.netAgent.on(\"connectedEvent\",(function(t,n,r){var o;e.logger.info(\"\".concat(U.RTM_CREATENETAGENT,\" connect\")),\"start\"===n?(o=g(),e.dataReport.newReport(o,ne.kZegoConnConnect.event),e.stateCenter.requestList[t]=o):\"end\"===n&&(o=e.stateCenter.requestList[t])&&(e.dataReport.addMsgInfo(o,{server_list:ne.kZegoConnConnect.server_list(r.servers),request_count:r.count,connect_id:r.connectid}),e.dataReport.uploadReport(o))})),this.netAgent.on(\"requestEvent\",(function(t,n,r){var o;e.logger.info(\"\".concat(U.RTM_CREATENETAGENT,\" request\")),\"start\"===n?(o=g(),e.dataReport.newReport(o,ne.kZegoRequest.event),e.stateCenter.requestList[t]=o):\"end\"===n&&(o=e.stateCenter.requestList[t])&&(e.dataReport.addMsgInfo(o,{req_location:ne.kZegoRequest.na_req_location(r.na_req_location),http_code:r.status_code,error:r.err_code}),e.dataReport.uploadReport(o))})),this.netAgent.on(\"disConnectedEvent\",(function(t){var n=t.duration,r=t.server,o=(t=t.connectid,e.logger.info(\"\".concat(U.RTM_CREATENETAGENT,\" disconnect\")),g());e.dataReport.newReport(o,ne.kZegoConnDisConnect.event),e.dataReport.addMsgInfo(o,{server:ne.kZegoConnDisConnect.server(r),connect_duration:n,connect_id:t}),e.dataReport.uploadReport(o)})),(null!=(t=this.options)&&t.accessDomains&&0<(null==(t=this.options)?void 0:t.accessDomains.length)?null==(t=this.options)?void 0:t.accessDomains:F.domains).map((function(e){return\"wss://\".concat(e,\"/accesshub\")})));this.netAgent.setBackupDomains(F.primaryDomains),this.netAgent.setNetAgentDefaultServers(t),null!=(t=this.options)&&t.customDomain&&this.netAgent.setNetAgentSpecifiedServers([\"wss://accesshub-wss.\"+this.options.customDomain+\"/accesshub\"]),this.dispatchServers=this.getDispatchUrl(),this.netAgent.setDispatchConnectServers(this.dispatchServers)},We.prototype.getDispatchUrl=function(){var e=localStorage.getItem(V+\"_\"+this.stateCenter.appid+\"_\"+(this.stateCenter.mode||F.modeNo));if(e&&(e=j.decryptStores(e,G)))try{return JSON.parse(e)}catch(e){return[]}return[]},We.prototype.bindWindowListener=function(){var e=this,t=navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPhone/i),n=j.getBrowser(),r=t?\"pagehide\":\"Firefox\"===n?\"beforeunload\":\"unload\";window.addEventListener(r,(function(){e.logger.info(U.RTM_BIND_WINDOW_LISTENER+\" \"+r),e.logoutRoom()})),window.addEventListener(\"offline\",(function(){e.netOffLineHandle()})),window.addEventListener(\"online\",(function(){e.netOnLineHandle()}))},We.prototype.bindWxListener=function(){var e=this;wx.onNetworkStatusChange((function(t){t.isConnected?e.netOnLineHandle():e.netOffLineHandle()}))},We.prototype.retryRoom=function(){var e=this;this.stateCenter.roomModulesList.forEach((function(t){t.roomTryHandler&&e.netAgent.isConnect()&&(t.resetSessionInfo(),t.roomTryHandler.active(!0))}))},We.prototype.netOnLineHandle=function(){var e=this;this.logger.info(U.RTM_BIND_WINDOW_LISTENER+\" network is online\"),this.stateCenter.networkState=i.online,this.stateCenter.useNetAgent||this.stateCenter.roomModulesList.forEach((function(t){t.roomTryHandler&&e.service.isDisConnect()?t.roomTryHandler.active():t.roomTryHandler&&(t.roomTryHandler.stopMaxTime(),t.roomHandler.roomStateHandle(\"CONNECTED\",k.Reconnected,{code:0,msg:\"\"}))}))},We.prototype.netOffLineHandle=function(){this.logger.info(U.RTM_BIND_WINDOW_LISTENER+\" network is broken\"),this.stateCenter.networkState=i.offline,this.stateCenter.useNetAgent||this.stateCenter.roomModulesList.forEach((function(e){e.roomTryHandler&&(e.roomTryHandler.invalid(),e.roomTryHandler.onactive=function(t,n){e.roomHandler.disconnectedHandle(n)},e.roomTryHandler.startMaxTime(),e.roomHandler.roomStateHandle(\"CONNECTING\",k.Reconnecting,M.NETWORK_BROKEN))}))},We.prototype.setLogConfig=function(e){this.logger.info(U.RTM_SET_LOG_CONFIG+\" call\");var t=g();if(this.dataReport.newReport(t),e.logLevel&&[\"debug\",\"info\",\"warn\",\"error\",\"report\",\"disable\"].includes(e.logLevel)&&(this.logger.setLogLevel(e.logLevel),this.dataReport.addMsgInfo(t,{log_level:ne.kZegoTaskSetLog.log_level(e.logLevel)})),e.remoteLogLevel&&[\"debug\",\"info\",\"warn\",\"error\",\"report\",\"disable\"].includes(e.remoteLogLevel)&&this.dataReport.addMsgInfo(t,{remote_log_level:ne.kZegoTaskSetLog.remote_log_level(e.remoteLogLevel)}),\"string\"==typeof e.logURL&&(e.logURL.startsWith(\"wss://\")||e.logURL.startsWith(\"https://\")))this.logger.setLogServer(e.logURL),this.dataReport.addMsgInfo(t,{log_url:ne.kZegoTaskSetLog.log_url(e.logURL)}),this.dataReport.uploadReport(t,ne.kZegoTaskSetLog.event);else if(e.logURL)return this.logger.error(U.RTM_SET_LOG_CONFIG+\"log url must be a wss or https url\"),this.dataReport.addMsgInfo(t,ne.kZegoTaskSetLog.error.kInvalidParamError),this.dataReport.uploadReport(t,ne.kZegoTaskSetLog.event),!1;return this.logger.info(U.RTM_SET_LOG_CONFIG+\" call success\"),!0},We.prototype.setDebugVerbose=function(e){var t=g();this.dataReport.newReport(t),\"boolean\"==typeof e&&(this.stateCenter.debug=e,this.stateCenter.debugCustom=!0,this.dataReport.addMsgInfo(t,{debug:ne.kZegoTaskSetDebug.debug(e?\"true\":\"false\")})),this.dataReport.uploadReport(t,ne.kZegoTaskSetDebug.event),this.logger.info(U.RTM_SET_DEBUG_VERBOSE+\" call success\")},We.prototype.setDebug=function(e){\"string\"==typeof e&&-1<e.indexOf(\"wss\")?this.stateCenter.debug=j.isTestEnv(e):Array.isArray(e)&&0<e.length&&e.every((function(e){return\"string\"==typeof e&&-1<e.indexOf(\"wss\")}))?this.stateCenter.debug=j.isTestEnv(e[0]):this.logger.info(U.RTM_CONSTRUCTOR+\" server wrong\"),this.stateCenter.testEnvironment=this.stateCenter.debug},We.prototype.renewToken=function(e,t){var n,r=this,o=g();if(this.dataReport.newReport(o),void 0!==t&&(\"string\"!=typeof t||\"\"==t))return this.logger.error(U.RTM_RENEWTOKEN+\" roomID must be string and no empty\"),!1;var i,s,a=this.getRoomModules(t)||this.stateCenter.roomModulesList[0];return a?\"string\"==typeof e&&a.roomTryHandler?(e===a.roomTryHandler.token?this.logger.info(U.RTM_RENEWTOKEN+\" token has not changed\"):this.stateCenter.configRoomAuth?(i=function(t){var n;null!=(n=a.roomTryHandler)&&n.renewLocalToken(e,null==(n=null==t?void 0:t.body)?void 0:n.token_remain_time),r.cloudSetting.setToken(e),r.stateCenter.configCheckToken=!0,r.logger.info(U.RTM_RENEWTOKEN+\" \"+JSON.stringify(t))},s=function(t){var n=null==(n=null==t?void 0:t.body)?void 0:n.err_code;!n||1000002014!==n&&2014!==n?r.logger.error(U.RTM_RENEWTOKEN+\" \"+JSON.stringify(t)):(r.stateCenter.configCheckToken=!1,null!=(n=a.roomTryHandler)&&n.renewLocalToken(e),r.cloudSetting.setToken(e),r.logger.warn(U.RTM_RENEWTOKEN+\" \"+JSON.stringify(t)))},this.stateCenter.useNetAgent?null!=(n=this.liveRoomHandler)&&n.renewToken({token:e},i,s,a):this.service.sendMessage(\"renew_token\",{token:e},i,s,void 0,{sessionID:a.sessionID,roomID:t,roomSessionID:a.roomSessionID})):(null!=(n=a.roomTryHandler)&&n.renewLocalToken(e),this.cloudSetting.setToken(e)),this.dataReport.uploadReport(o,ne.kZegoTaskReNewToken.event),!0):(\"string\"!=typeof e||a.roomTryHandler?(this.logger.error(U.RTM_RENEWTOKEN+\" token must be string and not empty\"),this.dataReport.addMsgInfo(o,{error:ne.kZegoTaskReNewToken.error.INPUT_PARAM.code,message:ne.kZegoTaskReNewToken.error.INPUT_PARAM.msg+\" param token error\"})):(this.logger.error(U.RTM_RENEWTOKEN+\" calling must after loginRoom\"),this.dataReport.addMsgInfo(o,{error:ne.kZegoTaskReNewToken.error.NOT_LOGIN.code,message:ne.kZegoTaskReNewToken.error.NOT_LOGIN.msg})),this.dataReport.uploadReport(o,ne.kZegoTaskReNewToken.event),!1):(this.logger.error(U.RTM_RENEWTOKEN+\" calling must after loginRoom\"),this.dataReport.addMsgInfo(o,{error:ne.kZegoTaskReNewToken.error.NOT_LOGIN.code,message:ne.kZegoTaskReNewToken.error.NOT_LOGIN.msg}),this.dataReport.uploadReport(o,ne.kZegoTaskReNewToken.event),!1)},We.prototype.setCloudSettingURLs=function(e){var t=this;this.logger.info(U.RTM_SET_CLOUD_SETTING_URLS+\" call \"),Array.isArray(e)&&0<e.length&&e.every((function(e){return\"string\"==typeof e&&-1<e.indexOf(\"http\")}))&&this.cloudSetting.init({product:B.product,appID:this.stateCenter.appid,urls:e,env:this.stateCenter.ENV,pollingNotify:function(e,n){t.logger.info(U.RTM_SET_CLOUD_SETTING_URLS,\" setting file changed \"+e+\" \"+JSON.stringify(n)),t.stateCenter.actionListener(\"_cloudSettingNotify\",e,n)},reportNotify:this.cloudReportNotify.bind(this),online:!this.stateCenter.testEnvironment,unify:this.stateCenter.useNetAgent,connection:this.netAgent})},We.prototype.loginRoom=function(e,t,n,r){var s=this;return this.logger.info(U.RTM_LOGIN_ROOM+\" call by user \"+(null==n?void 0:n.userID)+\" \"+e),new Promise((function(a,c){return Ge(s,void 0,void 0,(function(){var s,u,l,h,p=this;return Ve(this,(function(d){switch(d.label){case 0:return 1!==this.stateCenter.ENV?[3,2]:[4,new Promise((function(e){wx.getNetworkType({success:function(t){p.stateCenter.networkState=\"none\"===t.networkType?i.offline:i.online,e()},fail:function(t){p.logger.error(U.RTM_CONSTRUCTOR+\" network \"+JSON.stringify(t)),p.stateCenter.networkState=i.online,e()}})}))];case 1:d.sent(),d.label=2;case 2:return s=this.loginReport(a,c,t,r),l=s.interResolve,s=s.interReject,(r=r||{}).maxMemberCount||(r.maxMemberCount=0),this.netAgent&&(this.stateCenter.idName=n.userID,this.netAgent.setUserInfo(n.userID),this.stateCenter.actionListener(\"_roomLogin\",e,t),this.netAgent.isConnect()&&this.fetchAppConfig(t)),this.cloudSetting.setUserID(n.userID),this.cloudSetting.setToken(t),this.cloudSetting.activePolling(),this.stateCenter.onListener(\"roomLoginResponse\",(function(e){p.stateCenter.settingFetched||(p.getCloudSetting(),p.stateCenter.actionListener(\"_settingCanFetch\"),p.stateCenter.settingFetched=!0)})),u=this.getRoomModules(e),h=ne.kZegoTaskLoginRoom.error,u?(this.logger.setSessionInfo(this.stateCenter.appid,e,\"\",n.userID,\"\",this.stateCenter.sdKVersion),s(h.REPEATEDLY_LOGIN),[2]):((u=new pe(e,this.stateCenter,this.logger,this.dataReport,this.service,this,this.liveRoomHandler)).roomTryHandler||(u.roomTryHandler=new X(this.logger,this.stateCenter,u)),u.roomTryHandler.init(this.stateCenter.roomRetryTime),u.roomTryHandler.initRoom(u.roomHandler,e,t,n,this.stateCenter.server,this.stateCenter.serverBak,r),u.roomTryHandler.setLoginRoomCallback(l,s),u.roomHandler.roomStateHandle(\"CONNECTING\",k.Logining,{code:0,msg:\"\"}),(l=function(e,t){var n,r,o=[],i={};for(n in e)i[e[n].order]=e[n],e[n].key=n;for(r in i)o.push(i[r]);for(var s=0;s<o.length;s++)for(var a=o[s].rules,c=0;c<a.length;c++){var u={key:o[s].key,value:o[s].value,action:t.action,logger:t.logger},l=u.value,h=a[c].name?\"\"+a[c].name:\"\";if((void 0===l&&h===K.NOT_EMPTY||void 0!==l)&&$[h]&&(h=$[h](u.key,l,u.action,u.logger,a[c]))!=Q)return h}return Q}({roomID:{order:0,value:e,rules:[{name:K.NOT_EMPTY,error:h.ROOM_ID_NULL},{name:K.TYPE_STRING,error:h.INPUT_PARAM,extMsg:\"roomID must be string\"},{name:K.MAX_LENGTH_128,error:h.ROOM_ID_TOO_LONG},{name:K.ILLEGAL_CHARACTERS,error:h.ROOM_ID_INVALID_CHARACTER}]},token:{order:1,value:t,rules:[{name:K.NOT_EMPTY,error:h.INPUT_PARAM},{name:K.TYPE_STRING,error:h.INPUT_PARAM}]},user:{order:2,value:n,rules:[{name:K.NOT_EMPTY,error:h.INPUT_PARAM,extMsg:\" param user error.\"},{name:K.TYPE_OBJECT,error:h.INPUT_PARAM,extMsg:\" param user error.\"}]},\"user.userID\":{order:3,value:n.userID,rules:[{name:K.NOT_EMPTY,error:h.USER_ID_NULL,extMsg:\" param user error.\"},{name:K.TYPE_STRING,error:h.INPUT_PARAM,extMsg:\" param userID error.\"},{name:K.MAX_LENGTH_64,error:h.USER_ID_TOO_LONG},{name:K.ILLEGAL_CHARACTERS,error:h.USER_ID_INVALID_CHARACTER}]},\"user.userName\":{order:4,value:n.userName,rules:[{name:K.TYPE_STRING,error:h.INPUT_PARAM,extMsg:\" userName must be string.\"},{name:K.MAX_LENGTH_256,error:h.USER_NAME_TOO_LONG}]},config:{order:5,value:r,rules:[]},\"config.maxMemberCount\":{order:6,value:r.maxMemberCount,rules:[{name:K.TYPE_INTEGER,error:h.INPUT_PARAM,extMsg:\" maxMemberCount must be integer number.\"}]}},{action:U.RTM_LOGIN_ROOM,logger:this.logger}))!==Q?(u.roomHandler.roomStateHandle(\"DISCONNECTED\",k.LoginFailed,l.error,l.extMsg),s(l.error,l.extMsg),[2]):(0<this.stateCenter.roomModulesList.length&&1==this.stateCenter.isMultiRoom?u.isMulti=!0:ze([],this.stateCenter.roomModulesList,!0).forEach((function(e){return e.roomHandler.logout()})),r&&(u.config=r),this.stateCenter.roomModulesList.push(u),h=this.stateCenter.settingConfig.getSetting(\"room_server\",!0),Array.isArray(h)&&0<h.length&&(this.logger.info(U.RTM_LOGIN_ROOM,\" setting room_server \"+h),this.stateCenter.server=h[0],this.stateCenter.serverBak=h[1]||h[0]),this.stateCenter.setMultiRoom=!0,u.roomTryHandler.startMaxTime(),this.stateCenter.useNetAgent&&!this.netAgent.isConnect()?(this.logger.info(U.RTM_LOGIN_ROOM,\" us is not connected\"),u.roomHandler.setRunState(o.trylogin),this.netAgent.connectUa()):u.roomTryHandler.active(!0),[2]))}}))}))}))},We.prototype.handleLogUpload=function(){var e=this.stateCenter.appConfig.app_config.domain;e&&(this.stateCenter.logDomain=\"weblogger\".concat(this.stateCenter.appid,\"-api.\").concat(e),e=\"\",e=0===this.stateCenter.ENV?\"wss://\".concat(this.stateCenter.logDomain,\"/log\"):\"https://\".concat(this.stateCenter.logDomain,\"/httplog\"),this.logger.setLogServer(e))},We.prototype.fetchAppConfig=function(e){return Ge(this,void 0,void 0,(function(){var t,n,r,o,i;return Ve(this,(function(s){switch(s.label){case 0:if(this.stateCenter.appConfigFetched)return this.logger.warn(U.RTM_FETCH_APP_CONFIG+\" config fetched\"),[2];if(!this.getUserID())return this.logger.warn(U.RTM_FETCH_APP_CONFIG+\" user not exist\"),[2];if(t=\"\",e)t=e;else{if(!(0<this.stateCenter.roomModulesList.length))return this.logger.warn(U.RTM_FETCH_APP_CONFIG+\" token not exist\"),[2];t=this.getToken()}n=g(),this.dataReport.newReport(n,ne.kZegoSDKConfigInit.event),s.label=1;case 1:return s.trys.push([1,3,,4]),[4,this.netAgent.getAppConfigByAgent(\"init\",t,5e3)];case 2:return i=s.sent(),r=i.code,i=i.data,this.dataReport.addMsgInfo(n,{trigger_reason:\"refresh\"}),this.dataReport.uploadReport(n),this.stateCenter.appConfigFetched=!0,this.logger.info(U.RTM_LOGIN_ROOM+\" initConfig code:\"+r+\" data: \"+JSON.stringify(i)),r=i.app_config,i=i.media_config,o=i.publish_config,i=i.play_config,this.stateCenter.appConfig={app_config:r,media_config:{publish_config:o,play_config:i}},r=JSON.stringify(this.stateCenter.appConfig),o=j.encryptStores(r,G),localStorage.setItem(z+\"_\"+this.getAppID()+\"_\"+(this.stateCenter.mode||F.modeNo),o),this.handleLogUpload(),this.stateCenter.appConfig||this.stateCenter.actionListener(\"_appConfigRsp\"),[3,4];case 3:return i=s.sent(),this.logger.error(U.RTM_LOGIN_ROOM+\" fail \"+JSON.stringify(i)),this.dataReport.addMsgInfo(n,{trigger_reason:\"refresh\"}),this.dataReport.uploadReport(n),[20012,20008].includes(null==i?void 0:i.code)&&this.stateCenter.roomModulesList.forEach((function(e){e.roomTryHandler&&e.roomTryHandler.loginFail(M.APPID_INVALID)})),[3,4];case 4:return[2]}}))}))},We.prototype.getCloudSetting=function(){var e=this;this.cloudSetting.fetchMultiSetting([x,\"room\"]).then((function(t){var n,r;e.logger.info(U.RTM_LOGIN_ROOM,\" settingConfig \"+JSON.stringify(t)),t&&(e.stateCenter.settingConfig.setSetting(null==(t=null==t?void 0:t.init)?void 0:t.setting,[\"remote_log_level\"]),(t=e.stateCenter.settingConfig.getSetting(\"remote_log_level\",!0))&&(e.logger.info(\"\".concat(U.RTM_LOGIN_ROOM,\"  setting remote_log_level \").concat(t)),e.logger.setRemoteLogLevel(t)),(t=e.stateCenter.settingConfig.getSetting(\"unify\",e.stateCenter.netHasSet))&&(e.logger.info(\"\".concat(U.RTM_LOGIN_ROOM,\" unify \").concat(JSON.stringify(t))),n=t.enable,t=t.sdk_conn_ver,!0,r=!!(n&&t<=F.connectVer),!0===e.stateCenter.useNetAgent&&!1===r&&(e.cloudSetting.setOptions({unify:!1}),\"connecting\"!==e.stateCenter.connectState&&(e.stateCenter.connectState=\"connecting\",e.stateCenter.actionListener(\"_connectChanged\",\"connecting\")),n=ze([],e.stateCenter.roomModulesList,!0),ze([],e.stateCenter.roomModulesList,!0).forEach((function(e){e.roomHandler.logout(!0,!0)})),e.stateCenter.useNetAgent=r,n.forEach((function(t){var n;e.stateCenter.roomModulesList.push(t),t.roomTryHandler||(t.roomTryHandler=new X(e.logger,e.stateCenter,t)),t.roomTryHandler.init(e.stateCenter.roomRetryTime),t.roomTryHandler.initRoom(t.roomHandler,t.roomID,t.token,{userID:e.stateCenter.idName,userName:e.stateCenter.nickName},e.stateCenter.server,e.stateCenter.serverBak,t.config),null!=(n=t.roomTryHandler)&&n.startMaxTime(),t.roomTryHandler.onactive=function(n,r){n?\"connected\"!==e.stateCenter.connectState&&(e.stateCenter.connectState=\"connected\",e.stateCenter.actionListener(\"_connectChanged\",\"connected\",{roomID:t.roomID})):t.roomHandler.disconnectedHandle(r)},null!=(n=t.roomTryHandler)&&n.active()})))))})).catch((function(t){e.logger.warn(U.RTM_LOGIN_ROOM,\" settingConfig \"+JSON.stringify(t))})),this.stateCenter.onListener(\"_cloudSettingNotify\",(function(t,n){var r=g(),o=(e.dataReport.newReport(r,ne.kZegoTaskCloudSettingRefresh.event),e.cloudSetting.getEnvVariables());e.dataReport.addMsgInfo(r,{params:o,files:[{name:t,content:n.setting,versions:n.versions}]}),e.dataReport.uploadReport(r),t===x&&(e.stateCenter.settingConfig.setSetting(null==n?void 0:n.setting,[\"remote_log_level\"]),(o=e.stateCenter.settingConfig.getSetting(\"remote_log_level\"))&&(e.logger.info(U.RTM_LOGIN_ROOM,\" setting remote_log_level \"+o),e.logger.setRemoteLogLevel(o)))}))},We.prototype.cloudReportNotify=function(e,t,n){var r;\"request_start\"===t?(r=g(),this.dataReport.newReport(r,ne.kZegoTaskCloudSettingRequest.event),this.stateCenter.settingConfig.requestList[e]=r):\"request_end\"===t&&(r=this.stateCenter.settingConfig.requestList[e])&&(this.dataReport.addMsgInfo(r,{request_detail:null==n?void 0:n.reportData,files:null==n?void 0:n.files,error:null==n?void 0:n.code,request_params:null==n?void 0:n.params}),this.dataReport.uploadReport(r))},We.prototype.loginReport=function(e,t,n,r){var o=this,i=g(),s=(this.stateCenter.reportSeqList.login=i,ne.kZegoTaskLoginRoom),a=(this.dataReport.newReport(i,s.event),this.cloudSetting.getEnvVariable(\"deviceid\"));return this.dataReport.addMsgInfo(i,{deviceid:a,use_na:this.stateCenter.useNetAgent?1:0}),\"string\"==typeof n&&this.dataReport.addMsgInfo(i,{token:s.token(n),isMulti:this.stateCenter.isMultiRoom}),r&&(r.userUpdate&&\"boolean\"==typeof r.userUpdate&&this.dataReport.addMsgInfo(i,{user_update:s.user_update(r.userUpdate+\"\")}),r.maxMemberCount&&\"number\"==typeof r.maxMemberCount&&this.dataReport.addMsgInfo(i,{max_member_count:s.max_member_count(r.maxMemberCount+\"\")})),j.logReportCallback(s.event,this.dataReport,i,this.stateCenter.reportList),{interResolve:function(t){o.dataReport.uploadReport(i),o.stateCenter.reportSeqList.login=0,j.unregisterCallback(s.event,o.stateCenter.reportList),e(t)},interReject:function(e,n){var r,a;void 0===n&&(n=\"\"),e.code<2e9&&1e9<e.code||e.code<1e6?(r=j.decodeServerError(e.code,e.msg),a=j.getLiveRoomError(e.code,o.stateCenter.useNetAgent)):r={code:e.code,message:e.msg},r&&o.dataReport.addMsgInfo(i,{error:r.code,message:r.message+n}),o.dataReport.uploadReport(i),o.stateCenter.reportSeqList.login=0,j.unregisterCallback(s.event,o.stateCenter.reportList),a&&M[a]&&(e.code=M[a].code),e.code&&e.msg&&\"\"!==n?t({code:e.code,msg:e.msg+n}):t(e)}}},We.prototype.logoutRoom=function(e){this.logger.info(U.RTM_LOGOUT_ROOM+\" call by user \"+e);var t=g();if(this.dataReport.newReport(t),this.dataReport.addMsgInfo(t,{roomid:e,isMulti:this.stateCenter.isMultiRoom}),void 0===e)ze([],this.stateCenter.roomModulesList,!0).forEach((function(e){return e.roomHandler.logout(!0)})),this.cloudSetting.uninit();else{if(\"string\"!=typeof e||\"\"==e)return this.logger.error(U.RTM_LOGOUT_ROOM+\" roomID must be string and not empty\"),this.dataReport.addMsgInfo(t,{error:ne.kZegoTaskLogoutRoom.error.INPUT_PARAM.code,message:ne.kZegoTaskLogoutRoom.error.INPUT_PARAM.msg+\" param roomID error\"}),void this.dataReport.uploadReport(t,ne.kZegoTaskLogoutRoom.event);(e=this.getRoomModules(e))?(e.roomHandler.logout(),0===this.stateCenter.roomModulesList.length&&this.cloudSetting.uninit()):(this.logger.error(U.RTM_LOGOUT_ROOM+\" room not exist\"),this.dataReport.addMsgInfo(t,{error:ne.kZegoTaskLogoutRoom.error.ROOM_NOT_EXIST.code,message:ne.kZegoTaskLogoutRoom.error.ROOM_NOT_EXIST.msg})),this.dataReport.uploadReport(t,ne.kZegoTaskLogoutRoom.event)}},We.prototype.loginHall=function(e,t,n){var r=this;return new Promise((function(e,t){return Ge(r,void 0,void 0,(function(){return Ve(this,(function(e){return[2]}))}))}))},We.prototype.loginHallReport=function(e,t,n,r){},We.prototype.logoutHall=function(){},We.prototype.enterRoom=function(e,t){return new Promise((function(e,t){console.error(C),t()}))},We.prototype.leaveRoom=function(){return new Promise((function(e,t){console.error(C),t()}))},We.prototype.sendCustomCommand=function(e,t,n){return new Promise((function(e,t){console.error(C),t()}))},We.prototype._sendCustomCommand=function(e,t,n){return new Promise((function(e,t){console.error(C),t()}))},We.prototype.sendBroadcastMessage=function(e,t){return new Promise((function(e,t){console.error(C),t()}))},We.prototype._sendBroadcastMessage=function(e,t,n,r){return void 0===n&&(n=1),void 0===r&&(r=1),new Promise((function(e,t){console.error(C),t()}))},We.prototype.setRoomExtraInfo=function(e,t,n){return new Promise((function(e,t){console.error(C),t()}))},We.prototype._setRoomExtraInfo=function(e,t,n){return new Promise((function(e,t){console.error(C),t()}))},We.prototype.sendBarrageMessage=function(e,t){return new Promise((function(e,t){console.error(C),t()}))},We.prototype._sendBarrageMessage=function(e,t,n,r){return void 0===n&&(n=1),void 0===r&&(r=1),new Promise((function(e,t){console.error(C),t()}))},We.prototype.sendRelayMessage=function(e,t,n,r,o){console.error(C)},We.prototype.requestJoinLive=function(e,t,n,r,o){return console.error(C),!1},We.prototype.inviteJoinLive=function(e,t,n,r,o){return console.error(C),!1},We.prototype.endJoinLive=function(e,t,n,r){return console.error(C),!1},We.prototype.respondJoinLive=function(e,t,n,r,o){return console.error(C),!1},We.prototype.getVersion=function(){return this.version},We.prototype.setSdkBizVersion=function(e){\"string\"==typeof e&&\"\"!==e&&(this.stateCenter.bizVersion=e)},We.prototype.on=function(e,t){return this.stateCenter.listenerList[e]?\"function\"!=typeof t?(this.logger.error(U.RTM_ON+\" listener callBack must be funciton\"),!1):(-1==this.stateCenter.listenerList[e].indexOf(t)&&this.stateCenter.listenerList[e].push(t),!0):(this.logger.error(U.RTM_ON+\" event \"+e+\" no found\"),!1)},We.prototype.off=function(e,t){if(!this.stateCenter.listenerList[e])return this.logger.error(U.RTM_OFF+\" listener no found\"),!1;var n=this.stateCenter.listenerList[e];return t?n.splice(n.indexOf(t),1):this.stateCenter.listenerList[e]=[],!0},We.prototype._on=function(e,t){return this.stateCenter.listenerList[e]?\"function\"!=typeof t?(this.logger.error(U.RTM_ON+\" listener callBack must be funciton\"),!1):(-1==this.stateCenter.listenerList[e].indexOf(t)&&this.stateCenter.listenerList[e].push(t),!0):(this.logger.error(U.RTM_ON+\" event \"+e+\" no found\"),!1)},We.prototype._off=function(e,t){if(!this.stateCenter.listenerList[e])return this.logger.error(U.RTM_OFF+\" listener no found\"),!1;var n=this.stateCenter.listenerList[e];return t?n.splice(n.indexOf(t),1):this.stateCenter.listenerList[e]=[],!0},We.prototype.isTestEnvironment=function(){return this.stateCenter.testEnvironment},We.prototype.isLogin=function(e){return!!(e=this.getRoomModules(e)||this.stateCenter.roomModulesList[0])&&e.isLogin()},We.prototype.getMultiRoom=function(){return this.stateCenter.isMultiRoom},We.prototype.getAppID=function(){return this.stateCenter.appid},We.prototype.getUserID=function(){return this.stateCenter.idName},We.prototype.getUseNetAgent=function(){return this.stateCenter.useNetAgent},We.prototype.getToken=function(e){return(this.getRoomModules(e)||this.stateCenter.roomModulesList[0]).token},We.prototype.setRoomCreateFlag=function(e){this.stateCenter.roomCreateFlag=e},We.prototype.setRole=function(e){this.stateCenter.role=e},We.prototype.getSessionId=function(e){return(e=this.getRoomModules(e)||this.stateCenter.roomModulesList[0])?e.sessionID:\"0\"},We.prototype.getRoomSessionID=function(e){return(e=this.getRoomModules(e)||this.stateCenter.roomModulesList[0])?e.roomSessionID:\"0\"},We.prototype.getAppConfig=function(){return this.stateCenter.appConfig},We.prototype.setAccess=function(e){this.stateCenter.netHasSet=!0,this.stateCenter.useNetAgent=e,this.stateCenter.useNetAgent=this.getSettingUnify(!0),this.netAgent.setAccess(this.stateCenter.useNetAgent),this.cloudSetting.setOptions({unify:this.stateCenter.useNetAgent})},We.prototype.enableMultiRoom=function(e){var t=g();return this.dataReport.newReport(t,ne.kZegoEnableMultiRoom.event),this.dataReport.addMsgInfo(t,{isMulti:e}),\"boolean\"!=typeof e?(this.logger.error(U.RTM_ENABLE_MULTI_ROOM+\" param must be boolean\"),this.dataReport.uploadReport(t,void 0,ne.kZegoEnableMultiRoom.error.kAlreadyLoginError),!1):0<this.stateCenter.roomModulesList.length||this.stateCenter.setMultiRoom?(this.logger.error(U.RTM_ENABLE_MULTI_ROOM+\" multi room can only be set once before first login\"),this.dataReport.uploadReport(t,void 0,ne.kZegoEnableMultiRoom.error.kAlreadyLoginError),!1):(this.dataReport.uploadReport(t),this.stateCenter.isMultiRoom=e,this.stateCenter.setMultiRoom=!0)},We.prototype.getRoomModules=function(e){return this.stateCenter.roomModulesList.find((function(t){return t.roomID==e}))},We.use=function(e){switch(e.type){case\"message\":case\"live\":e.install(We,pe,me,Be)}},We.prototype.resetRoomTokenTimer=function(e,t){(e=this.getRoomModules(e)||this.stateCenter.roomModulesList[0])&&t&&0<t&&e.roomHandler.resetTokenTimer(1e3*t-this.stateCenter.local_time_deviation)},We.prototype.isDisConnect=function(){return(this.stateCenter.useNetAgent?this.liveRoomHandler:this.service).isDisConnect()},We.prototype.sendMessage=function(e,t,n,r){(this.stateCenter.useNetAgent?this.liveRoomHandler:this.service).sendMessage(e,t,n,r)},We.prototype.setProtoFormat=function(e){if(![\"json\",\"pb\"].includes(e=void 0===e?\"json\":e))throw new Error(\"Failed to execute 'setProtoFormat': Arguments 'format' must be 'json' or 'pb'.\");this.stateCenter.protoFormat=e},We.prototype.setSdkLoginRelateService=function(e){Array.isArray(e)&&e.every((function(e){return\"string\"==typeof e}))&&(this.stateCenter.relateService=e)},We.prototype.sendMessageByService=function(e,t,n,r,o,i){return this.service.sendMessage(e,t,n,r,o,i)},We.prototype.getHeader=function(e){var t,n,r=this.stateCenter.roomModulesList[0];if(r&&r.isLogin())return t=r.roomID,n=r.sessionID,r=r.roomSessionID,this.service.getHeader(e,n,t,r);this.logger.error(U.RTM_GET_HEADER+\" room no found or no login\")},We.prototype.sendPB=function(e){return e instanceof Uint8Array?this.service.sendPB(e):(this.logger.error(U.RTM_SEND_PB+\" type error\"),!1)},We.prototype.onPushBizChannel=function(e){e&&this.service.on(\"push_biz_channel\",e)},We.prototype.getRoomID=function(){return this.stateCenter.roomid},We.prototype.getServerTimeOffset=function(){return this.stateCenter.serverTimeOffset},We.prototype.isUseNetAgent=function(){return this.stateCenter.useNetAgent},We.prototype.getReqHead=function(e){return e=\"string\"==typeof e&&\"\"!==e&&this.getRoomModules(e)||this.stateCenter.roomModulesList[0],this.liveRoomHandler.getReqHead(e)},We.prototype.sendSwitchMessage=function(e,t){return\"string\"==typeof e&&t?this.liveRoomHandler.sendMessage(e,t,void 0,void 0,void 0,!1):-1},We.prototype.onSwitchMessage=function(e){e&&this.liveRoomHandler&&(this.liveRoomHandler.onSwitchMessage=e)},We);function We(e,t,n,r,o,s,a,c){var u=this;this.logger=n,this.dataReport=r,this.cloudSetting=o,this.version=s,this.options=c,this.stateCenter=new re(this.logger,this.dataReport),this.stateCenter.ENV=a,this.getReportSeq=g,this.getSeq=f,this.initCallback(),n=g();if(this.dataReport.newReport(n),0!=a&&1!=a||this.setDebug(t),j.checkConfigParam(e,t,this.logger)){if(this.stateCenter.appid=e,this.stateCenter.configOK=!0,this.stateCenter.sdKVersion=this.version,this.stateCenter.testEnvironment&&(this.stateCenter.mode=T.MODE_TEST),this.netAgent=new N,this.logger.setSessionInfo(this.stateCenter.appid,\"\",\"\",\"\",\"\",this.version),this.netAgent.init(),this.netAgent.setLogger(this.logger),this.netAgent.setAppInfo({appID:this.stateCenter.appid,env:this.stateCenter.ENV,mode:this.stateCenter.mode}),this.liveRoomHandler=new Be(this.logger,this.stateCenter,this.netAgent,this.dataReport,this),this.service=new me(this.stateCenter,this.logger,this),this.stateCenter.deviceID=j.generateUUID(a),this.stateCenter.settingConfig=new ve,this.cloudSetting.setLog(this.logger),this.cloudSetting.init({product:B.product,appID:e,urls:B.URL,env:a,pollingNotify:function(e,t){u.logger.info(U.RTM_CONSTRUCTOR,\" setting file changed \"+e+\" \"+JSON.stringify(t)),u.stateCenter.actionListener(\"_cloudSettingNotify\",e,t)},reportNotify:this.cloudReportNotify.bind(this),online:!this.stateCenter.testEnvironment,unify:this.stateCenter.useNetAgent,connection:this.netAgent}),(r=this.stateCenter.settingConfig.getSetting(\"remote_log_level\"))&&(this.logger.info(\"\".concat(U.RTM_CONSTRUCTOR,\" setting remote_log_level default \").concat(r)),this.logger.setRemoteLogLevel(r)),o=\"\",0===a?o=\"rtc\":1===a&&(o=\"xcx\"),this.cloudSetting.setEnvVariable(\"environment\",o),s=this.cloudSetting.getSettingCache(x),c=this.cloudSetting.getSettingCache(\"room\"),Promise.all([s,c]).then((function(e){var t=null==e?void 0:e[0],n=((n=(u.stateCenter.settingConfig.setSetting(null==t?void 0:t.setting),u.stateCenter.useNetAgent=u.getSettingUnify(u.stateCenter.netHasSet),u.cloudSetting.setOptions({unify:u.stateCenter.useNetAgent}),u.stateCenter.useNetAgent&&(u.createNetAgent(),u.getStoreAppConfig()),u.stateCenter.settingConfig.getSetting(\"remote_log_level\",!0)))&&(u.logger.info(\"\".concat(U.RTM_CONSTRUCTOR,\"  setting remote_log_level \").concat(n)),u.logger.setRemoteLogLevel(n)),null==e?void 0:e[1]);u.stateCenter.settingConfig.setSetting(null==n?void 0:n.setting),e=g();u.dataReport.newReport(e,ne.kZegoTaskCloudSettingCache.event),u.dataReport.addMsgInfo(e,{files:[{name:x,content:null==t?void 0:t.setting,versions:null==t?void 0:t.versions},{name:\"room\",content:null==n?void 0:n.setting,versions:null==n?void 0:n.versions}]}),u.dataReport.uploadReport(e)})).catch((function(e){u.logger.warn(\"\".concat(U.RTM_CONSTRUCTOR,\"  initConfig \").concat(JSON.stringify(e)))})),\"string\"==typeof t?(this.stateCenter.server=t,this.stateCenter.serverBak=t):Array.isArray(t)&&0<t.length&&(this.stateCenter.server=t[0],this.stateCenter.serverBak=t[1]||t[0]),0==a||2==a)this.bindWindowListener(),this.logger.info(\"\".concat(U.RTM_CONSTRUCTOR,\"  \").concat(navigator.appVersion)),this.stateCenter.networkState=!navigator||navigator.onLine?i.online:i.offline,this.dataReport.addMsgInfo(n,{system_info:ne.kZegoTaskInitSetting.system_info});else if(1==a||3==a){this.bindWxListener();try{var l=wx.getSystemInfoSync(),h={brand:l.brand,model:l.model,system:l.system,platform:l.platform,version:l.version,SDKVersion:l.SDKVersion};this.dataReport.addMsgInfo(n,{system_info:h}),this.logger.warn(U.RTM_CONSTRUCTOR+\" \"+JSON.stringify(h))}catch(e){this.logger.warn(U.RTM_CONSTRUCTOR+\" get system info error\")}}}else this.logger.error(\"\".concat(U.RTM_CONSTRUCTOR,\" init sdk error\")),this.dataReport.addMsgInfo(n,ne.kZegoTaskInitSetting.error.kInvalidParamError);this.dataReport.uploadReport(n,ne.kZegoTaskInitSetting.event)}var Ze=n(12),Ye=(Ke.prototype.setLog=function(e){this.zegoSetting.setLog(e)},Ke.prototype.init=function(e){this.zegoSetting.init(e)},Ke.prototype.setEnvVariable=function(e,t){this.zegoSetting.setEnvVariable(e,t)},Ke.prototype.getEnvVariables=function(){return this.zegoSetting.getEnvVariables()},Ke.prototype.fetchSetting=function(e,t,n){return this.zegoSetting.fetchSetting(e,t,n)},Ke.prototype.fetchMultiSetting=function(e,t,n){return this.zegoSetting.fetchMultiSetting(e,t,n)},Ke.prototype.setOptions=function(e){return this.zegoSetting.setOptions(e)},Ke.prototype.getSettingCache=function(e){return this.zegoSetting.getSettingCache(e)},Ke.prototype.setToken=function(e){this.zegoSetting.setToken(e)},Ke.prototype.setUserID=function(e){this.zegoSetting.setUserID(e)},Ke.prototype.activePolling=function(){this.zegoSetting.activePolling()},Ke.prototype.uninit=function(){var e;null!=(e=this.zegoSetting)&&e.uninit()},Ke.prototype.getEnvVariable=function(e){this.zegoSetting.getEnvVariable(e)},Ke);function Ke(){this.isLoad=!1,this.callBackList=[],this.zegoSetting=new Ze.ZegoSetting}Je.prototype.enableMultiRoom=function(e){return this.zegoWebRTM.enableMultiRoom(e)},Je.prototype.loginRoom=function(e,t,n,r){return this.zegoWebRTM.loginRoom(e,t,n,r)},Je.prototype.logoutRoom=function(e){return this.zegoWebRTM.logoutRoom(e)},Je.prototype.renewToken=function(e,t){return this.zegoWebRTM.renewToken(e,t)},Je.prototype.sendBarrageMessage=function(e,t){return this.zegoWebRTM.sendBarrageMessage(e,t)},Je.prototype.sendBroadcastMessage=function(e,t){return this.zegoWebRTM.sendBroadcastMessage(e,t)},Je.prototype.sendCustomCommand=function(e,t,n){return this.zegoWebRTM.sendCustomCommand(e,t,n)},Je.prototype.setRoomExtraInfo=function(e,t,n){return this.zegoWebRTM.setRoomExtraInfo(e,t,n)},Je.prototype.setLogConfig=function(e){return this.zegoWebRTM.setLogConfig(e)},Je.prototype.setDebugVerbose=function(e){return this.zegoWebRTM.setDebugVerbose(e)},Je.prototype.on=function(e,t){return this.zegoWebRTM.on(e,t)},Je.prototype.getVersion=function(){return this.zegoWebRTM.getVersion()},Je.prototype.off=function(e,t){return this.zegoWebRTM.off(e,t)},Je.prototype.loginHall=function(e,t,n){return this.zegoWebRTM.loginHall(e,t,n)},Je.prototype.logoutHall=function(){return this.zegoWebRTM.logoutHall()},Je.prototype.enterRoom=function(e,t){return this.zegoWebRTM.enterRoom(e,t)},Je.prototype.leaveRoom=function(){return this.zegoWebRTM.leaveRoom()},Je.use=function(e){Fe.use(e)},Je.version=\"1.18.0\";var Xe=Je;function Je(e,t,n,r){this.logger=new c.ZegoLogger(n=void 0===n?0:n),this.dataReport=new c.ZegoDataReport(this.logger),this.cloudSetting=new Ye,this.zegoWebRTM=new Fe(e,t,this.logger,this.dataReport,this.cloudSetting,Je.version,n,r)}}],r={},t.m=n,t.c=r,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&n&&\"string\"!=typeof e)for(var o in e)t.d(r,o,function(t){return e[t]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"\",t(t.s=21);function t(e){if(r[e])return r[e].exports;var o=r[e]={i:e,l:!1,exports:{}};return n[e].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n,r}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvemVnby1leHByZXNzLWVuZ2luZS13ZWJydG0vWmVnb0V4cHJlc3NXZWJSVE0uanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxHQUFHLElBQWlELGtCQUFrQixtQkFBTyxDQUFDLGdFQUFvQixHQUFHLEtBQUssYUFBb08sQ0FBQyxpREFBaUQsMEJBQTBCLGFBQWEsb0ZBQW9GLEVBQUUsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxpR0FBaUcsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYywwREFBMEQsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYywwREFBMEQsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxtREFBbUQsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxtREFBbUQsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyw2RUFBNkUsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYywwREFBMEQsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYywwREFBMEQsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyw4RUFBOEUsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyx1REFBdUQsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSx1REFBdUQsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSx1REFBdUQsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSx1REFBdUQsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSx1REFBdUQsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSx1REFBdUQsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxtREFBbUQsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxpR0FBaUcsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxvREFBb0QsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxzREFBc0QsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSwwREFBMEQsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxzREFBc0QsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSw4REFBOEQsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxzREFBc0QsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSw4REFBOEQsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSwrQ0FBK0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSwrQ0FBK0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxvREFBb0QsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSx5REFBeUQsV0FBVyx3Q0FBd0MsZUFBZSxzREFBc0QsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxtREFBbUQsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxtREFBbUQsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZSxzREFBc0QsV0FBVyx3Q0FBd0MsZUFBZSxrQ0FBa0MsV0FBVyx3Q0FBd0MscUJBQXFCLDREQUE0RCxnQkFBZ0Isd0JBQXdCLDRKQUE0Six3QkFBd0IsZ0NBQWdDLGtFQUFrRSxRQUFRLEVBQUUsaUJBQWlCLGdGQUFnRixTQUFTLDhFQUE4RSxnQkFBZ0Isd0JBQXdCLGlNQUFpTSx3QkFBd0IsZ0NBQWdDLGdFQUFnRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMseUJBQXlCLE1BQU0sNEJBQTRCLE1BQU0seUJBQXlCLFNBQVMsaTVCQUFpNUIsZ0JBQWdCLHdCQUF3QixvdkZBQW92Rix3QkFBd0IsZ0NBQWdDLHFFQUFxRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsMkJBQTJCLE1BQU0sMkJBQTJCLE1BQU0sOEJBQThCLE1BQU0sNkJBQTZCLE1BQU0sNEJBQTRCLE1BQU0sNEJBQTRCLE1BQU0sNkJBQTZCLE1BQU0sNkJBQTZCLE1BQU0sZ0NBQWdDLE1BQU0sbUNBQW1DLE1BQU0sNEJBQTRCLE1BQU0sZ0NBQWdDLE1BQU0sa0NBQWtDLE1BQU0sMEJBQTBCLE1BQU0seUNBQXlDLE1BQU0sNEJBQTRCLE1BQU0sOEJBQThCLE1BQU0sOEJBQThCLE1BQU0sc0NBQXNDLE1BQU0scUNBQXFDLE1BQU0sNEJBQTRCLE1BQU0sZ0NBQWdDLE1BQU0saUNBQWlDLE1BQU0sc0NBQXNDLE1BQU0sb0NBQW9DLE1BQU0saUNBQWlDLE1BQU0saUNBQWlDLE1BQU0sa0NBQWtDLE1BQU0seUJBQXlCLFNBQVMscWxDQUFxbEMsZ0JBQWdCLHdCQUF3Qiw0NkNBQTQ2Qyx1QkFBdUIsdUZBQXVGLDY0QkFBNjRCLDJCQUEyQiwyRkFBMkYsb2FBQW9hLHNCQUFzQixxRkFBcUYsOGlCQUE4aUIsd0JBQXdCLGdDQUFnQyxxRUFBcUUsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDhEQUE4RCxNQUFNLDJCQUEyQixNQUFNLHVDQUF1QyxNQUFNLHNDQUFzQyxNQUFNLGlDQUFpQyxNQUFNLGlDQUFpQyxNQUFNLDJCQUEyQixNQUFNLHdDQUF3QyxNQUFNLHlDQUF5QyxNQUFNLHlDQUF5QyxNQUFNLHVFQUF1RSxNQUFNLGdDQUFnQyxNQUFNLHFJQUFxSSxNQUFNLHVDQUF1QyxNQUFNLDRCQUE0QixNQUFNLDRCQUE0QixNQUFNLGtDQUFrQyxNQUFNLHVDQUF1QyxNQUFNLHNDQUFzQyxNQUFNLGtDQUFrQyxNQUFNLGtDQUFrQyxNQUFNLHFKQUFxSixNQUFNLDRDQUE0QyxNQUFNLHVDQUF1QyxNQUFNLHFDQUFxQyxNQUFNLGdJQUFnSSxNQUFNLG9EQUFvRCxNQUFNLG9EQUFvRCxNQUFNLG9DQUFvQyxNQUFNLHVDQUF1QyxNQUFNLHlCQUF5QixTQUFTLHdMQUF3TCxnQkFBZ0Isd0JBQXdCLHdWQUF3Vix3QkFBd0IsZ0NBQWdDLHFFQUFxRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsa0NBQWtDLE1BQU0sOEJBQThCLE1BQU0sb0NBQW9DLE1BQU0seUJBQXlCLFNBQVMsNmRBQTZkLGdCQUFnQix3QkFBd0IsZ3dDQUFnd0Msd0JBQXdCLGdDQUFnQyxxRUFBcUUsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDZCQUE2QixNQUFNLCtCQUErQixNQUFNLDJCQUEyQixNQUFNLDZCQUE2QixNQUFNLGlDQUFpQyxNQUFNLDhCQUE4QixNQUFNLHlCQUF5QixNQUFNLCtCQUErQixNQUFNLCtCQUErQixNQUFNLGdDQUFnQyxNQUFNLGtDQUFrQyxNQUFNLGlDQUFpQyxNQUFNLGdDQUFnQyxNQUFNLHlCQUF5QixTQUFTLDBHQUEwRyxnQkFBZ0Isd0JBQXdCLHlOQUF5Tix3QkFBd0IsZ0NBQWdDLHVFQUF1RSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsOEJBQThCLE1BQU0sOEJBQThCLE1BQU0seUJBQXlCLFNBQVMsMkhBQTJILGdCQUFnQix3QkFBd0IsMkxBQTJMLDJCQUEyQiw0RkFBNEYsU0FBUyx3QkFBd0IsZ0NBQWdDLG9FQUFvRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsaUNBQWlDLE1BQU0sc0pBQXNKLE1BQU0seUJBQXlCLFNBQVMscVNBQXFTLGdCQUFnQix3QkFBd0IsNHNCQUE0c0Isd0JBQXdCLGdDQUFnQyxzRUFBc0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLGdDQUFnQyxNQUFNLGdDQUFnQyxNQUFNLHdDQUF3QyxNQUFNLDJCQUEyQixNQUFNLHlCQUF5QixNQUFNLDRCQUE0QixNQUFNLGlDQUFpQyxNQUFNLHlCQUF5QixTQUFTLG9FQUFvRSxnQkFBZ0Isd0JBQXdCLDRKQUE0Six3QkFBd0IsZ0NBQWdDLHNFQUFzRSxRQUFRLEVBQUUsaUJBQWlCLGdGQUFnRixTQUFTLHlFQUF5RSxnQkFBZ0Isd0JBQXdCLGlIQUFpSCx3QkFBd0IsZ0NBQWdDLGlFQUFpRSxRQUFRLEVBQUUsaUJBQWlCLDZDQUE2QyxTQUFTLDhMQUE4TCxnQkFBZ0Isd0JBQXdCLGdnQkFBZ2dCLHdCQUF3QixnQ0FBZ0MsaUVBQWlFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw4REFBOEQsTUFBTSx1Q0FBdUMsTUFBTSxzQ0FBc0MsTUFBTSxvQ0FBb0MsTUFBTSx5QkFBeUIsU0FBUyxvQkFBb0IscU9BQXFPLHFMQUFxTCwrSUFBK0ksNkdBQTZHLG9lQUFvZSxnQkFBZ0Isd0JBQXdCLGk0QkFBaTRCLHdCQUF3QixnQ0FBZ0MsK0RBQStELFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx3QkFBd0IsTUFBTSx3QkFBd0IsTUFBTSw2QkFBNkIsTUFBTSwyQkFBMkIsTUFBTSw0QkFBNEIsTUFBTSw4QkFBOEIsTUFBTSw0QkFBNEIsTUFBTSw0QkFBNEIsTUFBTSwyQkFBMkIsTUFBTSwwQkFBMEIsTUFBTSx5QkFBeUIsU0FBUywrR0FBK0csZ0JBQWdCLHdCQUF3QiwrU0FBK1Msd0JBQXdCLGdDQUFnQyxvRUFBb0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDJCQUEyQixNQUFNLDRCQUE0QixNQUFNLGlDQUFpQyxNQUFNLHlCQUF5QixTQUFTLHNGQUFzRixnQkFBZ0Isd0JBQXdCLGlGQUFpRiwyQkFBMkIsOENBQThDLFNBQVMsd0JBQXdCLGdDQUFnQyx5RUFBeUUsUUFBUSxFQUFFLGlCQUFpQixrSUFBa0ksU0FBUywrRkFBK0YsZ0JBQWdCLHdCQUF3QiwrT0FBK08sd0JBQXdCLGdDQUFnQyxnRUFBZ0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDhEQUE4RCxNQUFNLDRCQUE0QixNQUFNLHlCQUF5QixTQUFTLGtTQUFrUyxnQkFBZ0Isd0JBQXdCLHlyQkFBeXJCLHdCQUF3QixnQ0FBZ0Msb0VBQW9FLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw0QkFBNEIsTUFBTSxtQ0FBbUMsTUFBTSw2QkFBNkIsTUFBTSwyQkFBMkIsTUFBTSw2QkFBNkIsTUFBTSwyQkFBMkIsTUFBTSxvQ0FBb0MsTUFBTSx5QkFBeUIsU0FBUyx5TEFBeUwsZ0JBQWdCLHdCQUF3QixtZUFBbWUsd0JBQXdCLGdDQUFnQyxnRUFBZ0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLHlCQUF5QixNQUFNLDRCQUE0QixNQUFNLDRCQUE0QixNQUFNLDJCQUEyQixNQUFNLG9DQUFvQyxNQUFNLHlCQUF5QixTQUFTLDRKQUE0SixnQkFBZ0Isd0JBQXdCLDBTQUEwUyx3QkFBd0IsZ0NBQWdDLHNFQUFzRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkJBQTZCLE1BQU0sNkJBQTZCLE1BQU0sMkJBQTJCLE1BQU0seUJBQXlCLFNBQVMsa1JBQWtSLGdCQUFnQix3QkFBd0IsdWtCQUF1a0Isd0JBQXdCLGdDQUFnQyxzRUFBc0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDRCQUE0QixNQUFNLDRCQUE0QixNQUFNLCtCQUErQixNQUFNLDBCQUEwQixNQUFNLDRCQUE0QixNQUFNLGlDQUFpQyxNQUFNLHlCQUF5QixTQUFTLG9HQUFvRyxnQkFBZ0Isd0JBQXdCLGdNQUFnTSxvQkFBb0Isb0ZBQW9GLFNBQVMsd0JBQXdCLGdDQUFnQyx3RUFBd0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLGdFQUFnRSxNQUFNLHlIQUF5SCxNQUFNLHlCQUF5QixTQUFTLGdJQUFnSSxnQkFBZ0Isd0JBQXdCLGdTQUFnUyx3QkFBd0IsZ0NBQWdDLDRFQUE0RSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNEJBQTRCLE1BQU0sNEJBQTRCLE1BQU0sMEJBQTBCLE1BQU0seUJBQXlCLFNBQVMsOEVBQThFLGdCQUFnQix3QkFBd0IsbUVBQW1FLG9CQUFvQiwwRkFBMEYsU0FBUyx3QkFBd0IsZ0NBQWdDLHdFQUF3RSxRQUFRLEVBQUUsaUJBQWlCLG1KQUFtSixTQUFTLDJCQUEyQixpTEFBaUwsZ0JBQWdCLHdCQUF3QixvVkFBb1Ysd0JBQXdCLGdDQUFnQywrREFBK0QsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDRCQUE0QixNQUFNLG9DQUFvQyxNQUFNLG9DQUFvQyxNQUFNLHlCQUF5QixTQUFTLDhFQUE4RSxnQkFBZ0Isd0JBQXdCLGlNQUFpTSx3QkFBd0IsZ0NBQWdDLCtEQUErRCxRQUFRLEVBQUUsaUJBQWlCLGNBQWMseUJBQXlCLE1BQU0sNEJBQTRCLE1BQU0seUJBQXlCLFNBQVMsZ0VBQWdFLGdCQUFnQix3QkFBd0IsMkpBQTJKLHdCQUF3QixnQ0FBZ0MsaUVBQWlFLFFBQVEsRUFBRSxpQkFBaUIsK0VBQStFLFNBQVMscUdBQXFHLGdCQUFnQix3QkFBd0IsaVVBQWlVLHdCQUF3QixnQ0FBZ0MsNkRBQTZELFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2REFBNkQsTUFBTSx5QkFBeUIsTUFBTSwyQkFBMkIsTUFBTSx5QkFBeUIsU0FBUyx3ZkFBd2YsZ0JBQWdCLHdCQUF3Qix5Z0NBQXlnQyxzQkFBc0IseUZBQXlGLDZEQUE2RCwyQkFBMkIsOEZBQThGLG1PQUFtTyx3QkFBd0IsZ0NBQWdDLDZEQUE2RCxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkRBQTZELE1BQU0saUNBQWlDLE1BQU0sZ0NBQWdDLE1BQU0sK0JBQStCLE1BQU0sK0JBQStCLE1BQU0sNEJBQTRCLE1BQU0saUNBQWlDLE1BQU0sc0NBQXNDLE1BQU0sb0NBQW9DLE1BQU0scUlBQXFJLE1BQU0seUpBQXlKLE1BQU0sbUNBQW1DLE1BQU0sb0NBQW9DLE1BQU0seUJBQXlCLFNBQVMsc0dBQXNHLGdCQUFnQix3QkFBd0IseU5BQXlOLHdCQUF3QixnQ0FBZ0Msa0VBQWtFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw4QkFBOEIsTUFBTSw4QkFBOEIsTUFBTSx5QkFBeUIsU0FBUyxpSUFBaUksZ0JBQWdCLHdCQUF3QiwyTEFBMkwsMkJBQTJCLHVGQUF1RixTQUFTLHdCQUF3QixnQ0FBZ0MseUVBQXlFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyxpQ0FBaUMsTUFBTSxpSkFBaUosTUFBTSx5QkFBeUIsU0FBUyxtSEFBbUgsZ0JBQWdCLHdCQUF3Qiw0VkFBNFYsd0JBQXdCLGdDQUFnQyxtRUFBbUUsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDZEQUE2RCxNQUFNLDhCQUE4QixNQUFNLCtCQUErQixNQUFNLHlCQUF5QixTQUFTLG1TQUFtUyxnQkFBZ0Isd0JBQXdCLHVpQkFBdWlCLDJCQUEyQiwyRkFBMkYsU0FBUyx3QkFBd0IsZ0NBQWdDLG1FQUFtRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkRBQTZELE1BQU0sb0NBQW9DLE1BQU0scUNBQXFDLE1BQU0sa0NBQWtDLE1BQU0scUpBQXFKLE1BQU0seUJBQXlCLFNBQVMsd0lBQXdJLGdCQUFnQix3QkFBd0IsK1JBQStSLHdCQUF3QixnQ0FBZ0Msc0VBQXNFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYywyQkFBMkIsTUFBTSw2QkFBNkIsTUFBTSx5QkFBeUIsTUFBTSx5QkFBeUIsU0FBUyx1WEFBdVgsZ0JBQWdCLHdCQUF3QixvZ0NBQW9nQyx3QkFBd0IsZ0NBQWdDLG9FQUFvRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkRBQTZELE1BQU0sNkJBQTZCLE1BQU0seUJBQXlCLE1BQU0sK0JBQStCLE1BQU0sOEJBQThCLE1BQU0sbUNBQW1DLE1BQU0sNEJBQTRCLE1BQU0sK0JBQStCLE1BQU0sZ0NBQWdDLE1BQU0sZ0NBQWdDLE1BQU0seUJBQXlCLFNBQVMsd01BQXdNLGdCQUFnQix3QkFBd0IsMHBCQUEwcEIsd0JBQXdCLGdDQUFnQyxvRUFBb0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDZEQUE2RCxNQUFNLCtCQUErQixNQUFNLCtCQUErQixNQUFNLCtCQUErQixNQUFNLCtCQUErQixNQUFNLHNDQUFzQyxNQUFNLHlCQUF5QixTQUFTLG1LQUFtSyxnQkFBZ0Isd0JBQXdCLHljQUF5Yyx3QkFBd0IsZ0NBQWdDLHVFQUF1RSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkRBQTZELE1BQU0sK0JBQStCLE1BQU0sNkJBQTZCLE1BQU0sbUNBQW1DLE1BQU0seUJBQXlCLFNBQVMsd0hBQXdILGdCQUFnQix3QkFBd0IsK1ZBQStWLHdCQUF3QixnQ0FBZ0MsdUVBQXVFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2REFBNkQsTUFBTSwrQkFBK0IsTUFBTSwrQkFBK0IsTUFBTSx5QkFBeUIsU0FBUyx5VEFBeVQsZ0JBQWdCLHdCQUF3QiwyekJBQTJ6Qix3QkFBd0IsZ0NBQWdDLHVFQUF1RSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkRBQTZELE1BQU0sK0JBQStCLE1BQU0sNkJBQTZCLE1BQU0seUJBQXlCLE1BQU0sK0JBQStCLE1BQU0sOEJBQThCLE1BQU0sbUNBQW1DLE1BQU0sNEJBQTRCLE1BQU0seUJBQXlCLFNBQVMsd0hBQXdILGdCQUFnQix3QkFBd0IsK1ZBQStWLHdCQUF3QixnQ0FBZ0MsdUVBQXVFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2REFBNkQsTUFBTSwrQkFBK0IsTUFBTSwrQkFBK0IsTUFBTSx5QkFBeUIsU0FBUyxvRUFBb0UsZ0JBQWdCLHdCQUF3QiwySkFBMkosd0JBQXdCLGdDQUFnQyxxRUFBcUUsUUFBUSxFQUFFLGlCQUFpQiwrRUFBK0UsU0FBUyx3TUFBd00sZ0JBQWdCLHdCQUF3Qiw2U0FBNlMsdUJBQXVCLHFGQUFxRiwyS0FBMkssMkJBQTJCLHlGQUF5RixTQUFTLHdCQUF3QixnQ0FBZ0MscUVBQXFFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2REFBNkQsTUFBTSwrQkFBK0IsTUFBTSxtSUFBbUksTUFBTSxtQ0FBbUMsTUFBTSxtSkFBbUosTUFBTSx5QkFBeUIsU0FBUyxzZEFBc2QsZ0JBQWdCLHdCQUF3Qix5dUNBQXl1Qyx3QkFBd0IsZ0NBQWdDLG9FQUFvRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsK0JBQStCLE1BQU0sNkJBQTZCLE1BQU0sMkJBQTJCLE1BQU0sNkJBQTZCLE1BQU0sOEJBQThCLE1BQU0seUJBQXlCLE1BQU0sK0JBQStCLE1BQU0sK0JBQStCLE1BQU0sK0JBQStCLE1BQU0sZ0NBQWdDLE1BQU0sMkJBQTJCLE1BQU0saUNBQWlDLE1BQU0sZ0NBQWdDLE1BQU0seUJBQXlCLFNBQVMsMEhBQTBILGdCQUFnQix3QkFBd0IsMkxBQTJMLHdCQUF3QixnQ0FBZ0MsaUVBQWlFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYywyQkFBMkIsTUFBTSx1QkFBdUIsTUFBTSx5QkFBeUIsU0FBUyxtSkFBbUosZ0JBQWdCLHdCQUF3QixvVEFBb1Qsd0JBQXdCLG1GQUFtRixTQUFTLHdCQUF3QixnQ0FBZ0MscUVBQXFFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2REFBNkQsTUFBTSxnQ0FBZ0MsTUFBTSxvSUFBb0ksTUFBTSx5QkFBeUIsU0FBUyxvRUFBb0UsZ0JBQWdCLHdCQUF3QiwySkFBMkosd0JBQXdCLGdDQUFnQyxxRUFBcUUsUUFBUSxFQUFFLGlCQUFpQiwrRUFBK0UsU0FBUyw2SkFBNkosaUJBQWlCLHlCQUF5QixvVEFBb1Qsd0JBQXdCLG1GQUFtRixTQUFTLHlCQUF5QixnQ0FBZ0MsMkVBQTJFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2REFBNkQsTUFBTSxnQ0FBZ0MsTUFBTSxvSUFBb0ksTUFBTSx5QkFBeUIsU0FBUyw0RUFBNEUsaUJBQWlCLHlCQUF5QiwySkFBMkoseUJBQXlCLGdDQUFnQywwRUFBMEUsUUFBUSxFQUFFLGlCQUFpQiwrRUFBK0UsU0FBUyw4SkFBOEosaUJBQWlCLHlCQUF5QixvVEFBb1Qsd0JBQXdCLG1GQUFtRixTQUFTLHlCQUF5QixnQ0FBZ0MsMkVBQTJFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2REFBNkQsTUFBTSxnQ0FBZ0MsTUFBTSxvSUFBb0ksTUFBTSx5QkFBeUIsU0FBUyw2RUFBNkUsaUJBQWlCLHlCQUF5QiwySkFBMkoseUJBQXlCLGdDQUFnQywyRUFBMkUsUUFBUSxFQUFFLGlCQUFpQiwrRUFBK0UsU0FBUyw0SkFBNEosaUJBQWlCLHlCQUF5QixvVEFBb1Qsd0JBQXdCLG1GQUFtRixTQUFTLHlCQUF5QixnQ0FBZ0MseUVBQXlFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2REFBNkQsTUFBTSxnQ0FBZ0MsTUFBTSxvSUFBb0ksTUFBTSx5QkFBeUIsU0FBUywyRUFBMkUsaUJBQWlCLHlCQUF5QiwySkFBMkoseUJBQXlCLGdDQUFnQyx5RUFBeUUsUUFBUSxFQUFFLGlCQUFpQiwrRUFBK0UsU0FBUyw4SkFBOEosaUJBQWlCLHlCQUF5QixvVEFBb1Qsd0JBQXdCLG1GQUFtRixTQUFTLHlCQUF5QixnQ0FBZ0MsMkVBQTJFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2REFBNkQsTUFBTSxnQ0FBZ0MsTUFBTSxvSUFBb0ksTUFBTSx5QkFBeUIsU0FBUyw2RUFBNkUsaUJBQWlCLHlCQUF5QiwySkFBMkoseUJBQXlCLGdDQUFnQywyRUFBMkUsUUFBUSxFQUFFLGlCQUFpQiwrRUFBK0UsU0FBUyxtT0FBbU8saUJBQWlCLHlCQUF5Qiw2bEJBQTZsQix3QkFBd0IsbUZBQW1GLFNBQVMseUJBQXlCLGdDQUFnQyxpRUFBaUUsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDZEQUE2RCxNQUFNLGlDQUFpQyxNQUFNLDZCQUE2QixNQUFNLGlDQUFpQyxNQUFNLCtCQUErQixNQUFNLG9JQUFvSSxNQUFNLHlCQUF5QixTQUFTLHdIQUF3SCxpQkFBaUIseUJBQXlCLGlQQUFpUCx5QkFBeUIsZ0NBQWdDLGlFQUFpRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkRBQTZELE1BQU0sMkJBQTJCLE1BQU0seUJBQXlCLFNBQVMsd01BQXdNLGlCQUFpQix5QkFBeUIsdWhCQUF1aEIseUJBQXlCLGdDQUFnQyxtRUFBbUUsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDZEQUE2RCxNQUFNLGlDQUFpQyxNQUFNLDJCQUEyQixNQUFNLDhCQUE4QixNQUFNLDhCQUE4QixNQUFNLHlCQUF5QixTQUFTLDhOQUE4TixpQkFBaUIseUJBQXlCLGtaQUFrWixvQkFBb0IsK0VBQStFLFNBQVMseUJBQXlCLGdDQUFnQyxvRUFBb0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDZEQUE2RCxNQUFNLGtDQUFrQyxNQUFNLCtCQUErQixNQUFNLG9IQUFvSCxNQUFNLHlCQUF5QixTQUFTLDhXQUE4VyxpQkFBaUIseUJBQXlCLG0yQkFBbTJCLHlCQUF5QixnQ0FBZ0MsaUVBQWlFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYywyQkFBMkIsTUFBTSw2QkFBNkIsTUFBTSx5QkFBeUIsTUFBTSwyQkFBMkIsTUFBTSxpQ0FBaUMsTUFBTSw2QkFBNkIsTUFBTSxpQ0FBaUMsTUFBTSwrQkFBK0IsTUFBTSw2QkFBNkIsTUFBTSx5QkFBeUIsU0FBUyx1ZUFBdWUsaUJBQWlCLHlCQUF5Qiw0MUNBQTQxQyx5QkFBeUIsZ0NBQWdDLGdFQUFnRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkRBQTZELE1BQU0sc0NBQXNDLE1BQU0sNkJBQTZCLE1BQU0seUJBQXlCLE1BQU0sNkJBQTZCLE1BQU0sZ0VBQWdFLE1BQU0sMkJBQTJCLE1BQU0sK0JBQStCLE1BQU0sZ0NBQWdDLE1BQU0sc0NBQXNDLE1BQU0sb0NBQW9DLE1BQU0sK0JBQStCLE1BQU0sOEJBQThCLE1BQU0seUJBQXlCLFNBQVMsMGhDQUEwaEMsaUJBQWlCLHlCQUF5QixvdURBQW91RCx1QkFBdUIsc0ZBQXNGLDZEQUE2RCwyQkFBMkIsMEZBQTBGLCt0QkFBK3RCLHNCQUFzQixvRkFBb0Ysa1dBQWtXLHlCQUF5QixnQ0FBZ0MsZ0VBQWdFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2REFBNkQsTUFBTSwyQkFBMkIsTUFBTSxvQ0FBb0MsTUFBTSxvQ0FBb0MsTUFBTSw0QkFBNEIsTUFBTSxtQ0FBbUMsTUFBTSxzQ0FBc0MsTUFBTSxvQ0FBb0MsTUFBTSw4QkFBOEIsTUFBTSxpQ0FBaUMsTUFBTSxnQ0FBZ0MsTUFBTSw0QkFBNEIsTUFBTSw0QkFBNEIsTUFBTSxrQ0FBa0MsTUFBTSxzRUFBc0UsTUFBTSxnQ0FBZ0MsTUFBTSxvSUFBb0ksTUFBTSxvSkFBb0osTUFBTSw0Q0FBNEMsTUFBTSx1Q0FBdUMsTUFBTSxvREFBb0QsTUFBTSxvREFBb0QsTUFBTSxvQ0FBb0MsTUFBTSwrSEFBK0gsTUFBTSxrQ0FBa0MsTUFBTSx1Q0FBdUMsTUFBTSx1Q0FBdUMsTUFBTSx5QkFBeUIsU0FBUyw2TEFBNkwsaUJBQWlCLHlCQUF5Qix3VkFBd1YseUJBQXlCLGdDQUFnQyxvRUFBb0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLGtDQUFrQyxNQUFNLDhCQUE4QixNQUFNLG9DQUFvQyxNQUFNLHlCQUF5QixTQUFTLDJRQUEyUSxpQkFBaUIseUJBQXlCLDJ3QkFBMndCLHlCQUF5QixnQ0FBZ0MsK0RBQStELFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2REFBNkQsTUFBTSxzQ0FBc0MsTUFBTSw4QkFBOEIsTUFBTSw2QkFBNkIsTUFBTSx5QkFBeUIsTUFBTSw2QkFBNkIsTUFBTSxxRUFBcUUsTUFBTSx5QkFBeUIsU0FBUywwR0FBMEcsaUJBQWlCLHlCQUF5Qiw2UEFBNlAseUJBQXlCLGdDQUFnQyxvRUFBb0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLHFDQUFxQyxNQUFNLG9DQUFvQyxNQUFNLHlCQUF5QixTQUFTLCtIQUErSCxpQkFBaUIseUJBQXlCLGtWQUFrVix5QkFBeUIsZ0NBQWdDLCtEQUErRCxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkRBQTZELE1BQU0sMkJBQTJCLE1BQU0sOEJBQThCLE1BQU0seUJBQXlCLFNBQVMscUVBQXFFLGlCQUFpQix5QkFBeUIsMkpBQTJKLHlCQUF5QixnQ0FBZ0MsbUVBQW1FLFFBQVEsRUFBRSxpQkFBaUIsK0VBQStFLFNBQVMseUdBQXlHLGlCQUFpQix5QkFBeUIsdU1BQXVNLHFCQUFxQixxRkFBcUYsU0FBUyx5QkFBeUIsZ0NBQWdDLG1FQUFtRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkRBQTZELE1BQU0sNkhBQTZILE1BQU0seUJBQXlCLFNBQVMsc0ZBQXNGLGlCQUFpQix5QkFBeUIsdUhBQXVILHlCQUF5QixnQ0FBZ0Msd0VBQXdFLFFBQVEsRUFBRSxpQkFBaUIsK0NBQStDLFNBQVMseVBBQXlQLGlCQUFpQix5QkFBeUIsK2RBQStkLHVCQUF1Qix5RkFBeUYsU0FBUyx5QkFBeUIsZ0NBQWdDLHNFQUFzRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsMkJBQTJCLE1BQU0sNkJBQTZCLE1BQU0sa0NBQWtDLE1BQU0sb0NBQW9DLE1BQU0sdUlBQXVJLE1BQU0seUJBQXlCLFNBQVMsOEdBQThHLGlCQUFpQix5QkFBeUIseU5BQXlOLHlCQUF5QixnQ0FBZ0Msc0VBQXNFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw4QkFBOEIsTUFBTSw4QkFBOEIsTUFBTSx5QkFBeUIsU0FBUywrSEFBK0gsaUJBQWlCLHlCQUF5QiwyTEFBMkwsMkJBQTJCLDJGQUEyRixTQUFTLHlCQUF5QixnQ0FBZ0MsbUVBQW1FLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyxpQ0FBaUMsTUFBTSxxSkFBcUosTUFBTSx5QkFBeUIsU0FBUyx1UkFBdVIsaUJBQWlCLHlCQUF5QixzdUJBQXN1Qix5QkFBeUIsZ0NBQWdDLGdFQUFnRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkRBQTZELE1BQU0sNkJBQTZCLE1BQU0seUJBQXlCLE1BQU0sOEJBQThCLE1BQU0sOEJBQThCLE1BQU0sb0NBQW9DLE1BQU0saUNBQWlDLE1BQU0seUJBQXlCLFNBQVMsNE1BQTRNLGlCQUFpQix5QkFBeUIsbWpCQUFtakIseUJBQXlCLGdDQUFnQyxnRUFBZ0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDZEQUE2RCxNQUFNLDhCQUE4QixNQUFNLDhCQUE4QixNQUFNLG1DQUFtQyxNQUFNLGlDQUFpQyxNQUFNLHlCQUF5QixTQUFTLHdKQUF3SixpQkFBaUIseUJBQXlCLHFUQUFxVCx1QkFBdUIscUZBQXFGLFNBQVMseUJBQXlCLGdDQUFnQyxxRUFBcUUsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDZEQUE2RCxNQUFNLGlDQUFpQyxNQUFNLG1JQUFtSSxNQUFNLHlCQUF5QixTQUFTLGtIQUFrSCxpQkFBaUIseUJBQXlCLDJPQUEyTyx5QkFBeUIsZ0NBQWdDLG9FQUFvRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsOEJBQThCLE1BQU0sb0NBQW9DLE1BQU0seUJBQXlCLFNBQVMsOExBQThMLGlCQUFpQix5QkFBeUIscVVBQXFVLCtCQUErQixpR0FBaUcsdUhBQXVILHlCQUF5QixnQ0FBZ0MscUVBQXFFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2REFBNkQsTUFBTSxpQ0FBaUMsTUFBTSx1S0FBdUssTUFBTSxtQ0FBbUMsTUFBTSx5QkFBeUIsU0FBUyw4VkFBOFYsaUJBQWlCLHlCQUF5QiwyekJBQTJ6Qix5QkFBeUIsZ0NBQWdDLHdFQUF3RSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsOEJBQThCLE1BQU0sOEJBQThCLE1BQU0sZ0NBQWdDLE1BQU0sa0NBQWtDLE1BQU0sK0JBQStCLE1BQU0sbUNBQW1DLE1BQU0sOEJBQThCLE1BQU0sNEJBQTRCLE1BQU0seUJBQXlCLFNBQVMsdU5BQXVOLGlCQUFpQix5QkFBeUIsbWVBQW1lLHVCQUF1Qix5RkFBeUYsU0FBUyx5QkFBeUIsZ0NBQWdDLHlFQUF5RSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkRBQTZELE1BQU0sNkJBQTZCLE1BQU0seUJBQXlCLE1BQU0saUNBQWlDLE1BQU0sdUlBQXVJLE1BQU0seUJBQXlCLFNBQVMsc0hBQXNILGlCQUFpQix5QkFBeUIsMk9BQTJPLHlCQUF5QixnQ0FBZ0Msd0VBQXdFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw4QkFBOEIsTUFBTSxvQ0FBb0MsTUFBTSx5QkFBeUIsU0FBUyxvS0FBb0ssaUJBQWlCLHlCQUF5QixxVUFBcVUsK0JBQStCLHVHQUF1RyxTQUFTLHlCQUF5QixnQ0FBZ0MseUVBQXlFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2REFBNkQsTUFBTSxpQ0FBaUMsTUFBTSw2S0FBNkssTUFBTSx5QkFBeUIsU0FBUyxvV0FBb1csaUJBQWlCLHlCQUF5QiwyekJBQTJ6Qix5QkFBeUIsZ0NBQWdDLDhFQUE4RSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsOEJBQThCLE1BQU0sOEJBQThCLE1BQU0sZ0NBQWdDLE1BQU0sa0NBQWtDLE1BQU0sK0JBQStCLE1BQU0sbUNBQW1DLE1BQU0sOEJBQThCLE1BQU0sNEJBQTRCLE1BQU0seUJBQXlCLFNBQVMsZ0tBQWdLLGlCQUFpQix5QkFBeUIsMldBQTJXLGdCQUFnQixpRkFBaUYsU0FBUyx5QkFBeUIsZ0NBQWdDLG9FQUFvRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkRBQTZELE1BQU0sNkJBQTZCLE1BQU0seUJBQXlCLE1BQU0sMEdBQTBHLE1BQU0seUJBQXlCLFNBQVMscVBBQXFQLGlCQUFpQix5QkFBeUIsNmhCQUE2aEIseUJBQXlCLGdDQUFnQyx1RUFBdUUsUUFBUSxFQUFFLGlCQUFpQixjQUFjLGlDQUFpQyxNQUFNLDZCQUE2QixNQUFNLCtCQUErQixNQUFNLGlDQUFpQyxNQUFNLG9DQUFvQyxNQUFNLHlCQUF5QixTQUFTLHNJQUFzSSxpQkFBaUIseUJBQXlCLG9UQUFvVCxnQkFBZ0Isb0ZBQW9GLFNBQVMseUJBQXlCLGdDQUFnQyxvRUFBb0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDZEQUE2RCxNQUFNLHNDQUFzQyxNQUFNLDZHQUE2RyxNQUFNLHlCQUF5QixTQUFTLHNJQUFzSSxpQkFBaUIseUJBQXlCLDBPQUEwTyx5QkFBeUIsZ0NBQWdDLDBFQUEwRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkJBQTZCLE1BQU0sb0NBQW9DLE1BQU0seUJBQXlCLFNBQVMsNk1BQTZNLGlCQUFpQix5QkFBeUIsMmdCQUEyZ0IseUJBQXlCLGdDQUFnQyxnRUFBZ0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDZEQUE2RCxNQUFNLDZCQUE2QixNQUFNLHlCQUF5QixNQUFNLDhCQUE4QixNQUFNLDhCQUE4QixNQUFNLHlCQUF5QixTQUFTLG9KQUFvSixpQkFBaUIseUJBQXlCLG1XQUFtVyx5QkFBeUIsZ0NBQWdDLGdFQUFnRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkRBQTZELE1BQU0sOEJBQThCLE1BQU0sZ0NBQWdDLE1BQU0seUJBQXlCLFNBQVMsNkZBQTZGLGlCQUFpQix5QkFBeUIsOE9BQThPLHlCQUF5QixnQ0FBZ0MscUVBQXFFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2REFBNkQsTUFBTSwwQkFBMEIsTUFBTSx5QkFBeUIsU0FBUyx3R0FBd0csaUJBQWlCLHlCQUF5QixrUkFBa1IseUJBQXlCLGdDQUFnQyxxRUFBcUUsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDZEQUE2RCxNQUFNLHNDQUFzQyxNQUFNLHlCQUF5QixTQUFTLHdOQUF3TixpQkFBaUIseUJBQXlCLHFkQUFxZCx5QkFBeUIsZ0NBQWdDLGtFQUFrRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsMkJBQTJCLE1BQU0sMkJBQTJCLE1BQU0sNkJBQTZCLE1BQU0seUJBQXlCLE1BQU0sOEJBQThCLE1BQU0seUJBQXlCLFNBQVMseUxBQXlMLGlCQUFpQix5QkFBeUIsNlFBQTZRLHFCQUFxQixpRkFBaUYsU0FBUyx5QkFBeUIsZ0NBQWdDLDJFQUEyRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsMkJBQTJCLE1BQU0sbUNBQW1DLE1BQU0seUhBQXlILE1BQU0seUJBQXlCLFNBQVMsMFBBQTBQLGlCQUFpQix5QkFBeUIsa2dCQUFrZ0IseUJBQXlCLGdDQUFnQyx1RUFBdUUsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDJCQUEyQixNQUFNLDJCQUEyQixNQUFNLCtCQUErQixNQUFNLGtDQUFrQyxNQUFNLGlDQUFpQyxNQUFNLHlCQUF5QixTQUFTLGdEQUFnRCxpQkFBaUIseUJBQXlCLHFCQUFxQix5QkFBeUIsZ0NBQWdDLCtCQUErQiwwQ0FBMEMsUUFBUSxFQUFFLGlCQUFpQixnQkFBZ0IsU0FBUywySUFBMkksaUJBQWlCLHlCQUF5QixrVkFBa1YseUJBQXlCLGdDQUFnQywyRUFBMkUsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDJCQUEyQixNQUFNLDBCQUEwQixNQUFNLG1FQUFtRSxNQUFNLHlCQUF5QixTQUFTLGtGQUFrRixpQkFBaUIseUJBQXlCLCtFQUErRSwwQkFBMEIsNENBQTRDLFNBQVMseUJBQXlCLGdDQUFnQyxrRUFBa0UsUUFBUSxFQUFFLGlCQUFpQiw2SEFBNkgsU0FBUyw4SUFBOEksaUJBQWlCLHlCQUF5QixtUUFBbVEsdUJBQXVCLHlGQUF5RixTQUFTLHlCQUF5QixnQ0FBZ0Msa0VBQWtFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYywyQkFBMkIsTUFBTSwrQkFBK0IsTUFBTSx1SUFBdUksTUFBTSx5QkFBeUIsU0FBUyxnbEJBQWdsQixpQkFBaUIseUJBQXlCLGtqREFBa2pELHlCQUF5QixnQ0FBZ0Msd0VBQXdFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2QkFBNkIsTUFBTSwrQkFBK0IsTUFBTSwyQkFBMkIsTUFBTSw2QkFBNkIsTUFBTSw4QkFBOEIsTUFBTSx5QkFBeUIsTUFBTSxxQ0FBcUMsTUFBTSwrQkFBK0IsTUFBTSw0QkFBNEIsTUFBTSxnQ0FBZ0MsTUFBTSxnQ0FBZ0MsTUFBTSxnQ0FBZ0MsTUFBTSxrQ0FBa0MsTUFBTSxpQ0FBaUMsTUFBTSxnQ0FBZ0MsTUFBTSxnQ0FBZ0MsTUFBTSx5QkFBeUIsU0FBUyxzT0FBc08saUJBQWlCLHlCQUF5Qix3V0FBd1csb0JBQW9CLGtGQUFrRixTQUFTLHlCQUF5QixnQ0FBZ0Msa0VBQWtFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYywyQkFBMkIsTUFBTSxrQ0FBa0MsTUFBTSwrQkFBK0IsTUFBTSx1SEFBdUgsTUFBTSx5QkFBeUIsU0FBUyxpWEFBaVgsaUJBQWlCLHlCQUF5QixtMkJBQW0yQix5QkFBeUIsZ0NBQWdDLG9FQUFvRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsMkJBQTJCLE1BQU0sNkJBQTZCLE1BQU0seUJBQXlCLE1BQU0sMkJBQTJCLE1BQU0saUNBQWlDLE1BQU0sNkJBQTZCLE1BQU0saUNBQWlDLE1BQU0sK0JBQStCLE1BQU0sNkJBQTZCLE1BQU0seUJBQXlCLFNBQVMsa01BQWtNLGlCQUFpQix5QkFBeUIsOFVBQThVLG9CQUFvQixxRkFBcUYsU0FBUyx5QkFBeUIsZ0NBQWdDLHFFQUFxRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsMkJBQTJCLE1BQU0sMkJBQTJCLE1BQU0sNkJBQTZCLE1BQU0sMEhBQTBILE1BQU0seUJBQXlCLFNBQVMsOFVBQThVLGlCQUFpQix5QkFBeUIsK3dCQUErd0IseUJBQXlCLGdDQUFnQyx1RUFBdUUsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDJCQUEyQixNQUFNLDZCQUE2QixNQUFNLHlCQUF5QixNQUFNLDZCQUE2QixNQUFNLGlDQUFpQyxNQUFNLDZCQUE2QixNQUFNLCtCQUErQixNQUFNLGlDQUFpQyxNQUFNLHlCQUF5QixTQUFTLG1jQUFtYyxpQkFBaUIseUJBQXlCLHFtQ0FBcW1DLHlCQUF5QixnQ0FBZ0MsaUVBQWlFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYywyQkFBMkIsTUFBTSwyQkFBMkIsTUFBTSxnQ0FBZ0MsTUFBTSxrQ0FBa0MsTUFBTSwrQkFBK0IsTUFBTSw4QkFBOEIsTUFBTSw4QkFBOEIsTUFBTSw4QkFBOEIsTUFBTSxtQ0FBbUMsTUFBTSxrQ0FBa0MsTUFBTSxvQ0FBb0MsTUFBTSx5QkFBeUIsU0FBUyxzV0FBc1csaUJBQWlCLHlCQUF5Qixzd0JBQXN3Qix1QkFBdUIsc0ZBQXNGLFNBQVMseUJBQXlCLGdDQUFnQyxxRUFBcUUsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDJCQUEyQixNQUFNLDJCQUEyQixNQUFNLGdDQUFnQyxNQUFNLGtDQUFrQyxNQUFNLCtCQUErQixNQUFNLG1DQUFtQyxNQUFNLGtDQUFrQyxNQUFNLHFJQUFxSSxNQUFNLHlCQUF5QixTQUFTLHFKQUFxSixpQkFBaUIseUJBQXlCLDBUQUEwVCx5QkFBeUIsZ0NBQWdDLHFFQUFxRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsOEJBQThCLE1BQU0sOEJBQThCLE1BQU0sOEJBQThCLE1BQU0seUJBQXlCLFNBQVMsb0JBQW9CLGlCQUFpQixrQkFBa0IsYUFBYSxzQ0FBc0MsU0FBUyxtQkFBbUIsV0FBVyxJQUFJLHU2QkFBdTZCLFVBQVUsVUFBVSxrQkFBa0IsNkNBQTZDLGNBQWMsNkJBQTZCLGNBQWMsdUJBQXVCLGdCQUFnQixnREFBZ0QsU0FBUyxhQUFhLFFBQVEsTUFBTSxnQkFBZ0IsVUFBVSwrSUFBK0ksZ0JBQWdCLHlCQUF5QixNQUFNLGdCQUFnQixpQkFBaUIsS0FBSyxrQkFBa0IsbUJBQW1CLDBDQUEwQyxrQkFBa0Isb0JBQW9CLHdDQUF3QyxlQUFlLGtCQUFrQiw0Q0FBNEMsOEdBQThHLCtDQUErQyxNQUFNLHVEQUF1RCw0Q0FBNEMsNEJBQTRCLFdBQVcsTUFBTSw4REFBOEQsOERBQThELHNCQUFzQixnQkFBZ0IsMkdBQTJHLDZCQUE2Qiw2UUFBNlEsMEJBQTBCLDJDQUEyQyx1QkFBdUIsaUZBQWlGLHdCQUF3QiwrQ0FBK0MsMkJBQTJCLFFBQVEsa0pBQWtKLCtDQUErQyxFQUFFLDJEQUEyRCw2QkFBNkIsS0FBSyxXQUFXLFNBQVMsVUFBVSwwQkFBMEIsaUJBQWlCLGtDQUFrQyxxQkFBcUIseUJBQXlCLGdCQUFnQixpQ0FBaUMsb0JBQW9CLDRCQUE0QixxRUFBcUUsK0NBQStDLGlCQUFpQixLQUFLLDZCQUE2QixxQkFBcUIsbUNBQW1DLHdDQUF3QyxrQ0FBa0MseUJBQXlCLG1DQUFtQyxvQkFBb0IsdUJBQXVCLHFCQUFxQix1QkFBdUIsc0JBQXNCLDRIQUE0SCx1Q0FBdUMsa0JBQWtCLDJEQUEyRCxzQkFBc0IsK0NBQStDLHVCQUF1QiwwRUFBMEUsc0JBQXNCLHFEQUFxRCx1QkFBdUIsNEVBQTRFLHNDQUFzQyx5Q0FBeUMsOElBQThJLHNDQUFzQyxxREFBcUQsa0NBQWtDLGVBQWUsa0lBQWtJLGtKQUFrSix3QkFBd0Isd0NBQXdDLHlDQUF5Qyw2QkFBNkIsZ0dBQWdHLHVDQUF1QyxtQ0FBbUMsbUNBQW1DLDJGQUEyRixpREFBaUQsNEVBQTRFLDhNQUE4TSxnS0FBZ0ssdUNBQXVDLDREQUE0RCxVQUFVLGdMQUFnTCwwQ0FBMEMsa0JBQWtCLHFEQUFxRCwrQkFBK0IsSUFBSSxLQUFLLGdKQUFnSixvQ0FBb0MsMkZBQTJGLGlEQUFpRCxJQUFJLFdBQVcsU0FBUyxFQUFFLG9EQUFvRCxnRkFBZ0Ysd0JBQXdCLG9DQUFvQyx3Q0FBd0MsU0FBUyxxQ0FBcUMsb0pBQW9KLGdEQUFnRCw2Q0FBNkMsZ0NBQWdDLCtEQUErRCwyREFBMkQsNENBQTRDLDhDQUE4Qyx1RUFBdUUsa0JBQWtCLHVFQUF1RSxtQkFBbUIsdUVBQXVFLHlCQUF5Qiw0SUFBNEksNENBQTRDLDhKQUE4SixxREFBcUQsaUtBQWlLLG1GQUFtRixNQUFNLHlQQUF5UCwrQ0FBK0MsTUFBTSx5UEFBeVAsNENBQTRDLG1EQUFtRCx5QkFBeUIsbURBQW1ELHVCQUF1QiwyQ0FBMkMsd0JBQXdCLDJCQUEyQiw0RUFBNEUsd0JBQXdCLDJCQUEyQiw0RUFBNEUsNkJBQTZCLCtDQUErQyw2QkFBNkIsOEVBQThFLDZCQUE2Qiw4RUFBOEUsdUNBQXVDLEdBQUcsRUFBRSx1QkFBdUIsU0FBUyw2QkFBNkIsaUJBQWlCLGFBQWEsTUFBTSx5QkFBeUIsTUFBTSxnVEFBZ1QsUUFBUSxVQUFVLGlDQUFpQyxpREFBaUQsY0FBYyxRQUFRLFdBQVcsV0FBVyxtQkFBbUIsY0FBYyxzRkFBc0Ysb0NBQW9DLHFDQUFxQyxtQkFBbUIsb0JBQW9CLG1DQUFtQyxrQkFBa0IsbUJBQW1CLG1EQUFtRCx5REFBeUQsa0JBQWtCLHlDQUF5Qyx5QkFBeUIsbUJBQW1CLHNEQUFzRCxzQkFBc0IsNkJBQTZCLG9CQUFvQix3REFBd0QsZ0NBQWdDLElBQUksS0FBSyw4QkFBOEIsNEJBQTRCLGlCQUFpQixJQUFJLHlCQUF5Qiw2QkFBNkIsa0JBQWtCLGlDQUFpQyxvREFBb0Qsa0JBQWtCLHlCQUF5QixxQ0FBcUMsb0JBQW9CLGlCQUFpQixJQUFJLHVCQUF1QixNQUFNLDRDQUE0QyxnREFBZ0QsVUFBVSx3Q0FBd0Msc0NBQXNDLFdBQVcsdUZBQXVGLElBQUksd0JBQXdCLFlBQVksVUFBVSxzQkFBc0Isd0NBQXdDLElBQUksS0FBSyw4QkFBOEIseURBQXlELGtCQUFrQixtQkFBbUIsNEJBQTRCLElBQUksb0RBQW9ELDBCQUEwQixhQUFhLHNCQUFzQix3Q0FBd0MsSUFBSSxLQUFLLDhCQUE4QiwrQkFBK0Isa0JBQWtCLG1CQUFtQiw0QkFBNEIsSUFBSSw4Q0FBOEMsd0JBQXdCLFdBQVcsc0JBQXNCLElBQUksa0RBQWtELFNBQVMseUNBQXlDLG1CQUFtQixpREFBaUQsc0NBQXNDLGlCQUFpQix5Q0FBeUMscUJBQXFCLHFGQUFxRixzQkFBc0IsNEhBQTRILGVBQWUsTUFBTSxZQUFZLElBQUksK0JBQStCLDhCQUE4Qix1QkFBdUIsa0JBQWtCLHlCQUF5QixvQ0FBb0Msa0JBQWtCLHdCQUF3QixnQ0FBZ0MseUNBQXlDLGtCQUFrQixtQ0FBbUMsb0JBQW9CLDRDQUE0QyxzQkFBc0IsNkNBQTZDLHdDQUF3QyxxQkFBcUIsa0NBQWtDLCtCQUErQixxQkFBcUIsMENBQTBDLFdBQVcsRUFBRSxTQUFTLFVBQVUsbUJBQW1CLGlCQUFpQixzQkFBc0Isb0dBQW9HLE1BQU0sNkJBQTZCLFlBQVksUUFBUSxNQUFNLEtBQUssNEJBQTRCLCtCQUErQiwrQ0FBK0MsMkRBQTJELHNDQUFzQyxpR0FBaUcsdURBQXVELG9CQUFvQixvREFBb0Qsd0hBQXdILElBQUksb05BQW9OLHNDQUFzQyxJQUFJLEtBQUssTUFBTSxrQkFBa0IsY0FBYyw2RUFBNkUsNEJBQTRCLG9EQUFvRCw0QkFBNEIsYUFBYSw4RUFBOEUsU0FBUyx1QkFBdUIseUNBQXlDLHNGQUFzRixJQUFJLEtBQUssZ09BQWdPLGdCQUFnQixnUkFBZ1Isa0NBQWtDLFdBQVcsRUFBRSxzQ0FBc0MsZ0NBQWdDLGlCQUFpQixzQkFBc0Isc0VBQXNFLEtBQUssd0NBQXdDLHNCQUFzQixvQkFBb0Isb0VBQW9FLCtCQUErQixZQUFZLEtBQUssS0FBSyxpQkFBaUIscURBQXFELHlNQUF5TSxvaERBQW9oRCx3QkFBd0IsK0RBQStELHVCQUF1QixnQ0FBZ0Msa0xBQWtMLG1DQUFtQyxJQUFJLEtBQUssV0FBVyxxREFBcUQsU0FBUyxrQkFBa0IseUJBQXlCLHFDQUFxQyxFQUFFLDBCQUEwQix1QkFBdUIsd0JBQXdCLDBCQUEwQix1QkFBdUIsd0JBQXdCLDBCQUEwQixvQkFBb0Isd0JBQXdCLDBCQUEwQix1QkFBdUIsd0JBQXdCLHVFQUF1RSxPQUFPLGlCQUFpQixjQUFjLDRCQUE0QixZQUFZLHFCQUFxQiwyREFBMkQsUUFBUSw4QkFBOEIsYUFBYSxNQUFNLHNDQUFzQyxTQUFTLDJJQUEySSxzTkFBc04sc0dBQXNHLDhGQUE4Rix3R0FBd0csd0NBQXdDLHFMQUFxTCxpQkFBaUIsYUFBYSxhQUFhLG9EQUFvRCxzQ0FBc0MsU0FBUyxzREFBc0Qsd0RBQXdELDhCQUE4QixzREFBc0QsZUFBZSw2QkFBNkIsaUJBQWlCLHdCQUF3QiwrQkFBK0IsMkNBQTJDLGVBQWUsaUJBQWlCLGlCQUFpQixZQUFZLCtCQUErQiw2Q0FBNkMsZUFBZSxtQkFBbUIsaUJBQWlCLGNBQWMsK0JBQStCLHlDQUF5QyxpQkFBaUIsYUFBYSxzQ0FBc0MsU0FBUyx5REFBeUQsMENBQTBDLFdBQVcsd0VBQXdFLGlIQUFpSCxnRkFBZ0YsdUNBQXVDLCtDQUErQyxJQUFJLHdDQUF3QyxnRkFBZ0YsSUFBSSxpQ0FBaUMsa0NBQWtDLGtDQUFrQyxvQ0FBb0MsOEJBQThCLHVDQUF1QyxPQUFPLEVBQUUsOEJBQThCLHlDQUF5QyxJQUFJLGdCQUFnQiwrREFBK0QsTUFBTSxjQUFjLGdFQUFnRSxxREFBcUQsaUJBQWlCLGFBQWEsc0NBQXNDLFNBQVMsaUZBQWlGLDJEQUEyRCw2QkFBNkIsNEJBQTRCLDBEQUEwRCw2QkFBNkIsOEJBQThCLHFEQUFxRCw2QkFBNkIseUJBQXlCLFFBQVEsc0NBQXNDLDZCQUE2QixxQkFBcUIsRUFBRSxpQkFBaUIsYUFBYSxzQ0FBc0Msb0NBQW9DLGlDQUFpQyxJQUFJLHVGQUF1RixTQUFTLHdCQUF3QiwwQ0FBMEMsU0FBUyw4REFBOEQsd0JBQXdCLHlGQUF5RixxQ0FBcUMscUZBQXFGLHNDQUFzQyw0RkFBNEYsc0NBQXNDLCtGQUErRiw4Q0FBOEMsaUZBQWlGLHNDQUFzQywyQkFBMkIsb0NBQW9DLG9CQUFvQixxQkFBcUIsS0FBSyw2Q0FBNkMsOENBQThDLE9BQU8sMkNBQTJDLDhDQUE4Qyw2Q0FBNkMsMkJBQTJCLG9DQUFvQyxNQUFNLHFCQUFxQixLQUFLLDZDQUE2QyxrRkFBa0YsbUJBQW1CLElBQUksT0FBTywyQ0FBMkMsOENBQThDLGlEQUFpRCwyQkFBMkIsb0NBQW9DLE1BQU0scUJBQXFCLEtBQUssNkNBQTZDLG9FQUFvRSxPQUFPLDJDQUEyQyw4Q0FBOEMsNENBQTRDLDJCQUEyQixvQ0FBb0MsWUFBWSxxQkFBcUIsS0FBSyxnREFBZ0Qsa0NBQWtDLG1DQUFtQyxPQUFPLDRDQUE0QywrQ0FBK0MsMkNBQTJDLDJCQUEyQixvQ0FBb0MsWUFBWSxxQkFBcUIsS0FBSyxzQkFBc0IsVUFBVSxPQUFPLDRDQUE0QywrQ0FBK0Msc0NBQXNDLDZGQUE2Rix3Q0FBd0Msc0NBQXNDLDhCQUE4Qiw0Q0FBNEMsNENBQTRDLDZCQUE2Qix1RkFBdUYsa0RBQWtELHVEQUF1RCxJQUFJLGNBQWMsc0JBQXNCLGVBQWUsbUJBQW1CLGlCQUFpQixhQUFhLHNDQUFzQyxvQ0FBb0MsaUNBQWlDLElBQUksdUZBQXVGLFNBQVMsd0JBQXdCLDBDQUEwQyxTQUFTLGlEQUFpRCxjQUFjLCtRQUErUSxvQ0FBb0MsOERBQThELDJDQUEyQyxvRUFBb0Usa0RBQWtELHlGQUF5RixnQ0FBZ0MscU1BQXFNLDhCQUE4QixpQkFBaUIsbUJBQW1CLHNCQUFzQiwyREFBMkQscUlBQXFJLDZCQUE2QixpQkFBaUIsbUJBQW1CLHNCQUFzQiwwREFBMEQsa0lBQWtJLDZCQUE2QixpQkFBaUIsbUJBQW1CLHNCQUFzQiwwREFBMEQsa0lBQWtJLDhCQUE4QixpQkFBaUIsbUJBQW1CLHNCQUFzQiwyREFBMkQsNE9BQTRPLG1FQUFtRSxzQ0FBc0MsK0JBQStCLDRGQUE0RixzQ0FBc0MsSUFBSSw0T0FBNE8sU0FBUyx5Q0FBeUMsc0NBQXNDLG1NQUFtTSw0Q0FBNEMscUhBQXFILDRDQUE0QyxXQUFXLHdHQUF3RyxpQkFBaUIsNEJBQTRCLHdDQUF3QyxtRkFBbUYsdUNBQXVDLDhHQUE4RywwRUFBMEUsaUdBQWlHLDBDQUEwQywyQkFBMkIsOENBQThDLDZFQUE2RSwwRkFBMEYsZUFBZSxzR0FBc0csMEdBQTBHLG9FQUFvRSxpQkFBaUIsMkJBQTJCLEtBQUssbUVBQW1FLHVDQUF1QyxRQUFRLEtBQUssMkZBQTJGLDZCQUE2QixrREFBa0QsNEJBQTRCLHdJQUF3SSw0Q0FBNEMsb0dBQW9HLHdDQUF3QyxPQUFPLHdPQUF3Tyx5QkFBeUIsOENBQThDLHlCQUF5QixlQUFlLEtBQUssaVhBQWlYLG9CQUFvQixnREFBZ0QsMElBQTBJLG1DQUFtQyxpQkFBaUIsbUJBQW1CLHNCQUFzQiw2Q0FBNkMsc0NBQXNDLG1DQUFtQyxpQkFBaUIsbUJBQW1CLHNCQUFzQiw0Q0FBNEMsRUFBRSxxQ0FBcUMsb0hBQW9ILHdDQUF3QywrREFBK0QsZ0NBQWdDLHFDQUFxQyxnQ0FBZ0MsMENBQTBDLDRGQUE0RixTQUFTLHNDQUFzQywwQ0FBMEMsNklBQTZJLDBCQUEwQix5QkFBeUIsK0NBQStDLHFGQUFxRiwyQ0FBMkMsb0JBQW9CLDJHQUEyRyxHQUFHLGlDQUFpQyxnQ0FBZ0MsMEJBQTBCLEVBQUUsWUFBWSxzREFBc0QsMElBQTBJLGtCQUFrQiwwQ0FBMEMsdUJBQXVCLGdCQUFnQixpQkFBaUIsYUFBYSxzQ0FBc0MsU0FBUyx1REFBdUQsc0NBQXNDLDROQUE0TiwyR0FBMkcsNE1BQTRNLDRCQUE0QixpQ0FBaUMsZ0NBQWdDLHVGQUF1RixjQUFjLEdBQUcsR0FBRyxzREFBc0QsNEJBQTRCLGVBQWUsa1BBQWtQLE1BQU0saUNBQWlDLHFDQUFxQyxvQkFBb0IsRUFBRSxpQkFBaUIsNEZBQTRGLGVBQWUsd0NBQXdDLFNBQVMsRUFBRSxtQkFBbUIsOEJBQThCLHFEQUFxRCwwQkFBMEIsNkNBQTZDLHNCQUFzQiw2REFBNkQsWUFBWSxlQUFlLFNBQVMsaUJBQWlCLGlDQUFpQyxpQkFBaUIsWUFBWSxVQUFVLHNCQUFzQixtQkFBbUIsaURBQWlELGtCQUFrQixlQUFlLFlBQVksaUJBQWlCLHdCQUF3QixpQkFBaUIsYUFBYSx5QkFBeUIsb0NBQW9DLDJCQUEyQixtREFBbUQsbUJBQW1CLHVCQUF1QixRQUFRLElBQUksa0pBQWtKLDhMQUE4TCw2QkFBNkIsMENBQTBDLElBQUksZ0NBQWdDLG1CQUFtQixJQUFJLDZFQUE2RSxrREFBa0QsS0FBSyxrQkFBa0IsMkJBQTJCLDJJQUEySSx3SkFBd0osSUFBSSxtQ0FBbUMsY0FBYyxlQUFlLDJFQUEyRSwyREFBMkQsZ0RBQWdELGlCQUFpQix1QkFBdUIsZUFBZSxpQkFBaUIsWUFBWSxHQUFHLElBQUksbUNBQW1DLFNBQVMsb0NBQW9DLFlBQVksaUJBQWlCLGNBQWMsdUdBQXVHLGNBQWMsZ0NBQWdDLG1CQUFtQiw0QkFBNEIsdUJBQXVCLDJGQUEyRixXQUFXLEVBQUUsbURBQW1ELFlBQVksSUFBSSw4QkFBOEIsWUFBWSx5QkFBeUIsMkJBQTJCLGdDQUFnQyxXQUFXLGlCQUFpQixjQUFjLDRCQUE0QixZQUFZLHFCQUFxQiwyREFBMkQsVUFBVSx1QkFBdUIsd0JBQXdCLGFBQWEsc0NBQXNDLFNBQVMsa0ZBQWtGLHlWQUF5VixpQkFBaUIsYUFBYSxzQ0FBc0MsU0FBUyxrQ0FBa0MsVUFBVSx5QkFBeUIsb0JBQW9CLG1DQUFtQyxvQkFBb0IsNkJBQTZCLHVCQUF1QixvQ0FBb0MsWUFBWSw4QkFBOEIsaUJBQWlCLGFBQWEsc0NBQXNDLFNBQVMsOEdBQThHLDROQUE0TiwyR0FBMkcsK0VBQStFLDBEQUEwRCw0QkFBNEIsZUFBZSxpUEFBaVAsMEJBQTBCLHVCQUF1Qiw0Q0FBNEMsb0NBQW9DLDhEQUE4RCw0QkFBNEIsMEdBQTBHLGlHQUFpRyxnQ0FBZ0Msd0RBQXdELEdBQUcsdUZBQXVGLGlCQUFpQixhQUFhLHNDQUFzQyxTQUFTLHVCQUF1QixXQUFXLHVDQUF1Qyw2QkFBNkIsc0JBQXNCLEVBQUUsaUJBQWlCLGFBQWEsc0NBQXNDLG9DQUFvQyxpQ0FBaUMsSUFBSSx1RkFBdUYsU0FBUyx3QkFBd0IsMkNBQTJDLHdDQUF3QyxjQUFjLElBQUksYUFBYSxTQUFTLE1BQU0sY0FBYyxJQUFJLGNBQWMsU0FBUyxNQUFNLGNBQWMsTUFBTSxnRUFBZ0UsS0FBSyxjQUFjLCtCQUErQixHQUFHLHlDQUF5QyxhQUFhLHdCQUF3QixxQkFBcUIsWUFBWSxnQkFBZ0IsSUFBSSxrQ0FBa0MsZ0VBQWdFLFlBQVksSUFBSSxjQUFjLG1CQUFtQixZQUFZLDREQUE0RCxLQUFLLEVBQUUsS0FBSyxrSEFBa0gsd0NBQXdDLGtCQUFrQixNQUFNLHlCQUF5QixvQkFBb0IsOEJBQThCLFNBQVMsa0NBQWtDLFNBQVMsMEVBQTBFLElBQUksU0FBUyx5Q0FBeUMsYUFBYSxNQUFNLDJCQUEyQixpQkFBaUIsTUFBTSxvQkFBb0IsMkJBQTJCLE1BQU0sK0JBQStCLFNBQVMsY0FBYyxTQUFTLFlBQVksUUFBUSxNQUFNLHFCQUFxQixPQUFPLGtDQUFrQywwQ0FBMEMsU0FBUyx5RUFBeUUsYUFBYSwwQ0FBMEMsdUJBQXVCLGlJQUFpSSxpREFBaUQsZUFBZSx1QkFBdUIsNkNBQTZDLCtCQUErQiwrQkFBK0IsV0FBVyxxTEFBcUwsNGVBQTRlLHdDQUF3Qyw4TkFBOE4sK0JBQStCLDRFQUE0RSwwQ0FBMEMsaUNBQWlDLHdDQUF3QywyQkFBMkIseUNBQXlDLFdBQVcsb0NBQW9DLDBIQUEwSCxHQUFHLHdDQUF3Qyx3QkFBd0IseUNBQXlDLFdBQVcseUJBQXlCLG1DQUFtQyxzQkFBc0IsR0FBRyxxQkFBcUIsc0NBQXNDLHVCQUF1QixHQUFHLGtDQUFrQyxxREFBcUQsbUNBQW1DLHVEQUF1RCx5Q0FBeUMsd0NBQXdDLFVBQVUsMkJBQTJCLGdCQUFnQiw2REFBNkQsc0JBQXNCLHdCQUF3QixzQ0FBc0Msa0RBQWtELHFGQUFxRiw0REFBNEQsc0JBQXNCLHdCQUF3Qiw4RUFBOEUsS0FBSyxzQ0FBc0MsMEJBQTBCLEdBQUcsR0FBRywwQ0FBMEMsd0JBQXdCLHVRQUF1USwyREFBMkQsc0JBQXNCLHNRQUFzUSxzQ0FBc0MsNktBQTZLLCtDQUErQyxXQUFXLHdCQUF3QixvUUFBb1EsbURBQW1ELFFBQVEsTUFBTSwwQkFBMEIscUNBQXFDLE1BQU0sMkJBQTJCLHlDQUF5QyxzQkFBc0Isa0tBQWtLLHNDQUFzQyxnQkFBZ0IsR0FBRyxHQUFHLDZCQUE2QixzREFBc0QsdURBQXVELHNCQUFzQix1QkFBdUIscUNBQXFDLE1BQU0sMkJBQTJCLGdCQUFnQixnREFBZ0QscUJBQXFCLHVFQUF1RSxzQkFBc0Isd0JBQXdCLG9FQUFvRSxhQUFhLGtEQUFrRCwrQkFBK0Isc0NBQXNDLE1BQU0sR0FBRyxHQUFHLHFDQUFxQyxHQUFHLGtIQUFrSCxvQ0FBb0MsNkdBQTZHLGdDQUFnQyxXQUFXLDRDQUE0QyxXQUFXLGtDQUFrQyxxQ0FBcUMsY0FBYywyQkFBMkIsZ0JBQWdCLG9RQUFvUSwwV0FBMFcsd0JBQXdCLE1BQU0sbUZBQW1GLCtFQUErRSxFQUFFLG1JQUFtSSwrRUFBK0UsS0FBSyxzRUFBc0UsUUFBUSx1T0FBdU8sa0JBQWtCLEdBQUcsR0FBRyxHQUFHLDRDQUE0QyxXQUFXLG9DQUFvQyxtQ0FBbUMscUJBQXFCLEdBQUcsb0lBQW9JLHNCQUFzQixxQkFBcUIsc0dBQXNHLGlFQUFpRSxHQUFHLDJDQUEyQyxXQUFXLGtDQUFrQyx1SEFBdUgsOEhBQThILHNCQUFzQixxQkFBcUIsZ0dBQWdHLEVBQUUsd0JBQXdCLGtIQUFrSCxzQkFBc0IscUNBQXFDLE1BQU0sMkJBQTJCLGdCQUFnQiw0RUFBNEUsc0JBQXNCLHdCQUF3QixvRUFBb0UsYUFBYSxtQ0FBbUMsb0ZBQW9GLG9DQUFvQyxrQ0FBa0MseUhBQXlILEdBQUcsR0FBRyxHQUFHLEdBQUcsNkNBQTZDLE1BQU0sOGtCQUE4a0Isd0NBQXdDLHdDQUF3QyxtQkFBbUIsMkJBQTJCLGdCQUFnQiw4SEFBOEgsNkNBQTZDLHlIQUF5SCxvQ0FBb0MsVUFBVSx5SEFBeUgsZ1lBQWdZLHFDQUFxQyxZQUFZLDJCQUEyQixnQkFBZ0IsZ05BQWdOLDhFQUE4RSxtUEFBbVAsc0hBQXNILGtCQUFrQixHQUFHLEdBQUcsU0FBUyxzT0FBc08sbUJBQW1CLGlHQUFpRywwR0FBMEcsb0JBQW9CLFVBQVUsR0FBRyxHQUFHLHNDQUFzQyxTQUFTLHNDQUFzQyxpRUFBaUUseUNBQXlDLDBDQUEwQyxtQkFBbUIsaUJBQWlCLGFBQWEsY0FBYyxzQ0FBc0MsU0FBUyw4Q0FBOEMsaUJBQWlCLG1CQUFtQixzQkFBc0IsWUFBWSw4QkFBOEIsaUJBQWlCLG1CQUFtQixzQkFBc0IsWUFBWSw2QkFBNkIsaUJBQWlCLG1CQUFtQixzQkFBc0IsWUFBWSw2QkFBNkIsaUJBQWlCLG1CQUFtQixzQkFBc0IsWUFBWSw4QkFBOEIsaUJBQWlCLG1CQUFtQixzQkFBc0IsWUFBWSxhQUFhLGlCQUFpQixhQUFhLDhDQUE4Qyx3Q0FBd0MsY0FBYyxJQUFJLGFBQWEsU0FBUyxNQUFNLGNBQWMsSUFBSSxjQUFjLFNBQVMsTUFBTSxjQUFjLE1BQU0sZ0VBQWdFLEtBQUssY0FBYywrQkFBK0IsR0FBRyx5Q0FBeUMsYUFBYSx3QkFBd0IscUJBQXFCLFlBQVksZ0JBQWdCLElBQUksa0NBQWtDLGdFQUFnRSxZQUFZLElBQUksY0FBYyxtQkFBbUIsWUFBWSw0REFBNEQsS0FBSyxFQUFFLEtBQUssa0hBQWtILHdDQUF3QyxrQkFBa0IsTUFBTSx5QkFBeUIsb0JBQW9CLDhCQUE4QixTQUFTLGtDQUFrQyxTQUFTLDBFQUEwRSxJQUFJLFNBQVMseUNBQXlDLGFBQWEsTUFBTSwyQkFBMkIsaUJBQWlCLE1BQU0sb0JBQW9CLDJCQUEyQixNQUFNLCtCQUErQixTQUFTLGNBQWMsU0FBUyxZQUFZLFFBQVEsTUFBTSxxQkFBcUIsT0FBTyxrQ0FBa0MsMENBQTBDLFNBQVMsNENBQTRDLGtCQUFrQixnRkFBZ0Ysd0NBQXdDLHdDQUF3QywyQkFBMkIsZ0JBQWdCLDJIQUEySCwrQkFBK0IsR0FBRyxHQUFHLHdDQUF3Qyx3Q0FBd0MsMkJBQTJCLGdCQUFnQix5SEFBeUgsNEJBQTRCLEdBQUcsR0FBRywyQkFBMkIsaUJBQWlCLGFBQWEsc0NBQXNDLFNBQVMsaURBQWlELHFEQUFxRCxXQUFXLGtDQUFrQyxJQUFJLG9DQUFvQyxTQUFTLE1BQU0sR0FBRyxtQ0FBbUMsV0FBVyxrQ0FBa0MsSUFBSSx1Q0FBdUMsU0FBUyxNQUFNLEdBQUcsb0NBQW9DLFdBQVcsa0NBQWtDLElBQUksdUNBQXVDLFNBQVMsTUFBTSxHQUFHLDhCQUE4QixrQ0FBa0MsSUFBSSwwQkFBMEIsU0FBUyxNQUFNLEdBQUcsNkJBQTZCLFdBQVcsa0NBQWtDLElBQUksd0NBQXdDLHVCQUF1Qiw2REFBNkQsaUJBQWlCLFNBQVMsTUFBTSxHQUFHLElBQUksY0FBYyxxREFBcUQsd0RBQXdELGdEQUFnRCxPQUFPLFlBQVksZUFBZSxZQUFZLGlCQUFpQixhQUFhLE1BQU0sc0NBQXNDLFNBQVMsb0pBQW9KLHdHQUF3RyxzT0FBc08sbUdBQW1HLGlCQUFpQixhQUFhLHNDQUFzQyxvQ0FBb0MsaUNBQWlDLElBQUksdUZBQXVGLFNBQVMseUJBQXlCLHNDQUFzQyxTQUFTLCtCQUErQixxQ0FBcUMsZ0JBQWdCLG9EQUFvRCxLQUFLLG9EQUFvRCxNQUFNLDBGQUEwRixvQ0FBb0MsZUFBZSx1Q0FBdUMsa0JBQWtCLG1DQUFtQyxjQUFjLDRDQUE0QyxXQUFXLGtDQUFrQyxTQUFTLDhDQUE4QyxLQUFLLGdCQUFnQix3TEFBd0wsV0FBVywwSkFBMEoscURBQXFELDJJQUEySSxRQUFRLHVCQUF1QixFQUFFLGdEQUFnRCxxQ0FBcUMsS0FBSywwQkFBMEIsRUFBRSxlQUFlLHFCQUFxQixpSkFBaUosNkJBQTZCLEtBQUssYUFBYSxFQUFFLGdFQUFnRSxxREFBcUQscUlBQXFJLFFBQVEsdUJBQXVCLEVBQUUsZ0RBQWdELHFDQUFxQyxLQUFLLDBCQUEwQixFQUFFLHNCQUFzQixxQkFBcUIsMklBQTJJLDZCQUE2QixLQUFLLGFBQWEsRUFBRSxHQUFHLEdBQUcsc0RBQXNELDJFQUEyRSx1REFBdUQsMEZBQTBGLGNBQWMsY0FBYywrSUFBK0kscUNBQXFDLFdBQVcsb0RBQW9ELEtBQUssMEJBQTBCLHFDQUFxQyxnRUFBZ0Usc0RBQXNELGlDQUFpQyxhQUFhLElBQUksZUFBZSw2QkFBNkIsUUFBUSwwQ0FBMEMsc0RBQXNELGlDQUFpQyxhQUFhLEdBQUcsUUFBUSxZQUFZLEVBQUUsMkJBQTJCLGlCQUFpQixhQUFhLHNDQUFzQyxvQ0FBb0MsaUNBQWlDLElBQUksdUZBQXVGLFNBQVMsd0JBQXdCLDBDQUEwQyxTQUFTLHVCQUF1QixnQ0FBZ0MseUZBQXlGLDBCQUEwQixpQ0FBaUMsc0lBQXNJLGlDQUFpQyxjQUFjLDZNQUE2TSxxQ0FBcUMsV0FBVyxvREFBb0QsS0FBSywwQkFBMEIscUNBQXFDLDRDQUE0Qyx5RUFBeUUsS0FBSyxzQkFBc0IsS0FBSyxXQUFXLGlDQUFpQyxhQUFhLEtBQUssMEVBQTBFLCtDQUErQyxnRUFBZ0Usb0JBQW9CLG9EQUFvRCxLQUFLLDBCQUEwQixvQ0FBb0MsaUZBQWlGLHlDQUF5QyxLQUFLLHNCQUFzQixLQUFLLFdBQVcsaUNBQWlDLGFBQWEsSUFBSSxrQkFBa0IsNkJBQTZCLFFBQVEsbUZBQW1GLHlDQUF5QyxLQUFLLHNCQUFzQixLQUFLLFdBQVcsaUNBQWlDLGFBQWEsSUFBSSxHQUFHLElBQUksaUJBQWlCLGFBQWEsc0NBQXNDLFNBQVMsc0NBQXNDLE9BQU8sNEJBQTRCLHFDQUFxQyxvQkFBb0IsRUFBRSxpQkFBaUIsNEZBQTRGLGVBQWUsd0NBQXdDLFNBQVMsRUFBRSxtQkFBbUIsOEJBQThCLHFEQUFxRCwwQkFBMEIsNkNBQTZDLHNCQUFzQiw2REFBNkQsWUFBWSxlQUFlLFNBQVMsaUJBQWlCLGlDQUFpQyxpQkFBaUIsWUFBWSxVQUFVLHNCQUFzQixtQkFBbUIsaURBQWlELGtCQUFrQixpQkFBaUIsY0FBYyw0QkFBNEIsWUFBWSxxQkFBcUIsMkRBQTJELFlBQVksNENBQTRDLGFBQWEsUUFBUSxzQ0FBc0MsU0FBUyxpV0FBaVcsc0dBQXNHLGsxQ0FBazFDLDIzQkFBMjNCLHN5Q0FBc3lDLGlNQUFpTSw4SkFBOEosOEVBQThFLHNDQUFzQywwQ0FBMEMsNkZBQTZGLDJKQUEySixvSEFBb0gsMEdBQTBHLDBRQUEwUSxpSkFBaUoseUdBQXlHLDRFQUE0RSxzREFBc0QsK2NBQStjLGlCQUFpQixhQUFhLHNDQUFzQyxTQUFTLCtGQUErRiwwS0FBMEssNEVBQTRFLGVBQWUsWUFBWSxpQkFBaUIsYUFBYSxzQ0FBc0MsU0FBUywwQ0FBMEMsU0FBUyxvQ0FBb0MsZUFBZSxnQ0FBZ0MscUJBQXFCLHFDQUFxQyxpQkFBaUIsb0NBQW9DLGlCQUFpQixhQUFhLHNDQUFzQyxTQUFTLDRFQUE0RSxvRkFBb0YsdUJBQXVCLElBQUksNEJBQTRCLG1GQUFtRix5QkFBeUIsc0NBQXNDLHdCQUF3QixJQUFJLDhCQUE4QixrREFBa0QsS0FBSyx1REFBdUQsbUJBQW1CLGlCQUFpQixhQUFhLHNDQUFzQyxTQUFTLDZCQUE2Qix1SEFBdUgsc0JBQXNCLG1PQUFtTyx1QkFBdUIsaUtBQWlLLHdDQUF3QywwSEFBMEgsZ1BBQWdQLEVBQUUsa0tBQWtLLHVDQUF1QyxlQUFlLDBDQUEwQyxRQUFRLDJEQUEyRCw4QkFBOEIsdUNBQXVDLE1BQU0saUVBQWlFLDBFQUEwRSxNQUFNLCtEQUErRCxNQUFNLHlFQUF5RSw0SUFBNEksOEJBQThCLDhDQUE4QywrQkFBK0IsMENBQTBDLHVDQUF1Qyx3R0FBd0csNkJBQTZCLDJNQUEyTSx5Q0FBeUMsbURBQW1ELGlDQUFpQyxXQUFXLDJKQUEySiw0REFBNEQsK0JBQStCLHlDQUF5QyxpREFBaUQsa0NBQWtDLE1BQU0sbVVBQW1VLGdDQUFnQyxzQkFBc0IscUNBQXFDLHFEQUFxRCx5Q0FBeUMscUZBQXFGLHVCQUF1QixpQkFBaUIsYUFBYSxhQUFhLHVCQUF1QixzQ0FBc0MsU0FBUyxrRUFBa0UsaUlBQWlJLHdHQUF3Ryw4Q0FBOEMscUdBQXFHLGFBQWEsVUFBVSw4QkFBOEIsaUJBQWlCLG1CQUFtQix3QkFBd0Isb0VBQW9FLElBQUksdUJBQXVCLGtCQUFrQixLQUFLLFNBQVMsb0NBQW9DLEdBQUcsa0JBQWtCLGlCQUFpQixhQUFhLHNDQUFzQyxTQUFTLCtCQUErQix5QkFBeUIsa0JBQWtCLHdIQUF3SCw0Q0FBNEMsV0FBVyxHQUFHLDhOQUE4TiwyRkFBMkYsbURBQW1ELG1EQUFtRCxHQUFHLDRLQUE0SyxtQkFBbUIsNkNBQTZDLGVBQWUseUNBQXlDLG1DQUFtQyx5QkFBeUIsaUJBQWlCLGFBQWEsc0NBQXNDLFNBQVMsK0tBQStLLG9EQUFvRCw2QkFBNkIscUJBQXFCLDZDQUE2Qyw2QkFBNkIsMEJBQTBCLDJDQUEyQyw2QkFBNkIsd0JBQXdCLDhDQUE4Qyw2QkFBNkIsMkJBQTJCLGtDQUFrQyw2QkFBNkIsZUFBZSxvQ0FBb0MsNkJBQTZCLGlCQUFpQiwwREFBMEQsNkJBQTZCLDhCQUE4QiwwREFBMEQsNkJBQTZCLDhCQUE4Qix3REFBd0QsNkJBQTZCLDRCQUE0QixRQUFRLDZDQUE2Qyw2QkFBNkIsNEJBQTRCLEVBQUUsaUJBQWlCLGFBQWEsZ0RBQWdELG9EQUFvRCxJQUFJLG1FQUFtRSxrREFBa0QsMENBQTBDLFNBQVMsZ0pBQWdKLGFBQWEsV0FBVyx1VUFBdVUsTUFBTSxzSUFBc0ksZ0JBQWdCLFlBQVksNkNBQTZDLFVBQVUsMERBQTBELFVBQVUsRUFBRSx1QkFBdUIsaUtBQWlLLCtDQUErQyxFQUFFLG1DQUFtQyxpQ0FBaUMsc0NBQXNDLGtGQUFrRixrQ0FBa0MsVUFBVSw0REFBNEQsTUFBTSx5RUFBeUUsTUFBTSwrTEFBK0wsTUFBTSx1R0FBdUcsNEJBQTRCLDhLQUE4SywrQkFBK0IsZUFBZSxvQ0FBb0MsNHdCQUE0d0IscUNBQXFDLDBCQUEwQixtREFBbUQsK0JBQStCLHFEQUFxRCwrR0FBK0csMENBQTBDLHNCQUFzQixtREFBbUQsZ0JBQWdCLGtEQUFrRCw4QkFBOEIsbUxBQW1MLDRDQUE0QyxnRUFBZ0UsVUFBVSxlQUFlLDRDQUE0Qyw4Q0FBOEMsVUFBVSxPQUFPLGlEQUFpRCwyRkFBMkYsd0NBQXdDLFdBQVcsbUZBQW1GLCtHQUErRyxtQ0FBbUMsY0FBYyxLQUFLLGtDQUFrQyxtSEFBbUgsdUNBQXVDLDBEQUEwRCxrQ0FBa0MsZ0RBQWdELDhCQUE4QixnRkFBZ0YsK0JBQStCLDRFQUE0RSxtQ0FBbUMsY0FBYyxtQ0FBbUMsK0JBQStCLHlDQUF5QyxXQUFXLGlEQUFpRCxzUEFBc1AsMkNBQTJDLFdBQVcsOENBQThDLHFCQUFxQixnREFBZ0Qsb0JBQW9CLEdBQUcsdUNBQXVDLFdBQVcsc0NBQXNDLHVEQUF1RCxHQUFHLHdDQUF3QyxtS0FBbUsseUNBQXlDLHFLQUFxSyxxQ0FBcUMsV0FBVyxpQ0FBaUMscUJBQXFCLDhDQUE4Qyw4R0FBOEcsa0dBQWtHLGlCQUFpQixrQ0FBa0MsaUNBQWlDLFdBQVcsb2FBQW9hLG9MQUFvTCwwQkFBMEIsc0NBQXNDLCtEQUErRCxrQ0FBa0Msa0JBQWtCLDBLQUEwSyxXQUFXLHVDQUF1QywwQ0FBMEMsNEdBQTRHLGlDQUFpQyxXQUFXLGtDQUFrQyw4Q0FBOEMsb0JBQW9CLDZHQUE2Ryx1QkFBdUIsR0FBRyxvQkFBb0IsRUFBRSxlQUFlLEtBQUssR0FBRyxHQUFHLHlDQUF5Qyx1REFBdUQsZ0ZBQWdGLE1BQU0sZ0RBQWdELGlCQUFpQiw4QkFBOEIsdUJBQXVCLE1BQU0sMkdBQTJHLHFCQUFxQixHQUFHLEdBQUcsS0FBSyw0Q0FBNEMsV0FBVyxrQ0FBa0Msb0dBQW9HLEtBQUssc0JBQXNCLHFJQUFxSSw0R0FBNEcsWUFBWSxzQkFBc0IsWUFBWSxvQ0FBb0MsK0RBQStELEdBQUcsOENBQThDLDhDQUE4Qyw0Q0FBNEMsOENBQThDLEVBQUUsa0NBQWtDLG1XQUFtVyx1Q0FBdUMsV0FBVywyR0FBMkcscUVBQXFFLG9GQUFvRixnQkFBZ0IsWUFBWSw2Q0FBNkMsaUNBQWlDLDZFQUE2RSxVQUFVLGtIQUFrSCxzQkFBc0IseUNBQXlDLEdBQUcsTUFBTSxtRkFBbUYsTUFBTSw2SkFBNkosMkZBQTJGLHlDQUF5QywyR0FBMkcsMENBQTBDLHdLQUF3Syx3Q0FBd0MsNkRBQTZELDJDQUEyQyx1QkFBdUIscUVBQXFFLG1DQUFtQyxtR0FBbUcsb0NBQW9DLHVCQUF1QixpRUFBaUUscUpBQXFKLGdOQUFnTiwrSEFBK0gsY0FBYyxzQkFBc0IsZUFBZSxzQkFBc0IsZUFBZSxzQkFBc0IsR0FBRyx5QkFBeUIsaUJBQWlCLGFBQWEsc0NBQXNDLG9DQUFvQyxpQ0FBaUMsSUFBSSx1RkFBdUYsU0FBUyx3QkFBd0IsZ0VBQWdFLGtCQUFrQiwyQ0FBMkMsOERBQThELDZCQUE2QixhQUFhLCtCQUErQixtQkFBbUIseUJBQXlCLGdFQUFnRSxtQ0FBbUMsc0JBQXNCLEVBQUUsZUFBZSxZQUFZLHlDQUF5Qyw0QkFBNEIsU0FBUyw2RkFBNkYsZ0JBQWdCLDJDQUEyQywwQkFBMEIsV0FBVywwQ0FBMEMsU0FBUyxxRUFBcUUsYUFBYSxNQUFNLGlEQUFpRCxtMkRBQW0yRCw4RUFBOEUscUNBQXFDLHFEQUFxRCw0TkFBNE4sd0NBQXdDLHlFQUF5RSxJQUFJLHFDQUFxQyxvREFBb0QsU0FBUyxZQUFZLE9BQU8sR0FBRyw2Q0FBNkMscUVBQXFFLGtDQUFrQyxtQ0FBbUMsa0NBQWtDLFdBQVcsY0FBYyx1QkFBdUIsZUFBZSxZQUFZLGlCQUFpQixhQUFhLDJDQUEyQyxTQUFTLHdDQUF3QyxTQUFTLCtCQUErQixTQUFTLEdBQUcsa0ZBQWtGLDRCQUE0QixXQUFXLGdDQUFnQyxVQUFVLG9CQUFvQiw4aURBQThpRCwwQkFBMEIsVUFBVSxvQkFBb0IsMHNDQUEwc0MscUJBQXFCLFVBQVUsb0JBQW9CLHFHQUFxRyx3QkFBd0IsVUFBVSxvQkFBb0IsZytCQUFnK0IsdUJBQXVCLFVBQVUsb0JBQW9CLGlGQUFpRix3QkFBd0IsVUFBVSxvQkFBb0IsdUlBQXVJLCtCQUErQixVQUFVLG9CQUFvQixxSEFBcUgsZ0NBQWdDLFVBQVUsb0JBQW9CLGlIQUFpSCxvRkFBb0Ysb0xBQW9MLHdCQUF3QixnQ0FBZ0Msd0VBQXdFLEtBQUssUUFBUSxFQUFFLGlCQUFpQixjQUFjLHdCQUF3QixNQUFNLHdCQUF3QixNQUFNLHlCQUF5QixTQUFTLGlGQUFpRixvTEFBb0wsd0JBQXdCLGdDQUFnQyxvRUFBb0UsS0FBSyxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsd0JBQXdCLE1BQU0sd0JBQXdCLE1BQU0seUJBQXlCLFNBQVMsMkdBQTJHLCtRQUErUSx3QkFBd0IsZ0NBQWdDLHVFQUF1RSxLQUFLLFFBQVEsRUFBRSxpQkFBaUIsY0FBYywwQkFBMEIsTUFBTSx3QkFBd0IsTUFBTSwwQkFBMEIsTUFBTSx5QkFBeUIsU0FBUyxxQkFBcUIsVUFBVSxvQkFBb0IsOEtBQThLLG9oQkFBb2hCLHk1QkFBeTVCLG1CQUFtQiwrRkFBK0YsbXdCQUFtd0Isd0JBQXdCLGdDQUFnQyxtRUFBbUUsS0FBSyxRQUFRLEVBQUUsaUJBQWlCLGNBQWMseUJBQXlCLE1BQU0sMEJBQTBCLE1BQU0sNkJBQTZCLE1BQU0seUJBQXlCLE1BQU0sNEJBQTRCLE1BQU0sMEJBQTBCLE1BQU0sMEJBQTBCLE1BQU0sNEJBQTRCLE1BQU0sNkJBQTZCLE1BQU0sNEJBQTRCLE1BQU0sa0lBQWtJLE1BQU0seUJBQXlCLE1BQU0sdUJBQXVCLE1BQU0sNEJBQTRCLE1BQU0sK0JBQStCLE1BQU0sOEJBQThCLE1BQU0sNkJBQTZCLE1BQU0scUNBQXFDLE1BQU0sc0NBQXNDLE1BQU0seUJBQXlCLFNBQVMsNkVBQTZFLHNMQUFzTCx3QkFBd0IsZ0NBQWdDLDhFQUE4RSxLQUFLLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx5QkFBeUIsTUFBTSx3QkFBd0IsTUFBTSx5QkFBeUIsU0FBUyw0TEFBNEwsZ0pBQWdKLG1CQUFtQiwrRkFBK0YsNExBQTRMLHdCQUF3QixnQ0FBZ0Msb0VBQW9FLEtBQUssUUFBUSxFQUFFLGlCQUFpQixjQUFjLHlCQUF5QixNQUFNLGlJQUFpSSxNQUFNLCtCQUErQixNQUFNLHdCQUF3QixNQUFNLHlCQUF5QixTQUFTLCtGQUErRix3R0FBd0csd0JBQXdCLGdDQUFnQyxzRUFBc0UsS0FBSyxRQUFRLEVBQUUsaUJBQWlCLDJDQUEyQyxTQUFTLDBJQUEwSSwwUUFBMFEsd0JBQXdCLGdDQUFnQyx5RUFBeUUsS0FBSyxRQUFRLEVBQUUsaUJBQWlCLGNBQWMseUJBQXlCLE1BQU0sMEJBQTBCLE1BQU0sd0JBQXdCLE1BQU0seUJBQXlCLFNBQVMsa0hBQWtILGtSQUFrUix3QkFBd0IsZ0NBQWdDLDZFQUE2RSxLQUFLLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx3QkFBd0IsTUFBTSx3QkFBd0IsTUFBTSw2QkFBNkIsTUFBTSx5QkFBeUIsU0FBUywwSUFBMEksaUxBQWlMLHdCQUF3QixnQ0FBZ0MsaUVBQWlFLEtBQUssUUFBUSxFQUFFLGlCQUFpQixjQUFjLHlCQUF5QixNQUFNLHNCQUFzQixNQUFNLHlCQUF5QixTQUFTLDJJQUEySSxpTEFBaUwsd0JBQXdCLGdDQUFnQyxrRUFBa0UsS0FBSyxRQUFRLEVBQUUsaUJBQWlCLGNBQWMseUJBQXlCLE1BQU0sc0JBQXNCLE1BQU0seUJBQXlCLFNBQVMsaVNBQWlTLHExQkFBcTFCLHdCQUF3QixnQ0FBZ0Msd0VBQXdFLEtBQUssUUFBUSxFQUFFLGlCQUFpQixjQUFjLHlCQUF5QixNQUFNLDBCQUEwQixNQUFNLDZCQUE2QixNQUFNLHlCQUF5QixNQUFNLDRCQUE0QixNQUFNLDBCQUEwQixNQUFNLHFDQUFxQyxNQUFNLDRCQUE0QixNQUFNLG9DQUFvQyxNQUFNLHlCQUF5QixTQUFTLGtYQUFrWCxpa0NBQWlrQyx3QkFBd0IsZ0NBQWdDLDZFQUE2RSxLQUFLLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx5QkFBeUIsTUFBTSxxQ0FBcUMsTUFBTSxvQ0FBb0MsTUFBTSxzQ0FBc0MsTUFBTSxxQ0FBcUMsTUFBTSx5Q0FBeUMsTUFBTSw2Q0FBNkMsTUFBTSw2Q0FBNkMsTUFBTSxvQ0FBb0MsTUFBTSx5QkFBeUIsU0FBUyxnSEFBZ0gsd1VBQXdVLHdCQUF3QixnQ0FBZ0MseUVBQXlFLEtBQUssUUFBUSxFQUFFLGlCQUFpQixjQUFjLHdCQUF3QixNQUFNLDRCQUE0QixNQUFNLDJFQUEyRSxNQUFNLHlCQUF5QixTQUFTLGlkQUFpZCxrOENBQWs4Qyx3QkFBd0IsZ0NBQWdDLHVFQUF1RSxLQUFLLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx5QkFBeUIsTUFBTSwwQkFBMEIsTUFBTSw2QkFBNkIsTUFBTSwyQkFBMkIsTUFBTSw0QkFBNEIsTUFBTSw4QkFBOEIsTUFBTSxzQkFBc0IsTUFBTSwyQkFBMkIsTUFBTSw0QkFBNEIsTUFBTSxzQ0FBc0MsTUFBTSw4QkFBOEIsTUFBTSxtQ0FBbUMsTUFBTSxzQ0FBc0MsTUFBTSxxQ0FBcUMsTUFBTSxzQ0FBc0MsTUFBTSx5QkFBeUIsU0FBUyxtR0FBbUcsd0dBQXdHLHdCQUF3QixnQ0FBZ0MsMEVBQTBFLEtBQUssUUFBUSxFQUFFLGlCQUFpQiwyQ0FBMkMsU0FBUyxvRkFBb0YsOExBQThMLHdCQUF3QixnQ0FBZ0MscUVBQXFFLEtBQUssUUFBUSxFQUFFLGlCQUFpQixjQUFjLDJCQUEyQixNQUFNLHlCQUF5QixNQUFNLHlCQUF5QixTQUFTLHVDQUF1QyxxQkFBcUIsd0JBQXdCLGdDQUFnQywrQkFBK0IscUNBQXFDLFFBQVEsRUFBRSxpQkFBaUIsZ0JBQWdCLFNBQVMsbUhBQW1ILHFPQUFxTyx3QkFBd0IsZ0NBQWdDLHlFQUF5RSxLQUFLLFFBQVEsRUFBRSxpQkFBaUIsY0FBYywyQkFBMkIsTUFBTSxxQ0FBcUMsTUFBTSx5QkFBeUIsU0FBUyx3TEFBd0wscU9BQXFPLGtCQUFrQiw4RkFBOEYscURBQXFELHFCQUFxQix3Q0FBd0MsdURBQXVELHNCQUFzQixxR0FBcUcsU0FBUyx3QkFBd0IsZ0NBQWdDLGdFQUFnRSxLQUFLLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx5QkFBeUIsTUFBTSwyQkFBMkIsTUFBTSw2SEFBNkgsTUFBTSxnR0FBZ0csUUFBUSw4QkFBOEIsa0NBQWtDLE1BQU0sZ0pBQWdKLE1BQU0seUJBQXlCLFNBQVMsK2FBQSthLHVzQ0FBdXNDLHdCQUF3QixnQ0FBZ0MsMkVBQTJFLEtBQUssUUFBUSxFQUFFLGlCQUFpQixjQUFjLHlCQUF5QixNQUFNLDBCQUEwQixNQUFNLDZCQUE2QixNQUFNLDJCQUEyQixNQUFNLDRCQUE0QixNQUFNLCtCQUErQixNQUFNLHVCQUF1QixNQUFNLDZCQUE2QixNQUFNLDhCQUE4QixNQUFNLDJCQUEyQixNQUFNLDZCQUE2QixNQUFNLHNDQUFzQyxNQUFNLHFDQUFxQyxNQUFNLHlCQUF5QixTQUFTLDBMQUEwTCxpUUFBaVEsd0JBQXdCLGdDQUFnQyxnRkFBZ0YsS0FBSyxRQUFRLEVBQUUsaUJBQWlCLGNBQWMseUJBQXlCLE1BQU0sd0JBQXdCLE1BQU0sdUJBQXVCLE1BQU0seUJBQXlCLFNBQVMsbUhBQW1ILDJVQUEyVSx3QkFBd0IsZ0NBQWdDLDRFQUE0RSxLQUFLLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx3QkFBd0IsTUFBTSw0QkFBNEIsTUFBTSw4RUFBOEUsTUFBTSx5QkFBeUIsU0FBUyx1R0FBdUcsME1BQTBNLHdCQUF3QixnQ0FBZ0MscUVBQXFFLEtBQUssUUFBUSxFQUFFLGlCQUFpQixjQUFjLCtCQUErQixNQUFNLHdCQUF3QixNQUFNLHlCQUF5QixTQUFTLHNSQUFzUiwwd0JBQTB3Qix3QkFBd0IsZ0NBQWdDLGdGQUFnRixLQUFLLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx5QkFBeUIsTUFBTSwwQkFBMEIsTUFBTSw2QkFBNkIsTUFBTSwyQkFBMkIsTUFBTSw0QkFBNEIsTUFBTSw0QkFBNEIsTUFBTSxxQ0FBcUMsTUFBTSxvQ0FBb0MsTUFBTSx5QkFBeUIsU0FBUyxxTEFBcUwsMEpBQTBKLHNCQUFzQix5Q0FBeUMsdURBQXVELHNCQUFzQix5Q0FBeUMscURBQXFELHFCQUFxQix3Q0FBd0MsU0FBUyx3QkFBd0IsZ0NBQWdDLDhFQUE4RSxLQUFLLFFBQVEsRUFBRSxpQkFBaUIsY0FBYywwQkFBMEIsTUFBTSwwRkFBMEYsTUFBTSwwRkFBMEYsTUFBTSxzRkFBc0YsTUFBTSx5QkFBeUIsU0FBUyw0SEFBNEgsaVNBQWlTLHdCQUF3QixnQ0FBZ0MsaUZBQWlGLEtBQUssUUFBUSxFQUFFLGlCQUFpQixjQUFjLDBCQUEwQixNQUFNLHlCQUF5QixNQUFNLGdDQUFnQyxNQUFNLHlCQUF5QixTQUFTLCtQQUErUCxvVEFBb1Qsa0JBQWtCLDhGQUE4RixxREFBcUQscUJBQXFCLHdDQUF3Qyx1REFBdUQsc0JBQXNCLHFHQUFxRyxTQUFTLHdCQUF3QixnQ0FBZ0MscUZBQXFGLEtBQUssUUFBUSxFQUFFLGlCQUFpQixjQUFjLHlCQUF5QixNQUFNLHlCQUF5QixNQUFNLDJCQUEyQixNQUFNLDZIQUE2SCxNQUFNLGdHQUFnRyxRQUFRLDhCQUE4QixrQ0FBa0MsTUFBTSxnSkFBZ0osTUFBTSx5QkFBeUIsU0FBUyx3SEFBd0gsZ1ZBQWdWLHdCQUF3QixnQ0FBZ0MsaUZBQWlGLEtBQUssUUFBUSxFQUFFLGlCQUFpQixjQUFjLHdCQUF3QixNQUFNLDRCQUE0QixNQUFNLG1GQUFtRixNQUFNLHlCQUF5QixTQUFTLHNJQUFzSSwwUUFBMFEsd0JBQXdCLGdDQUFnQyxxRUFBcUUsS0FBSyxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsMEJBQTBCLE1BQU0sd0JBQXdCLE1BQU0seUJBQXlCLE1BQU0seUJBQXlCLFNBQVMsTUFBTSxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLHNGQUFzRixXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLDBGQUEwRixXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLHNGQUFzRixXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtEQUFrRCxXQUFXLHdDQUF3QyxjQUFjLGtEQUFrRCxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHlDQUF5QywrQkFBK0IsV0FBVyxpQ0FBaUMsVUFBVSxvQkFBb0Isd0RBQXdELDZCQUE2QixVQUFVLG9CQUFvQiw2RkFBNkYsNEJBQTRCLFVBQVUsb0JBQW9CLG9EQUFvRCx5TEFBeUwsc0RBQXNELCtDQUErQyxxREFBcUQsd0RBQXdELDhEQUE4RCxnRUFBZ0Usc0VBQXNFLHlCQUF5QixnY0FBZ2Msd0JBQXdCLGdDQUFnQyxrRUFBa0UsS0FBSyxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsMkJBQTJCLE1BQU0sMkJBQTJCLE1BQU0sb0NBQW9DLE1BQU0sNENBQTRDLE1BQU0seUJBQXlCLFNBQVMsb1JBQW9SLHdEQUF3RCxpREFBaUQsdURBQXVELHFEQUFxRCwyREFBMkQscURBQXFELDJEQUEyRCxnRUFBZ0Usc0VBQXNFLHlCQUF5Qix5bEJBQXlsQixvQkFBb0IsWUFBWSw0QkFBNEIsbUNBQW1DLFdBQVcsU0FBUyx3QkFBd0IsZ0NBQWdDLGlGQUFpRixLQUFLLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw4QkFBOEIsTUFBTSw0QkFBNEIsTUFBTSxpQ0FBaUMsTUFBTSxnQ0FBZ0MsTUFBTSwyQ0FBMkMsTUFBTSxxSEFBcUgsUUFBUSxvQ0FBb0Msd0NBQXdDLE1BQU0seUJBQXlCLFNBQVMsa0pBQWtKLDREQUE0RCx5QkFBeUIsb0xBQW9MLHdCQUF3Qix1R0FBdUcsU0FBUyx3QkFBd0IsZ0NBQWdDLDBFQUEwRSxLQUFLLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyxpQ0FBaUMsTUFBTSx3SkFBd0osTUFBTSx5QkFBeUIsU0FBUyx3RkFBd0YsNkVBQTZFLHlCQUF5QixpR0FBaUcsU0FBUyx3QkFBd0IsZ0NBQWdDLDJFQUEyRSxLQUFLLFFBQVEsRUFBRSxpQkFBaUIseUtBQXlLLFNBQVMscUZBQXFGLDZFQUE2RSx5QkFBeUIsaUdBQWlHLFNBQVMsd0JBQXdCLGdDQUFnQyx3RUFBd0UsS0FBSyxRQUFRLEVBQUUsaUJBQWlCLHlLQUF5SyxTQUFTLGtJQUFrSSwwREFBMEQsdURBQXVELDZEQUE2RCx5QkFBeUIscVZBQXFWLHdCQUF3QixnQ0FBZ0Msb0VBQW9FLEtBQUssUUFBUSxFQUFFLGlCQUFpQixjQUFjLDZFQUE2RSxNQUFNLG1GQUFtRixNQUFNLHlCQUF5QixTQUFTLDZIQUE2SCx5REFBeUQscURBQXFELDJEQUEyRCx5QkFBeUIsK1RBQStULHdCQUF3QixnQ0FBZ0MsbUVBQW1FLEtBQUssUUFBUSxFQUFFLGlCQUFpQixjQUFjLHNFQUFzRSxNQUFNLDBFQUEwRSxNQUFNLHlCQUF5QixTQUFTLE1BQU0sY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsTUFBTSxjQUFjLGtDQUFrQyxXQUFXLHdDQUF3QyxjQUFjLHdEQUF3RCxXQUFXLHdDQUF3QyxjQUFjLHdEQUF3RCxXQUFXLHdDQUF3QyxjQUFjLHVEQUF1RCxXQUFXLHdDQUF3QyxjQUFjLDJEQUEyRCxXQUFXLHdDQUF3QyxjQUFjLGtDQUFrQyxXQUFXLHlDQUF5QyxJQUFJLGlCQUFpQixhQUFhLGlEQUFpRCxpQ0FBaUMsYUFBYSxnQ0FBZ0MsY0FBYyxnQkFBZ0Isc0VBQXNFLE9BQU8sZUFBZSx3SEFBd0gsYUFBYSxtQkFBbUIsNkVBQTZFLG9DQUFvQyxvQ0FBb0MsaUNBQWlDLElBQUksdUZBQXVGLFNBQVMsd0JBQXdCLDZDQUE2QyxvREFBb0QsSUFBSSxtRUFBbUUsa0RBQWtELDBDQUEwQyxTQUFTLG1FQUFtRSwwREFBMEQsK0ZBQStGLHNDQUFzQywrQkFBK0Isc0NBQXNDLDJJQUEySSx3Q0FBd0MsMkNBQTJDLDJDQUEyQyxXQUFXLGlqQkFBaWpCLDJFQUEyRSw0QkFBNEIsd0NBQXdDLFdBQVcsNkJBQTZCLCtPQUErTyxrQ0FBa0MsNE1BQTRNLGtDQUFrQyw0TUFBNE0sb0JBQW9CLG9DQUFvQyx1SEFBdUgscUNBQXFDLDZGQUE2RixrQ0FBa0MsMERBQTBELHFDQUFxQyw2REFBNkQscUNBQXFDLDJEQUEyRCxrQ0FBa0Msb0JBQW9CLHNDQUFzQyxtQ0FBbUMscUNBQXFDLGtDQUFrQyxzQ0FBc0MsbUNBQW1DLHNDQUFzQywrQkFBK0IsbURBQW1ELDJHQUEyRyx1RkFBdUYseVNBQXlTLElBQUksWUFBWSxlQUFlLDBNQUEwTSxtWkFBbVoseUNBQXlDLHlCQUF5QixRQUFRLGdOQUFnTiwyQ0FBMkMsdUVBQXVFLGtDQUFrQyxXQUFXLHlDQUF5QyxvQkFBb0IsbURBQW1ELE9BQU8sb2RBQW9kLGtDQUFrQyx1Q0FBdUMsbUNBQW1DLFdBQVcsc0hBQXNILGVBQWUsOEJBQThCLGtDQUFrQyxzRkFBc0YsbURBQW1ELGlEQUFpRCw4QkFBOEIsZ1VBQWdVLFVBQVUsNEJBQTRCLGtFQUFrRSxVQUFVLEdBQUcsR0FBRyw4Q0FBOEMseUJBQXlCLGlCQUFpQixhQUFhLFVBQVUsNktBQTZLLFVBQVUsNEJBQTRCLHFCQUFxQixHQUFHLHVEQUF1RCwrQkFBK0IscVlBQXFZLEtBQUssc0JBQXNCLHlCQUF5QixnZkFBZ2Ysc0JBQXNCLDJKQUEySixvRUFBb0UsZ0JBQWdCLGlCQUFpQixhQUFhLHNDQUFzQyxTQUFTLHlFQUF5RSxlQUFlLHNCQUFzQixpQkFBaUIsV0FBVywrQkFBK0IsNENBQTRDLGVBQWUsa0JBQWtCLGlCQUFpQixhQUFhLCtCQUErQixpQ0FBaUMsK0JBQStCLGdDQUFnQyxnQ0FBZ0MsUUFBUSxnQkFBZ0IsZ0dBQWdHLGFBQWEsNkpBQTZKLG9EQUFvRCw4SEFBOEgsaUNBQWlDLHFDQUFxQyw2QkFBNkIsdUJBQXVCLGlDQUFpQywrQ0FBK0MsZ0NBQWdDLDZDQUE2Qyw2QkFBNkIsc0JBQXNCLHNDQUFzQywwQkFBMEIsYUFBYSxjQUFjLGNBQWMsWUFBWSx3Q0FBd0MsU0FBUyw2QkFBNkIsc0ZBQXNGLGdDQUFnQyxvRkFBb0Ysb0NBQW9DLFdBQVcsd0VBQXdFLG1DQUFtQyxXQUFXLG9FQUFvRSxrQ0FBa0MscUZBQXFGLDhCQUE4QixxQkFBcUIsWUFBWSxhQUFhLDhCQUE4QixpQ0FBaUMsZ0JBQWdCLHlCQUF5QixTQUFTLDZCQUE2QiwwQkFBMEIsWUFBWSx3QkFBd0IsU0FBUyw4QkFBOEIsdUJBQXVCLGlDQUFpQyxvRkFBb0YsNEJBQTRCLHlCQUF5Qiw4QkFBOEIsMEJBQTBCLGdCQUFnQixpQkFBaUIsYUFBYSxhQUFhLDhFQUE4RSxzQ0FBc0MsU0FBUywwREFBMEQsbUNBQW1DLDBDQUEwQyxtREFBbUQsa0ZBQWtGLGNBQWMsaUJBQWlCLGFBQWEsc0NBQXNDLFNBQVMsNEJBQTRCLFlBQVksY0FBYyw0QkFBNEIscUNBQXFDLG9EQUFvRCxxQ0FBcUMsV0FBVyw2Q0FBNkMsMkRBQTJELEVBQUUsd0NBQXdDLFdBQVcsZ0RBQWdELG1FQUFtRSxFQUFFLG9DQUFvQyxzQ0FBc0MsOENBQThDLEtBQUssRUFBRSxzQ0FBc0MscUNBQXFDLG9DQUFvQyxzR0FBc0cscUNBQXFDLCtDQUErQyxxQ0FBcUMscUVBQXFFLHNCQUFzQixpQkFBaUIsYUFBYSxzQ0FBc0MsU0FBUyxtR0FBbUcscUZBQXFGLFdBQVcsd0VBQXdFLGlIQUFpSCxnRkFBZ0YsdUNBQXVDLCtDQUErQyxJQUFJLHdDQUF3QyxnRkFBZ0YsSUFBSSxpQ0FBaUMsa0NBQWtDLGtDQUFrQyxvQ0FBb0MsOEJBQThCLHVDQUF1QyxPQUFPLEVBQUUsOEJBQThCLDBDQUEwQyxZQUFZLGdCQUFnQiwrREFBK0QsTUFBTSxjQUFjLGdFQUFnRSw0Q0FBNEMsaUJBQWlCLGFBQWEsc0NBQXNDLFNBQVMsc0NBQXNDLGtCQUFrQixvQkFBb0Isc0VBQXNFLG9DQUFvQyx1SkFBdUosZ0RBQWdELE1BQU0sdUNBQXVDLFdBQVcsZ0tBQWdLLGNBQWMsd0NBQXdDLG1CQUFtQiwyQ0FBMkMsR0FBRyw0Q0FBNEMsV0FBVyxrQ0FBa0Msa0JBQWtCLDJFQUEyRSxvRkFBb0YsY0FBYyxpREFBaUQsWUFBWSxHQUFHLGlDQUFpQyxPQUFPLG9IQUFvSCwrSEFBK0gsVUFBVSxFQUFFLEdBQUcsNkNBQTZDLDRDQUE0QyxnQ0FBZ0MsaUJBQWlCLGFBQWEsc0NBQXNDLFNBQVMsK0JBQStCLGtCQUFrQixnQkFBZ0Isb0lBQW9JLDZCQUE2QixXQUFXLG1kQUFtZCxVQUFVLHVCQUF1Qiw4QkFBOEIsV0FBVywwTUFBME0sa0JBQWtCLGlLQUFpSyw4QkFBOEIsZUFBZSw4SkFBOEosVUFBVSx1QkFBdUIsc0NBQXNDLDhCQUE4QiwrRUFBK0UseUJBQXlCLGlCQUFpQixhQUFhLHNDQUFzQyxTQUFTLGdDQUFnQyx5QkFBeUIsZ0JBQWdCLDJIQUEySCxxQ0FBcUMsNkhBQTZILGdEQUFnRCwyQ0FBMkMsbUlBQW1JLEdBQUcsaUNBQWlDLDJDQUEyQyxZQUFZLEdBQUcsNkNBQTZDLDBCQUEwQiwwQkFBMEIsaUJBQWlCLGFBQWEsc0NBQXNDLFNBQVMsK0JBQStCLGtCQUFrQixnQkFBZ0IsOFBBQThQLGlDQUFpQyxZQUFZLHFDQUFxQyxXQUFXLHFEQUFxRCwyTUFBMk0sNEJBQTRCLG9DQUFvQyw4REFBOEQsa0NBQWtDLGFBQWEsa3VCQUFrdUIsMERBQTBELDBFQUEwRSxjQUFjLDBFQUEwRSxtRkFBbUYsd0NBQXdDLGlDQUFpQyxpQkFBaUIsbUJBQW1CLHNCQUFzQixvQ0FBb0MsdVFBQXVRLGdDQUFnQyxrSEFBa0gseUJBQXlCLGlCQUFpQixhQUFhLHNDQUFzQyxTQUFTLHVCQUF1QixXQUFXLHlCQUF5QixzRkFBc0YsaUJBQWlCLGFBQWEsY0FBYyxzQ0FBc0MsU0FBUyxpREFBaUQsaUJBQWlCLG1CQUFtQixzQkFBc0Isa0JBQWtCLGVBQWUsOEJBQThCLGlCQUFpQixtQkFBbUIsc0JBQXNCLGtCQUFrQixpQkFBaUIsNkJBQTZCLGlCQUFpQixtQkFBbUIsc0JBQXNCLGtCQUFrQixnQkFBZ0IsNkJBQTZCLGlCQUFpQixtQkFBbUIsc0JBQXNCLGtCQUFrQixnQkFBZ0IsOEJBQThCLGlCQUFpQixtQkFBbUIsc0JBQXNCLGtCQUFrQixpQkFBaUIsZ0JBQWdCLGlCQUFpQixhQUFhLHNDQUFzQyxTQUFTLHlCQUF5QixtQkFBbUIsY0FBYyxzRUFBc0UscUNBQXFDLHdLQUF3SyxNQUFNLHFDQUFxQyw2QkFBNkIsb0JBQW9CLHVIQUF1SCx5Q0FBeUMsdUNBQXVDLHNCQUFzQixHQUFHLHNCQUFzQixvQ0FBb0MsdUJBQXVCLG1CQUFtQixpQkFBaUIsYUFBYSxzQ0FBc0MsU0FBUywwQkFBMEIsV0FBVyxrQkFBa0IsMkVBQTJFLDhDQUE4QyxlQUFlLHFCQUFxQiwrQkFBK0Isa0NBQWtDLGdCQUFnQiwrQ0FBK0MsV0FBVyxnSEFBZ0gsZ0RBQWdELG1CQUFtQixvREFBb0Qsb0NBQW9DLDJCQUEyQixJQUFJLHdDQUF3Qyx1Q0FBdUMsdUZBQXVGLGFBQWEsRUFBRSxrQ0FBa0MsaUNBQWlDLG9CQUFvQixNQUFNLGlDQUFpQyxxQ0FBcUMsb0JBQW9CLEVBQUUsaUJBQWlCLDRGQUE0RixlQUFlLHdDQUF3QyxTQUFTLEVBQUUsbUJBQW1CLDhCQUE4QixxREFBcUQsMEJBQTBCLDZDQUE2QyxzQkFBc0IsNkRBQTZELFlBQVksZUFBZSxTQUFTLGlCQUFpQixpQ0FBaUMsaUJBQWlCLFlBQVksVUFBVSxzQkFBc0IsbUJBQW1CLGlEQUFpRCxrQkFBa0IsaUJBQWlCLE1BQU0sNkJBQTZCLFFBQVEsZ0ZBQWdGLDBYQUEwWCxnQ0FBZ0MsSUFBSSw2QkFBNkIsaUJBQWlCLDZCQUE2QixlQUFlLG9CQUFvQixpQkFBaUIsYUFBYSw0QkFBNEIsZ0JBQWdCLFVBQVUsVUFBVSxvQkFBb0IsOENBQThDLGtDQUFrQyxRQUFRLFdBQVcscUNBQXFDLHdCQUF3Qix1QkFBdUIsb0JBQW9CLGlCQUFpQixXQUFXLFlBQVksU0FBUyxFQUFFLG1CQUFtQixhQUFhLGFBQWEsNEhBQTRILGlCQUFpQixhQUFhLGVBQWUsaUlBQWlJLHlDQUF5QyxnQ0FBZ0MsaUVBQWlFLDJDQUEyQyxZQUFZLGdCQUFnQix3REFBd0QsdUJBQXVCLE9BQU8sYUFBYSxLQUFLLHVCQUF1QixFQUFFLEVBQUUsa0JBQWtCLE1BQU0sUUFBUSxXQUFXLEtBQUssc0JBQXNCLHVCQUF1QiwyRkFBMkYsRUFBRSxHQUFHLHFCQUFxQixhQUFhLFdBQVcsY0FBYyxRQUFRLDhDQUE4QyxjQUFjLDJFQUEyRSxnRUFBZ0Usa0JBQWtCLHdMQUF3TCxrQkFBa0IsY0FBYyxNQUFNLElBQUksT0FBTyxTQUFTLHFCQUFxQixxRkFBcUYsR0FBRyxjQUFjLGdCQUFnQix5RkFBeUYsc0JBQXNCLGdCQUFnQixTQUFTLGNBQWMsd0JBQXdCLGNBQWMseUJBQXlCLG9CQUFvQixPQUFPLEdBQUcsK0JBQStCLGdCQUFnQixTQUFTLElBQUksZ0NBQWdDLFNBQVMsMkJBQTJCLFNBQVMsMENBQTBDLHlCQUF5QixnQ0FBZ0MsMEZBQTBGLDhCQUE4QiwyRkFBMkYsdUNBQXVDLDBCQUEwQiw0Q0FBNEMsbUNBQW1DLHNDQUFzQyx5QkFBeUIsMkNBQTJDLGtDQUFrQyx5QkFBeUIsYUFBYSxpREFBaUQsb0JBQW9CLEtBQUssc0JBQXNCLDhCQUE4QixNQUFNLDZCQUE2QixTQUFTLHdCQUF3QixzQkFBc0IsOEJBQThCLE1BQU0sNEJBQTRCLFNBQVMsdUJBQXVCLG9EQUFvRCxzQkFBc0Isa0JBQWtCLHFCQUFxQixtQkFBbUIsV0FBVyw4R0FBOEcsb0JBQW9CLDhCQUE4Qiw4Q0FBOEMsTUFBTSxnQkFBZ0IsK0JBQStCLHlDQUF5QyxlQUFlLHdCQUF3QixHQUFHLFNBQVMsU0FBUyxvQkFBb0IsV0FBVyw4R0FBOEcsb0JBQW9CLDhCQUE4QiwyQkFBMkIsTUFBTSxjQUFjLCtCQUErQix5QkFBeUIsZUFBZSx3QkFBd0IsR0FBRyxPQUFPLFVBQVUsRUFBRSxJQUFJLHFCQUFxQixhQUFhLGFBQWEsK0NBQStDLDJGQUEyRixFQUFFLEVBQUUsSUFBSSxxQkFBcUIsYUFBYSw4RUFBOEUsZ0JBQWdCLGFBQWEsb0dBQW9HLGNBQWMsSUFBSSxrREFBa0QsOERBQThELHdEQUF3RCxvREFBb0Qsc0RBQXNELFNBQVMsUUFBUSxHQUFHLGdCQUFnQixnQkFBZ0IsSUFBSSxxQkFBcUIsU0FBUyxnQ0FBZ0MsbUxBQW1MLFdBQVcsb0JBQW9CLDBCQUEwQixrQ0FBa0MsY0FBYyxnQkFBZ0IsdUJBQXVCLFVBQVUsZUFBZSxLQUFLLEdBQUcsa0JBQWtCLGlFQUFpRSxjQUFjLG9HQUFvRyxhQUFhLDJHQUEyRyxzREFBc0Qsd0RBQXdELGNBQWMsK0RBQStELG1DQUFtQyxvREFBb0QsNkNBQTZDLHlCQUF5Qix1RkFBdUYsaUNBQWlDLHFCQUFxQixTQUFTLHFCQUFxQixXQUFXLElBQUksTUFBTSxjQUFjLFlBQVksU0FBUywrQkFBK0IsdUJBQXVCLCtFQUErRSxpQkFBaUIsdUJBQXVCLGNBQWMsZ0VBQWdFLGdCQUFnQixxRUFBcUUsZ0JBQWdCLDRCQUE0Qix5QkFBeUIsc0RBQXNELE9BQU8scUJBQXFCLGtCQUFrQiwwREFBMEQsa0NBQWtDLGVBQWUsSUFBSSx5RUFBeUUsU0FBUyxzQ0FBc0MsMEtBQTBLLHdCQUF3Qiw4QkFBOEIsd0JBQXdCLGtCQUFrQixHQUFHLGNBQWMsZUFBZSxjQUFjLGVBQWUsZ0JBQWdCLGtCQUFrQixxR0FBcUcsb09BQW9PLGNBQWMsc0JBQXNCLGdFQUFnRSxJQUFJLHlCQUF5QixTQUFTLGlCQUFpQixZQUFZLEVBQUUsY0FBYyx3Q0FBd0MsY0FBYyw2Q0FBNkMsd0JBQXdCLGlDQUFpQyxHQUFHLGtCQUFrQixvQkFBb0Isa0JBQWtCLElBQUksc0NBQXNDLFVBQVUsU0FBUyw0R0FBNEcsdUpBQXVKLG9CQUFvQixtQkFBbUIsS0FBSyxvQ0FBb0MsV0FBVyxLQUFLLFdBQVcsdURBQXVELHdDQUF3QywwQkFBMEIscUJBQXFCLFlBQVksWUFBWSxXQUFXLHNCQUFzQixzQkFBc0IsZUFBZSxHQUFHLHFCQUFxQixhQUFhLEdBQUcsWUFBWSxNQUFNLEdBQUcsZ0RBQWdELGNBQWMsU0FBUyw4QkFBOEIsMEJBQTBCLHNEQUFzRCxtRkFBbUYsYUFBYSxtQkFBbUIsWUFBWSxtQkFBbUIsS0FBSyxtQkFBbUIsdUNBQXVDLHlCQUF5QixpQ0FBaUMsc0JBQXNCLHFCQUFxQixtREFBbUQscUJBQXFCLHdCQUF3QixZQUFZLFdBQVcsS0FBSyxXQUFXLHdEQUF3RCxHQUFHLHFCQUFxQixJQUFJLHdCQUF3QixxUEFBcVAsOEVBQThFLFNBQVMsVUFBVSx5QkFBeUIsa0NBQWtDLDJCQUEyQiw2QkFBNkIsaUJBQWlCLElBQUksMERBQTBELHVCQUF1QixpQkFBaUIsNkVBQTZFLHNCQUFzQixZQUFZLFNBQVMsTUFBTSxHQUFHLFlBQVksR0FBRyxnQkFBZ0IsdUJBQXVCLDBDQUEwQywyQkFBMkIsNkJBQTZCLGlCQUFpQixJQUFJLGdEQUFnRCx1QkFBdUIsZUFBZSxzQ0FBc0Msc0JBQXNCLFlBQVksU0FBUyxNQUFNLEdBQUcsWUFBWSxJQUFJLGdCQUFnQix5QkFBeUIsMENBQTBDLE1BQU0sMkJBQTJCLHlFQUF5RSxxQ0FBcUMscUJBQXFCLG9DQUFvQywrQkFBK0Isa0RBQWtELEVBQUUseUJBQXlCLElBQUksTUFBTSxLQUFLLHFCQUFxQiw2QkFBNkIsaUJBQWlCLElBQUksNkVBQTZFLHdCQUF3Qix1QkFBdUIsZ0NBQWdDLG1DQUFtQyxNQUFNLFNBQVMsTUFBTSxHQUFHLFlBQVksSUFBSSxnQkFBZ0IsMEJBQTBCLDBDQUEwQywyQkFBMkIsNkJBQTZCLGlCQUFpQixJQUFJLG1EQUFtRCx3QkFBd0IsSUFBSSxzQkFBc0IsV0FBVyxzQkFBc0IsbUNBQW1DLE1BQU0sU0FBUyxNQUFNLEdBQUcsWUFBWSxJQUFJLGdCQUFnQixtQkFBbUIsa0NBQWtDLDJCQUEyQiw2QkFBNkIsaUJBQWlCLElBQUksaURBQWlELHdCQUF3QixJQUFJLGdDQUFnQyxtQ0FBbUMsTUFBTSxTQUFTLE1BQU0sR0FBRyxZQUFZLEdBQUcsZ0JBQWdCLG9CQUFvQixrQ0FBa0MsMkJBQTJCLDZCQUE2QixpQkFBaUIsSUFBSSxpREFBaUQsdUJBQXVCLFlBQVksc0JBQXNCLFlBQVksU0FBUyxNQUFNLEdBQUcsWUFBWSxHQUFHLGdCQUFnQixtQkFBbUIsa0NBQWtDLHVDQUF1Qyw2QkFBNkIsaUJBQWlCLElBQUksa0VBQWtFLHVCQUF1QixlQUFlLGdEQUFnRCxzQkFBc0IsWUFBWSxTQUFTLE1BQU0sR0FBRyxZQUFZLEdBQUcsZ0JBQWdCLGtCQUFrQixrQ0FBa0MsMkJBQTJCLDZCQUE2QixpQkFBaUIsSUFBSSw4REFBOEQsdUJBQXVCLGVBQWUsb0NBQW9DLHNCQUFzQixZQUFZLFNBQVMsTUFBTSxHQUFHLFlBQVksR0FBRyxnQkFBZ0IsNEJBQTRCLDBCQUEwQixvQkFBb0Isb0NBQW9DLHNLQUFzSyw0QkFBNEIsT0FBTyxZQUFZLFdBQVcsc0JBQXNCLFNBQVMsbUNBQW1DLDZDQUE2QyxpREFBaUQsVUFBVSxZQUFZLFdBQVcsS0FBSyxXQUFXLHNDQUFzQyw0QkFBNEIsdUJBQXVCLHNCQUFzQixzQkFBc0IsOEJBQThCLHdDQUF3Qyx3QkFBd0IsZUFBZSxnQkFBZ0IscUJBQXFCLE9BQU8sWUFBWSxXQUFXLEtBQUssV0FBVyw2QkFBNkIsc0JBQXNCLDhDQUE4QyxLQUFLLElBQUksdUJBQXVCLEtBQUssNEJBQTRCLFVBQVUsWUFBWSxXQUFXLHlCQUF5Qiw0QkFBNEIsK0JBQStCLGtDQUFrQyxlQUFlLGtCQUFrQix3QkFBd0IsZUFBZSxtQkFBbUIscUJBQXFCLE9BQU8sWUFBWSxXQUFXLG9CQUFvQixzQkFBc0IsOENBQThDLEtBQUssR0FBRyx5Q0FBeUMsa0xBQWtMLGNBQWMsbUpBQW1KLElBQUksK0lBQStJLFNBQVMsY0FBYyxxQ0FBcUMsV0FBVyxpR0FBaUcseUdBQXlHLE9BQU8sd0JBQXdCLFNBQVMsMEdBQTBHLFVBQVUsbWNBQW1jLGlFQUFpRSx1REFBdUQsY0FBYyx3QkFBd0IsU0FBUyxxQkFBcUIsU0FBUywwRUFBMEUseUJBQXlCLDZDQUE2QywySEFBMkgsVUFBVSxvQkFBb0IseUJBQXlCLE9BQU8sRUFBRSxtQ0FBbUMsb0NBQW9DLDJDQUEyQyxvQ0FBb0MscUNBQXFDLG9DQUFvQyxxQ0FBcUMsc0NBQXNDLHNDQUFzQyw0Q0FBNEMsb0NBQW9DLG9CQUFvQiw4R0FBOEcsd0JBQXdCLGtDQUFrQyxpSUFBaUksdUNBQXVDLHNCQUFzQixLQUFLLFlBQVksS0FBSyxvQkFBb0IsMENBQTBDLDJCQUEyQixzQ0FBc0Msd0NBQXdDLHFDQUFxQyw0RkFBNEYsS0FBSyxpQkFBaUIsS0FBSyxHQUFHLGVBQWUsMkRBQTJELEdBQUcsR0FBRyxZQUFZLElBQUksZ0JBQWdCLE9BQU8saURBQWlELGNBQWMsU0FBUyxvRUFBb0UsMkJBQTJCLElBQUksaUVBQWlFLFNBQVMsWUFBWSw4QkFBOEIsa0JBQWtCLGdCQUFnQixpQkFBaUIsS0FBSyxHQUFHLEtBQUssR0FBRyx3QkFBd0IsZ0VBQWdFLGtDQUFrQywyQkFBMkIsZ0JBQWdCLDhCQUE4QixxREFBcUQsZ0NBQWdDLElBQUksS0FBSywyREFBMkQsZ0RBQWdELElBQUksaUJBQWlCLEtBQUssR0FBRyxHQUFHLFlBQVksR0FBRyxnQkFBZ0IsdUJBQXVCLDBDQUEwQywyQkFBMkIsZ0JBQWdCLDhCQUE4QiwrRUFBK0UsZ0ZBQWdGLGlCQUFpQixLQUFLLEdBQUcsR0FBRyxZQUFZLElBQUksZ0JBQWdCLHlCQUF5QiwrQkFBK0IsMEJBQTBCLDBDQUEwQywyQkFBMkIsZ0JBQWdCLDhCQUE4QixrRUFBa0UsSUFBSSxpQkFBaUIsS0FBSyxHQUFHLEdBQUcsWUFBWSxJQUFJLGdCQUFnQixtQkFBbUIsa0NBQWtDLDJCQUEyQixnQkFBZ0IsOEJBQThCLGdEQUFnRCxJQUFJLGlCQUFpQixLQUFLLEdBQUcsR0FBRyxZQUFZLEdBQUcsZ0JBQWdCLG9CQUFvQixrQ0FBa0MsMkJBQTJCLGdCQUFnQiw4QkFBOEIsbUVBQW1FLHdCQUF3QixpQkFBaUIsS0FBSyxHQUFHLEdBQUcsWUFBWSxHQUFHLGdCQUFnQixtQkFBbUIsa0NBQWtDLDJCQUEyQixnQkFBZ0IsOEJBQThCLGtGQUFrRiw2Q0FBNkMsaUJBQWlCLEtBQUssR0FBRyxHQUFHLFlBQVksR0FBRyxnQkFBZ0Isa0JBQWtCLGtDQUFrQywyQkFBMkIsZ0JBQWdCLDhCQUE4Qix1REFBdUQsaUJBQWlCLGdCQUFnQiwrQkFBK0IsS0FBSyxpQkFBaUIsS0FBSyxHQUFHLEdBQUcsWUFBWSxHQUFHLGdCQUFnQiw0QkFBNEIsMEJBQTBCLHFEQUFxRCx1R0FBdUcsa0VBQWtFLGVBQWUsOEJBQThCLDhCQUE4QiwyQkFBMkIsNkhBQTZILGlCQUFpQixnQkFBZ0IsZ0NBQWdDLEdBQUcsa0JBQWtCLEVBQUUsaUJBQWlCLEtBQUssR0FBRyxlQUFlLEtBQUssR0FBRyxLQUFLLHFCQUFxQiw0QkFBNEIsOEJBQThCLHVDQUF1QyxJQUFJLHVCQUF1Qiw0QkFBNEIsc0RBQXNELElBQUksaUJBQWlCLEtBQUssR0FBRyxHQUFHLG1CQUFtQiwwQkFBMEIsSUFBSSxzQkFBc0IsS0FBSyxHQUFHLGVBQWUsS0FBSyxHQUFHLEdBQUcsaUNBQWlDLGtCQUFrQixnQkFBZ0IsaUJBQWlCLHlEQUF5RCxnQkFBZ0IsMkJBQTJCLElBQUksRUFBRSx5RkFBeUYsS0FBSyxPQUFPLHVEQUF1RCxTQUFTLDhCQUE4Qix3REFBd0Qsa0NBQWtDLElBQUksK0RBQStELFNBQVMsVUFBVSxpRkFBaUYscUJBQXFCLElBQUkseUZBQXlGLFNBQVMsVUFBVSx5QkFBeUIsd0NBQXdDLDJFQUEyRSxJQUFJLEtBQUssMEJBQTBCLHFCQUFxQiwrREFBK0QsbURBQW1ELEdBQUcsZ0JBQWdCLHVCQUF1QixnREFBZ0Qsc0RBQXNELHNDQUFzQyxJQUFJLGdCQUFnQix5QkFBeUIsZ0RBQWdELDBCQUEwQiw0QkFBNEIsZ0JBQWdCLHdDQUF3QyxVQUFVLFNBQVMsMkNBQTJDLFNBQVMsaUZBQWlGLEdBQUcsR0FBRyxJQUFJLGdCQUFnQiwwQkFBMEIsZ0RBQWdELGdCQUFnQix1Q0FBdUMsSUFBSSxnQkFBZ0IsbUJBQW1CLHdDQUF3QyxzREFBc0QsS0FBSyxLQUFLLDBCQUEwQiw4Q0FBOEMsR0FBRyxnQkFBZ0Isb0JBQW9CLG9DQUFvQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsbUJBQW1CLHdDQUF3QyxrQkFBa0IsSUFBSSxzQkFBc0IsU0FBUyxPQUFPLDBDQUEwQyxHQUFHLGdCQUFnQixrQkFBa0Isd0NBQXdDLG1EQUFtRCxJQUFJLEtBQUssMEJBQTBCLG9FQUFvRSxTQUFTLEdBQUcsZ0JBQWdCLDRCQUE0Qix3REFBd0QscUZBQXFGLHVDQUF1QyxtREFBbUQscUJBQXFCLGdDQUFnQyxLQUFLLEtBQUssMEJBQTBCLDhDQUE4QyxpQ0FBaUMsaUJBQWlCLDhCQUE4QiwyREFBMkQsS0FBSyxLQUFLLElBQUksb0NBQW9DLGdMQUFnTCxxR0FBcUcsY0FBYyxZQUFZLG1CQUFtQixLQUFLLG1CQUFtQiwrRUFBK0UsU0FBUyxjQUFjLFVBQVUsaUZBQWlGLDBGQUEwRix3QkFBd0IscUJBQXFCLCtMQUErTCxHQUFHLCtCQUErQixrR0FBa0csd0ZBQXdGLGdCQUFnQiwrSUFBK0kscUJBQXFCLHFFQUFxRSwwQ0FBMEMsMkJBQTJCLElBQUksMERBQTBELDBEQUEwRCwrQkFBK0Isa0RBQWtELElBQUksS0FBSyxXQUFXLDZEQUE2RCx1QkFBdUIsSUFBSSxLQUFLLFdBQVcsd0JBQXdCLGtCQUFrQix5RUFBeUUseURBQXlELEtBQUssa0JBQWtCLDJFQUEyRSxzR0FBc0csU0FBUyxNQUFNLEdBQUcsa0JBQWtCLCtCQUErQiwwQkFBMEIsdUNBQXVDLGdGQUFnRix1Q0FBdUMsbUJBQW1CLGdCQUFnQiwrQkFBK0IsMkNBQTJDLDREQUE0RCxHQUFHLGtCQUFrQix1Q0FBdUMsMERBQTBELGFBQWEsNEJBQTRCLGNBQWMsb0VBQW9FLGtFQUFrRSxtQkFBbUIsa0RBQWtELFdBQVcscUVBQXFFLG1GQUFtRixrQkFBa0IsUUFBUSxvQkFBb0IsS0FBSyxXQUFXLEVBQUUsV0FBVyx3RUFBd0UsSUFBSSxzREFBc0QsNkNBQTZDLElBQUksSUFBSSxHQUFHLHFCQUFxQixJQUFJLHNEQUFzRCw2Q0FBNkMsMENBQTBDLGtDQUFrQyxhQUFhLGlDQUFpQyxVQUFVLDhDQUE4Qyw0QkFBNEIsSUFBSSxLQUFLLFdBQVcsNEJBQTRCLFNBQVMscURBQXFELHVCQUF1QixJQUFJLG1CQUFtQixnQkFBZ0IsZ0JBQWdCLGtDQUFrQyx1QkFBdUIsSUFBSSxZQUFZLHdDQUF3QyxnQkFBZ0IscUJBQXFCLEVBQUUsSUFBSSxFQUFFLEdBQUcsU0FBUyxtQkFBbUIsZ0JBQWdCLGlCQUFpQixNQUFNLGtEQUFrRCxzQkFBc0IsZ0VBQWdFLElBQUksa0hBQWtILGVBQWUscUNBQXFDLG1CQUFtQixVQUFVLFdBQVcsV0FBVyxrQkFBa0IsbUJBQW1CLDJCQUEyQiwyREFBMkQsV0FBVyx5QkFBeUIsbUJBQW1CLHVEQUF1RCx5QkFBeUIsSUFBSSxzR0FBc0cscUJBQXFCLFFBQVEsMEVBQTBFLGVBQWUsaUJBQWlCLFlBQVksd0ZBQXdGLG9CQUFvQiwrRUFBK0UsK0JBQStCLGtFQUFrRSxLQUFLLEtBQUssc0VBQXNFLDJCQUEyQixvSUFBb0ksc0VBQXNFLHdCQUF3QiwrREFBK0Qsa0pBQWtKLGtCQUFrQix5QkFBeUIscUNBQXFDLHNFQUFzRSxpQkFBaUIsTUFBTSx1RUFBdUUsbUJBQW1CLDZEQUE2RCwrSUFBK0ksSUFBSSxxQ0FBcUMscUNBQXFDLGtCQUFrQixtQkFBbUIsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0JBQXNCLG1CQUFtQixnQkFBZ0IsMkRBQTJELElBQUksaUJBQWlCLDRCQUE0QixxS0FBcUssNkNBQTZDLDZDQUE2QywrQkFBK0IsNkNBQTZDLHNCQUFzQix1RUFBdUUsa0JBQWtCLG1DQUFtQyxxQkFBcUIsdUNBQXVDLHNCQUFzQiw2Q0FBNkMsaUZBQWlGLGNBQWMsNkJBQTZCLG1CQUFtQixPQUFPLHdCQUF3Qiw2QkFBNkIseUJBQXlCLGdDQUFnQyxHQUFHLDJCQUEyQix1QkFBdUIseUJBQXlCLGFBQWEsYUFBYSwrQkFBK0IsOEJBQThCLGtDQUFrQywrQkFBK0Isa0NBQWtDLG9CQUFvQiwyQkFBMkIscUJBQXFCLGlCQUFpQixrQkFBa0IsaUJBQWlCLDBDQUEwQyxZQUFZLElBQUksaUJBQWlCLDZCQUE2QiwyQkFBMkIsaUNBQWlDLHVFQUF1RSx3QkFBd0IsMkJBQTJCLGtEQUFrRCwwREFBMEQsSUFBSSxjQUFjLFNBQVMsa0JBQWtCLDZEQUE2RCxJQUFJLGVBQWUsNEJBQTRCLG1CQUFtQixvQ0FBb0MsZUFBZSx5QkFBeUIsa0JBQWtCLGlCQUFpQixtQkFBbUIsbUJBQW1CLGlDQUFpQyx5T0FBeU8sK0JBQStCLDZCQUE2Qix3QkFBd0IseUJBQXlCLHVJQUF1SSxhQUFhLDZCQUE2QixpQkFBaUIsY0FBYyxzQkFBc0IsMkNBQTJDLGdCQUFnQixXQUFXLHNCQUFzQixtQkFBbUIseUZBQXlGLG1CQUFtQiw2QkFBNkIsNkdBQTZHLG9CQUFvQixHQUFHLGtDQUFrQyxjQUFjLFNBQVMsNEJBQTRCLHFCQUFxQix5Q0FBeUMsWUFBWSxpQkFBaUIsOEdBQThHLEVBQUUsMkJBQTJCLG9HQUFvRyxzQkFBc0IsNENBQTRDLGFBQWEsV0FBVywwQkFBMEIsb0NBQW9DLFlBQVkseUVBQXlFLGtCQUFrQixHQUFHLG1DQUFtQyxrQkFBa0IsTUFBTSw0QkFBNEIsNEhBQTRILDJCQUEyQiwrSUFBK0ksS0FBSyxpQkFBaUIsYUFBYSxtREFBbUQsVUFBVSxvQ0FBb0MsU0FBUyw4QkFBOEIsU0FBUyxrQ0FBa0Msb0JBQW9CLHNDQUFzQyx3QkFBd0IseUNBQXlDLFVBQVUsdUNBQXVDLFNBQVMscUNBQXFDLFNBQVMsR0FBRyx3QkFBd0IscURBQXFELFVBQVUsOFBBQThQLGlGQUFpRiwwREFBMEQsb0xBQW9MLG9MQUFvTCw0RUFBNEUsV0FBVyxxQkFBcUIsV0FBVyw2Q0FBNkMsZUFBZSxzQkFBc0IsaUJBQWlCLFdBQVcsK0JBQStCLDRDQUE0QyxlQUFlLGtCQUFrQixpQkFBaUIsYUFBYSwrQkFBK0IsaUNBQWlDLCtCQUErQixnQ0FBZ0MsK0JBQStCLElBQUksZ0JBQWdCLGdHQUFnRyx1Q0FBdUMsOEhBQThILGlDQUFpQyxxQ0FBcUMsNkJBQTZCLHVCQUF1QixpQ0FBaUMsK0NBQStDLGdDQUFnQyw2Q0FBNkMsNkJBQTZCLHNCQUFzQixzQ0FBc0MsMEJBQTBCLGFBQWEsY0FBYyxjQUFjLFlBQVksd0NBQXdDLFNBQVMsNkJBQTZCLHNGQUFzRixnQ0FBZ0Msb0ZBQW9GLG9DQUFvQyxXQUFXLHdFQUF3RSxtQ0FBbUMsV0FBVyxvRUFBb0Usa0NBQWtDLHFGQUFxRiw4QkFBOEIscUJBQXFCLFlBQVksYUFBYSw4QkFBOEIsaUNBQWlDLGdCQUFnQix5QkFBeUIsU0FBUyw2QkFBNkIsMEJBQTBCLFlBQVksd0JBQXdCLFNBQVMsOEJBQThCLHVCQUF1QixpQ0FBaUMsb0ZBQW9GLDRCQUE0Qix5QkFBeUIsOEJBQThCLDJCQUEyQixRQUFRLGFBQWEsNkpBQTZKLG1FQUFtRSxNQUFNLG9DQUFvQywrQkFBK0IsTUFBTSxzQ0FBc0Msb0NBQW9DLE1BQU0sMkNBQTJDLHFDQUFxQyxNQUFNLDRDQUE0QyxtREFBbUQsTUFBTSwwREFBMEQsMENBQTBDLE1BQU0saURBQWlELG1EQUFtRCxNQUFNLDBEQUEwRCxxREFBcUQsTUFBTSw0REFBNEQsa0RBQWtELE1BQU0seURBQXlELGlEQUFpRCxNQUFNLHFFQUFxRSx3Q0FBd0MsTUFBTSxtRUFBbUUsa0NBQWtDLE1BQU0seUNBQXlDLHVDQUF1QyxNQUFNLDhDQUE4QyxrQ0FBa0MscURBQXFELDhCQUE4QixNQUFNLHVEQUF1RCwrQkFBK0IsTUFBTSxtREFBbUQsbUNBQW1DLE1BQU0sdURBQXVELG1DQUFtQyxNQUFNLHVEQUF1RCxJQUFJLGFBQWEsOEVBQThFLFVBQVUsb0RBQW9ELG9EQUFvRCxzSUFBc0ksMkVBQTJFLHN3Q0FBc3dDLDJPQUEyTyxPQUFPLFFBQVEsaUNBQWlDLFVBQVUsc0JBQXNCLE9BQU8scUNBQXFDLFlBQVksNkJBQTZCLGdCQUFnQixpQ0FBaUMsaUJBQWlCLHFDQUFxQyxjQUFjLHFDQUFxQyxVQUFVLG9DQUFvQyxlQUFlLGdDQUFnQyxxQkFBcUIscUNBQXFDLGlCQUFpQixrQ0FBa0MsaUJBQWlCLGlDQUFpQyxvQkFBb0IsdURBQXVELGVBQWUsb0NBQW9DLDRCQUE0Qix1REFBdUQsbUJBQW1CLHVDQUF1QyxpQkFBaUIscUNBQXFDLHFCQUFxQix3Q0FBd0MsZUFBZSxvQ0FBb0MsNEJBQTRCLHVEQUF1RCxtQkFBbUIsdUNBQXVDLGlCQUFpQixrQ0FBa0MsZ0JBQWdCLGlDQUFpQyxzQkFBc0IsMEVBQTBFLG9CQUFvQixxQ0FBcUMseUJBQXlCLCtEQUErRCxtQkFBbUIsb0NBQW9DLHFCQUFxQixxREFBcUQsaUJBQWlCLHdEQUF3RCxtQkFBbUIseUNBQXlDLHdCQUF3Qiw4Q0FBOEMsZ0JBQWdCLDBDQUEwQyxtQkFBbUIsb0NBQW9DLG9CQUFvQixzQ0FBc0MsbUJBQW1CLHFDQUFxQyxtQkFBbUIsd0NBQXdDLHlCQUF5QiwyQ0FBMkMscUJBQXFCLHVDQUF1QyxvQkFBb0IsOENBQThDLGNBQWMsK0JBQStCLGlCQUFpQixrQ0FBa0MsZ0JBQWdCLGlDQUFpQyxlQUFlLGlDQUFpQyxrQkFBa0Isb0NBQW9DLG9CQUFvQix1Q0FBdUMsK0JBQStCLGtDQUFrQyxJQUFJLEVBQUUsaUNBQWlDLGtGQUFrRixNQUFNLDZCQUE2QixzSUFBc0ksTUFBTSxzTUFBc00sU0FBUyw0QkFBNEIsb0NBQW9DLElBQUksRUFBRSxLQUFLLHdEQUF3RCxFQUFFLGVBQWUsS0FBSyx3REFBd0QsRUFBRSxlQUFlLHVDQUF1QyxHQUFHLDBDQUEwQywyQ0FBMkMsZUFBZSw0Q0FBNEMsR0FBRywwQ0FBMEMsMkNBQTJDLGVBQWUsbUNBQW1DLFNBQVMsd0JBQXdCLDhCQUE4QixJQUFJLCtPQUErTyxTQUFTLHdCQUF3QixrQ0FBa0MsSUFBSSxrQ0FBa0MseUVBQXlFLE1BQU0sMkVBQTJFLE1BQU0sdUdBQXVHLFNBQVMsdWVBQXVlLGNBQWMsT0FBTyw0Q0FBNEMsb0NBQW9DLGlDQUFpQyxJQUFJLHVGQUF1RixTQUFTLHdCQUF3Qix1Q0FBdUMsNFBBQTRQLDJDQUEyQywyWEFBMlgsc0NBQXNDLCtCQUErQiwrQ0FBK0MscUJBQXFCLCtIQUErSCxvQ0FBb0MsTUFBTSw4RkFBOEYscUNBQXFDLDRCQUE0Qix1Q0FBdUMsOEJBQThCLHVDQUF1QyxzQkFBc0Isc0JBQXNCLGlCQUFpQixtQkFBbUIsd0JBQXdCLDhCQUE4QixJQUFJLDhCQUE4QixPQUFPLHlCQUF5Qix1QkFBdUIsMkJBQTJCLE1BQU0sZ0ZBQWdGLDBCQUEwQixtQkFBbUIsaUNBQWlDLHVCQUF1Qiw4QkFBOEIsSUFBSSw4QkFBOEIsT0FBTyxvN0JBQW83QiwwQkFBMEIsWUFBWSxxQkFBcUIsNElBQTRJLG9DQUFvQywwREFBMEQsbUNBQW1DLE9BQU8sZ0NBQWdDLDJEQUEyRCxrQ0FBa0MsT0FBTyxxTUFBcU0sc0NBQXNDLHdRQUF3USwyRUFBMkUsMFhBQTBYLHdCQUF3QixpQ0FBaUMsT0FBTyxzQ0FBc0MsZUFBZSxnR0FBZ0csTUFBTSxnRkFBZ0YsTUFBTSw4RUFBOEUsTUFBTSxpREFBaUQsZUFBZSxnR0FBZ0csTUFBTSxnRkFBZ0YsTUFBTSx1REFBdUQsTUFBTSxnR0FBZ0csTUFBTSw4RUFBOEUsTUFBTSxpREFBaUQsU0FBUyx1Q0FBdUMsVUFBVSxtQ0FBbUMsTUFBTSwwREFBMEQsTUFBTSwrQ0FBK0MsTUFBTSwrQkFBK0IsTUFBTSwrQkFBK0IsTUFBTSx1Q0FBdUMsOEJBQThCLFVBQVUsNkJBQTZCLGtCQUFrQixtQ0FBbUMsc0JBQXNCLGNBQWMsUUFBUSxZQUFZLFdBQVcsS0FBSyxpQkFBaUIsV0FBVyxrQ0FBa0MsS0FBSyxNQUFNLGdCQUFnQixZQUFZLFdBQVcsS0FBSyxLQUFLLFlBQVksV0FBVyxrQ0FBa0MsS0FBSyxNQUFNLGdCQUFnQixvQkFBb0IsV0FBVyxpQkFBaUIscUNBQXFDLDhCQUE4Qiw2RUFBNkUsb0NBQW9DLDhEQUE4RCxvQ0FBb0MsMkNBQTJDLHNCQUFzQiwwRkFBMEYsMkJBQTJCLElBQUksOEJBQThCLGtEQUFrRCxLQUFLLHVEQUF1RCxrQkFBa0IsZ0NBQWdDLDhCQUE4QixzQ0FBc0MsV0FBVyxhQUFhLEtBQUssV0FBVyxhQUFhLFlBQVksSUFBSSxLQUFLLHNDQUFzQyxnQkFBZ0IsZ0JBQWdCLFNBQVMseUJBQXlCLHdLQUF3SyxvREFBb0QsbUVBQW1FLHlCQUF5Qix1Y0FBdWMsMkJBQTJCLFlBQVksNkJBQTZCLHVCQUF1QiwrREFBK0Qsb0dBQW9HLGlDQUFpQyxJQUFJLHVEQUF1RCx1QkFBdUIsNEJBQTRCLDJIQUEySCxTQUFTLDZCQUE2QixTQUFTLHVCQUF1QixvQ0FBb0MsSUFBSSx5REFBeUQsU0FBUyxvQ0FBb0MseVJBQXlSLGNBQWMsVUFBVSxzQ0FBc0MsNEJBQTRCLFFBQVEsb01BQW9NLGdDQUFnQyx3REFBd0QsMklBQTJJLHlCQUF5QixnRkFBZ0YsMkZBQTJGLDRCQUE0QixNQUFNLHVXQUF1VywrQkFBK0IsbUNBQW1DLCtCQUErQixJQUFJLHNDQUFzQyxTQUFTLFVBQVUsSUFBSSxjQUFjLFNBQVMsb0pBQW9KLDJFQUEyRSwrUkFBK1IsbUNBQW1DLHVRQUF1USxnQ0FBZ0Msa0hBQWtILEtBQUssZ0JBQWdCLCtQQUErUCxXQUFXLDZoRkFBNmhGLGlDQUFpQyxhQUFhLGdDQUFnQyxjQUFjLGdCQUFnQixzRUFBc0UsT0FBTyxlQUFlLHdIQUF3SCxhQUFhLG1CQUFtQiw2RUFBNkUsa0RBQWtELHdDQUF3QyxvQ0FBb0MscVFBQXFRLDhDQUE4QyxxSEFBcUgsZ0NBQWdDLGFBQWEsMktBQTJLLGlCQUFpQiw4dEJBQTh0QiwrR0FBK0csdUJBQXVCLGlCQUFpQiw0QkFBNEIsbUZBQW1GLHFDQUFxQyxxQ0FBcUMsV0FBVyxxREFBcUQsMlVBQTJVLDRCQUE0QixvQ0FBb0MsOERBQThELHFDQUFxQyx1Q0FBdUMsa0NBQWtDLE1BQU0sU0FBUyxrWkFBa1osaUNBQWlDLHFEQUFxRCw2SEFBNkgsaUxBQWlMLFNBQVMsZ0RBQWdELCtEQUErRCxtQ0FBbUMsNk1BQTZNLCtDQUErQyxrYUFBa2EsY0FBYyw0RkFBNEYsc0NBQXNDLDBFQUEwRSxjQUFjLGtCQUFrQiw2QkFBNkIsaUVBQWlFLEdBQUcsV0FBVyw0V0FBNFcsT0FBTyxPQUFPLGtCQUFrQixJQUFJLDhCQUE4QiwwRkFBMEYsd0NBQXdDLDRHQUE0RyxpQ0FBaUMscUZBQXFGLGtDQUFrQyxpR0FBaUcsaUNBQWlDLDBGQUEwRixtQ0FBbUMsNEVBQTRFLG1DQUFtQyw0RUFBNEUsb0NBQW9DLDZFQUE2RSxvQ0FBb0MsNkVBQTZFLG9DQUFvQyw2RUFBNkUscUNBQXFDLGdGQUFnRixlQUFlLFNBQVMsZUFBZSxTQUFTLFFBQVEsc0JBQXNCLHlCQUF5QixpQ0FBaUMsK0NBQStDLG9CQUFvQixnQ0FBZ0Msa0JBQWtCLG1DQUFtQyxpQ0FBaUMsdUJBQXVCLFNBQVMsZ0NBQWdDLHFCQUFxQiwyRkFBMkYsK2NBQStjLFdBQVcsZUFBZSwyQ0FBMkMsaUJBQWlCLG1EQUFtRCxzQkFBc0IsK0JBQStCLGlEQUFpRCxzQkFBc0IsMkJBQTJCLDJEQUEyRCx1QkFBdUIsNEJBQTRCLDZEQUE2RCxXQUFXLGVBQWUsMkNBQTJDLGlCQUFpQixtREFBbUQsbUJBQW1CLHlDQUF5Qyx1QkFBdUIsMkRBQTJELHNCQUFzQix3Q0FBd0MsNENBQTRDLHFDQUFxQywyREFBMkQsZ0JBQWdCLHNCQUFzQix1QkFBdUIscUNBQXFDLHFFQUFxRSw2QkFBNkIsNkJBQTZCLCtCQUErQiwrQkFBK0IsK0JBQStCLCtCQUErQixtQkFBbUIscUVBQXFFLHNCQUFzQix1Q0FBdUMsb0JBQW9CLDBFQUEwRSxVQUFVLGVBQWUsNkNBQTZDLHFCQUFxQiwyQ0FBMkMsdUJBQXVCLG9FQUFvRSxpREFBaUQsZUFBZSxtQkFBbUIsaUJBQWlCLHdEQUF3RCwrQkFBK0Isd0RBQXdELGVBQWUsNkJBQTZCLGlCQUFpQiw0RUFBNEUsK0JBQStCLDRDQUE0QyxlQUFlLGlCQUFpQixpQkFBaUIsb0RBQW9ELCtCQUErQiwrQ0FBK0MsZUFBZSxpRUFBaUUsK0JBQStCLHlEQUF5RCxlQUFlLHlGQUF5RiwrQkFBK0IsdUNBQXVDLDJCQUEyQix5Q0FBeUMsMEJBQTBCLG1CQUFtQix3QkFBd0IsK0dBQStHLG9CQUFvQiwwTkFBME4sSUFBSSxrQkFBa0IsU0FBUyw0REFBNEQsR0FBRyx1Q0FBdUMsa1FBQWtRLGtEQUFrRCxlQUFlLHdCQUF3QixpQkFBaUIsbUJBQW1CLCtCQUErQixNQUFNLGlCQUFpQiwyRkFBMkYsa1JBQWtSLG9CQUFvQixzckJBQXNyQixtQkFBbUIscUJBQXFCLGtCQUFrQix3U0FBd1MsOEJBQThCLHVFQUF1RSxnSUFBZ0ksV0FBVyxzQkFBc0IsZ0NBQWdDLCtEQUErRCwyRkFBMkYsOERBQThELGdIQUFnSCxxR0FBcUcsdUNBQXVDLDZIQUE2SCx1R0FBdUcsMEVBQTBFLGdCQUFnQiw4QkFBOEIsMklBQTJJLCtDQUErQyw4QkFBOEIsNkVBQTZFLHlEQUF5RCw0U0FBNFMsNkJBQTZCLHlEQUF5RCwrQ0FBK0MscXBCQUFxcEIsOENBQThDLG9DQUFvQyx3Q0FBd0MsK05BQStOLFVBQVUseUJBQXlCLHNNQUFzTSx5Q0FBeUMsV0FBVywwTEFBMEwsZ0lBQWdJLEtBQUssd0NBQXdDLG9FQUFvRSxzQ0FBc0MseUZBQXlGLHVDQUF1Qyw2RUFBNkUsb0NBQW9DLFdBQVcsK1RBQStULHFDQUFxQywwZkFBMGYsa0JBQWtCLGlOQUFpTiw0Q0FBNEMsa0RBQWtELGdEQUFnRCxhQUFhLGdQQUFnUCw2REFBNkQsdUhBQXVILCtCQUErQix5RkFBeUYsbUVBQW1FLHFKQUFxSiw0S0FBNEssMEVBQTBFLDRDQUE0Qyw4Q0FBOEMsNENBQTRDLDhDQUE4Qyx5RkFBeUYsNkhBQTZILHlDQUF5QyxzQ0FBc0MsNkJBQTZCLHdCQUF3Qiw0Y0FBNGMsdUNBQXVDLGFBQWEsd0tBQXdLLG1IQUFtSCw0R0FBNEcsMEJBQTBCLHNFQUFzRSwrQkFBK0Isc1BBQXNQLG1IQUFtSCwyRkFBMkYsdUNBQXVDLGdEQUFnRCwrQ0FBK0MsTUFBTSxnUEFBZ1Asa0RBQWtELE1BQU0seThCQUF5OEIsNENBQTRDLHVkQUF1ZCxvYkFBb2IsU0FBUyw0SUFBNEksY0FBYyx1RUFBdUUsbUNBQW1DLGFBQWEsNkVBQTZFLEtBQUsscUdBQXFHLDZKQUE2SixzQkFBc0Isc0lBQXNJLDhKQUE4SixxRkFBcUYsS0FBSyxtQ0FBbUMsa25CQUFrbkIsZ0JBQWdCLDBDQUEwQywrR0FBK0csMENBQTBDLCtHQUErRyxHQUFHLFNBQVMseUVBQXlFLEtBQUssaVBBQWlQLG9CQUFvQix1QkFBdUIsa0NBQWtDLDBDQUEwQyw4SkFBOEosOEVBQThFLHFDQUFxQyxnQkFBZ0Isc0JBQXNCLDRLQUE0SyxxS0FBcUssMkJBQTJCLGdPQUFnTywyQ0FBMkMsMEVBQTBFLHFHQUFxRyw4ckJBQThyQiwwQ0FBMEMscUJBQXFCLDhDQUE4QyxpSUFBaUksNkNBQTZDLFVBQVUsczNDQUFzM0MsbVZBQW1WLGNBQWMsNkRBQTZELHVDQUF1Qyw0aUJBQTRpQixtQ0FBbUMsOEtBQThLLGNBQWMsa0ZBQWtGLDRDQUE0QywwS0FBMEssb0JBQW9CLFVBQVUseUJBQXlCLDRPQUE0Tyx1QkFBdUIsb0RBQW9ELElBQUksbUVBQW1FLGtEQUFrRCx5Q0FBeUMsOHRCQUE4dEIsd0NBQXdDLFdBQVcscVBBQXFQLDZHQUE2Ryx1QkFBdUIsMk5BQTJOLDBDQUEwQyxnSkFBZ0oscUlBQXFJLG9EQUFvRCx3Q0FBd0MsdU5BQXVOLGtEQUFrRCxjQUFjLDhCQUE4QixXQUFXLGdGQUFnRix5QkFBeUIsZ0JBQWdCLG1EQUFtRCxXQUFXLCtMQUErTCx5S0FBeUsscUNBQXFDLDJFQUEyRSw0QkFBNEIsMklBQTJJLG9DQUFvQyxzQkFBc0IsMkJBQTJCLEtBQUssT0FBTyw0R0FBNEcsa0JBQWtCLDJHQUEyRyxFQUFFLDhKQUE4SixxSEFBcUgsOFJBQThSLHVEQUF1RCxxTUFBcU0seUlBQXlJLEtBQUssa0NBQWtDLGlCQUFpQiw2QkFBNkIsS0FBSyxPQUFPLGdNQUFnTSxVQUFVLHFFQUFxRSxjQUFjLHVCQUF1QixvQkFBb0IsZ0RBQWdELHVCQUF1QixnREFBZ0QsRUFBRSw2RUFBNkUsMkJBQTJCLDBCQUEwQixHQUFHLG9QQUFvUCxvRUFBb0UsZ0RBQWdELGlCQUFpQixpR0FBaUcsdUNBQXVDLEdBQUcsbUNBQW1DLE9BQU8scUNBQXFDLHlGQUF5Riw0SkFBNEosbUNBQW1DLCtDQUErQyxXQUFXLGtJQUFrSSw0R0FBNEcsdUJBQXVCLGdLQUFnSyxvQ0FBb0MsOExBQThMLGdDQUFnQyw2REFBNkQsY0FBYyxHQUFHLCtEQUErRCxPQUFPLDhHQUE4Ryx5QkFBeUIsOENBQThDLFlBQVksdUJBQXVCLG9CQUFvQixnREFBZ0QsdUJBQXVCLGdEQUFnRCxFQUFFLDRFQUE0RSwyQkFBMkIsMEJBQTBCLEdBQUcsMk1BQTJNLDRDQUE0QyxrRUFBa0UsU0FBUyx1QkFBdUIsV0FBVyxHQUFHLDZXQUE2VyxrQkFBa0IsNEJBQTRCLDBDQUEwQyxnSkFBZ0osS0FBSyx5QkFBeUIsc1NBQXNTLG9EQUFvRCw0Q0FBNEMsMENBQTBDLDhCQUE4QixtR0FBbUcsNkNBQTZDLFdBQVcsMkNBQTJDLGdDQUFnQyxzREFBc0QsK0ZBQStGLHlDQUF5QyxXQUFXLG9EQUFvRCxxVUFBcVUsK0NBQStDLDRWQUE0ViwwQ0FBMEMsNkNBQTZDLDBDQUEwQyxxQ0FBcUMsZ0RBQWdELDRDQUE0Qyx1REFBdUQseUNBQXlDLFdBQVcsc0RBQXNELCtGQUErRixNQUFNLHdPQUF3Tyw0REFBNEQsR0FBRyxpQ0FBaUMsK0JBQStCLHNDQUFzQyxzRkFBc0Ysc0NBQXNDLCtIQUErSCxtQ0FBbUMsb0tBQW9LLDBDQUEwQyxNQUFNLHlIQUF5SCxVQUFVLDJCQUEyQiwwdUJBQTB1QixzQ0FBc0Msd0RBQXdELHFDQUFxQyxzR0FBc0csc0NBQXNDLCtDQUErQyw4Q0FBOEMsaUVBQWlFLFlBQVksS0FBSyxRQUFRLGdCQUFnQiwyRkFBMkYsb0hBQW9ILGlDQUFpQywyQ0FBMkMsK0NBQStDLHVCQUF1QixRQUFRLGFBQWEsVUFBVSw2R0FBNkcsb0JBQW9CLHFCQUFxQixHQUFHLG9EQUFvRCw0REFBNEQsOEJBQThCLHFTQUFxUyxvQkFBb0Isa0VBQWtFLFVBQVUsR0FBRyxHQUFHLG9DQUFvQyxXQUFXLHNIQUFzSCxlQUFlLDhCQUE4QixtQ0FBbUMsc0VBQXNFLHVDQUF1QyxzQ0FBc0MsV0FBVyw2Q0FBNkMsMkRBQTJELEVBQUUseUNBQXlDLFdBQVcsZ0RBQWdELG1FQUFtRSxFQUFFLHVDQUF1Qyw4Q0FBOEMsS0FBSyxFQUFFLHVDQUF1QyxxQ0FBcUMsc0NBQXNDLFVBQVUsZUFBZSxrRUFBa0Usd0dBQXdHLGtCQUFrQixxQ0FBcUMsaUNBQWlDLElBQUksdUZBQXVGLFNBQVMsd0JBQXdCLDRDQUE0QywrREFBK0QsNkJBQTZCLGlHQUFpRyxrREFBa0QseURBQXlELHVKQUF1SiwwQ0FBMEMsNEJBQTRCLHNDQUFzQyxNQUFNLGdDQUFnQyxXQUFXLG1DQUFtQyxvMEJBQW8wQiw0Q0FBNEMsUUFBUSxzSUFBc0ksb0RBQW9ELElBQUksbUVBQW1FLGtEQUFrRCw4REFBOEQsNkNBQTZDLCtHQUErRyxtQkFBbUIsdUpBQXVKLCtDQUErQyw2Q0FBNkMsdURBQXVELDhHQUE4RyxtQkFBbUIsR0FBRyw2SEFBNkgsOENBQThDLDhDQUE4Qyw2Q0FBNkMsK0NBQStDLGdEQUFnRCxtREFBbUQsdUNBQXVDLDZCQUE2QixzQ0FBc0MsNEJBQTRCLHVDQUF1Qyw2QkFBNkIsMENBQTBDLE9BQU8sc01BQXNNLG9DQUFvQywyRUFBMkUsbUNBQW1DLHdFQUF3RSxzQ0FBc0MsaURBQWlELHVDQUF1QyxXQUFXLDBEQUEwRCx3QkFBd0IseUJBQXlCLHVCQUF1Qiw0QkFBNEIseUJBQXlCLDBCQUEwQix1QkFBdUIsa0NBQWtDLGtDQUFrQyxnQ0FBZ0Msd0JBQXdCLHdCQUF3Qix3QkFBd0IseUJBQXlCLHlCQUF5QiwrQkFBK0IsNEJBQTRCLEVBQUUscUNBQXFDLDJCQUEyQixnREFBZ0QsUUFBUSw0ZkFBNGYsZ0JBQWdCLHNDQUFzQywrQkFBK0IsMEJBQTBCLG9DQUFvQyxxRkFBcUYsR0FBRyx5aUJBQXlpQixvQ0FBb0MscUNBQXFDLG1DQUFtQyxXQUFXLHFHQUFxRyxvRUFBb0UsRUFBRSx3Q0FBd0MsOEJBQThCLFVBQVUsZUFBZSw4Q0FBOEMsb0RBQW9ELGdEQUFnRCx1REFBdUQscURBQXFELHNEQUFzRCxvREFBb0QsZ0RBQWdELDRDQUE0QyxrREFBa0Qsa0RBQWtELG9EQUFvRCxtREFBbUQscURBQXFELGlEQUFpRCxnREFBZ0QsOENBQThDLGlEQUFpRCxpQ0FBaUMsb0tBQW9LLEtBQUssbUJBQW1CLDRIQUE0SCwwQkFBMEIsa0RBQWtELHVDQUF1Qyx1Q0FBdUMsMklBQTJJLHlRQUF5USx1Q0FBdUMsZ0ZBQWdGLFVBQVUsY0FBYyxxQkFBcUIsd0JBQXdCLG9CQUFvQiw4REFBOEQsdUhBQXVILFVBQVUsaUVBQWlFLHVCQUF1QixFQUFFLG9EQUFvRCxnQkFBZ0IsY0FBYyx1REFBdUQsZ0JBQWdCLFdBQVcsZ0JBQWdCLFdBQVcsZ0JBQWdCLFdBQVcsZ0JBQWdCLFlBQVksT0FBTyxlQUFlLEVBQUUsMkVBQTJFLGNBQWMsbUJBQW1CLGNBQWMsd0VBQXdFLGdLQUFnSyxlQUFlLFFBQVEsU0FBUyxjQUFjLHlCQUF5Qiw2QkFBNkIsS0FBSyw2QkFBNkIsc0lBQXNJLDRCQUE0QixTQUFTLG1CQUFtQixlQUFlLGdDQUFnQyw4QkFBOEIsS0FBSyxzRkFBc0YseUJBQXlCLFdBQVcsc0JBQXNCLHlCQUF5QixXQUFXLEtBQUssa0JBQWtCLGdCQUFnQixpQkFBaUIsZ0VBQWdFLG9GQUFvRixVQUFVLDhFQUE4RSx5QkFBeUIsTUFBTSw4Q0FBOEMsU0FBUyxvSUFBb0ksbUJBQW1CLG9CQUFvQixLQUFLLCtDQUErQyxPQUFPLG9CQUFvQixxQ0FBcUMsb0NBQW9DLElBQUksc0RBQXNELGNBQWMsNkJBQTZCLG9DQUFvQyxJQUFJLHdDQUF3QyxLQUFLLGtCQUFrQixTQUFTLGtDQUFrQyw0REFBNEQsMkRBQTJELEtBQUssMkNBQTJDLFNBQVMsZ0NBQWdDLG9DQUFvQyxLQUFLLGtCQUFrQixTQUFTLGlDQUFpQyxlQUFlLDZCQUE2QixvR0FBb0csSUFBSSxpSkFBaUosSUFBSSw2Q0FBNkMsY0FBYyxpQkFBaUIsZ0JBQWdCLHlDQUF5Qyw0QkFBNEIsdUlBQXVJLG1FQUFtRSxpQ0FBaUMsa0VBQWtFLHFDQUFxQyxpQkFBaUIsSUFBSSx3REFBd0QsZUFBZSxNQUFNLGdCQUFnQixNQUFNLGVBQWUsU0FBUyxtQ0FBbUMsWUFBWSxJQUFJLEtBQUssa0JBQWtCLHdCQUF3QixTQUFTLDBDQUEwQyxpQkFBaUIsSUFBSSx3Q0FBd0MsU0FBUywwQ0FBMEMsaUJBQWlCLElBQUksRUFBRSxvQkFBb0Isb0tBQW9LLFNBQVMsMENBQTBDLHFCQUFxQixJQUFJLGdFQUFnRSxTQUFTLHVDQUF1QyxtUkFBbVIsd0NBQXdDLCtDQUErQyxZQUFZLGVBQWUsNEJBQTRCLFFBQVEsY0FBYyxnQkFBZ0IsYUFBYSxrQkFBa0IsWUFBWSx5QkFBeUIsSUFBSSw4QkFBOEIsc0JBQXNCLDRDQUE0QyxnRUFBZ0UsSUFBSSxLQUFLLHVDQUF1QyxLQUFLLHNCQUFzQiw4QkFBOEIsV0FBVyw4Q0FBOEMsMERBQTBELDZCQUE2QixrQkFBa0IsWUFBWSxJQUFJLGlDQUFpQyx1QkFBdUIsc0NBQXNDLDZCQUE2QixJQUFJLEtBQUssa0JBQWtCLHNDQUFzQyxxSkFBcUosYUFBYSxrQ0FBa0MsMkNBQTJDLDBCQUEwQixrQ0FBa0MsbUJBQW1CLHVCQUF1Qix1QkFBdUIsMEJBQTBCLDRCQUE0QixvQkFBb0IsaUNBQWlDLGdDQUFnQyx3QkFBd0Isb0JBQW9CLDJCQUEyQiw2QkFBNkIsMkJBQTJCLHlCQUF5QixvQkFBb0IsOEJBQThCLGdDQUFnQyw4QkFBOEIsK0JBQStCLDBCQUEwQix3QkFBd0IsZ0NBQWdDLDhCQUE4Qiw4QkFBOEIsOEJBQThCLGdDQUFnQywwQkFBMEIsaURBQWlELDBEQUEwRCxtREFBbUQsdURBQXVELGlDQUFpQyxzQkFBc0Isb0JBQW9CLGdEQUFnRCxxSEFBcUgsMkJBQTJCLG9EQUFvRCw4Q0FBOEMsd0ZBQXdGLDBGQUEwRiw0Q0FBNEMsZ0ZBQWdGLHNEQUFzRCw4RkFBOEYsc0RBQXNELDRFQUE0RSxZQUFZLGlDQUFpQyw4SUFBOEksd0NBQXdDLCtEQUErRCwrTkFBK04sUUFBUSw4QkFBOEIsSUFBSSxxQ0FBcUMsU0FBUyxpQ0FBaUMsdUJBQXVCLG1DQUFtQyxtQ0FBbUMsK0JBQStCLHlEQUF5RCxvQ0FBb0MsNkRBQTZELDRCQUE0QixzQkFBc0IsaUJBQWlCLG1GQUFtRixvQkFBb0IsZ0JBQWdCLElBQUksb0JBQW9CLFNBQVMsMENBQTBDLHlEQUF5RCxxQkFBcUIsc0JBQXNCLGFBQWEsU0FBUyxhQUFhLGNBQWMsUUFBUSx5QkFBeUIsK0ZBQStGLFNBQVMsTUFBTSxFQUFFLGtCQUFrQix1QkFBdUIsY0FBYyxVQUFVLFNBQVMseUVBQXlFLFNBQVMsdUdBQXVHLDBCQUEwQiw4REFBOEQsa0dBQWtHLE1BQU0sWUFBWSxXQUFXLHFGQUFxRixTQUFTLE9BQU8sYUFBYSxvR0FBb0csb0JBQW9CLHdCQUF3QiwwQ0FBMEMseUJBQXlCLDhCQUE4Qiw2Q0FBNkMsdXNCQUF1c0IsZ0RBQWdELE1BQU0sYUFBYSxpQkFBaUIsaUJBQWlCLGtCQUFrQixLQUFLLCtCQUErQixJQUFJLDBEQUEwRCx3REFBd0QsS0FBSyxpSUFBaUksZUFBZSwrQkFBK0IsVUFBVSw4QkFBOEIsNEJBQTRCLG1DQUFtQyxtQ0FBbUMsaUJBQWlCLGlCQUFpQixhQUFhLHFDQUFxQyxLQUFLLE9BQU8saUNBQWlDLFNBQVMsa0NBQWtDLHVFQUF1RSw2QkFBNkIsVUFBVSxxRkFBcUYscUNBQXFDLHFEQUFxRCw4QkFBOEIsVUFBVSx3QkFBd0IsaUNBQWlDLGFBQWEsb0NBQW9DLHNCQUFzQixLQUFLLDRCQUE0QixzQkFBc0IsbURBQW1ELGtDQUFrQyx3Q0FBd0MsbUNBQW1DLHdDQUF3QywrQkFBK0Isd0RBQXdELG9DQUFvQyxrQkFBa0IsWUFBWSxnQ0FBZ0MsMEZBQTBGLEtBQUssaU1BQWlNLFNBQVMsZ0NBQWdDLDRCQUE0Qiw2QkFBNkIsa0NBQWtDLDZCQUE2QixrQ0FBa0MsNkJBQTZCLFVBQVUsK0JBQStCLDRCQUE0QixVQUFVLCtCQUErQiw2QkFBNkIsVUFBVSwrQkFBK0IsZ0NBQWdDLFVBQVUsK0JBQStCLDRCQUE0QixrQkFBa0IsU0FBUywwQkFBMEIsZ0NBQWdDLG1DQUFtQyxVQUFVLG9EQUFvRCxvQ0FBb0MsVUFBVSxvREFBb0Qsd0NBQXdDLFlBQVksU0FBUywrQ0FBK0MsaUJBQWlCLFFBQVEsNEhBQTRILFVBQVUsa0NBQWtDLGlDQUFpQyxpQ0FBaUMsU0FBUyxtQkFBbUIsWUFBWSxLQUFLLFlBQVksU0FBUyxZQUFZLFNBQVMsaUNBQWlDLDRCQUE0QixxREFBcUQsZ0NBQWdDLDJCQUEyQixrQ0FBa0MsMkJBQTJCLGlDQUFpQywyQkFBMkIsNkJBQTZCLFVBQVUseUJBQXlCLGtDQUFrQyxVQUFVLHlCQUF5QixrQ0FBa0MsVUFBVSw4QkFBOEIsZ0NBQWdDLFVBQVUsaUNBQWlDLG1DQUFtQyxVQUFVLGlDQUFpQyw0Q0FBNEMsZ0JBQWdCLGtDQUFrQyxrQ0FBa0MsMkJBQTJCLGlCQUFpQiwrRkFBK0YsNkJBQTZCLFVBQVUsb0JBQW9CLEtBQUssc0NBQXNDLDJCQUEyQixnQkFBZ0IsS0FBSyxFQUFFLG9GQUFvRixTQUFTLFdBQVcsb0RBQW9ELEtBQUssS0FBSyxJQUFJLGdDQUFnQyxpREFBaUQsS0FBSyxxQkFBcUIsbURBQW1ELG1CQUFtQixvQ0FBb0MsaUJBQWlCLGlEQUFpRCwrREFBK0QsY0FBYyxFQUFFLEtBQUssV0FBVyxxSUFBcUksS0FBSyxXQUFXLHFJQUFxSSwwR0FBMEcsMEhBQTBILDZCQUE2Qix5QkFBeUIsNkJBQTZCLCtIQUErSCxzQ0FBc0MscURBQXFELGFBQWEsdUtBQXVLLDhCQUE4Qix5Q0FBeUMsbUJBQW1CLGdDQUFnQyxRQUFRLFdBQVcsMkJBQTJCLFNBQVMsdUJBQXVCLFFBQVEsV0FBVyxFQUFFLHFCQUFxQixnQkFBZ0IsV0FBVyxrQkFBa0IsSUFBSSx5QkFBeUIsd0JBQXdCLGdDQUFnQyxtQkFBbUIsS0FBSyxpQkFBaUIsc0JBQXNCLGlDQUFpQyx1RUFBdUUsc0NBQXNDLE1BQU0sYUFBYSxpQkFBaUIsbUJBQW1CLGlCQUFpQixrQkFBa0IsS0FBSyx3Q0FBd0MsSUFBSSxrQkFBa0IsNEJBQTRCLE9BQU8sRUFBRSw0QkFBNEIsK0xBQStMLHFIQUFxSCw4QkFBOEIseUJBQXlCLDRCQUE0QixVQUFVLHFDQUFxQyxtQkFBbUIsS0FBSyxtQkFBbUIsVUFBVSxLQUFLLFdBQVcsd0JBQXdCLHFDQUFxQyxZQUFZLFNBQVMsbUJBQW1CLG9DQUFvQyxvQ0FBb0Msa0dBQWtHLEtBQUssMkNBQTJDLFVBQVUsS0FBSyxXQUFXLDJDQUEyQyxvQ0FBb0MsV0FBVyw0QkFBNEIsbUJBQW1CLEtBQUssdUNBQXVDLGdCQUFnQixjQUFjLFNBQVMsK0NBQStDLDREQUE0RCxpQ0FBaUMsdUNBQXVDLElBQUksOENBQThDLGVBQWUsV0FBVyxTQUFTLHlDQUF5QyxVQUFVLEtBQUssY0FBYyxNQUFNLHNDQUFzQyxPQUFPLG1FQUFtRSxzQ0FBc0MsaUNBQWlDLGNBQWMsT0FBTyxRQUFRLFFBQVEsTUFBTSxvQ0FBb0MsK0NBQStDLGtDQUFrQyxpQ0FBaUMsT0FBTyxRQUFRLFFBQVEsUUFBUSxLQUFLLDZCQUE2QixvRkFBb0YsMERBQTBELHNDQUFzQyx3QkFBd0IsaUJBQWlCLHNFQUFzRSxpQkFBaUIsa0lBQWtJLFNBQVMsbUhBQW1ILG9HQUFvRyxNQUFNLFlBQVksS0FBSyxPQUFPLEVBQUUsd0RBQXdELGlFQUFpRSxTQUFTLGNBQWMsa0hBQWtILGlDQUFpQyxxQkFBcUIsY0FBYyxxQkFBcUIsVUFBVSxnSUFBZ0ksK0JBQStCLHNDQUFzQywrQkFBK0Isa0NBQWtDLDZDQUE2QyxnQkFBZ0IsT0FBTyxzREFBc0QsbUJBQW1CLG1DQUFtQyxnREFBZ0QsaUNBQWlDLHlEQUF5RCxnRUFBZ0UseUJBQXlCLGFBQWEsOERBQThELGtDQUFrQyxxQ0FBcUMsZ0JBQWdCLDBFQUEwRSxXQUFXLEtBQUssYUFBYSxnSEFBZ0gscUZBQXFGLHdDQUF3Qyw2Q0FBNkMsaUlBQWlJLHlCQUF5QixnRkFBZ0YsS0FBSyxVQUFVLHdGQUF3Rix1Q0FBdUMscUNBQXFDLElBQUkseUJBQXlCLGVBQWUsc0JBQXNCLFNBQVMsc0JBQXNCLFdBQVcsS0FBSyx5QkFBeUIsTUFBTSxtQkFBbUIsUUFBUSw0QkFBNEIscUNBQXFDLG9EQUFvRCxpQ0FBaUMsdUNBQXVDLElBQUksOENBQThDLGVBQWUsV0FBVyxTQUFTLHlDQUF5QyxVQUFVLEtBQUssY0FBYyxNQUFNLHNDQUFzQyxPQUFPLG1FQUFtRSxtQ0FBbUMsa0VBQWtFLHNDQUFzQyxTQUFTLEtBQUssVUFBVSxrQkFBa0IsZUFBZSxpQkFBaUIsNkRBQTZELDZDQUE2Qyw2QkFBNkIsZ0JBQWdCLElBQUksVUFBVSxxQkFBcUIsSUFBSSw2Q0FBNkMsc0JBQXNCLElBQUksOEJBQThCLFVBQVUsNkNBQTZDLDBCQUEwQixVQUFVLE9BQU8sUUFBUSwyQkFBMkIsTUFBTSxxREFBcUQsMkJBQTJCLGdDQUFnQyxpQkFBaUIsaUNBQWlDLGdDQUFnQyx3QkFBd0IsS0FBSyxzQkFBc0IsU0FBUyxxQ0FBcUMsaURBQWlELGlCQUFpQixzQkFBc0Isa0NBQWtDLGtCQUFrQixJQUFJLEtBQUssaURBQWlELHVCQUF1Qiw2Q0FBNkMsWUFBWSx5QkFBeUIseURBQXlELCtCQUErQixTQUFTLCtCQUErQixVQUFVLDBCQUEwQixnQ0FBZ0MsdUpBQXVKLHdFQUF3RSxnUEFBZ1AsS0FBSyxNQUFNLG1CQUFtQiwrQ0FBK0MsVUFBVSxvTEFBb0wsK0dBQStHLElBQUkscUJBQXFCLGlIQUFpSCx1Q0FBdUMsU0FBUyxnQ0FBZ0MsU0FBUyxtQ0FBbUMsa0JBQWtCLGlDQUFpQyxjQUFjLHVDQUF1QyxxREFBcUQsZ0NBQWdDLFNBQVMsZ0NBQWdDLDBCQUEwQixtQ0FBbUMsaUNBQWlDLGlDQUFpQyw2QkFBNkIsdUNBQXVDLFVBQVUsaUhBQWlILGdDQUFnQyxVQUFVLG9DQUFvQyxnQ0FBZ0MsS0FBSyxjQUFjLFlBQVksWUFBWSxXQUFXLEtBQUssa0ZBQWtGLG1EQUFtRCxXQUFXLHFCQUFxQiw0RUFBNEUsbUNBQW1DLGlDQUFpQyxpQ0FBaUMsNkJBQTZCLHVDQUF1Qyw4Q0FBOEMsa0NBQWtDLFVBQVUsb0NBQW9DLGdDQUFnQyxTQUFTLGdDQUFnQyxzTEFBc0wsdUJBQXVCLDRCQUE0Qix1QkFBdUIsdUJBQXVCLG1CQUFtQixtQ0FBbUMsaUNBQWlDLGlDQUFpQyw2QkFBNkIsSUFBSSxjQUFjLDBGQUEwRixjQUFjLGdIQUFnSCxjQUFjLFNBQVMsY0FBYyxrQkFBa0IsNkhBQTZILGNBQWMsY0FBYyw0RkFBNEYsZ0JBQWdCLG9DQUFvQyxFQUFFLDZCQUE2QixzQkFBc0IsMkRBQTJELGdFQUFnRSxnQkFBZ0IseUdBQXlHLGFBQWEsbUJBQW1CLGdCQUFnQixrQkFBa0IsNEhBQTRILDBCQUEwQixPQUFPLEVBQUUsOENBQThDLCtGQUErRixTQUFTLDRFQUE0RSxLQUFLLE9BQU8sRUFBRSx5QkFBeUIsMkNBQTJDLFNBQVMsMkNBQTJDLDBCQUEwQixPQUFPLEVBQUUsOENBQThDLHNFQUFzRSxTQUFTLDBJQUEwSSxxQ0FBcUMsS0FBSyxhQUFhLDZCQUE2QixLQUFLLGFBQWEsNkJBQTZCLEtBQUssYUFBYSxnQkFBZ0IseUNBQXlDLGNBQWMsVUFBVSxzQkFBc0IsY0FBYyxVQUFVLG9JQUFvSSxvREFBb0QsZ0JBQWdCLE1BQU0sZ0JBQWdCLFVBQVUsTUFBTSxnRkFBZ0Ysa0JBQWtCLDZCQUE2QixNQUFNLDBKQUEwSixpQkFBaUIsYUFBYSw0QkFBNEIsS0FBSyxpQkFBaUIsNkVBQTZFLDJCQUEyQix5Q0FBeUMsV0FBVyxvQkFBb0IsbUNBQW1DLFlBQVksV0FBVyxvQkFBb0IsWUFBWSxZQUFZLE1BQU0sRUFBRSxzQ0FBc0MsYUFBYSxrQkFBa0IsV0FBVyxXQUFXLElBQUksZ0JBQWdCLElBQUksaURBQWlELGtDQUFrQyxvQ0FBb0MsNkRBQTZELDBGQUEwRixpQkFBaUIsaUJBQWlCLDhFQUE4RSxzQ0FBc0Msd0hBQXdILGtDQUFrQyw4QkFBOEIsZ0JBQWdCLHVFQUF1RSwwQkFBMEIsVUFBVSxFQUFFLHdCQUF3QixxSEFBcUgsU0FBUyxxQkFBcUIsSUFBSSxFQUFFLFdBQVcsUUFBUSxnQkFBZ0IsWUFBWSxrQ0FBa0MsTUFBTSx1QkFBdUIsMENBQTBDLHdDQUF3QyxRQUFRLFlBQVksU0FBUyx5Q0FBeUMsd0lBQXdJLHFEQUFxRCw2TkFBNk4scUNBQXFDLG1CQUFtQixzQkFBc0IsdUJBQXVCLEVBQUUsS0FBSyxxR0FBcUcsRUFBRSxLQUFLLG1HQUFtRyxFQUFFLCtEQUErRCxzRUFBc0UsaUNBQWlDLDJJQUEySSxRQUFRLGtDQUFrQyxxREFBcUQsd0RBQXdELG9CQUFvQixLQUFLLHdDQUF3QyxRQUFRLFFBQVEsOEJBQThCLGFBQWEsYUFBYSxFQUFFLGVBQWUsa0tBQWtLLFNBQVMsNENBQTRDLDZFQUE2RSxpQkFBaUIsNkNBQTZDLGdFQUFnRSwrSkFBK0osSUFBSSxzQkFBc0IsY0FBYyw4Q0FBOEMsd0NBQXdDLCtFQUErRSxHQUFHLElBQUkseUJBQXlCLGdEQUFnRCx3Q0FBd0MsK0VBQStFLEdBQUcsR0FBRyxNQUFNLGdCQUFnQixtQ0FBbUMsdUJBQXVCLHVFQUF1RSxnQ0FBZ0MsSUFBSSxhQUFhLDZCQUE2QixxSUFBcUkscUNBQXFDLDZEQUE2RCx1Q0FBdUMsc0JBQXNCLHVDQUF1QyxTQUFTLHVEQUF1RCxNQUFNLHVXQUF1VyxFQUFFLGNBQWMsdUdBQXVHLGVBQWUsS0FBSyxRQUFRLHVCQUF1Qix3R0FBd0csY0FBYyxzTEFBc0wsbUNBQW1DLGVBQWUsNkJBQTZCLElBQUksa0ZBQWtGLFFBQVEsV0FBVyxNQUFNLGtCQUFrQix3REFBd0QsRUFBRSxVQUFVLG9CQUFvQixVQUFVLHNDQUFzQyxrQ0FBa0Msa0NBQWtDLDZDQUE2QyxnREFBZ0QscUJBQXFCLDBFQUEwRSxLQUFLLHlCQUF5QixzQ0FBc0MsaUJBQWlCLElBQUksV0FBVyw4REFBOEQsU0FBUyx3Q0FBd0MscUJBQXFCLDRCQUE0Qix3VkFBd1YsdUVBQXVFLG1LQUFtSyxnQ0FBZ0MsK0JBQStCLGtDQUFrQyxrQ0FBa0MsZ0NBQWdDLCtCQUErQixnQ0FBZ0MsbUNBQW1DLGtDQUFrQyxrQ0FBa0Msa0NBQWtDLGtDQUFrQyxtQ0FBbUMsbUNBQW1DLGFBQWEsd0JBQXdCLFdBQVcsS0FBSyxjQUFjLFVBQVUsY0FBYyxRQUFRLEVBQUUsYUFBYSxvQkFBb0IsV0FBVyx3QkFBd0IsY0FBYyxRQUFRLEVBQUUsYUFBYSxvR0FBb0csNkJBQTZCLEVBQUUsT0FBTyxvSUFBb0ksZ0NBQWdDLGdDQUFnQywwQ0FBMEMsMENBQTBDLGlGQUFpRixXQUFXLE1BQU0sb0VBQW9FLDRFQUE0RSxTQUFTLDBDQUEwQyxjQUFjLDRDQUE0Qyx5REFBeUQsd0JBQXdCLHVEQUF1RCxZQUFZLFdBQVcsbUJBQW1CLGtEQUFrRCxZQUFZLGlCQUFpQixJQUFJLFdBQVcsY0FBYyxhQUFhLE1BQU0sb0JBQW9CLDZDQUE2QyxTQUFTLE9BQU8sU0FBUywrQkFBK0Isc0NBQXNDLHdFQUF3RSx3RkFBd0Ysd0NBQXdDLDJDQUEyQyxpQkFBaUIsNkVBQTZFLDZCQUE2QiwrQkFBK0IsZ0xBQWdMLDZCQUE2QixvQ0FBb0Msa0NBQWtDLFVBQVUsdUNBQXVDLHNGQUFzRixjQUFjLDRCQUE0QixrRUFBa0UsK0JBQStCLHdEQUF3RCxrQ0FBa0MsZUFBZSxrSUFBa0ksaUdBQWlHLDBGQUEwRiwrREFBK0QsaUNBQWlDLDRFQUE0RSxzS0FBc0ssNEZBQTRGLGdDQUFnQyx5REFBeUQsMkJBQTJCLGNBQWMsNEJBQTRCLDZEQUE2RCwyQ0FBMkMsd0RBQXdELGtDQUFrQyxnQkFBZ0IscUdBQXFHLGtHQUFrRyxtREFBbUQsbUNBQW1DLHlEQUF5RCxpRkFBaUYsK0ZBQStGLHFGQUFxRixxRkFBcUYsbUdBQW1HLDRGQUE0RiwrQkFBK0IsOENBQThDLDhCQUE4QixVQUFVLGtDQUFrQyxlQUFlLHdMQUF3TCx1RkFBdUYsTUFBTSxtTkFBbU4sNENBQTRDLDZDQUE2Qyw0REFBNEQsc0RBQXNELG9DQUFvQyx5Q0FBeUMsWUFBWSxZQUFZLEtBQUssV0FBVyxTQUFTLFFBQVEsYUFBYSxNQUFNLG9CQUFvQixzREFBc0Qsa0RBQWtELG9DQUFvQyxpQkFBaUIsV0FBVywwQkFBMEIsMEJBQTBCLGdDQUFnQywyQkFBMkIsSUFBSSxZQUFZLFNBQVMsa0NBQWtDLGVBQWUsd1FBQXdRLDJGQUEyRixNQUFNLGtLQUFrSyw0RkFBNEYsZ0ZBQWdGLDJGQUEyRixrQkFBa0IsNkNBQTZDLHdHQUF3Ryx3REFBd0Qsb0NBQW9DLHlEQUF5RCx3QkFBd0IsbUNBQW1DLHNCQUFzQixZQUFZLFdBQVcsbUJBQW1CLGtEQUFrRCxZQUFZLGlCQUFpQixJQUFJLFdBQVcsY0FBYyxhQUFhLE1BQU0sb0JBQW9CLDZDQUE2QyxTQUFTLE9BQU8sd0RBQXdELCtCQUErQixtQ0FBbUMsMkRBQTJELDBCQUEwQixrQ0FBa0MsZUFBZSwyT0FBMk8saUdBQWlHLHNHQUFzRyw0RkFBNEYsK0JBQStCLDhDQUE4Qyw4QkFBOEIsVUFBVSxrQ0FBa0MsZUFBZSx1SUFBdUksMkZBQTJGLHVFQUF1RSxxR0FBcUcsMEVBQTBFLDBHQUEwRyw0RUFBNEUsMEdBQTBHLDBFQUEwRSxvR0FBb0csc0VBQXNFLDhGQUE4RiwrRkFBK0YsNkdBQTZHLGtDQUFrQyx3SUFBd0ksdUZBQXVGLEdBQUcsd0dBQXdHLGtHQUFrRywwSEFBMEgsNkhBQTZILGtDQUFrQyx3SkFBd0osdUZBQXVGLEdBQUcsNElBQTRJLG1HQUFtRyxzR0FBc0csaUJBQWlCLHdCQUF3Qix5Q0FBeUMsMEJBQTBCLDZGQUE2RixrSEFBa0gsd0JBQXdCLHdCQUF3QixLQUFLLHdCQUF3QiwwQkFBMEIsNkRBQTZELG9FQUFvRSxpR0FBaUcsNkpBQTZKLDZPQUE2TyxrQ0FBa0MsZUFBZSxxTUFBcU0sNEVBQTRFLGtDQUFrQyxhQUFhLGdDQUFnQyxjQUFjLGdCQUFnQixzRUFBc0UsUUFBUSxzQkFBc0IsY0FBYyx5QkFBeUIsaUlBQWlJLFlBQVksd0hBQXdILGFBQWEsbUJBQW1CLHNIQUFzSCxJQUFJLHdFQUF3RSxlQUFlLG9EQUFvRCxRQUFRLEtBQUssS0FBSyxxQkFBcUIsMkJBQTJCLEtBQUsscUJBQXFCLFFBQVEsV0FBVyxzQkFBc0IseUJBQXlCLFdBQVcsS0FBSyxrQkFBa0IsZ0JBQWdCLGlCQUFpQixnRUFBZ0UseUNBQXlDLGdFQUFnRSxTQUFTLCtCQUErQiwwREFBMEQsbUdBQW1HLHlSQUF5UixtQkFBbUIsS0FBSyw2QkFBNkIsc0JBQXNCLCtCQUErQixvRUFBb0UsU0FBUyxTQUFTLFVBQVUsMENBQTBDLE9BQU8sK0JBQStCLE1BQU0sMEJBQTBCLGNBQWMsMEJBQTBCLFdBQVcsMEJBQTBCLGNBQWMsMEJBQTBCLGNBQWMsMEJBQTBCLGNBQWMsMEJBQTBCLGlCQUFpQiwwQkFBMEIsaUJBQWlCLDBCQUEwQixrQkFBa0IsSUFBSSxrREFBa0QsNkNBQTZDLG1DQUFtQyx5Q0FBeUMsK0JBQStCLHdDQUF3QywyQkFBMkIsdUJBQXVCLDZCQUE2QiwrQkFBK0IsY0FBYywwQkFBMEIsV0FBVyxHQUFHLEVBQUUsNEJBQTRCLDJCQUEyQixFQUFFLGdDQUFnQyxZQUFZLGtCQUFrQiw0Q0FBNEMsa0NBQWtDLDBCQUEwQixnQkFBZ0IsZ0JBQWdCLGNBQWMsUUFBUSx3Q0FBd0Msc0NBQXNDLG9IQUFvSCxxQ0FBcUMseUdBQXlHLG9DQUFvQyxjQUFjLDZDQUE2QyxxQ0FBcUMsY0FBYyxpTUFBaU0sNkNBQTZDLHFJQUFxSSxHQUFHLElBQUksZ0NBQWdDLG1HQUFtRyx3Q0FBd0MsZUFBZSx1Q0FBdUMsZUFBZSxrQ0FBa0MsSUFBSSxtQ0FBbUMsU0FBUyxVQUFVLGtDQUFrQyxJQUFJLG1DQUFtQyxTQUFTLFVBQVUsbUNBQW1DLElBQUksb0NBQW9DLFNBQVMsVUFBVSxxQ0FBcUMsSUFBSSxzQ0FBc0MsU0FBUyxVQUFVLGlDQUFpQyxjQUFjLDhDQUE4QywyR0FBMkcsc0VBQXNFLGdCQUFnQix1Q0FBdUMscUNBQXFDLDBDQUEwQyw0Q0FBNEMsc0NBQXNDLG9DQUFvQyx5Q0FBeUMsMkNBQTJDLG9CQUFvQixZQUFZLGVBQWUseUNBQXlDLE9BQU8sMkpBQTJKLFNBQVMscUVBQXFFLGVBQWUsbWhCQUFtaEIsK0JBQStCLG1DQUFtQyw2REFBNkQsWUFBWSxpQ0FBaUMsa0NBQWtDLDhFQUE4RSxZQUFZLEdBQUcsd0NBQXdDLDRLQUE0SyxnREFBZ0Qsd0NBQXdDLElBQUksdURBQXVELFlBQVksMkJBQTJCLFdBQVcsdUNBQXVDLDRDQUE0QyxtREFBbUQsOEJBQThCLDBCQUEwQixtQ0FBbUMscUVBQXFFLCtDQUErQyx1REFBdUQsSUFBSSxLQUFLLDhCQUE4QixPQUFPLFNBQVMsK0NBQStDLDRCQUE0QixJQUFJLG1DQUFtQyx3QkFBd0IsS0FBSyxlQUFlLGVBQWUsb0ZBQW9GLHVCQUF1QixJQUFJLGVBQWUsbUZBQW1GLFFBQVEsMHpDQUEwekMsb0NBQW9DLHFDQUFxQyxpQ0FBaUMsSUFBSSx1RkFBdUYsU0FBUyx5QkFBeUIsK0JBQStCLHdCQUF3QiwySUFBMkksZUFBZSxxQ0FBcUMsK0JBQStCLHVDQUF1QyxpQ0FBaUMsb0NBQW9DLEdBQUcsNkhBQTZILHVDQUF1Qyw0Q0FBNEMsZ0JBQWdCLHFDQUFxQywyQkFBMkIsa0RBQWtELFdBQVcsbUJBQW1CLFlBQVksNE1BQTRNLG1DQUFtQyxvTUFBb00sMkdBQTJHLE1BQU0scVVBQXFVLDBCQUEwQiwwSEFBMEgsK0VBQStFLFVBQVUsOEpBQThKLHNEQUFzRCxnQkFBZ0IsY0FBYyxxREFBcUQsY0FBYyxvREFBb0QsUUFBUSxvQ0FBb0Msd0JBQXdCLDJHQUEyRyx1Q0FBdUMscUNBQXFDLHNGQUFzRiwyREFBMkQseUlBQXlJLElBQUkseUJBQXlCLFNBQVMsdUVBQXVFLHFIQUFxSCx1UUFBdVEsc0dBQXNHLGlEQUFpRCxrQ0FBa0MsNkNBQTZDLHVCQUF1Qix3Q0FBd0Msc0RBQXNELG1CQUFtQixJQUFJLGdCQUFnQiwrREFBK0QsbUVBQW1FLDRDQUE0Qyx5QkFBeUIsa0dBQWtHLCtPQUErTyw0QkFBNEIsaUVBQWlFLE1BQU0seURBQXlELE1BQU0sZ0RBQWdELE1BQU0saURBQWlELE1BQU0seURBQXlELE1BQU0sZ0hBQWdILE1BQU0sdUpBQXVKLE1BQU0sK0RBQStELHdCQUF3QixnR0FBZ0csb0lBQW9JLG1GQUFtRixLQUFLLGdCQUFnQixpSEFBaUgsbUJBQW1CLHlDQUF5QyxNQUFNLFFBQVEsb0RBQW9ELHNHQUFzRyxhQUFhLHdDQUF3Qyx3R0FBd0csV0FBVywrTkFBK04sOEdBQThHLHlCQUF5QixnQkFBZ0IsT0FBTyxpREFBaUQsK0NBQStDLCtDQUErQywrQ0FBK0MsOENBQThDLCtDQUErQyw2Q0FBNkMsOENBQThDLDZDQUE2QywrQ0FBK0Msd0VBQXdFLHVEQUF1RCxrREFBa0QsV0FBVyw2Q0FBNkMsbUJBQW1CLDhCQUE4Qix3REFBd0Qsb0NBQW9DLGdLQUFnSyxjQUFjLHlKQUF5SixzR0FBc0csd0tBQXdLLFdBQVcsS0FBSyx5Q0FBeUMsNE1BQTRNLDhQQUE4UCxpQkFBaUIsVUFBVSxpQkFBaUIsZ0JBQWdCLE9BQU8sazVCQUFrNUIsV0FBVyxLQUFLLDROQUE0Tiw4UUFBOFEsdVRBQXVULDZCQUE2QixxVkFBcVYsaUJBQWlCLFVBQVUsSUFBSSwwQ0FBMEMsdUJBQXVCLCtCQUErQixHQUFHLHNDQUFzQyx1QkFBdUIsd0JBQXdCLEdBQUcsaURBQWlELHVCQUF1QixvQ0FBb0MsR0FBRyxxQ0FBcUMsWUFBWSxxQkFBcUIsbUlBQW1JLHVHQUF1RyxzTkFBc04sbU9BQW1PLG9PQUFvTywrQ0FBK0MsdUJBQXVCLFFBQVEsNERBQTRELGdFQUFnRSxvQkFBb0Isb0RBQW9ELDREQUE0RCw4QkFBOEIsc1FBQXNRLGtCQUFrQixrRUFBa0UsUUFBUSxHQUFHLEdBQUcsb0NBQW9DLFdBQVcsc0hBQXNILGVBQWUsOEJBQThCLG1DQUFtQyxzRkFBc0Ysa0RBQWtELG1EQUFtRCxpS0FBaUssdUNBQXVDLDRCQUE0QixxQ0FBcUMsTUFBTSxxQ0FBcUMsT0FBTyxnSEFBZ0gsd0NBQXdDLFdBQVcsR0FBRyxzRUFBc0UsNEVBQTRFLDhDQUE4Qyx1TkFBdU4sS0FBSyw4Q0FBOEMsV0FBVywyQkFBMkIsV0FBVyx3TEFBd0wsaUVBQWlFLHFPQUFxTyxLQUFLLDRDQUE0QyxXQUFXLEdBQUcsc0lBQXNJLDZLQUE2SyxxREFBcUQsMkRBQTJELEtBQUssb0RBQW9ELFVBQVUsMk1BQTJNLDZOQUE2TixxREFBcUQscUJBQXFCLHFDQUFxQyxPQUFPLHlEQUF5RCxHQUFHLEdBQUcsMkRBQTJELDhMQUE4TCxzREFBc0Qsa0RBQWtELG1FQUFtRSxPQUFPLGVBQWUsSUFBSSxNQUFNLHdEQUF3RCw4TEFBOEwsZ0VBQWdFLG9CQUFvQixlQUFlLGlDQUFpQyxHQUFHLG1EQUFtRCxzREFBc0QsT0FBTyxpS0FBaUssTUFBTSxxRUFBcUUsbU9BQW1PLGlEQUFpRCxVQUFVLHVJQUF1SSxzSEFBc0gsOENBQThDLGNBQWMsa0JBQWtCLDREQUE0RCxNQUFNLHVEQUF1RCxNQUFNLDZEQUE2RCxNQUFNLHdEQUF3RCxxQkFBcUIsc0NBQXNDLE9BQU8sZUFBZSxHQUFHLEdBQUcsd0RBQXdELGlLQUFpSyw2REFBNkQsaURBQWlELGFBQWEsSUFBSSwyQkFBMkIsVUFBVSw4SUFBOEksMEJBQTBCLElBQUksK0ZBQStGLGtCQUFrQixpREFBaUQsNEpBQTRKLE1BQU0sdURBQXVELHlHQUF5RyxNQUFNLHVEQUF1RCxxSUFBcUksdUJBQXVCLGdKQUFnSix5Q0FBeUMsb0hBQW9ILGVBQWUsMkZBQTJGLEdBQUcsOENBQThDLDJEQUEyRCwwQkFBMEIsR0FBRyxNQUFNLDRCQUE0Qix5T0FBeU8sUUFBUSxlQUFlLFFBQVEseUZBQXlGLG1DQUFtQyxnQkFBZ0IsMkNBQTJDLGtGQUFrRixLQUFLLDRDQUE0QyxXQUFXLDBDQUEwQyx3RUFBd0Usd0NBQXdDLG9DQUFvQyxHQUFHLDhIQUE4SCxRQUFRLFlBQVksY0FBYyxpQkFBaUIsU0FBUywwQ0FBMEMsNkJBQTZCLGdCQUFnQixJQUFJLHlGQUF5RixzQ0FBc0MsaUZBQWlGLG1DQUFtQywyREFBMkQsV0FBVyw4QkFBOEIsRUFBRSwyQ0FBMkMsNENBQTRDLEtBQUsseUNBQXlDLFdBQVcsK0JBQStCLHdFQUF3RSx3Q0FBd0MsaUNBQWlDLEdBQUcsOEhBQThILFFBQVEsWUFBWSxjQUFjLGlCQUFpQixTQUFTLDBDQUEwQywwQkFBMEIsZ0JBQWdCLElBQUkseUZBQXlGLHVDQUF1QyxVQUFVLHlDQUF5QyxJQUFJLG1DQUFtQyxZQUFZLGNBQWMsK0NBQStDLFdBQVcsaU5BQWlOLGlPQUFpTyxHQUFHLHNDQUFzQyxrS0FBa0ssc0ZBQXNGLG9DQUFvQyw4R0FBOEcsR0FBRywwQ0FBMEMsV0FBVyxnT0FBZ08sOERBQThELHlEQUF5RCw4RUFBOEUsSUFBSSxzQ0FBc0MsMEZBQTBGLDJDQUEyQyxXQUFXLEdBQUcsMENBQTBDLCtHQUErRyxnSUFBZ0ksb0RBQW9ELEtBQUssK0JBQStCLGtMQUFrTCxzQ0FBc0MsTUFBTSxpREFBaUQsMENBQTBDLHFDQUFxQyxLQUFLLHVCQUF1QixXQUFXLGlNQUFpTSx5N0JBQXk3QixtSUFBbUksaU5BQWlOLHFCQUFxQiw2REFBNkQsaUJBQWlCLHNFQUFzRSwwQkFBMEIsdUVBQXVFLGdCQUFnQix3RUFBd0UsVUFBVSxtRkFBbUYsdUVBQXVFLCtCQUErQixHQUFHLCtDQUErQyxXQUFXLGtEQUFrRCx5QkFBeUIscURBQXFELHVHQUF1RyxxSUFBcUksbURBQW1ELE1BQU0sa0JBQWtCLG9EQUFvRCxJQUFJLG1FQUFtRSxrREFBa0QsMkRBQTJELHlDQUF5QywyR0FBMkcsbUJBQW1CLHdPQUF3TyxtREFBbUQseUJBQXlCLG1EQUFtRCx5QkFBeUIsa0RBQWtELHdCQUF3QixpREFBaUQsdUJBQXVCLGtEQUFrRCx3QkFBd0IsaURBQWlELHVCQUF1Qiw0REFBNEQsNkdBQTZHLG1CQUFtQixHQUFHLE1BQU0sTUFBTSwrQ0FBK0MsT0FBTyxxR0FBcUcsMkVBQTJFLDZJQUE2SSxzQ0FBc0MsNERBQTRELHFDQUFxQyxNQUFNLDBEQUEwRCxnREFBZ0QsTUFBTSxtRUFBbUUsaURBQWlELCtDQUErQywrQ0FBK0MsK0NBQStDLDhDQUE4QywrQ0FBK0MsNkNBQTZDLDhDQUE4Qyw2Q0FBNkMsd0RBQXdELG9DQUFvQyxNQUFNLDRDQUE0QyxxQ0FBcUMsTUFBTSwwREFBMEQsb0NBQW9DLE1BQU0sNENBQTRDLG1DQUFtQyxNQUFNLDJDQUEyQyxxQ0FBcUMsTUFBTSwwREFBMEQsd0NBQXdDLE1BQU0sZ0RBQWdELDhDQUE4QyxNQUFNLG1FQUFtRSw0Q0FBNEMsTUFBTSxpRUFBaUUsb0RBQW9ELE1BQU0seUVBQXlFLHFEQUFxRCxNQUFNLDBFQUEwRSxrREFBa0QsTUFBTSx1RUFBdUUsbURBQW1ELE1BQU0sd0VBQXdFLGlEQUFpRCxNQUFNLHNFQUFzRSw4Q0FBOEMsTUFBTSxtRUFBbUUsaURBQWlELE1BQU0sc0VBQXNFLDhDQUE4QyxNQUFNLG1FQUFtRSwyQ0FBMkMsTUFBTSxtREFBbUQsK0JBQStCLE1BQU0sdUNBQXVDLHNDQUFzQyxNQUFNLDhDQUE4QyxLQUFLLHVCQUF1QixrSUFBa0kseUJBQXlCLHdDQUF3QyxjQUFjLElBQUksYUFBYSxTQUFTLE1BQU0sY0FBYyxJQUFJLGNBQWMsU0FBUyxNQUFNLGNBQWMsTUFBTSxnRUFBZ0UsS0FBSyxjQUFjLCtCQUErQixHQUFHLGtCQUFrQixhQUFhLHdCQUF3QixxQkFBcUIsWUFBWSxnQkFBZ0IsSUFBSSxrQ0FBa0MsZ0VBQWdFLFlBQVksSUFBSSxjQUFjLG1CQUFtQixZQUFZLDREQUE0RCxLQUFLLEVBQUUsS0FBSyxrSEFBa0gsd0NBQXdDLGtCQUFrQixNQUFNLHlCQUF5QixvQkFBb0IsOEJBQThCLFNBQVMsa0NBQWtDLFNBQVMsMEVBQTBFLElBQUksU0FBUyx5Q0FBeUMsYUFBYSxNQUFNLDJCQUEyQixpQkFBaUIsTUFBTSxvQkFBb0IsMkJBQTJCLE1BQU0sK0JBQStCLFNBQVMsY0FBYyxTQUFTLFlBQVksUUFBUSxNQUFNLHFCQUFxQixPQUFPLGtDQUFrQyxvQkFBb0Isb0RBQW9ELElBQUksbUVBQW1FLGtEQUFrRCxtREFBbUQsZUFBZSxPQUFPLHNCQUFzQiwrQkFBK0IsMkNBQTJDLHlFQUF5RSxpS0FBaUssc0NBQXNDLGtWQUFrViwyQ0FBMkMsa0RBQWtELHdGQUF3RixTQUFTLDJCQUEyQiwwTUFBME0sU0FBUyxnRUFBZ0Usa0VBQWtFLHdDQUF3QywwR0FBMEcsc0VBQXNFLDRDQUE0QyxvS0FBb0ssc0VBQXNFLGtFQUFrRSwwQ0FBMEMsa0lBQWtJLHFCQUFxQixHQUFHLHFEQUFxRCxNQUFNLDBVQUEwVSw4R0FBOEcsZ0NBQWdDLHdEQUF3RCxvT0FBb08sc0RBQXNELE1BQU0sME9BQTBPLG9HQUFvRyxnQ0FBZ0Msb0RBQW9ELE1BQU0sc09BQXNPLHlHQUF5RyxnQ0FBZ0MscURBQXFELCtHQUErRyxrRkFBa0Ysd0VBQXdFLCtCQUErQixnTEFBZ0wsc0NBQXNDLElBQUksd1ZBQXdWLHdDQUF3QywrRkFBK0YsbUNBQW1DLHFCQUFxQixTQUFTLFNBQVMsU0FBUyw0Q0FBNEMsNEpBQTRKLHNDQUFzQywrREFBK0QsaURBQWlELHFCQUFxQixnREFBZ0Qsb0JBQW9CLEdBQUcsd0NBQXdDLFdBQVcsc0NBQXNDLHVEQUF1RCxHQUFHLG1DQUFtQyxXQUFXLHNEQUFzRCw2RkFBNkYsR0FBRyx5Q0FBeUMsV0FBVyw2TEFBNkwsZ0xBQWdMLGNBQWMsR0FBRyxHQUFHLDBDQUEwQyw4TEFBOEwsc0ZBQXNGLG9DQUFvQyw4R0FBOEcsR0FBRyx1Q0FBdUMsK0NBQStDLFVBQVUsd0xBQXdMLG1EQUFtRCxrSUFBa0ksdUVBQXVFLCtKQUErSiw2Q0FBNkMsMkRBQTJELDJPQUEyTyxpRUFBaUUsMENBQTBDLFVBQVUsMElBQTBJLG1EQUFtRCx3SEFBd0gsbUNBQW1DLGlJQUFpSSw4Q0FBOEMsd0pBQXdKLHVDQUF1QyxtQkFBbUIsNEpBQTRKLHNFQUFzRSxxTEFBcUwsTUFBTSwrTkFBK04sZUFBZSx3REFBd0QsMFBBQTBQLDRFQUE0RSxRQUFRLGdEQUFnRCxRQUFRLGFBQWEsNkRBQTZELG9TQUFvUyw4SEFBOEgsc0dBQXNHLHFHQUFxRyx1S0FBdUsscUdBQXFHLG1FQUFtRSw4Q0FBOEMsV0FBVywyR0FBMkcsK0NBQStDLDRCQUE0QiwyR0FBMkcscUpBQXFKLHFKQUFxSixFQUFFLDBDQUEwQyxXQUFXLHNIQUFzSCxzQ0FBc0MsbUJBQW1CLDRCQUE0QixnQkFBZ0IseUVBQXlFLG1CQUFtQixvQkFBb0IseUVBQXlFLGtCQUFrQix5R0FBeUcsRUFBRSxJQUFJLDBCQUEwQixtRkFBbUYsb1lBQW9ZLHFJQUFxSSxnbUJBQWdtQixjQUFjLG1CQUFtQixrQkFBa0IseUNBQXlDLHdCQUF3QixZQUFZLFdBQVcsNkJBQTZCLFdBQVcsS0FBSyxPQUFPLDhEQUE4RCx1Q0FBdUMseUdBQXlHLFNBQVMsRUFBRSxRQUFRLHdCQUF3QixzQ0FBc0MsRUFBRSxzRUFBc0UsRUFBRSwrQ0FBK0MsRUFBRSw0REFBNEQsRUFBRSxRQUFRLHdCQUF3QixxQ0FBcUMsRUFBRSx1Q0FBdUMsRUFBRSxPQUFPLHdCQUF3QixpRUFBaUUsRUFBRSxtRUFBbUUsRUFBRSxnQkFBZ0IsK0JBQStCLGtFQUFrRSxFQUFFLHFFQUFxRSxFQUFFLDhDQUE4QyxFQUFFLDREQUE0RCxFQUFFLGtCQUFrQixpQ0FBaUMsMEVBQTBFLEVBQUUsaURBQWlELEVBQUUsU0FBUyx5QkFBeUIsMEJBQTBCLHVDQUF1Qyx5RkFBeUYsR0FBRyxFQUFFLDJDQUEyQyx1UUFBdVEsOEJBQThCLG1qQkFBbWpCLEdBQUcsR0FBRyxHQUFHLHlDQUF5QyxtREFBbUQscVFBQXFRLHlDQUF5Qyx5Q0FBeUMsY0FBYyw0QkFBNEIsZ0JBQWdCLGtIQUFrSCwyRkFBMkYsY0FBYyxLQUFLLHVIQUF1SCxrQkFBa0IseUVBQXlFLHdGQUF3Rix5RUFBeUUseUJBQXlCLDJQQUEyUCwyQkFBMkIsZ0NBQWdDLG1RQUFtUSxzSEFBc0gseUJBQXlCLHVJQUF1SSw4REFBOEQsU0FBUyxrQkFBa0IsR0FBRyxHQUFHLHlDQUF5QyxXQUFXLGtFQUFrRSxRQUFRLHFvQkFBcW9CLFNBQVMsMlBBQTJQLDRCQUE0QixzREFBc0QsTUFBTSx3TkFBd04sNERBQTRELDZJQUE2SSxnSkFBZ0osZ0JBQWdCLHVDQUF1Qyx3Q0FBd0MsTUFBTSxzQkFBc0Isb0VBQW9FLG9FQUFvRSwrR0FBK0csMkJBQTJCLGlCQUFpQiw2Q0FBNkMsRUFBRSw2UkFBNlIsR0FBRyxnREFBZ0QsTUFBTSxvUEFBb1AsMklBQTJJLG1DQUFtQyw0Q0FBNEMsd0tBQXdLLHFDQUFxQyxtREFBbUQsb0RBQW9ELHNEQUFzRCxrRkFBa0YsMkNBQTJDLHFGQUFxRix5REFBeUQsK0VBQStFLHlCQUF5Qiw2SEFBNkgsMkJBQTJCLFFBQVEsc0pBQXNKLDBCQUEwQiwrQkFBK0IsaUNBQWlDLCtLQUErSyx3QkFBd0IsU0FBUyxxQ0FBcUMsdURBQXVELFVBQVUsOERBQThELDhDQUE4Qyw2RUFBNkUsZ0NBQWdDLDhCQUE4QixLQUFLLDhJQUE4SSwrSEFBK0gsb0VBQW9FLGtOQUFrTiwrR0FBK0csaUVBQWlFLHdDQUF3QyxXQUFXLGtDQUFrQyxzQ0FBc0MsNEJBQTRCLFVBQVUsR0FBRyxHQUFHLEdBQUcsaURBQWlELHFDQUFxQyxzQ0FBc0Msa0NBQWtDLHFCQUFxQixHQUFHLG1DQUFtQyxrQ0FBa0MscUJBQXFCLEdBQUcsZ0RBQWdELGtDQUFrQyxxQkFBcUIsR0FBRyxpREFBaUQsa0NBQWtDLHFCQUFxQixHQUFHLGlEQUFpRCxrQ0FBa0MscUJBQXFCLEdBQUcsc0RBQXNELHNFQUFzRSxxQkFBcUIsR0FBRywrQ0FBK0Msa0NBQWtDLHFCQUFxQixHQUFHLGdEQUFnRCxrQ0FBa0MscUJBQXFCLEdBQUcsK0NBQStDLGtDQUFrQyxxQkFBcUIsR0FBRyxvREFBb0Qsc0VBQXNFLHFCQUFxQixHQUFHLG1EQUFtRCxpQkFBaUIsa0RBQWtELDJCQUEyQixpREFBaUQsMkJBQTJCLDRDQUE0QywyQkFBMkIsa0RBQWtELDJCQUEyQixvQ0FBb0Msb0JBQW9CLDJDQUEyQyw0REFBNEQsK0JBQStCLDRSQUE0UixnQ0FBZ0MsaUdBQWlHLHVDQUF1Qyx5RUFBeUUsZ0NBQWdDLDRSQUE0UixpQ0FBaUMsaUdBQWlHLHVDQUF1Qyx5RUFBeUUsMkNBQTJDLHdDQUF3QyxrQ0FBa0MscUZBQXFGLHNDQUFzQyxvQ0FBb0Msa0NBQWtDLDhCQUE4QixtQ0FBbUMsK0JBQStCLHdDQUF3QyxvQ0FBb0MsbUNBQW1DLDBFQUEwRSw0Q0FBNEMsa0NBQWtDLGtDQUFrQyx3QkFBd0IsdUNBQXVDLHNGQUFzRiwyQ0FBMkMsMEZBQTBGLHNDQUFzQyxrQ0FBa0Msb0NBQW9DLHVNQUF1TSxtQ0FBbUMsRUFBRSwwQ0FBMEMsVUFBVSxnR0FBZ0csVUFBVSxnaUJBQWdpQix5Q0FBeUMsMERBQTBELG1CQUFtQixHQUFHLG9CQUFvQixlQUFlLGlEQUFpRCxnREFBZ0Qsb0pBQW9KLHNDQUFzQyxzRkFBc0YsNENBQTRDLHNGQUFzRix5Q0FBeUMsb0pBQW9KLCtCQUErQixtREFBbUQsdUNBQXVDLHlCQUF5Qix1Q0FBdUMseURBQXlELDZDQUE2QyxvQ0FBb0MsOENBQThDLG9HQUFvRyxpRUFBaUUsaUNBQWlDLDBHQUEwRywyQ0FBMkMseUNBQXlDLG1DQUFtQywrQkFBK0IsNkNBQTZDLHlDQUF5Qyx1Q0FBdUMsb0NBQW9DLHFDQUFxQyxvSUFBb0ksOENBQThDLDZGQUE2RiwwQ0FBMEMsa0VBQWtFLEtBQUssNkJBQTZCLFdBQVcsME5BQTBOLGtHQUFrRyw0VkFBNFYsaUZBQWlGLHNTQUFzUyx1RUFBdUUsMElBQTBJLHFKQUFxSixvWkFBb1osa01BQWtNLGdDQUFnQyxrUkFBa1IsdUVBQXVFLHlGQUF5RixRQUFRLDJFQUEyRSxFQUFFLGdGQUFnRixFQUFFLCtCQUErQixzQkFBc0Isc0ZBQXNGLG9aQUFvWixnREFBZ0QsRUFBRSxvQkFBb0Isc0JBQXNCLElBQUksZ0NBQWdDLDJHQUEyRyw4QkFBOEIsY0FBYyw0REFBNEQsU0FBUywrREFBK0Qsc0pBQXNKLDhEQUE4RCxpREFBaUQsMkJBQTJCLCtCQUErQix5QkFBeUIsMkNBQTJDLHFDQUFxQyx5Q0FBeUMsMENBQTBDLDJDQUEyQyw0Q0FBNEMsZ0RBQWdELGlEQUFpRCxxQ0FBcUMsc0NBQXNDLDBDQUEwQywyQ0FBMkMsbUNBQW1DLDZCQUE2QixvQ0FBb0MsOEJBQThCLHVDQUF1QyxpQ0FBaUMsZ0NBQWdDLE1BQU0sdUNBQXVDLHlDQUF5QyxtQ0FBbUMsS0FBSyxjQUFjLHdFQUF3RSx5Q0FBeUMsMENBQTBDLDBDQUEwQywwQ0FBMEMscUNBQXFDLHFDQUFxQyx1Q0FBdUMsdUNBQXVDLCtDQUErQywrQ0FBK0MsaURBQWlELGlEQUFpRCxnREFBZ0QsZ0RBQWdELCtDQUErQywrQ0FBK0MsdUNBQXVDLHVDQUF1QywwQ0FBMEMsMENBQTBDLCtCQUErQiwrQkFBK0Isb0NBQW9DLG9DQUFvQyxnQ0FBZ0MsZ0NBQWdDLHdDQUF3Qyx3Q0FBd0Msb0NBQW9DLG9DQUFvQyxzQ0FBc0Msc0NBQXNDLG1DQUFtQyxtQ0FBbUMsb0JBQW9CLFVBQVUscUJBQXFCLFVBQVUscUJBQXFCLG9OQUFvTixNQUFNLGlDQUFpQyxxQ0FBcUMsb0JBQW9CLEVBQUUsaUJBQWlCLDRGQUE0RixlQUFlLHdDQUF3QyxTQUFTLEVBQUUsbUJBQW1CLDhCQUE4QixxREFBcUQsMEJBQTBCLDZDQUE2QyxzQkFBc0IsNkRBQTZELFlBQVksZUFBZSxTQUFTLGlCQUFpQixpQ0FBaUMsaUJBQWlCLFlBQVksVUFBVSxzQkFBc0IsbUJBQW1CLGlEQUFpRCxrQkFBa0IsY0FBYyw0QkFBNEIsWUFBWSxxQkFBcUIsMkRBQTJELFFBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvemVnby1leHByZXNzLWVuZ2luZS13ZWJydG0vWmVnb0V4cHJlc3NXZWJSVE0uanM/OGIyYyJdLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz10KHJlcXVpcmUoXCJwcm90b2J1ZmpzL21pbmltYWxcIikpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXCJwcm90b2J1ZmpzL21pbmltYWxcIl0sdCk7ZWxzZXt2YXIgbixyPVwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP3QocmVxdWlyZShcInByb3RvYnVmanMvbWluaW1hbFwiKSk6dChlW1wicHJvdG9idWZqcy9taW5pbWFsXCJdKTtmb3IobiBpbiByKShcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzOmUpW25dPXJbbl19fShcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsKGZ1bmN0aW9uKGUpe3JldHVybiBuPVtmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHIsbyxpPShuPW4oNikpLlJlYWRlcixzPW4uV3JpdGVyLGE9bi51dGlsLGM9bi5yb290cy5kZWZhdWx0fHwobi5yb290cy5kZWZhdWx0PXt9KTtmdW5jdGlvbiB1KGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBsKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBoKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBwKGUpe2lmKHRoaXMuc3RyZWFtX2luZm89W10sdGhpcy5zdHJlYW1fbWl4X2luZm89W10sdGhpcy50cmFuc19zZXFzPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBkKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBfKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBmKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBnKGUpe2lmKHRoaXMudHJhbnNfc2VxX2FycmF5PVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBtKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiB5KGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiB2KGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBiKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBFKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBPKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBUKGUpe2lmKHRoaXMucmVkaXJlY3Rfc2VydmVyPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBTKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBSKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBrKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBDKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiB3KGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBOKGUpe2lmKHRoaXMubWVzc2FnZXM9W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEkoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIE0oZSl7aWYodGhpcy5tZXNzYWdlcz1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gTChlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gUChlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gQShlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gRChlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gSChlKXtpZih0aGlzLnRyYW5zX3NlcXM9W10sdGhpcy51c2VyX3RyYW5zX3NlcXM9W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIGooZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIHEoZSl7aWYodGhpcy50cmFuc19zZXFfYXJyYXk9W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFUoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEIoZSl7aWYodGhpcy51c2VyX2Jhc2ljX2xpc3Q9W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIHgoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEcoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFYoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIHooZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEYoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFcoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFooZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFkoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEsoZSl7aWYodGhpcy5zdHJlYW1faW5mbz1bXSx0aGlzLnN0cmVhbV9taXhfaW5mbz1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gWChlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gSihlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gUShlKXtpZih0aGlzLmRzdF91c2VybGlzdD1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gJChlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gZWUoZSl7aWYodGhpcy5kc3RfdXNlcmxpc3Q9W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIHRlKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBuZShlKXtpZih0aGlzLmRzdF91c2VybGlzdD1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gcmUoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIG9lKGUpe2lmKHRoaXMuZHN0X3VzZXJsaXN0PVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBpZShlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gc2UoZSl7aWYodGhpcy5kc3RfdXNlcmxpc3Q9W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIGFlKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBjZShlKXtpZih0aGlzLmRzdF91c2VybGlzdD1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gdWUoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIGxlKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBoZShlKXtpZih0aGlzLm1zZ19kYXRhPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBwZShlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gZGUoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIF9lKGUpe2lmKHRoaXMuc3RyZWFtX2luZm89W10sdGhpcy5zdHJlYW1fbWl4X2luZm89W10sdGhpcy50cmFuc19zZXFzPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBmZShlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gZ2UoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIG1lKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiB5ZShlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gdmUoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIGJlKGUpe2lmKHRoaXMucm9vbV9saXN0PVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBFZShlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gT2UoZSl7aWYodGhpcy5zdHJlYW1fbGlzdD1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gVGUoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFNlKGUpe2lmKHRoaXMudHJhbnNfc2VxX2FycmF5PVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBSZShlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24ga2UoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIENlKGUpe2lmKHRoaXMuZmV0Y2hfYXJyYXk9W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIHdlKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBOZShlKXtpZih0aGlzLnRyYW5zX2ZldGNoX3Jlc3VsdHM9W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEllKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBNZShlKXtpZih0aGlzLmZldGNoX2FycmF5PVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBMZShlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gUGUoZSl7aWYodGhpcy50cmFuc19mZXRjaF9yZXN1bHRzPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBBZShlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gRGUoZSl7aWYodGhpcy5tc2dzPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBIZShlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gamUoZSl7aWYodGhpcy5tc2dzPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBxZShlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gVWUoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEJlKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiB4ZShlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gR2UoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFZlKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiB6ZShlKXtpZih0aGlzLnVzZXJfbGlzdD1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gRmUoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFdlKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBaZShlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gWWUoZSl7aWYodGhpcy5zdHJlYW1faWRfbGlzdD1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gS2UoZSl7aWYodGhpcy5zdHJlYW1faW5mbz1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gWGUoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEplKGUpe2lmKHRoaXMubXNnX2RhdGE9W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFFlKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiAkZShlKXtpZih0aGlzLm1zZ19kYXRhPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBldChlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gdHQoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIG50KGUpe2lmKHRoaXMudHJhbnNfYXJyYXk9W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIHJ0KGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1jLnByb3RvX3N3aXRjaD0oKG49e30pLkNvbW1vblJzcD0odS5wcm90b3R5cGUucnNwX2hlYWQ9bnVsbCx1LmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IHUoZSl9LHUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJzcF9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicnNwX2hlYWRcIikmJmMucHJvdG9fc3dpdGNoLlJzcEhlYWQuZW5jb2RlKGUucnNwX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksdH0sdS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5wcm90b19zd2l0Y2guQ29tbW9uUnNwO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO28+Pj4zPT0xP3IucnNwX2hlYWQ9Yy5wcm90b19zd2l0Y2guUnNwSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTplLnNraXBUeXBlKDcmbyl9cmV0dXJuIHJ9LHUpLG4uUnNwSGVhZD0obC5wcm90b3R5cGUuY29kZT0wLGwucHJvdG90eXBlLm1lc3NhZ2U9XCJcIixsLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGwoZSl9LGwuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLmNvZGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJjb2RlXCIpJiZ0LnVpbnQzMig4KS51aW50MzIoZS5jb2RlKSxudWxsIT1lLm1lc3NhZ2UmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtZXNzYWdlXCIpJiZ0LnVpbnQzMigxOCkuc3RyaW5nKGUubWVzc2FnZSksdH0sbC5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5wcm90b19zd2l0Y2guUnNwSGVhZDtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLmNvZGU9ZS51aW50MzIoKTticmVhaztjYXNlIDI6ci5tZXNzYWdlPWUuc3RyaW5nKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxsKSxuLkxvZ2luUm9vbVJlcT0oaC5wcm90b3R5cGUuYXBwX2lkPTAsaC5wcm90b3R5cGUuaWRfbmFtZT1hLm5ld0J1ZmZlcihbXSksaC5wcm90b3R5cGUuZGV2aWNlX2lkPVwiXCIsaC5wcm90b3R5cGUudGVybV90eXBlPTAsaC5wcm90b3R5cGUubmV0X3R5cGU9MCxoLnByb3RvdHlwZS5zZGtfdmVyPTAsaC5wcm90b3R5cGUucHJvdG9fdmVyPTAsaC5wcm90b3R5cGUubmlja19uYW1lPWEubmV3QnVmZmVyKFtdKSxoLnByb3RvdHlwZS5jbGllbnRfc3RhbXA9YS5uZXdCdWZmZXIoW10pLGgucHJvdG90eXBlLmNyeXB0X3ZlcnNpb249MCxoLnByb3RvdHlwZS5rMV9zaWduPWEubmV3QnVmZmVyKFtdKSxoLnByb3RvdHlwZS5sb2dpbl90b2tlbj1hLm5ld0J1ZmZlcihbXSksaC5wcm90b3R5cGUucmVsb2dpbl90b2tlbj1hLm5ld0J1ZmZlcihbXSksaC5wcm90b3R5cGUucm9sZT0wLGgucHJvdG90eXBlLmxpdmVyb29tX3Nlc3Npb25faWQ9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITApOjAsaC5wcm90b3R5cGUucm9vbV9pZD1hLm5ld0J1ZmZlcihbXSksaC5wcm90b3R5cGUucm9vbV9uYW1lPWEubmV3QnVmZmVyKFtdKSxoLnByb3RvdHlwZS5iaXpfdHlwZT0wLGgucHJvdG90eXBlLnJvb21fY3JlYXRlX2ZsYWc9MCxoLnByb3RvdHlwZS51c2VyX3N0YXRlX2ZsYWc9MCxoLnByb3RvdHlwZS5sdl9rZXk9XCJcIixoLnByb3RvdHlwZS50aGlyZF90b2tlbj1hLm5ld0J1ZmZlcihbXSksaC5wcm90b3R5cGUuY2x1c3Rlcl9yZXE9MCxoLnByb3RvdHlwZS51c2VyX2NvdW50X2xpbWl0PTAsaC5wcm90b3R5cGUucmVsYXRlX3NlcnZpY2U9XCJcIixoLnByb3RvdHlwZS5iaXpfdmVyc2lvbj1cIlwiLGgucHJvdG90eXBlLmxvZ2luX2xvZ2ljPTAsaC5wcm90b3R5cGUuc2RrX2Nvbm5fdHlwZT0wLGguY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgaChlKX0saC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUuYXBwX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYXBwX2lkXCIpJiZ0LnVpbnQzMig4KS51aW50MzIoZS5hcHBfaWQpLG51bGwhPWUuaWRfbmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImlkX25hbWVcIikmJnQudWludDMyKDE4KS5ieXRlcyhlLmlkX25hbWUpLG51bGwhPWUuZGV2aWNlX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZGV2aWNlX2lkXCIpJiZ0LnVpbnQzMigyNikuc3RyaW5nKGUuZGV2aWNlX2lkKSxudWxsIT1lLnRlcm1fdHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRlcm1fdHlwZVwiKSYmdC51aW50MzIoMzIpLmludDMyKGUudGVybV90eXBlKSxudWxsIT1lLm5ldF90eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibmV0X3R5cGVcIikmJnQudWludDMyKDQwKS5pbnQzMihlLm5ldF90eXBlKSxudWxsIT1lLnNka192ZXImJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzZGtfdmVyXCIpJiZ0LnVpbnQzMig0OCkudWludDMyKGUuc2RrX3ZlciksbnVsbCE9ZS5wcm90b192ZXImJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJwcm90b192ZXJcIikmJnQudWludDMyKDU2KS5pbnQzMihlLnByb3RvX3ZlciksbnVsbCE9ZS5uaWNrX25hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuaWNrX25hbWVcIikmJnQudWludDMyKDY2KS5ieXRlcyhlLm5pY2tfbmFtZSksbnVsbCE9ZS5jbGllbnRfc3RhbXAmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJjbGllbnRfc3RhbXBcIikmJnQudWludDMyKDc0KS5ieXRlcyhlLmNsaWVudF9zdGFtcCksbnVsbCE9ZS5jcnlwdF92ZXJzaW9uJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY3J5cHRfdmVyc2lvblwiKSYmdC51aW50MzIoODApLnVpbnQzMihlLmNyeXB0X3ZlcnNpb24pLG51bGwhPWUuazFfc2lnbiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImsxX3NpZ25cIikmJnQudWludDMyKDkwKS5ieXRlcyhlLmsxX3NpZ24pLG51bGwhPWUubG9naW5fdG9rZW4mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJsb2dpbl90b2tlblwiKSYmdC51aW50MzIoOTgpLmJ5dGVzKGUubG9naW5fdG9rZW4pLG51bGwhPWUucmVsb2dpbl90b2tlbiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJlbG9naW5fdG9rZW5cIikmJnQudWludDMyKDEwNikuYnl0ZXMoZS5yZWxvZ2luX3Rva2VuKSxudWxsIT1lLnJvbGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyb2xlXCIpJiZ0LnVpbnQzMigxMTIpLnVpbnQzMihlLnJvbGUpLG51bGwhPWUubGl2ZXJvb21fc2Vzc2lvbl9pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImxpdmVyb29tX3Nlc3Npb25faWRcIikmJnQudWludDMyKDEyMCkudWludDY0KGUubGl2ZXJvb21fc2Vzc2lvbl9pZCksbnVsbCE9ZS5yb29tX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9vbV9pZFwiKSYmdC51aW50MzIoMTMwKS5ieXRlcyhlLnJvb21faWQpLG51bGwhPWUucm9vbV9uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9vbV9uYW1lXCIpJiZ0LnVpbnQzMigxMzgpLmJ5dGVzKGUucm9vbV9uYW1lKSxudWxsIT1lLmJpel90eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYml6X3R5cGVcIikmJnQudWludDMyKDE0NCkudWludDMyKGUuYml6X3R5cGUpLG51bGwhPWUucm9vbV9jcmVhdGVfZmxhZyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJvb21fY3JlYXRlX2ZsYWdcIikmJnQudWludDMyKDE1MikudWludDMyKGUucm9vbV9jcmVhdGVfZmxhZyksbnVsbCE9ZS51c2VyX3N0YXRlX2ZsYWcmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ1c2VyX3N0YXRlX2ZsYWdcIikmJnQudWludDMyKDE2MCkudWludDMyKGUudXNlcl9zdGF0ZV9mbGFnKSxudWxsIT1lLmx2X2tleSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImx2X2tleVwiKSYmdC51aW50MzIoMTcwKS5zdHJpbmcoZS5sdl9rZXkpLG51bGwhPWUudGhpcmRfdG9rZW4mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0aGlyZF90b2tlblwiKSYmdC51aW50MzIoMTc4KS5ieXRlcyhlLnRoaXJkX3Rva2VuKSxudWxsIT1lLmNsdXN0ZXJfcmVxJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY2x1c3Rlcl9yZXFcIikmJnQudWludDMyKDE4NCkudWludDMyKGUuY2x1c3Rlcl9yZXEpLG51bGwhPWUudXNlcl9jb3VudF9saW1pdCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInVzZXJfY291bnRfbGltaXRcIikmJnQudWludDMyKDE5MikudWludDMyKGUudXNlcl9jb3VudF9saW1pdCksbnVsbCE9ZS5yZWxhdGVfc2VydmljZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJlbGF0ZV9zZXJ2aWNlXCIpJiZ0LnVpbnQzMigyMDIpLnN0cmluZyhlLnJlbGF0ZV9zZXJ2aWNlKSxudWxsIT1lLmJpel92ZXJzaW9uJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYml6X3ZlcnNpb25cIikmJnQudWludDMyKDIxMCkuc3RyaW5nKGUuYml6X3ZlcnNpb24pLG51bGwhPWUubG9naW5fbG9naWMmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJsb2dpbl9sb2dpY1wiKSYmdC51aW50MzIoMjE2KS51aW50MzIoZS5sb2dpbl9sb2dpYyksbnVsbCE9ZS5zZGtfY29ubl90eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic2RrX2Nvbm5fdHlwZVwiKSYmdC51aW50MzIoMjI0KS5pbnQzMihlLnNka19jb25uX3R5cGUpLHR9LGguZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMucHJvdG9fc3dpdGNoLkxvZ2luUm9vbVJlcTtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLmFwcF9pZD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMjpyLmlkX25hbWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMzpyLmRldmljZV9pZD1lLnN0cmluZygpO2JyZWFrO2Nhc2UgNDpyLnRlcm1fdHlwZT1lLmludDMyKCk7YnJlYWs7Y2FzZSA1OnIubmV0X3R5cGU9ZS5pbnQzMigpO2JyZWFrO2Nhc2UgNjpyLnNka192ZXI9ZS51aW50MzIoKTticmVhaztjYXNlIDc6ci5wcm90b192ZXI9ZS5pbnQzMigpO2JyZWFrO2Nhc2UgODpyLm5pY2tfbmFtZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA5OnIuY2xpZW50X3N0YW1wPWUuYnl0ZXMoKTticmVhaztjYXNlIDEwOnIuY3J5cHRfdmVyc2lvbj1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTE6ci5rMV9zaWduPWUuYnl0ZXMoKTticmVhaztjYXNlIDEyOnIubG9naW5fdG9rZW49ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMTM6ci5yZWxvZ2luX3Rva2VuPWUuYnl0ZXMoKTticmVhaztjYXNlIDE0OnIucm9sZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTU6ci5saXZlcm9vbV9zZXNzaW9uX2lkPWUudWludDY0KCk7YnJlYWs7Y2FzZSAxNjpyLnJvb21faWQ9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMTc6ci5yb29tX25hbWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMTg6ci5iaXpfdHlwZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTk6ci5yb29tX2NyZWF0ZV9mbGFnPWUudWludDMyKCk7YnJlYWs7Y2FzZSAyMDpyLnVzZXJfc3RhdGVfZmxhZz1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMjE6ci5sdl9rZXk9ZS5zdHJpbmcoKTticmVhaztjYXNlIDIyOnIudGhpcmRfdG9rZW49ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMjM6ci5jbHVzdGVyX3JlcT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMjQ6ci51c2VyX2NvdW50X2xpbWl0PWUudWludDMyKCk7YnJlYWs7Y2FzZSAyNTpyLnJlbGF0ZV9zZXJ2aWNlPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAyNjpyLmJpel92ZXJzaW9uPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAyNzpyLmxvZ2luX2xvZ2ljPWUudWludDMyKCk7YnJlYWs7Y2FzZSAyODpyLnNka19jb25uX3R5cGU9ZS5pbnQzMigpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0saCksbi5Mb2dpblJvb21Sc3A9KHAucHJvdG90eXBlLnJzcF9oZWFkPW51bGwscC5wcm90b3R5cGUucm9vbV9pZD1hLm5ld0J1ZmZlcihbXSkscC5wcm90b3R5cGUuaGVhcnRiZWF0X2ludGVydmFsPTAscC5wcm90b3R5cGUuaGVhcnRiZWF0X3RpbWVvdXQ9MCxwLnByb3RvdHlwZS5yZXRfdGltZXN0YW1wPWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCExKTowLHAucHJvdG90eXBlLmNyeXB0X29wdGlvbj0wLHAucHJvdG90eXBlLmsyX3NpZ249YS5uZXdCdWZmZXIoW10pLHAucHJvdG90eXBlLmxpdmVyb29tX3Nlc3Npb25faWQ9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITApOjAscC5wcm90b3R5cGUubGl2ZXJvb21faGJfaW50ZXJ2YWw9MCxwLnByb3RvdHlwZS5saXZlcm9vbV9oYl90aW1lb3V0PTAscC5wcm90b3R5cGUuYW5jaG9yX2luZm89bnVsbCxwLnByb3RvdHlwZS5zdHJlYW1fc2VxPTAscC5wcm90b3R5cGUuc3RyZWFtX2luZm89YS5lbXB0eUFycmF5LHAucHJvdG90eXBlLnN0cmVhbV9mZXRjaF9mbGFnPTAscC5wcm90b3R5cGUubHZfa2V5PVwiXCIscC5wcm90b3R5cGUuenBfa2V5PVwiXCIscC5wcm90b3R5cGUub25saW5lX2NvdW50PTAscC5wcm90b3R5cGUuYmlnaW1fdGltZV93aW5kb3c9MCxwLnByb3RvdHlwZS5kYXRpX3RpbWVfd2luZG93PTAscC5wcm90b3R5cGUuY2x1c3Rlcl9uYW1lPVwiXCIscC5wcm90b3R5cGUucmVsb2dpbl90b2tlbj1hLm5ld0J1ZmZlcihbXSkscC5wcm90b3R5cGUuc3RyZWFtX21peF9pbmZvPWEuZW1wdHlBcnJheSxwLnByb3RvdHlwZS51c2VybGlzdF9tZXJnZV90aW1lb3V0PTAscC5wcm90b3R5cGUudXNlcmxpc3RfaW50ZXJ2YWw9MCxwLnByb3RvdHlwZS5yb29tX3Nlc3Npb25faWQ9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITApOjAscC5wcm90b3R5cGUudHJhbnNfc2Vxcz1hLmVtcHR5QXJyYXkscC5wcm90b3R5cGUuc3RyZWFtX2xpc3RfcHVzaF9tZXJnZV90aW1lb3V0PTAscC5wcm90b3R5cGUuc3RyZWFtX2xpc3RfaGJfd2FpdF9tZXJnZV90aW1lPTAscC5wcm90b3R5cGUudHJhbnNfbGlzdF9zZXE9MCxwLnByb3RvdHlwZS50b2tlbl9yZW1haW5fdGltZT0wLHAuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgcChlKX0scC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yc3BfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJzcF9oZWFkXCIpJiZjLnByb3RvX3N3aXRjaC5Sc3BIZWFkLmVuY29kZShlLnJzcF9oZWFkLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLG51bGwhPWUucm9vbV9pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJvb21faWRcIikmJnQudWludDMyKDE4KS5ieXRlcyhlLnJvb21faWQpLG51bGwhPWUuaGVhcnRiZWF0X2ludGVydmFsJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiaGVhcnRiZWF0X2ludGVydmFsXCIpJiZ0LnVpbnQzMigyNCkudWludDMyKGUuaGVhcnRiZWF0X2ludGVydmFsKSxudWxsIT1lLmhlYXJ0YmVhdF90aW1lb3V0JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiaGVhcnRiZWF0X3RpbWVvdXRcIikmJnQudWludDMyKDMyKS51aW50MzIoZS5oZWFydGJlYXRfdGltZW91dCksbnVsbCE9ZS5yZXRfdGltZXN0YW1wJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmV0X3RpbWVzdGFtcFwiKSYmdC51aW50MzIoNDApLmludDY0KGUucmV0X3RpbWVzdGFtcCksbnVsbCE9ZS5jcnlwdF9vcHRpb24mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJjcnlwdF9vcHRpb25cIikmJnQudWludDMyKDQ4KS51aW50MzIoZS5jcnlwdF9vcHRpb24pLG51bGwhPWUuazJfc2lnbiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImsyX3NpZ25cIikmJnQudWludDMyKDU4KS5ieXRlcyhlLmsyX3NpZ24pLG51bGwhPWUubGl2ZXJvb21fc2Vzc2lvbl9pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImxpdmVyb29tX3Nlc3Npb25faWRcIikmJnQudWludDMyKDY0KS51aW50NjQoZS5saXZlcm9vbV9zZXNzaW9uX2lkKSxudWxsIT1lLmxpdmVyb29tX2hiX2ludGVydmFsJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibGl2ZXJvb21faGJfaW50ZXJ2YWxcIikmJnQudWludDMyKDcyKS51aW50MzIoZS5saXZlcm9vbV9oYl9pbnRlcnZhbCksbnVsbCE9ZS5saXZlcm9vbV9oYl90aW1lb3V0JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibGl2ZXJvb21faGJfdGltZW91dFwiKSYmdC51aW50MzIoODApLnVpbnQzMihlLmxpdmVyb29tX2hiX3RpbWVvdXQpLG51bGwhPWUuYW5jaG9yX2luZm8mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJhbmNob3JfaW5mb1wiKSYmYy5wcm90b19zd2l0Y2guU3RBbmNob3JJbmZvLmVuY29kZShlLmFuY2hvcl9pbmZvLHQudWludDMyKDkwKS5mb3JrKCkpLmxkZWxpbSgpLG51bGwhPWUuc3RyZWFtX3NlcSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0cmVhbV9zZXFcIikmJnQudWludDMyKDk2KS51aW50MzIoZS5zdHJlYW1fc2VxKSxudWxsIT1lLnN0cmVhbV9pbmZvJiZlLnN0cmVhbV9pbmZvLmxlbmd0aClmb3IodmFyIG49MDtuPGUuc3RyZWFtX2luZm8ubGVuZ3RoOysrbiljLnByb3RvX3N3aXRjaC5TdFN0cmVhbUluZm8uZW5jb2RlKGUuc3RyZWFtX2luZm9bbl0sdC51aW50MzIoMTA2KS5mb3JrKCkpLmxkZWxpbSgpO2lmKG51bGwhPWUuc3RyZWFtX2ZldGNoX2ZsYWcmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fZmV0Y2hfZmxhZ1wiKSYmdC51aW50MzIoMTEyKS51aW50MzIoZS5zdHJlYW1fZmV0Y2hfZmxhZyksbnVsbCE9ZS5sdl9rZXkmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJsdl9rZXlcIikmJnQudWludDMyKDEyMikuc3RyaW5nKGUubHZfa2V5KSxudWxsIT1lLnpwX2tleSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInpwX2tleVwiKSYmdC51aW50MzIoMTMwKS5zdHJpbmcoZS56cF9rZXkpLG51bGwhPWUub25saW5lX2NvdW50JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib25saW5lX2NvdW50XCIpJiZ0LnVpbnQzMigxMzYpLnVpbnQzMihlLm9ubGluZV9jb3VudCksbnVsbCE9ZS5iaWdpbV90aW1lX3dpbmRvdyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImJpZ2ltX3RpbWVfd2luZG93XCIpJiZ0LnVpbnQzMigxNDQpLnVpbnQzMihlLmJpZ2ltX3RpbWVfd2luZG93KSxudWxsIT1lLmRhdGlfdGltZV93aW5kb3cmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJkYXRpX3RpbWVfd2luZG93XCIpJiZ0LnVpbnQzMigxNTIpLnVpbnQzMihlLmRhdGlfdGltZV93aW5kb3cpLG51bGwhPWUuY2x1c3Rlcl9uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY2x1c3Rlcl9uYW1lXCIpJiZ0LnVpbnQzMigxNjIpLnN0cmluZyhlLmNsdXN0ZXJfbmFtZSksbnVsbCE9ZS5yZWxvZ2luX3Rva2VuJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVsb2dpbl90b2tlblwiKSYmdC51aW50MzIoMTcwKS5ieXRlcyhlLnJlbG9naW5fdG9rZW4pLG51bGwhPWUuc3RyZWFtX21peF9pbmZvJiZlLnN0cmVhbV9taXhfaW5mby5sZW5ndGgpZm9yKG49MDtuPGUuc3RyZWFtX21peF9pbmZvLmxlbmd0aDsrK24pYy5wcm90b19zd2l0Y2guU3RTdHJlYW1JbmZvLmVuY29kZShlLnN0cmVhbV9taXhfaW5mb1tuXSx0LnVpbnQzMigxNzgpLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZS51c2VybGlzdF9tZXJnZV90aW1lb3V0JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidXNlcmxpc3RfbWVyZ2VfdGltZW91dFwiKSYmdC51aW50MzIoMTg0KS51aW50MzIoZS51c2VybGlzdF9tZXJnZV90aW1lb3V0KSxudWxsIT1lLnVzZXJsaXN0X2ludGVydmFsJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidXNlcmxpc3RfaW50ZXJ2YWxcIikmJnQudWludDMyKDE5MikudWludDMyKGUudXNlcmxpc3RfaW50ZXJ2YWwpLG51bGwhPWUucm9vbV9zZXNzaW9uX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9vbV9zZXNzaW9uX2lkXCIpJiZ0LnVpbnQzMigyMDApLnVpbnQ2NChlLnJvb21fc2Vzc2lvbl9pZCksbnVsbCE9ZS50cmFuc19zZXFzJiZlLnRyYW5zX3NlcXMubGVuZ3RoKWZvcihuPTA7bjxlLnRyYW5zX3NlcXMubGVuZ3RoOysrbiljLnByb3RvX3N3aXRjaC5TdFRyYW5zSW5mby5lbmNvZGUoZS50cmFuc19zZXFzW25dLHQudWludDMyKDIxMCkuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gbnVsbCE9ZS5zdHJlYW1fbGlzdF9wdXNoX21lcmdlX3RpbWVvdXQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fbGlzdF9wdXNoX21lcmdlX3RpbWVvdXRcIikmJnQudWludDMyKDIxNikudWludDMyKGUuc3RyZWFtX2xpc3RfcHVzaF9tZXJnZV90aW1lb3V0KSxudWxsIT1lLnN0cmVhbV9saXN0X2hiX3dhaXRfbWVyZ2VfdGltZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0cmVhbV9saXN0X2hiX3dhaXRfbWVyZ2VfdGltZVwiKSYmdC51aW50MzIoMjI0KS51aW50MzIoZS5zdHJlYW1fbGlzdF9oYl93YWl0X21lcmdlX3RpbWUpLG51bGwhPWUudHJhbnNfbGlzdF9zZXEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19saXN0X3NlcVwiKSYmdC51aW50MzIoMjMyKS51aW50MzIoZS50cmFuc19saXN0X3NlcSksbnVsbCE9ZS50b2tlbl9yZW1haW5fdGltZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRva2VuX3JlbWFpbl90aW1lXCIpJiZ0LnVpbnQzMigyNDApLnVpbnQzMihlLnRva2VuX3JlbWFpbl90aW1lKSx0fSxwLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLnByb3RvX3N3aXRjaC5Mb2dpblJvb21Sc3A7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yc3BfaGVhZD1jLnByb3RvX3N3aXRjaC5Sc3BIZWFkLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgMjpyLnJvb21faWQ9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMzpyLmhlYXJ0YmVhdF9pbnRlcnZhbD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNDpyLmhlYXJ0YmVhdF90aW1lb3V0PWUudWludDMyKCk7YnJlYWs7Y2FzZSA1OnIucmV0X3RpbWVzdGFtcD1lLmludDY0KCk7YnJlYWs7Y2FzZSA2OnIuY3J5cHRfb3B0aW9uPWUudWludDMyKCk7YnJlYWs7Y2FzZSA3OnIuazJfc2lnbj1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA4OnIubGl2ZXJvb21fc2Vzc2lvbl9pZD1lLnVpbnQ2NCgpO2JyZWFrO2Nhc2UgOTpyLmxpdmVyb29tX2hiX2ludGVydmFsPWUudWludDMyKCk7YnJlYWs7Y2FzZSAxMDpyLmxpdmVyb29tX2hiX3RpbWVvdXQ9ZS51aW50MzIoKTticmVhaztjYXNlIDExOnIuYW5jaG9yX2luZm89Yy5wcm90b19zd2l0Y2guU3RBbmNob3JJbmZvLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgMTI6ci5zdHJlYW1fc2VxPWUudWludDMyKCk7YnJlYWs7Y2FzZSAxMzpyLnN0cmVhbV9pbmZvJiZyLnN0cmVhbV9pbmZvLmxlbmd0aHx8KHIuc3RyZWFtX2luZm89W10pLHIuc3RyZWFtX2luZm8ucHVzaChjLnByb3RvX3N3aXRjaC5TdFN0cmVhbUluZm8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgMTQ6ci5zdHJlYW1fZmV0Y2hfZmxhZz1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTU6ci5sdl9rZXk9ZS5zdHJpbmcoKTticmVhaztjYXNlIDE2OnIuenBfa2V5PWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAxNzpyLm9ubGluZV9jb3VudD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTg6ci5iaWdpbV90aW1lX3dpbmRvdz1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTk6ci5kYXRpX3RpbWVfd2luZG93PWUudWludDMyKCk7YnJlYWs7Y2FzZSAyMDpyLmNsdXN0ZXJfbmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjE6ci5yZWxvZ2luX3Rva2VuPWUuYnl0ZXMoKTticmVhaztjYXNlIDIyOnIuc3RyZWFtX21peF9pbmZvJiZyLnN0cmVhbV9taXhfaW5mby5sZW5ndGh8fChyLnN0cmVhbV9taXhfaW5mbz1bXSksci5zdHJlYW1fbWl4X2luZm8ucHVzaChjLnByb3RvX3N3aXRjaC5TdFN0cmVhbUluZm8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgMjM6ci51c2VybGlzdF9tZXJnZV90aW1lb3V0PWUudWludDMyKCk7YnJlYWs7Y2FzZSAyNDpyLnVzZXJsaXN0X2ludGVydmFsPWUudWludDMyKCk7YnJlYWs7Y2FzZSAyNTpyLnJvb21fc2Vzc2lvbl9pZD1lLnVpbnQ2NCgpO2JyZWFrO2Nhc2UgMjY6ci50cmFuc19zZXFzJiZyLnRyYW5zX3NlcXMubGVuZ3RofHwoci50cmFuc19zZXFzPVtdKSxyLnRyYW5zX3NlcXMucHVzaChjLnByb3RvX3N3aXRjaC5TdFRyYW5zSW5mby5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSAyNzpyLnN0cmVhbV9saXN0X3B1c2hfbWVyZ2VfdGltZW91dD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMjg6ci5zdHJlYW1fbGlzdF9oYl93YWl0X21lcmdlX3RpbWU9ZS51aW50MzIoKTticmVhaztjYXNlIDI5OnIudHJhbnNfbGlzdF9zZXE9ZS51aW50MzIoKTticmVhaztjYXNlIDMwOnIudG9rZW5fcmVtYWluX3RpbWU9ZS51aW50MzIoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LHApLG4uU3RBbmNob3JJbmZvPShkLnByb3RvdHlwZS5hbmNob3JfaWRfbmFtZT1hLm5ld0J1ZmZlcihbXSksZC5wcm90b3R5cGUuYW5jaG9yX2lkPWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCEwKTowLGQucHJvdG90eXBlLmFuY2hvcl9uaWNrX25hbWU9YS5uZXdCdWZmZXIoW10pLGQuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgZChlKX0sZC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUuYW5jaG9yX2lkX25hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJhbmNob3JfaWRfbmFtZVwiKSYmdC51aW50MzIoMTApLmJ5dGVzKGUuYW5jaG9yX2lkX25hbWUpLG51bGwhPWUuYW5jaG9yX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYW5jaG9yX2lkXCIpJiZ0LnVpbnQzMigxNikudWludDY0KGUuYW5jaG9yX2lkKSxudWxsIT1lLmFuY2hvcl9uaWNrX25hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJhbmNob3Jfbmlja19uYW1lXCIpJiZ0LnVpbnQzMigyNikuYnl0ZXMoZS5hbmNob3Jfbmlja19uYW1lKSx0fSxkLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLnByb3RvX3N3aXRjaC5TdEFuY2hvckluZm87ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5hbmNob3JfaWRfbmFtZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAyOnIuYW5jaG9yX2lkPWUudWludDY0KCk7YnJlYWs7Y2FzZSAzOnIuYW5jaG9yX25pY2tfbmFtZT1lLmJ5dGVzKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxkKSxuLlN0U3RyZWFtSW5mbz0oXy5wcm90b3R5cGUuc3RyZWFtX2lkPWEubmV3QnVmZmVyKFtdKSxfLnByb3RvdHlwZS5zdHJlYW1fc2lkPVwiXCIsXy5wcm90b3R5cGUuaWRfbmFtZT1hLm5ld0J1ZmZlcihbXSksXy5wcm90b3R5cGUubmlja19uYW1lPWEubmV3QnVmZmVyKFtdKSxfLnByb3RvdHlwZS5jcmVhdGVfdGltZT1hLkxvbmc/YS5Mb25nLmZyb21CaXRzKDAsMCwhMSk6MCxfLnByb3RvdHlwZS5leHRyYV9pbmZvPWEubmV3QnVmZmVyKFtdKSxfLnByb3RvdHlwZS50aXRsZT1hLm5ld0J1ZmZlcihbXSksXy5wcm90b3R5cGUuc3RyZWFtX3Zlcj0wLF8ucHJvdG90eXBlLnN0cmVhbV9hdHRyPWEubmV3QnVmZmVyKFtdKSxfLnByb3RvdHlwZS5zdHJlYW1fc3JjPTAsXy5wcm90b3R5cGUuc3RyZWFtX3N0YXRlPTAsXy5wcm90b3R5cGUuc3RyZWFtX3R5cGU9MCxfLnByb3RvdHlwZS5zdHJlYW1fbmlkPTAsXy5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBfKGUpfSxfLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5zdHJlYW1faWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1faWRcIikmJnQudWludDMyKDEwKS5ieXRlcyhlLnN0cmVhbV9pZCksbnVsbCE9ZS5zdHJlYW1fc2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RyZWFtX3NpZFwiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLnN0cmVhbV9zaWQpLG51bGwhPWUuaWRfbmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImlkX25hbWVcIikmJnQudWludDMyKDI2KS5ieXRlcyhlLmlkX25hbWUpLG51bGwhPWUubmlja19uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibmlja19uYW1lXCIpJiZ0LnVpbnQzMigzNCkuYnl0ZXMoZS5uaWNrX25hbWUpLG51bGwhPWUuY3JlYXRlX3RpbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJjcmVhdGVfdGltZVwiKSYmdC51aW50MzIoNDEpLmZpeGVkNjQoZS5jcmVhdGVfdGltZSksbnVsbCE9ZS5leHRyYV9pbmZvJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZXh0cmFfaW5mb1wiKSYmdC51aW50MzIoNTApLmJ5dGVzKGUuZXh0cmFfaW5mbyksbnVsbCE9ZS50aXRsZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRpdGxlXCIpJiZ0LnVpbnQzMig1OCkuYnl0ZXMoZS50aXRsZSksbnVsbCE9ZS5zdHJlYW1fdmVyJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RyZWFtX3ZlclwiKSYmdC51aW50MzIoNjQpLnVpbnQzMihlLnN0cmVhbV92ZXIpLG51bGwhPWUuc3RyZWFtX2F0dHImJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fYXR0clwiKSYmdC51aW50MzIoNzQpLmJ5dGVzKGUuc3RyZWFtX2F0dHIpLG51bGwhPWUuc3RyZWFtX3NyYyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0cmVhbV9zcmNcIikmJnQudWludDMyKDgwKS51aW50MzIoZS5zdHJlYW1fc3JjKSxudWxsIT1lLnN0cmVhbV9zdGF0ZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0cmVhbV9zdGF0ZVwiKSYmdC51aW50MzIoODgpLnVpbnQzMihlLnN0cmVhbV9zdGF0ZSksbnVsbCE9ZS5zdHJlYW1fdHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0cmVhbV90eXBlXCIpJiZ0LnVpbnQzMig5NikudWludDMyKGUuc3RyZWFtX3R5cGUpLG51bGwhPWUuc3RyZWFtX25pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0cmVhbV9uaWRcIikmJnQudWludDMyKDEwNCkudWludDMyKGUuc3RyZWFtX25pZCksdH0sXy5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5wcm90b19zd2l0Y2guU3RTdHJlYW1JbmZvO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIuc3RyZWFtX2lkPWUuYnl0ZXMoKTticmVhaztjYXNlIDI6ci5zdHJlYW1fc2lkPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAzOnIuaWRfbmFtZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA0OnIubmlja19uYW1lPWUuYnl0ZXMoKTticmVhaztjYXNlIDU6ci5jcmVhdGVfdGltZT1lLmZpeGVkNjQoKTticmVhaztjYXNlIDY6ci5leHRyYV9pbmZvPWUuYnl0ZXMoKTticmVhaztjYXNlIDc6ci50aXRsZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA4OnIuc3RyZWFtX3Zlcj1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgOTpyLnN0cmVhbV9hdHRyPWUuYnl0ZXMoKTticmVhaztjYXNlIDEwOnIuc3RyZWFtX3NyYz1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTE6ci5zdHJlYW1fc3RhdGU9ZS51aW50MzIoKTticmVhaztjYXNlIDEyOnIuc3RyZWFtX3R5cGU9ZS51aW50MzIoKTticmVhaztjYXNlIDEzOnIuc3RyZWFtX25pZD1lLnVpbnQzMigpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sXyksbi5TdFRyYW5zU2VxSW5mbz0oZi5wcm90b3R5cGUudHJhbnNfdHlwZT1hLm5ld0J1ZmZlcihbXSksZi5wcm90b3R5cGUudHJhbnNfc2VxPTAsZi5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBmKGUpfSxmLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS50cmFuc190eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfdHlwZVwiKSYmdC51aW50MzIoMTApLmJ5dGVzKGUudHJhbnNfdHlwZSksbnVsbCE9ZS50cmFuc19zZXEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19zZXFcIikmJnQudWludDMyKDE2KS51aW50MzIoZS50cmFuc19zZXEpLHR9LGYuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMucHJvdG9fc3dpdGNoLlN0VHJhbnNTZXFJbmZvO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIudHJhbnNfdHlwZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAyOnIudHJhbnNfc2VxPWUudWludDMyKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxmKSxuLlN0VHJhbnNJbmZvPShnLnByb3RvdHlwZS50cmFuc19jaGFubmVsPWEubmV3QnVmZmVyKFtdKSxnLnByb3RvdHlwZS50cmFuc19zZXFfYXJyYXk9YS5lbXB0eUFycmF5LGcuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgZyhlKX0sZy5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS50cmFuc19jaGFubmVsJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfY2hhbm5lbFwiKSYmdC51aW50MzIoMTApLmJ5dGVzKGUudHJhbnNfY2hhbm5lbCksbnVsbCE9ZS50cmFuc19zZXFfYXJyYXkmJmUudHJhbnNfc2VxX2FycmF5Lmxlbmd0aClmb3IodmFyIG49MDtuPGUudHJhbnNfc2VxX2FycmF5Lmxlbmd0aDsrK24pYy5wcm90b19zd2l0Y2guU3RUcmFuc1NlcUluZm8uZW5jb2RlKGUudHJhbnNfc2VxX2FycmF5W25dLHQudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxnLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLnByb3RvX3N3aXRjaC5TdFRyYW5zSW5mbztlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnRyYW5zX2NoYW5uZWw9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMjpyLnRyYW5zX3NlcV9hcnJheSYmci50cmFuc19zZXFfYXJyYXkubGVuZ3RofHwoci50cmFuc19zZXFfYXJyYXk9W10pLHIudHJhbnNfc2VxX2FycmF5LnB1c2goYy5wcm90b19zd2l0Y2guU3RUcmFuc1NlcUluZm8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sZyksbi5Mb2dvdXRSb29tUmVxPShtLnByb3RvdHlwZS5sb2dvdXRfY29kZT0wLG0ucHJvdG90eXBlLmxvZ291dF9jaGVjaz1hLm5ld0J1ZmZlcihbXSksbS5wcm90b3R5cGUubGl2ZXJvb21fc2Vzc2lvbl9pZD1hLkxvbmc/YS5Mb25nLmZyb21CaXRzKDAsMCwhMCk6MCxtLnByb3RvdHlwZS5yb29tX2lkPWEubmV3QnVmZmVyKFtdKSxtLnByb3RvdHlwZS5yb2xlPTAsbS5wcm90b3R5cGUubmlja25hbWU9YS5uZXdCdWZmZXIoW10pLG0ucHJvdG90eXBlLmxvZ291dF9sb2dpYz0wLG0uY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgbShlKX0sbS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUubG9nb3V0X2NvZGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJsb2dvdXRfY29kZVwiKSYmdC51aW50MzIoOCkudWludDMyKGUubG9nb3V0X2NvZGUpLG51bGwhPWUubG9nb3V0X2NoZWNrJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibG9nb3V0X2NoZWNrXCIpJiZ0LnVpbnQzMigxOCkuYnl0ZXMoZS5sb2dvdXRfY2hlY2spLG51bGwhPWUubGl2ZXJvb21fc2Vzc2lvbl9pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImxpdmVyb29tX3Nlc3Npb25faWRcIikmJnQudWludDMyKDI0KS51aW50NjQoZS5saXZlcm9vbV9zZXNzaW9uX2lkKSxudWxsIT1lLnJvb21faWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyb29tX2lkXCIpJiZ0LnVpbnQzMigzNCkuYnl0ZXMoZS5yb29tX2lkKSxudWxsIT1lLnJvbGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyb2xlXCIpJiZ0LnVpbnQzMig0MCkudWludDMyKGUucm9sZSksbnVsbCE9ZS5uaWNrbmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm5pY2tuYW1lXCIpJiZ0LnVpbnQzMig1MCkuYnl0ZXMoZS5uaWNrbmFtZSksbnVsbCE9ZS5sb2dvdXRfbG9naWMmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJsb2dvdXRfbG9naWNcIikmJnQudWludDMyKDU2KS51aW50MzIoZS5sb2dvdXRfbG9naWMpLHR9LG0uZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMucHJvdG9fc3dpdGNoLkxvZ291dFJvb21SZXE7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5sb2dvdXRfY29kZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMjpyLmxvZ291dF9jaGVjaz1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAzOnIubGl2ZXJvb21fc2Vzc2lvbl9pZD1lLnVpbnQ2NCgpO2JyZWFrO2Nhc2UgNDpyLnJvb21faWQ9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgNTpyLnJvbGU9ZS51aW50MzIoKTticmVhaztjYXNlIDY6ci5uaWNrbmFtZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA3OnIubG9nb3V0X2xvZ2ljPWUudWludDMyKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxtKSxuLkxvZ291dFJvb21Sc3A9KHkucHJvdG90eXBlLnJzcF9oZWFkPW51bGwseS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyB5KGUpfSx5LmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yc3BfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJzcF9oZWFkXCIpJiZjLnByb3RvX3N3aXRjaC5Sc3BIZWFkLmVuY29kZShlLnJzcF9oZWFkLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLHR9LHkuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMucHJvdG9fc3dpdGNoLkxvZ291dFJvb21Sc3A7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7bz4+PjM9PTE/ci5yc3BfaGVhZD1jLnByb3RvX3N3aXRjaC5Sc3BIZWFkLmRlY29kZShlLGUudWludDMyKCkpOmUuc2tpcFR5cGUoNyZvKX1yZXR1cm4gcn0seSksbi5UY3BIYlJlcT0odi5wcm90b3R5cGUuaWRfbmFtZT1hLm5ld0J1ZmZlcihbXSksdi5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyB2KGUpfSx2LmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5pZF9uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiaWRfbmFtZVwiKSYmdC51aW50MzIoMTApLmJ5dGVzKGUuaWRfbmFtZSksdH0sdi5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5wcm90b19zd2l0Y2guVGNwSGJSZXE7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7bz4+PjM9PTE/ci5pZF9uYW1lPWUuYnl0ZXMoKTplLnNraXBUeXBlKDcmbyl9cmV0dXJuIHJ9LHYpLG4uVGNwSGJSc3A9KGIucHJvdG90eXBlLnJzcF9oZWFkPW51bGwsYi5wcm90b3R5cGUuaGVhcnRiZWF0X2ludGVydmFsPTAsYi5wcm90b3R5cGUuaGVhcnRiZWF0X3RpbWVvdXQ9MCxiLnByb3RvdHlwZS5zZXJ2ZXJfdGltZXN0YW1wPWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCExKTowLGIuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgYihlKX0sYi5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUucnNwX2hlYWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyc3BfaGVhZFwiKSYmYy5wcm90b19zd2l0Y2guUnNwSGVhZC5lbmNvZGUoZS5yc3BfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLmhlYXJ0YmVhdF9pbnRlcnZhbCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImhlYXJ0YmVhdF9pbnRlcnZhbFwiKSYmdC51aW50MzIoMTYpLnVpbnQzMihlLmhlYXJ0YmVhdF9pbnRlcnZhbCksbnVsbCE9ZS5oZWFydGJlYXRfdGltZW91dCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImhlYXJ0YmVhdF90aW1lb3V0XCIpJiZ0LnVpbnQzMigyNCkudWludDMyKGUuaGVhcnRiZWF0X3RpbWVvdXQpLG51bGwhPWUuc2VydmVyX3RpbWVzdGFtcCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlcnZlcl90aW1lc3RhbXBcIikmJnQudWludDMyKDMyKS5pbnQ2NChlLnNlcnZlcl90aW1lc3RhbXApLHR9LGIuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMucHJvdG9fc3dpdGNoLlRjcEhiUnNwO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIucnNwX2hlYWQ9Yy5wcm90b19zd2l0Y2guUnNwSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci5oZWFydGJlYXRfaW50ZXJ2YWw9ZS51aW50MzIoKTticmVhaztjYXNlIDM6ci5oZWFydGJlYXRfdGltZW91dD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNDpyLnNlcnZlcl90aW1lc3RhbXA9ZS5pbnQ2NCgpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sYiksbi5UZXJtVHlwZT0obz17fSwocj1PYmplY3QuY3JlYXRlKG8pKVtvWzBdPVwiVFRfTk9ORVwiXT0wLHJbb1sxXT1cIlRUX1BDXCJdPTEscltvWzJdPVwiVFRfSU9TXCJdPTIscltvWzNdPVwiVFRfQU5EUk9JRFwiXT0zLHJbb1s0XT1cIlRUX01BQ1wiXT00LHJbb1s1XT1cIlRUX0xJTlVYXCJdPTUscltvWzZdPVwiVFRfV0VCXCJdPTYscltvWzddPVwiVFRfTUlOSVBST0dSQU1cIl09NyxyW29bMzJdPVwiVFRfVU5LTk9XTlwiXT0zMixyKSxuLk5ldFR5cGU9KG89e30sKHI9T2JqZWN0LmNyZWF0ZShvKSlbb1swXT1cIk5UX05PTkVcIl09MCxyW29bMV09XCJOVF9MSU5FXCJdPTEscltvWzJdPVwiTlRfV0lGSVwiXT0yLHJbb1szXT1cIk5UXzJHXCJdPTMscltvWzRdPVwiTlRfM0dcIl09NCxyW29bNV09XCJOVF80R1wiXT01LHJbb1szMl09XCJOVF9VTktOT1dOXCJdPTMyLHIpLG4uUHJvZHVjdFR5cGU9KG89e30sKHI9T2JqZWN0LmNyZWF0ZShvKSlbb1swXT1cIlBST0RVQ1RfVFlQRV9OT05FXCJdPTAscltvWzFdPVwiUFJPRFVDVF9UWVBFX0xJVkVST09NXCJdPTEscltvWzJdPVwiUFJPRFVDVF9UWVBFX0lNXCJdPTIsciksbi5MaXZlcm9vbVByb3RvVmVyc2lvbj0obz17fSwocj1PYmplY3QuY3JlYXRlKG8pKVtvWzBdPVwiUFJPVE9fVkVSU0lPTl9OT05FXCJdPTAscltvWzEzMTA3Ml09XCJSUE9UT19WMDIwMDAwXCJdPTEzMTA3MixyKSxuLlNka0Nvbm5UeXBlPShvPXt9LChyPU9iamVjdC5jcmVhdGUobykpW29bMF09XCJTZGtDb25uVHlwZV9Ob25lXCJdPTAscltvWzFdPVwiU2RrQ29ublR5cGVfVGNwXCJdPTEscltvWzJdPVwiU2RrQ29ublR5cGVfV2Vic29ja2V0XCJdPTIsciksbi5IZWFkZXI9KEUucHJvdG90eXBlLmNtZD1cIlwiLEUucHJvdG90eXBlLnNlcT0wLEUucHJvdG90eXBlLnRpbWVzdGFtcD1hLkxvbmc/YS5Mb25nLmZyb21CaXRzKDAsMCwhMSk6MCxFLnByb3RvdHlwZS5hcHBfaWQ9MCxFLnByb3RvdHlwZS51c2VyX2lkPVwiXCIsRS5wcm90b3R5cGUuc2Vzc2lvbl9pZD1hLkxvbmc/YS5Mb25nLmZyb21CaXRzKDAsMCwhMSk6MCxFLnByb3RvdHlwZS51c2VyX25pZD1hLkxvbmc/YS5Mb25nLmZyb21CaXRzKDAsMCwhMSk6MCxFLnByb3RvdHlwZS5jb250cm9scz1hLm5ld0J1ZmZlcihbXSksRS5wcm90b3R5cGUucHJvZHVjdD0wLEUucHJvdG90eXBlLmZsYWdzPWEubmV3QnVmZmVyKFtdKSxFLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IEUoZSl9LEUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLmNtZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImNtZFwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLmNtZCksbnVsbCE9ZS5zZXEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzZXFcIikmJnQudWludDMyKDE2KS51aW50MzIoZS5zZXEpLG51bGwhPWUudGltZXN0YW1wJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidGltZXN0YW1wXCIpJiZ0LnVpbnQzMigyNCkuaW50NjQoZS50aW1lc3RhbXApLG51bGwhPWUuYXBwX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYXBwX2lkXCIpJiZ0LnVpbnQzMigzMikudWludDMyKGUuYXBwX2lkKSxudWxsIT1lLnVzZXJfaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ1c2VyX2lkXCIpJiZ0LnVpbnQzMig0Mikuc3RyaW5nKGUudXNlcl9pZCksbnVsbCE9ZS5zZXNzaW9uX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic2Vzc2lvbl9pZFwiKSYmdC51aW50MzIoNDgpLmludDY0KGUuc2Vzc2lvbl9pZCksbnVsbCE9ZS51c2VyX25pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInVzZXJfbmlkXCIpJiZ0LnVpbnQzMig1NikuaW50NjQoZS51c2VyX25pZCksbnVsbCE9ZS5jb250cm9scyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImNvbnRyb2xzXCIpJiZ0LnVpbnQzMig2NikuYnl0ZXMoZS5jb250cm9scyksbnVsbCE9ZS5wcm9kdWN0JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicHJvZHVjdFwiKSYmdC51aW50MzIoNzIpLmludDMyKGUucHJvZHVjdCksbnVsbCE9ZS5mbGFncyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImZsYWdzXCIpJiZ0LnVpbnQzMig4MikuYnl0ZXMoZS5mbGFncyksdH0sRS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5wcm90b19zd2l0Y2guSGVhZGVyO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIuY21kPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAyOnIuc2VxPWUudWludDMyKCk7YnJlYWs7Y2FzZSAzOnIudGltZXN0YW1wPWUuaW50NjQoKTticmVhaztjYXNlIDQ6ci5hcHBfaWQ9ZS51aW50MzIoKTticmVhaztjYXNlIDU6ci51c2VyX2lkPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSA2OnIuc2Vzc2lvbl9pZD1lLmludDY0KCk7YnJlYWs7Y2FzZSA3OnIudXNlcl9uaWQ9ZS5pbnQ2NCgpO2JyZWFrO2Nhc2UgODpyLmNvbnRyb2xzPWUuYnl0ZXMoKTticmVhaztjYXNlIDk6ci5wcm9kdWN0PWUuaW50MzIoKTticmVhaztjYXNlIDEwOnIuZmxhZ3M9ZS5ieXRlcygpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sRSksbi5QdXNoS2lja291dD0oTy5wcm90b3R5cGUucmVhc29uPTAsTy5wcm90b3R5cGUubWVzc2FnZT1cIlwiLE8ucHJvdG90eXBlLm5lZWRfcmVsb2dpbj0wLE8uY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgTyhlKX0sTy5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUucmVhc29uJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVhc29uXCIpJiZ0LnVpbnQzMig4KS51aW50MzIoZS5yZWFzb24pLG51bGwhPWUubWVzc2FnZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1lc3NhZ2VcIikmJnQudWludDMyKDE4KS5zdHJpbmcoZS5tZXNzYWdlKSxudWxsIT1lLm5lZWRfcmVsb2dpbiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm5lZWRfcmVsb2dpblwiKSYmdC51aW50MzIoMjQpLnVpbnQzMihlLm5lZWRfcmVsb2dpbiksdH0sTy5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5wcm90b19zd2l0Y2guUHVzaEtpY2tvdXQ7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yZWFzb249ZS51aW50MzIoKTticmVhaztjYXNlIDI6ci5tZXNzYWdlPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAzOnIubmVlZF9yZWxvZ2luPWUudWludDMyKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxPKSxuLlB1c2hSZWRpcmVjdDJTZGs9KFQucHJvdG90eXBlLnJlZGlyZWN0X3NlcnZlcj1hLmVtcHR5QXJyYXksVC5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBUKGUpfSxULmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJlZGlyZWN0X3NlcnZlciYmZS5yZWRpcmVjdF9zZXJ2ZXIubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5yZWRpcmVjdF9zZXJ2ZXIubGVuZ3RoOysrbil0LnVpbnQzMigxMCkuc3RyaW5nKGUucmVkaXJlY3Rfc2VydmVyW25dKTtyZXR1cm4gdH0sVC5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5wcm90b19zd2l0Y2guUHVzaFJlZGlyZWN0MlNkaztlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtvPj4+Mz09MT8oci5yZWRpcmVjdF9zZXJ2ZXImJnIucmVkaXJlY3Rfc2VydmVyLmxlbmd0aHx8KHIucmVkaXJlY3Rfc2VydmVyPVtdKSxyLnJlZGlyZWN0X3NlcnZlci5wdXNoKGUuc3RyaW5nKCkpKTplLnNraXBUeXBlKDcmbyl9cmV0dXJuIHJ9LFQpLG4uUHVzaFJlcT0oUy5wcm90b3R5cGUuaGVhZD1udWxsLFMucHJvdG90eXBlLm1zZ19ib2R5PWEubmV3QnVmZmVyKFtdKSxTLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFMoZSl9LFMuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLmhlYWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJoZWFkXCIpJiZjLnByb3RvX3N3aXRjaC5QdXNoUmVxSGVhZC5lbmNvZGUoZS5oZWFkLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLG51bGwhPWUubXNnX2JvZHkmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtc2dfYm9keVwiKSYmdC51aW50MzIoMTgpLmJ5dGVzKGUubXNnX2JvZHkpLHR9LFMuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMucHJvdG9fc3dpdGNoLlB1c2hSZXE7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5oZWFkPWMucHJvdG9fc3dpdGNoLlB1c2hSZXFIZWFkLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgMjpyLm1zZ19ib2R5PWUuYnl0ZXMoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LFMpLG4uUHVzaFJlcUhlYWQ9KFIucHJvdG90eXBlLnN1Yl9jbWQ9XCJcIixSLnByb3RvdHlwZS5zZW5kZXJfdXNlcl9pZD1cIlwiLFIucHJvdG90eXBlLnFvc19mbGFnPTAsUi5wcm90b3R5cGUubXNnX2lkPVwiXCIsUi5wcm90b3R5cGUuc2VuZF90aW1lPWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCExKTowLFIucHJvdG90eXBlLnJvb21faWQ9YS5uZXdCdWZmZXIoW10pLFIucHJvdG90eXBlLnNlbmRlcl91c2VyX25pZD1hLkxvbmc/YS5Mb25nLmZyb21CaXRzKDAsMCwhMCk6MCxSLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFIoZSl9LFIuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnN1Yl9jbWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdWJfY21kXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUuc3ViX2NtZCksbnVsbCE9ZS5zZW5kZXJfdXNlcl9pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlbmRlcl91c2VyX2lkXCIpJiZ0LnVpbnQzMigxOCkuc3RyaW5nKGUuc2VuZGVyX3VzZXJfaWQpLG51bGwhPWUucW9zX2ZsYWcmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJxb3NfZmxhZ1wiKSYmdC51aW50MzIoMjQpLnVpbnQzMihlLnFvc19mbGFnKSxudWxsIT1lLm1zZ19pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1zZ19pZFwiKSYmdC51aW50MzIoMzQpLnN0cmluZyhlLm1zZ19pZCksbnVsbCE9ZS5zZW5kX3RpbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzZW5kX3RpbWVcIikmJnQudWludDMyKDQwKS5pbnQ2NChlLnNlbmRfdGltZSksbnVsbCE9ZS5yb29tX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9vbV9pZFwiKSYmdC51aW50MzIoNTApLmJ5dGVzKGUucm9vbV9pZCksbnVsbCE9ZS5zZW5kZXJfdXNlcl9uaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzZW5kZXJfdXNlcl9uaWRcIikmJnQudWludDMyKDU2KS51aW50NjQoZS5zZW5kZXJfdXNlcl9uaWQpLHR9LFIuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMucHJvdG9fc3dpdGNoLlB1c2hSZXFIZWFkO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIuc3ViX2NtZD1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpyLnNlbmRlcl91c2VyX2lkPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAzOnIucW9zX2ZsYWc9ZS51aW50MzIoKTticmVhaztjYXNlIDQ6ci5tc2dfaWQ9ZS5zdHJpbmcoKTticmVhaztjYXNlIDU6ci5zZW5kX3RpbWU9ZS5pbnQ2NCgpO2JyZWFrO2Nhc2UgNjpyLnJvb21faWQ9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgNzpyLnNlbmRlcl91c2VyX25pZD1lLnVpbnQ2NCgpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sUiksbi5QdXNoUnNwPShrLnByb3RvdHlwZS5jb2RlPTAsay5wcm90b3R5cGUubWVzc2FnZT1cIlwiLGsucHJvdG90eXBlLnN1Yl9jbWQ9XCJcIixrLnByb3RvdHlwZS5tc2dfaWQ9XCJcIixrLnByb3RvdHlwZS5zZXJ2ZXJfc2VuZF90aW1lPWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCExKTowLGsuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgayhlKX0say5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUuY29kZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImNvZGVcIikmJnQudWludDMyKDgpLnVpbnQzMihlLmNvZGUpLG51bGwhPWUubWVzc2FnZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1lc3NhZ2VcIikmJnQudWludDMyKDE4KS5zdHJpbmcoZS5tZXNzYWdlKSxudWxsIT1lLnN1Yl9jbWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdWJfY21kXCIpJiZ0LnVpbnQzMigyNikuc3RyaW5nKGUuc3ViX2NtZCksbnVsbCE9ZS5tc2dfaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtc2dfaWRcIikmJnQudWludDMyKDM0KS5zdHJpbmcoZS5tc2dfaWQpLG51bGwhPWUuc2VydmVyX3NlbmRfdGltZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlcnZlcl9zZW5kX3RpbWVcIikmJnQudWludDMyKDQwKS5pbnQ2NChlLnNlcnZlcl9zZW5kX3RpbWUpLHR9LGsuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMucHJvdG9fc3dpdGNoLlB1c2hSc3A7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5jb2RlPWUudWludDMyKCk7YnJlYWs7Y2FzZSAyOnIubWVzc2FnZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMzpyLnN1Yl9jbWQ9ZS5zdHJpbmcoKTticmVhaztjYXNlIDQ6ci5tc2dfaWQ9ZS5zdHJpbmcoKTticmVhaztjYXNlIDU6ci5zZXJ2ZXJfc2VuZF90aW1lPWUuaW50NjQoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LGspLG4uTWVyZ2VQdXNoSGVhZD0oQy5wcm90b3R5cGUucW9zX2ZsYWc9MCxDLnByb3RvdHlwZS5zZW5kX3RpbWU9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITEpOjAsQy5wcm90b3R5cGUucm9vbV9pZD1hLm5ld0J1ZmZlcihbXSksQy5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBDKGUpfSxDLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5xb3NfZmxhZyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInFvc19mbGFnXCIpJiZ0LnVpbnQzMig4KS51aW50MzIoZS5xb3NfZmxhZyksbnVsbCE9ZS5zZW5kX3RpbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzZW5kX3RpbWVcIikmJnQudWludDMyKDE2KS5pbnQ2NChlLnNlbmRfdGltZSksbnVsbCE9ZS5yb29tX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9vbV9pZFwiKSYmdC51aW50MzIoMjYpLmJ5dGVzKGUucm9vbV9pZCksdH0sQy5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5wcm90b19zd2l0Y2guTWVyZ2VQdXNoSGVhZDtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnFvc19mbGFnPWUudWludDMyKCk7YnJlYWs7Y2FzZSAyOnIuc2VuZF90aW1lPWUuaW50NjQoKTticmVhaztjYXNlIDM6ci5yb29tX2lkPWUuYnl0ZXMoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LEMpLG4uTWVyZ2VQdXNoSW5mbz0ody5wcm90b3R5cGUuc3ViX2NtZD1cIlwiLHcucHJvdG90eXBlLnN1Yl9zZXE9MCx3LnByb3RvdHlwZS5zZW5kZXJfbmlkPWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCEwKTowLHcucHJvdG90eXBlLm1zZ19pZD1hLm5ld0J1ZmZlcihbXSksdy5wcm90b3R5cGUubXNnX2JvZHk9YS5uZXdCdWZmZXIoW10pLHcucHJvdG90eXBlLm1zZ190aW1lc3RhbXA9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITEpOjAsdy5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyB3KGUpfSx3LmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5zdWJfY21kJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3ViX2NtZFwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLnN1Yl9jbWQpLG51bGwhPWUuc3ViX3NlcSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN1Yl9zZXFcIikmJnQudWludDMyKDE2KS51aW50MzIoZS5zdWJfc2VxKSxudWxsIT1lLnNlbmRlcl9uaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzZW5kZXJfbmlkXCIpJiZ0LnVpbnQzMigyNCkudWludDY0KGUuc2VuZGVyX25pZCksbnVsbCE9ZS5tc2dfaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtc2dfaWRcIikmJnQudWludDMyKDM0KS5ieXRlcyhlLm1zZ19pZCksbnVsbCE9ZS5tc2dfYm9keSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1zZ19ib2R5XCIpJiZ0LnVpbnQzMig0MikuYnl0ZXMoZS5tc2dfYm9keSksbnVsbCE9ZS5tc2dfdGltZXN0YW1wJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibXNnX3RpbWVzdGFtcFwiKSYmdC51aW50MzIoNDgpLmludDY0KGUubXNnX3RpbWVzdGFtcCksdH0sdy5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5wcm90b19zd2l0Y2guTWVyZ2VQdXNoSW5mbztlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnN1Yl9jbWQ9ZS5zdHJpbmcoKTticmVhaztjYXNlIDI6ci5zdWJfc2VxPWUudWludDMyKCk7YnJlYWs7Y2FzZSAzOnIuc2VuZGVyX25pZD1lLnVpbnQ2NCgpO2JyZWFrO2Nhc2UgNDpyLm1zZ19pZD1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA1OnIubXNnX2JvZHk9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgNjpyLm1zZ190aW1lc3RhbXA9ZS5pbnQ2NCgpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sdyksbi5DbWRNZXJnZVB1c2hSZXE9KE4ucHJvdG90eXBlLmhlYWQ9bnVsbCxOLnByb3RvdHlwZS5tZXNzYWdlcz1hLmVtcHR5QXJyYXksTi5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBOKGUpfSxOLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLmhlYWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJoZWFkXCIpJiZjLnByb3RvX3N3aXRjaC5NZXJnZVB1c2hIZWFkLmVuY29kZShlLmhlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS5tZXNzYWdlcyYmZS5tZXNzYWdlcy5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLm1lc3NhZ2VzLmxlbmd0aDsrK24pYy5wcm90b19zd2l0Y2guTWVyZ2VQdXNoSW5mby5lbmNvZGUoZS5tZXNzYWdlc1tuXSx0LnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gdH0sTi5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5wcm90b19zd2l0Y2guQ21kTWVyZ2VQdXNoUmVxO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIuaGVhZD1jLnByb3RvX3N3aXRjaC5NZXJnZVB1c2hIZWFkLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgMjpyLm1lc3NhZ2VzJiZyLm1lc3NhZ2VzLmxlbmd0aHx8KHIubWVzc2FnZXM9W10pLHIubWVzc2FnZXMucHVzaChjLnByb3RvX3N3aXRjaC5NZXJnZVB1c2hJbmZvLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LE4pLG4uQ21kTWVyZ2VQdXNoUnNwSW5mbz0oSS5wcm90b3R5cGUuc3ViX2NtZD1cIlwiLEkucHJvdG90eXBlLnN1Yl9zZXE9MCxJLnByb3RvdHlwZS5tc2dfaWQ9YS5uZXdCdWZmZXIoW10pLEkuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgSShlKX0sSS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUuc3ViX2NtZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN1Yl9jbWRcIikmJnQudWludDMyKDEwKS5zdHJpbmcoZS5zdWJfY21kKSxudWxsIT1lLnN1Yl9zZXEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdWJfc2VxXCIpJiZ0LnVpbnQzMigxNikudWludDMyKGUuc3ViX3NlcSksbnVsbCE9ZS5tc2dfaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtc2dfaWRcIikmJnQudWludDMyKDI2KS5ieXRlcyhlLm1zZ19pZCksdH0sSS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5wcm90b19zd2l0Y2guQ21kTWVyZ2VQdXNoUnNwSW5mbztlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnN1Yl9jbWQ9ZS5zdHJpbmcoKTticmVhaztjYXNlIDI6ci5zdWJfc2VxPWUudWludDMyKCk7YnJlYWs7Y2FzZSAzOnIubXNnX2lkPWUuYnl0ZXMoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LEkpLG4uQ21kTWVyZ2VQdXNoUnNwPShNLnByb3RvdHlwZS5tZXNzYWdlcz1hLmVtcHR5QXJyYXksTS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBNKGUpfSxNLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLm1lc3NhZ2VzJiZlLm1lc3NhZ2VzLmxlbmd0aClmb3IodmFyIG49MDtuPGUubWVzc2FnZXMubGVuZ3RoOysrbiljLnByb3RvX3N3aXRjaC5DbWRNZXJnZVB1c2hSc3BJbmZvLmVuY29kZShlLm1lc3NhZ2VzW25dLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxNLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLnByb3RvX3N3aXRjaC5DbWRNZXJnZVB1c2hSc3A7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7bz4+PjM9PTE/KHIubWVzc2FnZXMmJnIubWVzc2FnZXMubGVuZ3RofHwoci5tZXNzYWdlcz1bXSksci5tZXNzYWdlcy5wdXNoKGMucHJvdG9fc3dpdGNoLkNtZE1lcmdlUHVzaFJzcEluZm8uZGVjb2RlKGUsZS51aW50MzIoKSkpKTplLnNraXBUeXBlKDcmbyl9cmV0dXJuIHJ9LE0pLG4pLGMubGl2ZXJvb21fY3M9KChvPXt9KS5SZXFIZWFkPShMLnByb3RvdHlwZS5yb29tX2lkPVwiXCIsTC5wcm90b3R5cGUudXNlcl9zZXNzaW9uX2lkPWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCEwKTowLEwucHJvdG90eXBlLnJvb21fc2Vzc2lvbl9pZD1hLkxvbmc/YS5Mb25nLmZyb21CaXRzKDAsMCwhMCk6MCxMLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IEwoZSl9LEwuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJvb21faWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyb29tX2lkXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUucm9vbV9pZCksbnVsbCE9ZS51c2VyX3Nlc3Npb25faWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ1c2VyX3Nlc3Npb25faWRcIikmJnQudWludDMyKDE2KS51aW50NjQoZS51c2VyX3Nlc3Npb25faWQpLG51bGwhPWUucm9vbV9zZXNzaW9uX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9vbV9zZXNzaW9uX2lkXCIpJiZ0LnVpbnQzMigyNCkudWludDY0KGUucm9vbV9zZXNzaW9uX2lkKSx0fSxMLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlJlcUhlYWQ7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yb29tX2lkPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAyOnIudXNlcl9zZXNzaW9uX2lkPWUudWludDY0KCk7YnJlYWs7Y2FzZSAzOnIucm9vbV9zZXNzaW9uX2lkPWUudWludDY0KCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxMKSxvLlJzcEhlYWQ9KFAucHJvdG90eXBlLmNvZGU9MCxQLnByb3RvdHlwZS5tZXNzYWdlPVwiXCIsUC5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBQKGUpfSxQLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5jb2RlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY29kZVwiKSYmdC51aW50MzIoOCkudWludDMyKGUuY29kZSksbnVsbCE9ZS5tZXNzYWdlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibWVzc2FnZVwiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLm1lc3NhZ2UpLHR9LFAuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuUnNwSGVhZDtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLmNvZGU9ZS51aW50MzIoKTticmVhaztjYXNlIDI6ci5tZXNzYWdlPWUuc3RyaW5nKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxQKSxvLkNvbW1vblJzcD0oQS5wcm90b3R5cGUucnNwX2hlYWQ9bnVsbCxBLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IEEoZSl9LEEuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJzcF9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicnNwX2hlYWRcIikmJmMubGl2ZXJvb21fY3MuUnNwSGVhZC5lbmNvZGUoZS5yc3BfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSx0fSxBLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLkNvbW1vblJzcDtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtvPj4+Mz09MT9yLnJzcF9oZWFkPWMubGl2ZXJvb21fY3MuUnNwSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTplLnNraXBUeXBlKDcmbyl9cmV0dXJuIHJ9LEEpLG8uSGJSZXE9KEQucHJvdG90eXBlLnJlcV9oZWFkPW51bGwsRC5wcm90b3R5cGUucm9sZT0wLEQucHJvdG90eXBlLmx2X2tleT1cIlwiLEQuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgRChlKX0sRC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUucmVxX2hlYWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyZXFfaGVhZFwiKSYmYy5saXZlcm9vbV9jcy5SZXFIZWFkLmVuY29kZShlLnJlcV9oZWFkLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLG51bGwhPWUucm9sZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJvbGVcIikmJnQudWludDMyKDE2KS51aW50MzIoZS5yb2xlKSxudWxsIT1lLmx2X2tleSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImx2X2tleVwiKSYmdC51aW50MzIoMjYpLnN0cmluZyhlLmx2X2tleSksdH0sRC5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5IYlJlcTtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnJlcV9oZWFkPWMubGl2ZXJvb21fY3MuUmVxSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci5yb2xlPWUudWludDMyKCk7YnJlYWs7Y2FzZSAzOnIubHZfa2V5PWUuc3RyaW5nKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxEKSxvLkhiUnNwPShILnByb3RvdHlwZS5yc3BfaGVhZD1udWxsLEgucHJvdG90eXBlLnJldF90aW1lc3RhbXA9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITEpOjAsSC5wcm90b3R5cGUuaGJfaW50ZXJ2YWw9MCxILnByb3RvdHlwZS5oYl90aW1lb3V0PTAsSC5wcm90b3R5cGUuc3RyZWFtX3NlcT0wLEgucHJvdG90eXBlLnVzZXJfc2VxPWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCExKTowLEgucHJvdG90eXBlLm9ubGluZV9jb3VudD0wLEgucHJvdG90eXBlLmJpZ2ltX3RpbWVfd2luZG93PTAsSC5wcm90b3R5cGUuZGF0aV90aW1lX3dpbmRvdz1hLkxvbmc/YS5Mb25nLmZyb21CaXRzKDAsMCwhMSk6MCxILnByb3RvdHlwZS50cmFuc19zZXFzPWEuZW1wdHlBcnJheSxILnByb3RvdHlwZS51c2VyX3RyYW5zX3NlcXM9YS5lbXB0eUFycmF5LEgucHJvdG90eXBlLlN0cmVhbVJlZnJlc2g9MCxILnByb3RvdHlwZS50cmFuc19saXN0X3NlcT0wLEguY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgSChlKX0sSC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yc3BfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJzcF9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJzcEhlYWQuZW5jb2RlKGUucnNwX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS5yZXRfdGltZXN0YW1wJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmV0X3RpbWVzdGFtcFwiKSYmdC51aW50MzIoMTYpLmludDY0KGUucmV0X3RpbWVzdGFtcCksbnVsbCE9ZS5oYl9pbnRlcnZhbCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImhiX2ludGVydmFsXCIpJiZ0LnVpbnQzMigyNCkudWludDMyKGUuaGJfaW50ZXJ2YWwpLG51bGwhPWUuaGJfdGltZW91dCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImhiX3RpbWVvdXRcIikmJnQudWludDMyKDMyKS51aW50MzIoZS5oYl90aW1lb3V0KSxudWxsIT1lLnN0cmVhbV9zZXEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fc2VxXCIpJiZ0LnVpbnQzMig0MCkudWludDMyKGUuc3RyZWFtX3NlcSksbnVsbCE9ZS51c2VyX3NlcSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInVzZXJfc2VxXCIpJiZ0LnVpbnQzMig0OCkuaW50NjQoZS51c2VyX3NlcSksbnVsbCE9ZS5vbmxpbmVfY291bnQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJvbmxpbmVfY291bnRcIikmJnQudWludDMyKDU2KS51aW50MzIoZS5vbmxpbmVfY291bnQpLG51bGwhPWUuYmlnaW1fdGltZV93aW5kb3cmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJiaWdpbV90aW1lX3dpbmRvd1wiKSYmdC51aW50MzIoNjQpLnVpbnQzMihlLmJpZ2ltX3RpbWVfd2luZG93KSxudWxsIT1lLmRhdGlfdGltZV93aW5kb3cmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJkYXRpX3RpbWVfd2luZG93XCIpJiZ0LnVpbnQzMig3MikuaW50NjQoZS5kYXRpX3RpbWVfd2luZG93KSxudWxsIT1lLnRyYW5zX3NlcXMmJmUudHJhbnNfc2Vxcy5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLnRyYW5zX3NlcXMubGVuZ3RoOysrbiljLmxpdmVyb29tX2NzLlN0VHJhbnNDaGFubmVsU2VxLmVuY29kZShlLnRyYW5zX3NlcXNbbl0sdC51aW50MzIoODIpLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZS51c2VyX3RyYW5zX3NlcXMmJmUudXNlcl90cmFuc19zZXFzLmxlbmd0aClmb3Iobj0wO248ZS51c2VyX3RyYW5zX3NlcXMubGVuZ3RoOysrbiljLmxpdmVyb29tX2NzLlN0VHJhbnNDaGFubmVsU2VxLmVuY29kZShlLnVzZXJfdHJhbnNfc2Vxc1tuXSx0LnVpbnQzMig5MCkuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gbnVsbCE9ZS5TdHJlYW1SZWZyZXNoJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiU3RyZWFtUmVmcmVzaFwiKSYmdC51aW50MzIoOTYpLnVpbnQzMihlLlN0cmVhbVJlZnJlc2gpLG51bGwhPWUudHJhbnNfbGlzdF9zZXEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19saXN0X3NlcVwiKSYmdC51aW50MzIoMTA0KS51aW50MzIoZS50cmFuc19saXN0X3NlcSksdH0sSC5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5IYlJzcDtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnJzcF9oZWFkPWMubGl2ZXJvb21fY3MuUnNwSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci5yZXRfdGltZXN0YW1wPWUuaW50NjQoKTticmVhaztjYXNlIDM6ci5oYl9pbnRlcnZhbD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNDpyLmhiX3RpbWVvdXQ9ZS51aW50MzIoKTticmVhaztjYXNlIDU6ci5zdHJlYW1fc2VxPWUudWludDMyKCk7YnJlYWs7Y2FzZSA2OnIudXNlcl9zZXE9ZS5pbnQ2NCgpO2JyZWFrO2Nhc2UgNzpyLm9ubGluZV9jb3VudD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgODpyLmJpZ2ltX3RpbWVfd2luZG93PWUudWludDMyKCk7YnJlYWs7Y2FzZSA5OnIuZGF0aV90aW1lX3dpbmRvdz1lLmludDY0KCk7YnJlYWs7Y2FzZSAxMDpyLnRyYW5zX3NlcXMmJnIudHJhbnNfc2Vxcy5sZW5ndGh8fChyLnRyYW5zX3NlcXM9W10pLHIudHJhbnNfc2Vxcy5wdXNoKGMubGl2ZXJvb21fY3MuU3RUcmFuc0NoYW5uZWxTZXEuZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgMTE6ci51c2VyX3RyYW5zX3NlcXMmJnIudXNlcl90cmFuc19zZXFzLmxlbmd0aHx8KHIudXNlcl90cmFuc19zZXFzPVtdKSxyLnVzZXJfdHJhbnNfc2Vxcy5wdXNoKGMubGl2ZXJvb21fY3MuU3RUcmFuc0NoYW5uZWxTZXEuZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgMTI6ci5TdHJlYW1SZWZyZXNoPWUudWludDMyKCk7YnJlYWs7Y2FzZSAxMzpyLnRyYW5zX2xpc3Rfc2VxPWUudWludDMyKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxIKSxvLlN0VHJhbnNTZXE9KGoucHJvdG90eXBlLnRyYW5zX3R5cGU9YS5uZXdCdWZmZXIoW10pLGoucHJvdG90eXBlLnRyYW5zX3NlcT0wLGouY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgaihlKX0sai5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUudHJhbnNfdHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRyYW5zX3R5cGVcIikmJnQudWludDMyKDEwKS5ieXRlcyhlLnRyYW5zX3R5cGUpLG51bGwhPWUudHJhbnNfc2VxJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfc2VxXCIpJiZ0LnVpbnQzMigxNikudWludDMyKGUudHJhbnNfc2VxKSx0fSxqLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlN0VHJhbnNTZXE7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci50cmFuc190eXBlPWUuYnl0ZXMoKTticmVhaztjYXNlIDI6ci50cmFuc19zZXE9ZS51aW50MzIoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LGopLG8uU3RUcmFuc0NoYW5uZWxTZXE9KHEucHJvdG90eXBlLnRyYW5zX2NoYW5uZWw9YS5uZXdCdWZmZXIoW10pLHEucHJvdG90eXBlLnRyYW5zX3NlcV9hcnJheT1hLmVtcHR5QXJyYXkscS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBxKGUpfSxxLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnRyYW5zX2NoYW5uZWwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19jaGFubmVsXCIpJiZ0LnVpbnQzMigxMCkuYnl0ZXMoZS50cmFuc19jaGFubmVsKSxudWxsIT1lLnRyYW5zX3NlcV9hcnJheSYmZS50cmFuc19zZXFfYXJyYXkubGVuZ3RoKWZvcih2YXIgbj0wO248ZS50cmFuc19zZXFfYXJyYXkubGVuZ3RoOysrbiljLmxpdmVyb29tX2NzLlN0VHJhbnNTZXEuZW5jb2RlKGUudHJhbnNfc2VxX2FycmF5W25dLHQudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxxLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlN0VHJhbnNDaGFubmVsU2VxO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIudHJhbnNfY2hhbm5lbD1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAyOnIudHJhbnNfc2VxX2FycmF5JiZyLnRyYW5zX3NlcV9hcnJheS5sZW5ndGh8fChyLnRyYW5zX3NlcV9hcnJheT1bXSksci50cmFuc19zZXFfYXJyYXkucHVzaChjLmxpdmVyb29tX2NzLlN0VHJhbnNTZXEuZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0scSksby5Vc2VybGlzdFJlcT0oVS5wcm90b3R5cGUucmVxX2hlYWQ9bnVsbCxVLnByb3RvdHlwZS5zb3J0X3R5cGU9MCxVLnByb3RvdHlwZS51c2VyX2luZGV4PTAsVS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBVKGUpfSxVLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yZXFfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJlcV9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJlcUhlYWQuZW5jb2RlKGUucmVxX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS5zb3J0X3R5cGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzb3J0X3R5cGVcIikmJnQudWludDMyKDE2KS51aW50MzIoZS5zb3J0X3R5cGUpLG51bGwhPWUudXNlcl9pbmRleCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInVzZXJfaW5kZXhcIikmJnQudWludDMyKDI0KS51aW50MzIoZS51c2VyX2luZGV4KSx0fSxVLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlVzZXJsaXN0UmVxO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIucmVxX2hlYWQ9Yy5saXZlcm9vbV9jcy5SZXFIZWFkLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgMjpyLnNvcnRfdHlwZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMzpyLnVzZXJfaW5kZXg9ZS51aW50MzIoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LFUpLG8uVXNlcmxpc3RSc3A9KEIucHJvdG90eXBlLnJzcF9oZWFkPW51bGwsQi5wcm90b3R5cGUuc2VydmVyX3VzZXJfc2VxPWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCEwKTowLEIucHJvdG90eXBlLnNlcnZlcl91c2VyX2luZGV4PWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCExKTowLEIucHJvdG90eXBlLnJldF91c2VyX2luZGV4PWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCExKTowLEIucHJvdG90eXBlLnVzZXJfYmFzaWNfbGlzdD1hLmVtcHR5QXJyYXksQi5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBCKGUpfSxCLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJzcF9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicnNwX2hlYWRcIikmJmMubGl2ZXJvb21fY3MuUnNwSGVhZC5lbmNvZGUoZS5yc3BfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnNlcnZlcl91c2VyX3NlcSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlcnZlcl91c2VyX3NlcVwiKSYmdC51aW50MzIoMTYpLnVpbnQ2NChlLnNlcnZlcl91c2VyX3NlcSksbnVsbCE9ZS5zZXJ2ZXJfdXNlcl9pbmRleCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlcnZlcl91c2VyX2luZGV4XCIpJiZ0LnVpbnQzMigyNCkuaW50NjQoZS5zZXJ2ZXJfdXNlcl9pbmRleCksbnVsbCE9ZS5yZXRfdXNlcl9pbmRleCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJldF91c2VyX2luZGV4XCIpJiZ0LnVpbnQzMigzMikuaW50NjQoZS5yZXRfdXNlcl9pbmRleCksbnVsbCE9ZS51c2VyX2Jhc2ljX2xpc3QmJmUudXNlcl9iYXNpY19saXN0Lmxlbmd0aClmb3IodmFyIG49MDtuPGUudXNlcl9iYXNpY19saXN0Lmxlbmd0aDsrK24pYy5saXZlcm9vbV9jcy5TdFVzZXJCYXNpY0RlZi5lbmNvZGUoZS51c2VyX2Jhc2ljX2xpc3Rbbl0sdC51aW50MzIoNDIpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LEIuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuVXNlcmxpc3RSc3A7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yc3BfaGVhZD1jLmxpdmVyb29tX2NzLlJzcEhlYWQuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSAyOnIuc2VydmVyX3VzZXJfc2VxPWUudWludDY0KCk7YnJlYWs7Y2FzZSAzOnIuc2VydmVyX3VzZXJfaW5kZXg9ZS5pbnQ2NCgpO2JyZWFrO2Nhc2UgNDpyLnJldF91c2VyX2luZGV4PWUuaW50NjQoKTticmVhaztjYXNlIDU6ci51c2VyX2Jhc2ljX2xpc3QmJnIudXNlcl9iYXNpY19saXN0Lmxlbmd0aHx8KHIudXNlcl9iYXNpY19saXN0PVtdKSxyLnVzZXJfYmFzaWNfbGlzdC5wdXNoKGMubGl2ZXJvb21fY3MuU3RVc2VyQmFzaWNEZWYuZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sQiksby5TdFVzZXJCYXNpY0RlZj0oeC5wcm90b3R5cGUuaWRfbmFtZT1hLm5ld0J1ZmZlcihbXSkseC5wcm90b3R5cGUubmlja19uYW1lPWEubmV3QnVmZmVyKFtdKSx4LnByb3RvdHlwZS5yb2xlPTAseC5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyB4KGUpfSx4LmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5pZF9uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiaWRfbmFtZVwiKSYmdC51aW50MzIoMTApLmJ5dGVzKGUuaWRfbmFtZSksbnVsbCE9ZS5uaWNrX25hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuaWNrX25hbWVcIikmJnQudWludDMyKDE4KS5ieXRlcyhlLm5pY2tfbmFtZSksbnVsbCE9ZS5yb2xlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9sZVwiKSYmdC51aW50MzIoMjQpLnVpbnQzMihlLnJvbGUpLHR9LHguZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU3RVc2VyQmFzaWNEZWY7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5pZF9uYW1lPWUuYnl0ZXMoKTticmVhaztjYXNlIDI6ci5uaWNrX25hbWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMzpyLnJvbGU9ZS51aW50MzIoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LHgpLG8uU3RyZWFtQWRkUmVxPShHLnByb3RvdHlwZS5yZXFfaGVhZD1udWxsLEcucHJvdG90eXBlLnN0cmVhbV9pZD1hLm5ld0J1ZmZlcihbXSksRy5wcm90b3R5cGUudGl0bGU9YS5uZXdCdWZmZXIoW10pLEcucHJvdG90eXBlLnN0cmVhbV9hdHRyPWEubmV3QnVmZmVyKFtdKSxHLnByb3RvdHlwZS5leHRyYV9pbmZvPWEubmV3QnVmZmVyKFtdKSxHLnByb3RvdHlwZS5jbGllbnRfcmVxX3NlcT0wLEcucHJvdG90eXBlLm5pY2tuYW1lPWEubmV3QnVmZmVyKFtdKSxHLnByb3RvdHlwZS5sb2dpbl9tb2RlPTAsRy5wcm90b3R5cGUuc3RyZWFtX3R5cGU9MCxHLnByb3RvdHlwZS50aGlyZF90b2tlbj1hLm5ld0J1ZmZlcihbXSksRy5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBHKGUpfSxHLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yZXFfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJlcV9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJlcUhlYWQuZW5jb2RlKGUucmVxX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS5zdHJlYW1faWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1faWRcIikmJnQudWludDMyKDE4KS5ieXRlcyhlLnN0cmVhbV9pZCksbnVsbCE9ZS50aXRsZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRpdGxlXCIpJiZ0LnVpbnQzMigyNikuYnl0ZXMoZS50aXRsZSksbnVsbCE9ZS5zdHJlYW1fYXR0ciYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0cmVhbV9hdHRyXCIpJiZ0LnVpbnQzMigzNCkuYnl0ZXMoZS5zdHJlYW1fYXR0ciksbnVsbCE9ZS5leHRyYV9pbmZvJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZXh0cmFfaW5mb1wiKSYmdC51aW50MzIoNDIpLmJ5dGVzKGUuZXh0cmFfaW5mbyksbnVsbCE9ZS5jbGllbnRfcmVxX3NlcSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImNsaWVudF9yZXFfc2VxXCIpJiZ0LnVpbnQzMig0OCkudWludDMyKGUuY2xpZW50X3JlcV9zZXEpLG51bGwhPWUubmlja25hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuaWNrbmFtZVwiKSYmdC51aW50MzIoNTgpLmJ5dGVzKGUubmlja25hbWUpLG51bGwhPWUubG9naW5fbW9kZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImxvZ2luX21vZGVcIikmJnQudWludDMyKDY0KS51aW50MzIoZS5sb2dpbl9tb2RlKSxudWxsIT1lLnN0cmVhbV90eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RyZWFtX3R5cGVcIikmJnQudWludDMyKDcyKS51aW50MzIoZS5zdHJlYW1fdHlwZSksbnVsbCE9ZS50aGlyZF90b2tlbiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRoaXJkX3Rva2VuXCIpJiZ0LnVpbnQzMig4MikuYnl0ZXMoZS50aGlyZF90b2tlbiksdH0sRy5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5TdHJlYW1BZGRSZXE7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yZXFfaGVhZD1jLmxpdmVyb29tX2NzLlJlcUhlYWQuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSAyOnIuc3RyZWFtX2lkPWUuYnl0ZXMoKTticmVhaztjYXNlIDM6ci50aXRsZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA0OnIuc3RyZWFtX2F0dHI9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgNTpyLmV4dHJhX2luZm89ZS5ieXRlcygpO2JyZWFrO2Nhc2UgNjpyLmNsaWVudF9yZXFfc2VxPWUudWludDMyKCk7YnJlYWs7Y2FzZSA3OnIubmlja25hbWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgODpyLmxvZ2luX21vZGU9ZS51aW50MzIoKTticmVhaztjYXNlIDk6ci5zdHJlYW1fdHlwZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTA6ci50aGlyZF90b2tlbj1lLmJ5dGVzKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxHKSxvLlN0cmVhbUFkZFJzcD0oVi5wcm90b3R5cGUucnNwX2hlYWQ9bnVsbCxWLnByb3RvdHlwZS5zdHJlYW1fc2VxPTAsVi5wcm90b3R5cGUuc3RyZWFtX3NpZD1cIlwiLFYucHJvdG90eXBlLnN0cmVhbV92ZXI9MCxWLnByb3RvdHlwZS5zdHJlYW1fbmlkPTAsVi5wcm90b3R5cGUudG9rZW5fcmVtYWluX3RpbWU9MCxWLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFYoZSl9LFYuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJzcF9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicnNwX2hlYWRcIikmJmMubGl2ZXJvb21fY3MuUnNwSGVhZC5lbmNvZGUoZS5yc3BfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnN0cmVhbV9zZXEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fc2VxXCIpJiZ0LnVpbnQzMigxNikudWludDMyKGUuc3RyZWFtX3NlcSksbnVsbCE9ZS5zdHJlYW1fc2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RyZWFtX3NpZFwiKSYmdC51aW50MzIoMjYpLnN0cmluZyhlLnN0cmVhbV9zaWQpLG51bGwhPWUuc3RyZWFtX3ZlciYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0cmVhbV92ZXJcIikmJnQudWludDMyKDMyKS51aW50MzIoZS5zdHJlYW1fdmVyKSxudWxsIT1lLnN0cmVhbV9uaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fbmlkXCIpJiZ0LnVpbnQzMig0MCkudWludDMyKGUuc3RyZWFtX25pZCksbnVsbCE9ZS50b2tlbl9yZW1haW5fdGltZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRva2VuX3JlbWFpbl90aW1lXCIpJiZ0LnVpbnQzMig0OCkudWludDMyKGUudG9rZW5fcmVtYWluX3RpbWUpLHR9LFYuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU3RyZWFtQWRkUnNwO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIucnNwX2hlYWQ9Yy5saXZlcm9vbV9jcy5Sc3BIZWFkLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgMjpyLnN0cmVhbV9zZXE9ZS51aW50MzIoKTticmVhaztjYXNlIDM6ci5zdHJlYW1fc2lkPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSA0OnIuc3RyZWFtX3Zlcj1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNTpyLnN0cmVhbV9uaWQ9ZS51aW50MzIoKTticmVhaztjYXNlIDY6ci50b2tlbl9yZW1haW5fdGltZT1lLnVpbnQzMigpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sViksby5TdHJlYW1EZWxldGVSZXE9KHoucHJvdG90eXBlLnJlcV9oZWFkPW51bGwsei5wcm90b3R5cGUuc3RyZWFtX3NpZD1cIlwiLHoucHJvdG90eXBlLnN0cmVhbV9pZD1hLm5ld0J1ZmZlcihbXSksei5wcm90b3R5cGUuY2xpZW50X3JlcV9zZXE9MCx6LmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IHooZSl9LHouZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJlcV9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVxX2hlYWRcIikmJmMubGl2ZXJvb21fY3MuUmVxSGVhZC5lbmNvZGUoZS5yZXFfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnN0cmVhbV9zaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fc2lkXCIpJiZ0LnVpbnQzMigxOCkuc3RyaW5nKGUuc3RyZWFtX3NpZCksbnVsbCE9ZS5zdHJlYW1faWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1faWRcIikmJnQudWludDMyKDI2KS5ieXRlcyhlLnN0cmVhbV9pZCksbnVsbCE9ZS5jbGllbnRfcmVxX3NlcSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImNsaWVudF9yZXFfc2VxXCIpJiZ0LnVpbnQzMigzMikudWludDMyKGUuY2xpZW50X3JlcV9zZXEpLHR9LHouZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU3RyZWFtRGVsZXRlUmVxO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIucmVxX2hlYWQ9Yy5saXZlcm9vbV9jcy5SZXFIZWFkLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgMjpyLnN0cmVhbV9zaWQ9ZS5zdHJpbmcoKTticmVhaztjYXNlIDM6ci5zdHJlYW1faWQ9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgNDpyLmNsaWVudF9yZXFfc2VxPWUudWludDMyKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSx6KSxvLlN0cmVhbURlbGV0ZVJzcD0oRi5wcm90b3R5cGUucnNwX2hlYWQ9bnVsbCxGLnByb3RvdHlwZS5zdHJlYW1fc2VxPTAsRi5wcm90b3R5cGUuc3RyZWFtX3Zlcj0wLEYuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgRihlKX0sRi5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUucnNwX2hlYWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyc3BfaGVhZFwiKSYmYy5saXZlcm9vbV9jcy5Sc3BIZWFkLmVuY29kZShlLnJzcF9oZWFkLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLG51bGwhPWUuc3RyZWFtX3NlcSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0cmVhbV9zZXFcIikmJnQudWludDMyKDE2KS51aW50MzIoZS5zdHJlYW1fc2VxKSxudWxsIT1lLnN0cmVhbV92ZXImJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fdmVyXCIpJiZ0LnVpbnQzMigyNCkudWludDMyKGUuc3RyZWFtX3ZlciksdH0sRi5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5TdHJlYW1EZWxldGVSc3A7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yc3BfaGVhZD1jLmxpdmVyb29tX2NzLlJzcEhlYWQuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSAyOnIuc3RyZWFtX3NlcT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMzpyLnN0cmVhbV92ZXI9ZS51aW50MzIoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LEYpLG8uU3RyZWFtVXBkYXRlUmVxPShXLnByb3RvdHlwZS5yZXFfaGVhZD1udWxsLFcucHJvdG90eXBlLnN0cmVhbV9zaWQ9XCJcIixXLnByb3RvdHlwZS5zdHJlYW1faWQ9YS5uZXdCdWZmZXIoW10pLFcucHJvdG90eXBlLnRpdGxlPWEubmV3QnVmZmVyKFtdKSxXLnByb3RvdHlwZS5zdHJlYW1fYXR0cj1hLm5ld0J1ZmZlcihbXSksVy5wcm90b3R5cGUuZXh0cmFfaW5mbz1hLm5ld0J1ZmZlcihbXSksVy5wcm90b3R5cGUuY2xpZW50X3JlcV9zZXE9MCxXLnByb3RvdHlwZS5uaWNrbmFtZT1hLm5ld0J1ZmZlcihbXSksVy5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBXKGUpfSxXLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yZXFfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJlcV9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJlcUhlYWQuZW5jb2RlKGUucmVxX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS5zdHJlYW1fc2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RyZWFtX3NpZFwiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLnN0cmVhbV9zaWQpLG51bGwhPWUuc3RyZWFtX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RyZWFtX2lkXCIpJiZ0LnVpbnQzMigyNikuYnl0ZXMoZS5zdHJlYW1faWQpLG51bGwhPWUudGl0bGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0aXRsZVwiKSYmdC51aW50MzIoMzQpLmJ5dGVzKGUudGl0bGUpLG51bGwhPWUuc3RyZWFtX2F0dHImJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fYXR0clwiKSYmdC51aW50MzIoNDIpLmJ5dGVzKGUuc3RyZWFtX2F0dHIpLG51bGwhPWUuZXh0cmFfaW5mbyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImV4dHJhX2luZm9cIikmJnQudWludDMyKDUwKS5ieXRlcyhlLmV4dHJhX2luZm8pLG51bGwhPWUuY2xpZW50X3JlcV9zZXEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJjbGllbnRfcmVxX3NlcVwiKSYmdC51aW50MzIoNTYpLnVpbnQzMihlLmNsaWVudF9yZXFfc2VxKSxudWxsIT1lLm5pY2tuYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibmlja25hbWVcIikmJnQudWludDMyKDY2KS5ieXRlcyhlLm5pY2tuYW1lKSx0fSxXLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlN0cmVhbVVwZGF0ZVJlcTtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnJlcV9oZWFkPWMubGl2ZXJvb21fY3MuUmVxSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci5zdHJlYW1fc2lkPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAzOnIuc3RyZWFtX2lkPWUuYnl0ZXMoKTticmVhaztjYXNlIDQ6ci50aXRsZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA1OnIuc3RyZWFtX2F0dHI9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgNjpyLmV4dHJhX2luZm89ZS5ieXRlcygpO2JyZWFrO2Nhc2UgNzpyLmNsaWVudF9yZXFfc2VxPWUudWludDMyKCk7YnJlYWs7Y2FzZSA4OnIubmlja25hbWU9ZS5ieXRlcygpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sVyksby5TdHJlYW1VcGRhdGVSc3A9KFoucHJvdG90eXBlLnJzcF9oZWFkPW51bGwsWi5wcm90b3R5cGUuc3RyZWFtX3NlcT0wLFoucHJvdG90eXBlLnN0cmVhbV92ZXI9MCxaLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFooZSl9LFouZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJzcF9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicnNwX2hlYWRcIikmJmMubGl2ZXJvb21fY3MuUnNwSGVhZC5lbmNvZGUoZS5yc3BfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnN0cmVhbV9zZXEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fc2VxXCIpJiZ0LnVpbnQzMigxNikudWludDMyKGUuc3RyZWFtX3NlcSksbnVsbCE9ZS5zdHJlYW1fdmVyJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RyZWFtX3ZlclwiKSYmdC51aW50MzIoMjQpLnVpbnQzMihlLnN0cmVhbV92ZXIpLHR9LFouZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU3RyZWFtVXBkYXRlUnNwO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIucnNwX2hlYWQ9Yy5saXZlcm9vbV9jcy5Sc3BIZWFkLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgMjpyLnN0cmVhbV9zZXE9ZS51aW50MzIoKTticmVhaztjYXNlIDM6ci5zdHJlYW1fdmVyPWUudWludDMyKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxaKSxvLlN0cmVhbUxpc3RSZXE9KFkucHJvdG90eXBlLnJlcV9oZWFkPW51bGwsWS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBZKGUpfSxZLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yZXFfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJlcV9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJlcUhlYWQuZW5jb2RlKGUucmVxX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksdH0sWS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5TdHJlYW1MaXN0UmVxO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO28+Pj4zPT0xP3IucmVxX2hlYWQ9Yy5saXZlcm9vbV9jcy5SZXFIZWFkLmRlY29kZShlLGUudWludDMyKCkpOmUuc2tpcFR5cGUoNyZvKX1yZXR1cm4gcn0sWSksby5TdHJlYW1MaXN0UnNwPShLLnByb3RvdHlwZS5yc3BfaGVhZD1udWxsLEsucHJvdG90eXBlLnN0cmVhbV9zZXE9MCxLLnByb3RvdHlwZS5zdHJlYW1faW5mbz1hLmVtcHR5QXJyYXksSy5wcm90b3R5cGUuc3RyZWFtX3JlZnJlc2g9MCxLLnByb3RvdHlwZS5zdHJlYW1fbWl4X2luZm89YS5lbXB0eUFycmF5LEsuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgSyhlKX0sSy5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yc3BfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJzcF9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJzcEhlYWQuZW5jb2RlKGUucnNwX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS5zdHJlYW1fc2VxJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RyZWFtX3NlcVwiKSYmdC51aW50MzIoMTYpLnVpbnQzMihlLnN0cmVhbV9zZXEpLG51bGwhPWUuc3RyZWFtX2luZm8mJmUuc3RyZWFtX2luZm8ubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5zdHJlYW1faW5mby5sZW5ndGg7KytuKWMubGl2ZXJvb21fY3MuU3RTdHJlYW1JbmZvLmVuY29kZShlLnN0cmVhbV9pbmZvW25dLHQudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO2lmKG51bGwhPWUuc3RyZWFtX3JlZnJlc2gmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fcmVmcmVzaFwiKSYmdC51aW50MzIoMzIpLnVpbnQzMihlLnN0cmVhbV9yZWZyZXNoKSxudWxsIT1lLnN0cmVhbV9taXhfaW5mbyYmZS5zdHJlYW1fbWl4X2luZm8ubGVuZ3RoKWZvcihuPTA7bjxlLnN0cmVhbV9taXhfaW5mby5sZW5ndGg7KytuKWMubGl2ZXJvb21fY3MuU3RTdHJlYW1JbmZvLmVuY29kZShlLnN0cmVhbV9taXhfaW5mb1tuXSx0LnVpbnQzMig0MikuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gdH0sSy5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5TdHJlYW1MaXN0UnNwO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIucnNwX2hlYWQ9Yy5saXZlcm9vbV9jcy5Sc3BIZWFkLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgMjpyLnN0cmVhbV9zZXE9ZS51aW50MzIoKTticmVhaztjYXNlIDM6ci5zdHJlYW1faW5mbyYmci5zdHJlYW1faW5mby5sZW5ndGh8fChyLnN0cmVhbV9pbmZvPVtdKSxyLnN0cmVhbV9pbmZvLnB1c2goYy5saXZlcm9vbV9jcy5TdFN0cmVhbUluZm8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgNDpyLnN0cmVhbV9yZWZyZXNoPWUudWludDMyKCk7YnJlYWs7Y2FzZSA1OnIuc3RyZWFtX21peF9pbmZvJiZyLnN0cmVhbV9taXhfaW5mby5sZW5ndGh8fChyLnN0cmVhbV9taXhfaW5mbz1bXSksci5zdHJlYW1fbWl4X2luZm8ucHVzaChjLmxpdmVyb29tX2NzLlN0U3RyZWFtSW5mby5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxLKSxvLlN0U3RyZWFtSW5mbz0oWC5wcm90b3R5cGUuc3RyZWFtX3NpZD1cIlwiLFgucHJvdG90eXBlLnN0cmVhbV9pZD1hLm5ld0J1ZmZlcihbXSksWC5wcm90b3R5cGUuaWRfbmFtZT1hLm5ld0J1ZmZlcihbXSksWC5wcm90b3R5cGUubmlja19uYW1lPWEubmV3QnVmZmVyKFtdKSxYLnByb3RvdHlwZS5leHRyYV9pbmZvPWEubmV3QnVmZmVyKFtdKSxYLnByb3RvdHlwZS50aXRsZT1hLm5ld0J1ZmZlcihbXSksWC5wcm90b3R5cGUuc3RyZWFtX3Zlcj0wLFgucHJvdG90eXBlLnN0cmVhbV9hdHRyPWEubmV3QnVmZmVyKFtdKSxYLnByb3RvdHlwZS5jcmVhdGVfdGltZT1hLkxvbmc/YS5Mb25nLmZyb21CaXRzKDAsMCwhMSk6MCxYLnByb3RvdHlwZS5zdHJlYW1fc3JjPTAsWC5wcm90b3R5cGUuc3RhdGU9MCxYLnByb3RvdHlwZS5zdHJlYW1fdHlwZT0wLFgucHJvdG90eXBlLnN0cmVhbV9uaWQ9MCxYLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFgoZSl9LFguZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnN0cmVhbV9zaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fc2lkXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUuc3RyZWFtX3NpZCksbnVsbCE9ZS5zdHJlYW1faWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1faWRcIikmJnQudWludDMyKDE4KS5ieXRlcyhlLnN0cmVhbV9pZCksbnVsbCE9ZS5pZF9uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiaWRfbmFtZVwiKSYmdC51aW50MzIoMjYpLmJ5dGVzKGUuaWRfbmFtZSksbnVsbCE9ZS5uaWNrX25hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuaWNrX25hbWVcIikmJnQudWludDMyKDM0KS5ieXRlcyhlLm5pY2tfbmFtZSksbnVsbCE9ZS5leHRyYV9pbmZvJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZXh0cmFfaW5mb1wiKSYmdC51aW50MzIoNDIpLmJ5dGVzKGUuZXh0cmFfaW5mbyksbnVsbCE9ZS50aXRsZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRpdGxlXCIpJiZ0LnVpbnQzMig1MCkuYnl0ZXMoZS50aXRsZSksbnVsbCE9ZS5zdHJlYW1fdmVyJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RyZWFtX3ZlclwiKSYmdC51aW50MzIoNTYpLnVpbnQzMihlLnN0cmVhbV92ZXIpLG51bGwhPWUuc3RyZWFtX2F0dHImJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fYXR0clwiKSYmdC51aW50MzIoNjYpLmJ5dGVzKGUuc3RyZWFtX2F0dHIpLG51bGwhPWUuY3JlYXRlX3RpbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJjcmVhdGVfdGltZVwiKSYmdC51aW50MzIoNzIpLmludDY0KGUuY3JlYXRlX3RpbWUpLG51bGwhPWUuc3RyZWFtX3NyYyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0cmVhbV9zcmNcIikmJnQudWludDMyKDgwKS51aW50MzIoZS5zdHJlYW1fc3JjKSxudWxsIT1lLnN0YXRlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RhdGVcIikmJnQudWludDMyKDg4KS51aW50MzIoZS5zdGF0ZSksbnVsbCE9ZS5zdHJlYW1fdHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0cmVhbV90eXBlXCIpJiZ0LnVpbnQzMig5NikudWludDMyKGUuc3RyZWFtX3R5cGUpLG51bGwhPWUuc3RyZWFtX25pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0cmVhbV9uaWRcIikmJnQudWludDMyKDEwNCkudWludDMyKGUuc3RyZWFtX25pZCksdH0sWC5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5TdFN0cmVhbUluZm87ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5zdHJlYW1fc2lkPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAyOnIuc3RyZWFtX2lkPWUuYnl0ZXMoKTticmVhaztjYXNlIDM6ci5pZF9uYW1lPWUuYnl0ZXMoKTticmVhaztjYXNlIDQ6ci5uaWNrX25hbWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgNTpyLmV4dHJhX2luZm89ZS5ieXRlcygpO2JyZWFrO2Nhc2UgNjpyLnRpdGxlPWUuYnl0ZXMoKTticmVhaztjYXNlIDc6ci5zdHJlYW1fdmVyPWUudWludDMyKCk7YnJlYWs7Y2FzZSA4OnIuc3RyZWFtX2F0dHI9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgOTpyLmNyZWF0ZV90aW1lPWUuaW50NjQoKTticmVhaztjYXNlIDEwOnIuc3RyZWFtX3NyYz1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTE6ci5zdGF0ZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTI6ci5zdHJlYW1fdHlwZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTM6ci5zdHJlYW1fbmlkPWUudWludDMyKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxYKSxvLlN0RHN0VXNlcj0oSi5wcm90b3R5cGUuaWRfbmFtZT1hLm5ld0J1ZmZlcihbXSksSi5wcm90b3R5cGUuaWQ9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITApOjAsSi5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBKKGUpfSxKLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5pZF9uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiaWRfbmFtZVwiKSYmdC51aW50MzIoMTApLmJ5dGVzKGUuaWRfbmFtZSksbnVsbCE9ZS5pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImlkXCIpJiZ0LnVpbnQzMigxNikudWludDY0KGUuaWQpLHR9LEouZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU3REc3RVc2VyO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIuaWRfbmFtZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAyOnIuaWQ9ZS51aW50NjQoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LEopLG8uU2lnbmFsTGl2ZVJlcT0oUS5wcm90b3R5cGUucmVxX2hlYWQ9bnVsbCxRLnByb3RvdHlwZS5wdXNoX21lc3NhZ2U9YS5uZXdCdWZmZXIoW10pLFEucHJvdG90eXBlLmRzdF91c2VybGlzdD1hLmVtcHR5QXJyYXksUS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBRKGUpfSxRLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJlcV9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVxX2hlYWRcIikmJmMubGl2ZXJvb21fY3MuUmVxSGVhZC5lbmNvZGUoZS5yZXFfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnB1c2hfbWVzc2FnZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInB1c2hfbWVzc2FnZVwiKSYmdC51aW50MzIoMTgpLmJ5dGVzKGUucHVzaF9tZXNzYWdlKSxudWxsIT1lLmRzdF91c2VybGlzdCYmZS5kc3RfdXNlcmxpc3QubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5kc3RfdXNlcmxpc3QubGVuZ3RoOysrbiljLmxpdmVyb29tX2NzLlN0RHN0VXNlci5lbmNvZGUoZS5kc3RfdXNlcmxpc3Rbbl0sdC51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LFEuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU2lnbmFsTGl2ZVJlcTtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnJlcV9oZWFkPWMubGl2ZXJvb21fY3MuUmVxSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci5wdXNoX21lc3NhZ2U9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMzpyLmRzdF91c2VybGlzdCYmci5kc3RfdXNlcmxpc3QubGVuZ3RofHwoci5kc3RfdXNlcmxpc3Q9W10pLHIuZHN0X3VzZXJsaXN0LnB1c2goYy5saXZlcm9vbV9jcy5TdERzdFVzZXIuZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sUSksby5TaWduYWxMaXZlUnNwPSgkLnByb3RvdHlwZS5yc3BfaGVhZD1udWxsLCQuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgJChlKX0sJC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUucnNwX2hlYWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyc3BfaGVhZFwiKSYmYy5saXZlcm9vbV9jcy5Sc3BIZWFkLmVuY29kZShlLnJzcF9oZWFkLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLHR9LCQuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU2lnbmFsTGl2ZVJzcDtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtvPj4+Mz09MT9yLnJzcF9oZWFkPWMubGl2ZXJvb21fY3MuUnNwSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTplLnNraXBUeXBlKDcmbyl9cmV0dXJuIHJ9LCQpLG8uU2lnbmFsTGl2ZVJlc3VsdFJlcT0oZWUucHJvdG90eXBlLnJlcV9oZWFkPW51bGwsZWUucHJvdG90eXBlLnB1c2hfbWVzc2FnZT1hLm5ld0J1ZmZlcihbXSksZWUucHJvdG90eXBlLmRzdF91c2VybGlzdD1hLmVtcHR5QXJyYXksZWUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgZWUoZSl9LGVlLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJlcV9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVxX2hlYWRcIikmJmMubGl2ZXJvb21fY3MuUmVxSGVhZC5lbmNvZGUoZS5yZXFfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnB1c2hfbWVzc2FnZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInB1c2hfbWVzc2FnZVwiKSYmdC51aW50MzIoMTgpLmJ5dGVzKGUucHVzaF9tZXNzYWdlKSxudWxsIT1lLmRzdF91c2VybGlzdCYmZS5kc3RfdXNlcmxpc3QubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5kc3RfdXNlcmxpc3QubGVuZ3RoOysrbiljLmxpdmVyb29tX2NzLlN0RHN0VXNlci5lbmNvZGUoZS5kc3RfdXNlcmxpc3Rbbl0sdC51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LGVlLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlNpZ25hbExpdmVSZXN1bHRSZXE7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yZXFfaGVhZD1jLmxpdmVyb29tX2NzLlJlcUhlYWQuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSAyOnIucHVzaF9tZXNzYWdlPWUuYnl0ZXMoKTticmVhaztjYXNlIDM6ci5kc3RfdXNlcmxpc3QmJnIuZHN0X3VzZXJsaXN0Lmxlbmd0aHx8KHIuZHN0X3VzZXJsaXN0PVtdKSxyLmRzdF91c2VybGlzdC5wdXNoKGMubGl2ZXJvb21fY3MuU3REc3RVc2VyLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LGVlKSxvLlNpZ25hbExpdmVSZXN1bFJzcD0odGUucHJvdG90eXBlLnJzcF9oZWFkPW51bGwsdGUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgdGUoZSl9LHRlLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yc3BfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJzcF9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJzcEhlYWQuZW5jb2RlKGUucnNwX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksdH0sdGUuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU2lnbmFsTGl2ZVJlc3VsUnNwO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO28+Pj4zPT0xP3IucnNwX2hlYWQ9Yy5saXZlcm9vbV9jcy5Sc3BIZWFkLmRlY29kZShlLGUudWludDMyKCkpOmUuc2tpcFR5cGUoNyZvKX1yZXR1cm4gcn0sdGUpLG8uU2lnbmFsTGl2ZUludml0ZVJlcT0obmUucHJvdG90eXBlLnJlcV9oZWFkPW51bGwsbmUucHJvdG90eXBlLnB1c2hfbWVzc2FnZT1hLm5ld0J1ZmZlcihbXSksbmUucHJvdG90eXBlLmRzdF91c2VybGlzdD1hLmVtcHR5QXJyYXksbmUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgbmUoZSl9LG5lLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJlcV9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVxX2hlYWRcIikmJmMubGl2ZXJvb21fY3MuUmVxSGVhZC5lbmNvZGUoZS5yZXFfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnB1c2hfbWVzc2FnZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInB1c2hfbWVzc2FnZVwiKSYmdC51aW50MzIoMTgpLmJ5dGVzKGUucHVzaF9tZXNzYWdlKSxudWxsIT1lLmRzdF91c2VybGlzdCYmZS5kc3RfdXNlcmxpc3QubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5kc3RfdXNlcmxpc3QubGVuZ3RoOysrbiljLmxpdmVyb29tX2NzLlN0RHN0VXNlci5lbmNvZGUoZS5kc3RfdXNlcmxpc3Rbbl0sdC51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LG5lLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlNpZ25hbExpdmVJbnZpdGVSZXE7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yZXFfaGVhZD1jLmxpdmVyb29tX2NzLlJlcUhlYWQuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSAyOnIucHVzaF9tZXNzYWdlPWUuYnl0ZXMoKTticmVhaztjYXNlIDM6ci5kc3RfdXNlcmxpc3QmJnIuZHN0X3VzZXJsaXN0Lmxlbmd0aHx8KHIuZHN0X3VzZXJsaXN0PVtdKSxyLmRzdF91c2VybGlzdC5wdXNoKGMubGl2ZXJvb21fY3MuU3REc3RVc2VyLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LG5lKSxvLlNpZ25hbExpdmVJbnZpdGVSc3A9KHJlLnByb3RvdHlwZS5yc3BfaGVhZD1udWxsLHJlLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IHJlKGUpfSxyZS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUucnNwX2hlYWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyc3BfaGVhZFwiKSYmYy5saXZlcm9vbV9jcy5Sc3BIZWFkLmVuY29kZShlLnJzcF9oZWFkLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLHR9LHJlLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlNpZ25hbExpdmVJbnZpdGVSc3A7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7bz4+PjM9PTE/ci5yc3BfaGVhZD1jLmxpdmVyb29tX2NzLlJzcEhlYWQuZGVjb2RlKGUsZS51aW50MzIoKSk6ZS5za2lwVHlwZSg3Jm8pfXJldHVybiByfSxyZSksby5TaWduYWxMaXZlU3RvcFJlcT0ob2UucHJvdG90eXBlLnJlcV9oZWFkPW51bGwsb2UucHJvdG90eXBlLnB1c2hfbWVzc2FnZT1hLm5ld0J1ZmZlcihbXSksb2UucHJvdG90eXBlLmRzdF91c2VybGlzdD1hLmVtcHR5QXJyYXksb2UuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgb2UoZSl9LG9lLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJlcV9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVxX2hlYWRcIikmJmMubGl2ZXJvb21fY3MuUmVxSGVhZC5lbmNvZGUoZS5yZXFfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnB1c2hfbWVzc2FnZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInB1c2hfbWVzc2FnZVwiKSYmdC51aW50MzIoMTgpLmJ5dGVzKGUucHVzaF9tZXNzYWdlKSxudWxsIT1lLmRzdF91c2VybGlzdCYmZS5kc3RfdXNlcmxpc3QubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5kc3RfdXNlcmxpc3QubGVuZ3RoOysrbiljLmxpdmVyb29tX2NzLlN0RHN0VXNlci5lbmNvZGUoZS5kc3RfdXNlcmxpc3Rbbl0sdC51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LG9lLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlNpZ25hbExpdmVTdG9wUmVxO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIucmVxX2hlYWQ9Yy5saXZlcm9vbV9jcy5SZXFIZWFkLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgMjpyLnB1c2hfbWVzc2FnZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAzOnIuZHN0X3VzZXJsaXN0JiZyLmRzdF91c2VybGlzdC5sZW5ndGh8fChyLmRzdF91c2VybGlzdD1bXSksci5kc3RfdXNlcmxpc3QucHVzaChjLmxpdmVyb29tX2NzLlN0RHN0VXNlci5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxvZSksby5TaWduYWxMaXZlU3RvcFJzcD0oaWUucHJvdG90eXBlLnJzcF9oZWFkPW51bGwsaWUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgaWUoZSl9LGllLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yc3BfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJzcF9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJzcEhlYWQuZW5jb2RlKGUucnNwX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksdH0saWUuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU2lnbmFsTGl2ZVN0b3BSc3A7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7bz4+PjM9PTE/ci5yc3BfaGVhZD1jLmxpdmVyb29tX2NzLlJzcEhlYWQuZGVjb2RlKGUsZS51aW50MzIoKSk6ZS5za2lwVHlwZSg3Jm8pfXJldHVybiByfSxpZSksby5TaWduYWxMaXZlQ3VzdG9tUmVxPShzZS5wcm90b3R5cGUucmVxX2hlYWQ9bnVsbCxzZS5wcm90b3R5cGUucHVzaF9tZXNzYWdlPWEubmV3QnVmZmVyKFtdKSxzZS5wcm90b3R5cGUuZHN0X3VzZXJsaXN0PWEuZW1wdHlBcnJheSxzZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBzZShlKX0sc2UuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxzLmNyZWF0ZSgpLG51bGwhPWUucmVxX2hlYWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyZXFfaGVhZFwiKSYmYy5saXZlcm9vbV9jcy5SZXFIZWFkLmVuY29kZShlLnJlcV9oZWFkLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLG51bGwhPWUucHVzaF9tZXNzYWdlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicHVzaF9tZXNzYWdlXCIpJiZ0LnVpbnQzMigxOCkuYnl0ZXMoZS5wdXNoX21lc3NhZ2UpLG51bGwhPWUuZHN0X3VzZXJsaXN0JiZlLmRzdF91c2VybGlzdC5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLmRzdF91c2VybGlzdC5sZW5ndGg7KytuKWMubGl2ZXJvb21fY3MuU3REc3RVc2VyLmVuY29kZShlLmRzdF91c2VybGlzdFtuXSx0LnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gdH0sc2UuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU2lnbmFsTGl2ZUN1c3RvbVJlcTtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnJlcV9oZWFkPWMubGl2ZXJvb21fY3MuUmVxSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci5wdXNoX21lc3NhZ2U9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMzpyLmRzdF91c2VybGlzdCYmci5kc3RfdXNlcmxpc3QubGVuZ3RofHwoci5kc3RfdXNlcmxpc3Q9W10pLHIuZHN0X3VzZXJsaXN0LnB1c2goYy5saXZlcm9vbV9jcy5TdERzdFVzZXIuZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sc2UpLG8uU2lnbmFsTGl2ZUN1c3RvbVJzcD0oYWUucHJvdG90eXBlLnJzcF9oZWFkPW51bGwsYWUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgYWUoZSl9LGFlLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yc3BfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJzcF9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJzcEhlYWQuZW5jb2RlKGUucnNwX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksdH0sYWUuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU2lnbmFsTGl2ZUN1c3RvbVJzcDtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtvPj4+Mz09MT9yLnJzcF9oZWFkPWMubGl2ZXJvb21fY3MuUnNwSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTplLnNraXBUeXBlKDcmbyl9cmV0dXJuIHJ9LGFlKSxvLkltQ2hhdFJlcT0oY2UucHJvdG90eXBlLnJlcV9oZWFkPW51bGwsY2UucHJvdG90eXBlLm1zZ19jYXRlZ29yeT0wLGNlLnByb3RvdHlwZS5tc2dfdHlwZT0wLGNlLnByb3RvdHlwZS5tc2dfcHJpb3JpdHk9MCxjZS5wcm90b3R5cGUubXNnX2NvbnRlbnQ9YS5uZXdCdWZmZXIoW10pLGNlLnByb3RvdHlwZS5kc3RfdXNlcmxpc3Q9YS5lbXB0eUFycmF5LGNlLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGNlKGUpfSxjZS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yZXFfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJlcV9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJlcUhlYWQuZW5jb2RlKGUucmVxX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS5tc2dfY2F0ZWdvcnkmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtc2dfY2F0ZWdvcnlcIikmJnQudWludDMyKDE2KS51aW50MzIoZS5tc2dfY2F0ZWdvcnkpLG51bGwhPWUubXNnX3R5cGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtc2dfdHlwZVwiKSYmdC51aW50MzIoMjQpLnVpbnQzMihlLm1zZ190eXBlKSxudWxsIT1lLm1zZ19wcmlvcml0eSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1zZ19wcmlvcml0eVwiKSYmdC51aW50MzIoMzIpLnVpbnQzMihlLm1zZ19wcmlvcml0eSksbnVsbCE9ZS5tc2dfY29udGVudCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1zZ19jb250ZW50XCIpJiZ0LnVpbnQzMig0MikuYnl0ZXMoZS5tc2dfY29udGVudCksbnVsbCE9ZS5kc3RfdXNlcmxpc3QmJmUuZHN0X3VzZXJsaXN0Lmxlbmd0aClmb3IodmFyIG49MDtuPGUuZHN0X3VzZXJsaXN0Lmxlbmd0aDsrK24pYy5saXZlcm9vbV9jcy5TdERzdFVzZXIuZW5jb2RlKGUuZHN0X3VzZXJsaXN0W25dLHQudWludDMyKDUwKS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxjZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5JbUNoYXRSZXE7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yZXFfaGVhZD1jLmxpdmVyb29tX2NzLlJlcUhlYWQuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSAyOnIubXNnX2NhdGVnb3J5PWUudWludDMyKCk7YnJlYWs7Y2FzZSAzOnIubXNnX3R5cGU9ZS51aW50MzIoKTticmVhaztjYXNlIDQ6ci5tc2dfcHJpb3JpdHk9ZS51aW50MzIoKTticmVhaztjYXNlIDU6ci5tc2dfY29udGVudD1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA2OnIuZHN0X3VzZXJsaXN0JiZyLmRzdF91c2VybGlzdC5sZW5ndGh8fChyLmRzdF91c2VybGlzdD1bXSksci5kc3RfdXNlcmxpc3QucHVzaChjLmxpdmVyb29tX2NzLlN0RHN0VXNlci5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxjZSksby5JbUNoYXRSc3A9KHVlLnByb3RvdHlwZS5yc3BfaGVhZD1udWxsLHVlLnByb3RvdHlwZS5tc2dfaWQ9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITApOjAsdWUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgdWUoZSl9LHVlLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yc3BfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJzcF9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJzcEhlYWQuZW5jb2RlKGUucnNwX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS5tc2dfaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtc2dfaWRcIikmJnQudWludDMyKDE2KS51aW50NjQoZS5tc2dfaWQpLHR9LHVlLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLkltQ2hhdFJzcDtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnJzcF9oZWFkPWMubGl2ZXJvb21fY3MuUnNwSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci5tc2dfaWQ9ZS51aW50NjQoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LHVlKSxvLkltR2V0aGF0UmVxPShsZS5wcm90b3R5cGUucmVxX2hlYWQ9bnVsbCxsZS5wcm90b3R5cGUubXNnX3ByaW9yaXR5PTAsbGUucHJvdG90eXBlLm1zZ19pZD1hLkxvbmc/YS5Mb25nLmZyb21CaXRzKDAsMCwhMCk6MCxsZS5wcm90b3R5cGUuc29ydF90eXBlPTAsbGUucHJvdG90eXBlLm1zZ19jb3VudD0wLGxlLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGxlKGUpfSxsZS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUucmVxX2hlYWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyZXFfaGVhZFwiKSYmYy5saXZlcm9vbV9jcy5SZXFIZWFkLmVuY29kZShlLnJlcV9oZWFkLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLG51bGwhPWUubXNnX3ByaW9yaXR5JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibXNnX3ByaW9yaXR5XCIpJiZ0LnVpbnQzMigxNikudWludDMyKGUubXNnX3ByaW9yaXR5KSxudWxsIT1lLm1zZ19pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1zZ19pZFwiKSYmdC51aW50MzIoMjQpLnVpbnQ2NChlLm1zZ19pZCksbnVsbCE9ZS5zb3J0X3R5cGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzb3J0X3R5cGVcIikmJnQudWludDMyKDMyKS51aW50MzIoZS5zb3J0X3R5cGUpLG51bGwhPWUubXNnX2NvdW50JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibXNnX2NvdW50XCIpJiZ0LnVpbnQzMig0MCkudWludDMyKGUubXNnX2NvdW50KSx0fSxsZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5JbUdldGhhdFJlcTtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnJlcV9oZWFkPWMubGl2ZXJvb21fY3MuUmVxSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci5tc2dfcHJpb3JpdHk9ZS51aW50MzIoKTticmVhaztjYXNlIDM6ci5tc2dfaWQ9ZS51aW50NjQoKTticmVhaztjYXNlIDQ6ci5zb3J0X3R5cGU9ZS51aW50MzIoKTticmVhaztjYXNlIDU6ci5tc2dfY291bnQ9ZS51aW50MzIoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LGxlKSxvLkltR2V0Q2hhdFJzcD0oaGUucHJvdG90eXBlLnJzcF9oZWFkPW51bGwsaGUucHJvdG90eXBlLnNlcnZlcl9tc2dfaWQ9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITApOjAsaGUucHJvdG90eXBlLnJldF9tc2dfaWQ9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITApOjAsaGUucHJvdG90eXBlLm1zZ19kYXRhPWEuZW1wdHlBcnJheSxoZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBoZShlKX0saGUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxzLmNyZWF0ZSgpLG51bGwhPWUucnNwX2hlYWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyc3BfaGVhZFwiKSYmYy5saXZlcm9vbV9jcy5Sc3BIZWFkLmVuY29kZShlLnJzcF9oZWFkLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLG51bGwhPWUuc2VydmVyX21zZ19pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlcnZlcl9tc2dfaWRcIikmJnQudWludDMyKDE2KS51aW50NjQoZS5zZXJ2ZXJfbXNnX2lkKSxudWxsIT1lLnJldF9tc2dfaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyZXRfbXNnX2lkXCIpJiZ0LnVpbnQzMigyNCkudWludDY0KGUucmV0X21zZ19pZCksbnVsbCE9ZS5tc2dfZGF0YSYmZS5tc2dfZGF0YS5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLm1zZ19kYXRhLmxlbmd0aDsrK24pYy5saXZlcm9vbV9jcy5TdE1zZ0RhdGEuZW5jb2RlKGUubXNnX2RhdGFbbl0sdC51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LGhlLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLkltR2V0Q2hhdFJzcDtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnJzcF9oZWFkPWMubGl2ZXJvb21fY3MuUnNwSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci5zZXJ2ZXJfbXNnX2lkPWUudWludDY0KCk7YnJlYWs7Y2FzZSAzOnIucmV0X21zZ19pZD1lLnVpbnQ2NCgpO2JyZWFrO2Nhc2UgNDpyLm1zZ19kYXRhJiZyLm1zZ19kYXRhLmxlbmd0aHx8KHIubXNnX2RhdGE9W10pLHIubXNnX2RhdGEucHVzaChjLmxpdmVyb29tX2NzLlN0TXNnRGF0YS5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxoZSksby5TdE1zZ0RhdGE9KHBlLnByb3RvdHlwZS5pZF9uYW1lPWEubmV3QnVmZmVyKFtdKSxwZS5wcm90b3R5cGUubmlja19uYW1lPWEubmV3QnVmZmVyKFtdKSxwZS5wcm90b3R5cGUucm9sZT0wLHBlLnByb3RvdHlwZS5tc2dfaWQ9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITApOjAscGUucHJvdG90eXBlLm1zZ19jYXRlZ29yeT0wLHBlLnByb3RvdHlwZS5tc2dfdHlwZT0wLHBlLnByb3RvdHlwZS5tc2dfcHJpb3JpdHk9MCxwZS5wcm90b3R5cGUubXNnX2NvbnRlbnQ9YS5uZXdCdWZmZXIoW10pLHBlLnByb3RvdHlwZS5zZW5kX3RpbWU9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITEpOjAscGUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgcGUoZSl9LHBlLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5pZF9uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiaWRfbmFtZVwiKSYmdC51aW50MzIoMTApLmJ5dGVzKGUuaWRfbmFtZSksbnVsbCE9ZS5uaWNrX25hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuaWNrX25hbWVcIikmJnQudWludDMyKDE4KS5ieXRlcyhlLm5pY2tfbmFtZSksbnVsbCE9ZS5yb2xlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9sZVwiKSYmdC51aW50MzIoMjQpLnVpbnQzMihlLnJvbGUpLG51bGwhPWUubXNnX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibXNnX2lkXCIpJiZ0LnVpbnQzMigzMikudWludDY0KGUubXNnX2lkKSxudWxsIT1lLm1zZ19jYXRlZ29yeSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1zZ19jYXRlZ29yeVwiKSYmdC51aW50MzIoNDApLnVpbnQzMihlLm1zZ19jYXRlZ29yeSksbnVsbCE9ZS5tc2dfdHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1zZ190eXBlXCIpJiZ0LnVpbnQzMig0OCkudWludDMyKGUubXNnX3R5cGUpLG51bGwhPWUubXNnX3ByaW9yaXR5JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibXNnX3ByaW9yaXR5XCIpJiZ0LnVpbnQzMig1NikudWludDMyKGUubXNnX3ByaW9yaXR5KSxudWxsIT1lLm1zZ19jb250ZW50JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibXNnX2NvbnRlbnRcIikmJnQudWludDMyKDY2KS5ieXRlcyhlLm1zZ19jb250ZW50KSxudWxsIT1lLnNlbmRfdGltZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlbmRfdGltZVwiKSYmdC51aW50MzIoNzIpLmludDY0KGUuc2VuZF90aW1lKSx0fSxwZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5TdE1zZ0RhdGE7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5pZF9uYW1lPWUuYnl0ZXMoKTticmVhaztjYXNlIDI6ci5uaWNrX25hbWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMzpyLnJvbGU9ZS51aW50MzIoKTticmVhaztjYXNlIDQ6ci5tc2dfaWQ9ZS51aW50NjQoKTticmVhaztjYXNlIDU6ci5tc2dfY2F0ZWdvcnk9ZS51aW50MzIoKTticmVhaztjYXNlIDY6ci5tc2dfdHlwZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNzpyLm1zZ19wcmlvcml0eT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgODpyLm1zZ19jb250ZW50PWUuYnl0ZXMoKTticmVhaztjYXNlIDk6ci5zZW5kX3RpbWU9ZS5pbnQ2NCgpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0scGUpLG8uRW50ZXJSZXE9KGRlLnByb3RvdHlwZS5yZXFfaGVhZD1udWxsLGRlLnByb3RvdHlwZS5zd2l0Y2hfc2Vzc2lvbl9pZD1hLkxvbmc/YS5Mb25nLmZyb21CaXRzKDAsMCwhMCk6MCxkZS5wcm90b3R5cGUubmlja19uYW1lPWEubmV3QnVmZmVyKFtdKSxkZS5wcm90b3R5cGUucm9sZT0wLGRlLnByb3RvdHlwZS5uZXRfdHlwZT0wLGRlLnByb3RvdHlwZS5jb25maWc9bnVsbCxkZS5wcm90b3R5cGUubHZfa2V5PVwiXCIsZGUucHJvdG90eXBlLnRoaXJkX3Rva2VuPWEubmV3QnVmZmVyKFtdKSxkZS5wcm90b3R5cGUuY2x1c3Rlcl9yZXE9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITApOjAsZGUucHJvdG90eXBlLnVzZXJfY291bnRfbGltaXQ9MCxkZS5wcm90b3R5cGUucmVsYXRlX3NlcnZpY2U9XCJcIixkZS5wcm90b3R5cGUuY29ubl90eXBlPTAsZGUucHJvdG90eXBlLnJvb21fbmFtZT1hLm5ld0J1ZmZlcihbXSksZGUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgZGUoZSl9LGRlLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yZXFfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJlcV9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJlcUhlYWQuZW5jb2RlKGUucmVxX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS5zd2l0Y2hfc2Vzc2lvbl9pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN3aXRjaF9zZXNzaW9uX2lkXCIpJiZ0LnVpbnQzMigxNikudWludDY0KGUuc3dpdGNoX3Nlc3Npb25faWQpLG51bGwhPWUubmlja19uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibmlja19uYW1lXCIpJiZ0LnVpbnQzMigyNikuYnl0ZXMoZS5uaWNrX25hbWUpLG51bGwhPWUucm9sZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJvbGVcIikmJnQudWludDMyKDMyKS51aW50MzIoZS5yb2xlKSxudWxsIT1lLm5ldF90eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibmV0X3R5cGVcIikmJnQudWludDMyKDQwKS51aW50MzIoZS5uZXRfdHlwZSksbnVsbCE9ZS5jb25maWcmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJjb25maWdcIikmJmMubGl2ZXJvb21fY3MuU3RDb25maWdMaXN0LmVuY29kZShlLmNvbmZpZyx0LnVpbnQzMig1MCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLmx2X2tleSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImx2X2tleVwiKSYmdC51aW50MzIoNTgpLnN0cmluZyhlLmx2X2tleSksbnVsbCE9ZS50aGlyZF90b2tlbiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRoaXJkX3Rva2VuXCIpJiZ0LnVpbnQzMig2NikuYnl0ZXMoZS50aGlyZF90b2tlbiksbnVsbCE9ZS5jbHVzdGVyX3JlcSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImNsdXN0ZXJfcmVxXCIpJiZ0LnVpbnQzMig3MikudWludDY0KGUuY2x1c3Rlcl9yZXEpLG51bGwhPWUudXNlcl9jb3VudF9saW1pdCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInVzZXJfY291bnRfbGltaXRcIikmJnQudWludDMyKDgwKS51aW50MzIoZS51c2VyX2NvdW50X2xpbWl0KSxudWxsIT1lLnJlbGF0ZV9zZXJ2aWNlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVsYXRlX3NlcnZpY2VcIikmJnQudWludDMyKDkwKS5zdHJpbmcoZS5yZWxhdGVfc2VydmljZSksbnVsbCE9ZS5jb25uX3R5cGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJjb25uX3R5cGVcIikmJnQudWludDMyKDk2KS51aW50MzIoZS5jb25uX3R5cGUpLG51bGwhPWUucm9vbV9uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9vbV9uYW1lXCIpJiZ0LnVpbnQzMigxMDYpLmJ5dGVzKGUucm9vbV9uYW1lKSx0fSxkZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5FbnRlclJlcTtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnJlcV9oZWFkPWMubGl2ZXJvb21fY3MuUmVxSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci5zd2l0Y2hfc2Vzc2lvbl9pZD1lLnVpbnQ2NCgpO2JyZWFrO2Nhc2UgMzpyLm5pY2tfbmFtZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA0OnIucm9sZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNTpyLm5ldF90eXBlPWUudWludDMyKCk7YnJlYWs7Y2FzZSA2OnIuY29uZmlnPWMubGl2ZXJvb21fY3MuU3RDb25maWdMaXN0LmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgNzpyLmx2X2tleT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgODpyLnRoaXJkX3Rva2VuPWUuYnl0ZXMoKTticmVhaztjYXNlIDk6ci5jbHVzdGVyX3JlcT1lLnVpbnQ2NCgpO2JyZWFrO2Nhc2UgMTA6ci51c2VyX2NvdW50X2xpbWl0PWUudWludDMyKCk7YnJlYWs7Y2FzZSAxMTpyLnJlbGF0ZV9zZXJ2aWNlPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAxMjpyLmNvbm5fdHlwZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTM6ci5yb29tX25hbWU9ZS5ieXRlcygpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sZGUpLG8uRW50ZXJSc3A9KF9lLnByb3RvdHlwZS5yc3BfaGVhZD1udWxsLF9lLnByb3RvdHlwZS5yb29tX2lkPWEubmV3QnVmZmVyKFtdKSxfZS5wcm90b3R5cGUudXNlcl9zZXNzaW9uX2lkPWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCEwKTowLF9lLnByb3RvdHlwZS5yb29tX3Nlc3Npb25faWQ9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITApOjAsX2UucHJvdG90eXBlLnVzZXJfaWQ9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITApOjAsX2UucHJvdG90eXBlLnJldF90aW1lc3RhbXA9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITEpOjAsX2UucHJvdG90eXBlLmJpZ2ltX3RpbWVfd2luZG93PTAsX2UucHJvdG90eXBlLmRhdGlfdGltZV93aW5kb3c9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITEpOjAsX2UucHJvdG90eXBlLnJvb21faWQzMj0wLF9lLnByb3RvdHlwZS5oYl9pbnRlcnZhbD0wLF9lLnByb3RvdHlwZS5oYl90aW1lb3V0PTAsX2UucHJvdG90eXBlLmx2X2tleT1cIlwiLF9lLnByb3RvdHlwZS56cF9rZXk9XCJcIixfZS5wcm90b3R5cGUub25saW5lX2NvdW50PTAsX2UucHJvdG90eXBlLmFuY2hvcl9pbmZvPW51bGwsX2UucHJvdG90eXBlLnN0cmVhbV9zZXE9MCxfZS5wcm90b3R5cGUuc3RyZWFtX2luZm89YS5lbXB0eUFycmF5LF9lLnByb3RvdHlwZS5zdHJlYW1fbWl4X2luZm89YS5lbXB0eUFycmF5LF9lLnByb3RvdHlwZS51c2VybGlzdF9tZXJnZV90aW1lb3V0PTAsX2UucHJvdG90eXBlLnVzZXJsaXN0X2ludGVydmFsPTAsX2UucHJvdG90eXBlLnN0cmVhbV9saXN0X3B1c2hfbWVyZ2VfdGltZW91dD0wLF9lLnByb3RvdHlwZS5zdHJlYW1fbGlzdF9oYl93YWl0X21lcmdlX3RpbWU9MCxfZS5wcm90b3R5cGUudHJhbnNfbGlzdF9zZXE9MCxfZS5wcm90b3R5cGUudHJhbnNfc2Vxcz1hLmVtcHR5QXJyYXksX2UucHJvdG90eXBlLmNsdXN0ZXJfbmFtZT1cIlwiLF9lLnByb3RvdHlwZS50b2tlbl9yZW1haW5fdGltZT0wLF9lLnByb3RvdHlwZS5zdHJlYW1fZmV0Y2hfZmxhZz0wLF9lLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IF9lKGUpfSxfZS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yc3BfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJzcF9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJzcEhlYWQuZW5jb2RlKGUucnNwX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS5yb29tX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9vbV9pZFwiKSYmdC51aW50MzIoMTgpLmJ5dGVzKGUucm9vbV9pZCksbnVsbCE9ZS51c2VyX3Nlc3Npb25faWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ1c2VyX3Nlc3Npb25faWRcIikmJnQudWludDMyKDI0KS51aW50NjQoZS51c2VyX3Nlc3Npb25faWQpLG51bGwhPWUucm9vbV9zZXNzaW9uX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9vbV9zZXNzaW9uX2lkXCIpJiZ0LnVpbnQzMigzMikudWludDY0KGUucm9vbV9zZXNzaW9uX2lkKSxudWxsIT1lLnVzZXJfaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ1c2VyX2lkXCIpJiZ0LnVpbnQzMig0MCkudWludDY0KGUudXNlcl9pZCksbnVsbCE9ZS5yZXRfdGltZXN0YW1wJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmV0X3RpbWVzdGFtcFwiKSYmdC51aW50MzIoNDkpLmZpeGVkNjQoZS5yZXRfdGltZXN0YW1wKSxudWxsIT1lLmJpZ2ltX3RpbWVfd2luZG93JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYmlnaW1fdGltZV93aW5kb3dcIikmJnQudWludDMyKDU2KS51aW50MzIoZS5iaWdpbV90aW1lX3dpbmRvdyksbnVsbCE9ZS5kYXRpX3RpbWVfd2luZG93JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZGF0aV90aW1lX3dpbmRvd1wiKSYmdC51aW50MzIoNjQpLmludDY0KGUuZGF0aV90aW1lX3dpbmRvdyksbnVsbCE9ZS5yb29tX2lkMzImJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyb29tX2lkMzJcIikmJnQudWludDMyKDcyKS51aW50MzIoZS5yb29tX2lkMzIpLG51bGwhPWUuaGJfaW50ZXJ2YWwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJoYl9pbnRlcnZhbFwiKSYmdC51aW50MzIoODApLnVpbnQzMihlLmhiX2ludGVydmFsKSxudWxsIT1lLmhiX3RpbWVvdXQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJoYl90aW1lb3V0XCIpJiZ0LnVpbnQzMig4OCkudWludDMyKGUuaGJfdGltZW91dCksbnVsbCE9ZS5sdl9rZXkmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJsdl9rZXlcIikmJnQudWludDMyKDk4KS5zdHJpbmcoZS5sdl9rZXkpLG51bGwhPWUuenBfa2V5JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwienBfa2V5XCIpJiZ0LnVpbnQzMigxMDYpLnN0cmluZyhlLnpwX2tleSksbnVsbCE9ZS5vbmxpbmVfY291bnQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJvbmxpbmVfY291bnRcIikmJnQudWludDMyKDExMikudWludDMyKGUub25saW5lX2NvdW50KSxudWxsIT1lLmFuY2hvcl9pbmZvJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYW5jaG9yX2luZm9cIikmJmMubGl2ZXJvb21fY3MuU3RBbmNob3JJbmZvLmVuY29kZShlLmFuY2hvcl9pbmZvLHQudWludDMyKDEyMikuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnN0cmVhbV9zZXEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fc2VxXCIpJiZ0LnVpbnQzMigxMjgpLnVpbnQzMihlLnN0cmVhbV9zZXEpLG51bGwhPWUuc3RyZWFtX2luZm8mJmUuc3RyZWFtX2luZm8ubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5zdHJlYW1faW5mby5sZW5ndGg7KytuKWMubGl2ZXJvb21fY3MuU3RTdHJlYW1JbmZvLmVuY29kZShlLnN0cmVhbV9pbmZvW25dLHQudWludDMyKDEzOCkuZm9yaygpKS5sZGVsaW0oKTtpZihudWxsIT1lLnN0cmVhbV9taXhfaW5mbyYmZS5zdHJlYW1fbWl4X2luZm8ubGVuZ3RoKWZvcihuPTA7bjxlLnN0cmVhbV9taXhfaW5mby5sZW5ndGg7KytuKWMubGl2ZXJvb21fY3MuU3RTdHJlYW1JbmZvLmVuY29kZShlLnN0cmVhbV9taXhfaW5mb1tuXSx0LnVpbnQzMigxNDYpLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZS51c2VybGlzdF9tZXJnZV90aW1lb3V0JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidXNlcmxpc3RfbWVyZ2VfdGltZW91dFwiKSYmdC51aW50MzIoMTUyKS51aW50MzIoZS51c2VybGlzdF9tZXJnZV90aW1lb3V0KSxudWxsIT1lLnVzZXJsaXN0X2ludGVydmFsJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidXNlcmxpc3RfaW50ZXJ2YWxcIikmJnQudWludDMyKDE2MCkudWludDMyKGUudXNlcmxpc3RfaW50ZXJ2YWwpLG51bGwhPWUuc3RyZWFtX2xpc3RfcHVzaF9tZXJnZV90aW1lb3V0JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RyZWFtX2xpc3RfcHVzaF9tZXJnZV90aW1lb3V0XCIpJiZ0LnVpbnQzMigxNjgpLnVpbnQzMihlLnN0cmVhbV9saXN0X3B1c2hfbWVyZ2VfdGltZW91dCksbnVsbCE9ZS5zdHJlYW1fbGlzdF9oYl93YWl0X21lcmdlX3RpbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fbGlzdF9oYl93YWl0X21lcmdlX3RpbWVcIikmJnQudWludDMyKDE3NikudWludDMyKGUuc3RyZWFtX2xpc3RfaGJfd2FpdF9tZXJnZV90aW1lKSxudWxsIT1lLnRyYW5zX2xpc3Rfc2VxJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfbGlzdF9zZXFcIikmJnQudWludDMyKDE4NCkudWludDMyKGUudHJhbnNfbGlzdF9zZXEpLG51bGwhPWUudHJhbnNfc2VxcyYmZS50cmFuc19zZXFzLmxlbmd0aClmb3Iobj0wO248ZS50cmFuc19zZXFzLmxlbmd0aDsrK24pYy5saXZlcm9vbV9jcy5TdFRyYW5zSW5mby5lbmNvZGUoZS50cmFuc19zZXFzW25dLHQudWludDMyKDE5NCkuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gbnVsbCE9ZS5jbHVzdGVyX25hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJjbHVzdGVyX25hbWVcIikmJnQudWludDMyKDIwMikuc3RyaW5nKGUuY2x1c3Rlcl9uYW1lKSxudWxsIT1lLnRva2VuX3JlbWFpbl90aW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidG9rZW5fcmVtYWluX3RpbWVcIikmJnQudWludDMyKDIwOCkudWludDMyKGUudG9rZW5fcmVtYWluX3RpbWUpLG51bGwhPWUuc3RyZWFtX2ZldGNoX2ZsYWcmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fZmV0Y2hfZmxhZ1wiKSYmdC51aW50MzIoMjE2KS51aW50MzIoZS5zdHJlYW1fZmV0Y2hfZmxhZyksdH0sX2UuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuRW50ZXJSc3A7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yc3BfaGVhZD1jLmxpdmVyb29tX2NzLlJzcEhlYWQuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSAyOnIucm9vbV9pZD1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAzOnIudXNlcl9zZXNzaW9uX2lkPWUudWludDY0KCk7YnJlYWs7Y2FzZSA0OnIucm9vbV9zZXNzaW9uX2lkPWUudWludDY0KCk7YnJlYWs7Y2FzZSA1OnIudXNlcl9pZD1lLnVpbnQ2NCgpO2JyZWFrO2Nhc2UgNjpyLnJldF90aW1lc3RhbXA9ZS5maXhlZDY0KCk7YnJlYWs7Y2FzZSA3OnIuYmlnaW1fdGltZV93aW5kb3c9ZS51aW50MzIoKTticmVhaztjYXNlIDg6ci5kYXRpX3RpbWVfd2luZG93PWUuaW50NjQoKTticmVhaztjYXNlIDk6ci5yb29tX2lkMzI9ZS51aW50MzIoKTticmVhaztjYXNlIDEwOnIuaGJfaW50ZXJ2YWw9ZS51aW50MzIoKTticmVhaztjYXNlIDExOnIuaGJfdGltZW91dD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTI6ci5sdl9rZXk9ZS5zdHJpbmcoKTticmVhaztjYXNlIDEzOnIuenBfa2V5PWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAxNDpyLm9ubGluZV9jb3VudD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTU6ci5hbmNob3JfaW5mbz1jLmxpdmVyb29tX2NzLlN0QW5jaG9ySW5mby5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDE2OnIuc3RyZWFtX3NlcT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTc6ci5zdHJlYW1faW5mbyYmci5zdHJlYW1faW5mby5sZW5ndGh8fChyLnN0cmVhbV9pbmZvPVtdKSxyLnN0cmVhbV9pbmZvLnB1c2goYy5saXZlcm9vbV9jcy5TdFN0cmVhbUluZm8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgMTg6ci5zdHJlYW1fbWl4X2luZm8mJnIuc3RyZWFtX21peF9pbmZvLmxlbmd0aHx8KHIuc3RyZWFtX21peF9pbmZvPVtdKSxyLnN0cmVhbV9taXhfaW5mby5wdXNoKGMubGl2ZXJvb21fY3MuU3RTdHJlYW1JbmZvLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztjYXNlIDE5OnIudXNlcmxpc3RfbWVyZ2VfdGltZW91dD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMjA6ci51c2VybGlzdF9pbnRlcnZhbD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMjE6ci5zdHJlYW1fbGlzdF9wdXNoX21lcmdlX3RpbWVvdXQ9ZS51aW50MzIoKTticmVhaztjYXNlIDIyOnIuc3RyZWFtX2xpc3RfaGJfd2FpdF9tZXJnZV90aW1lPWUudWludDMyKCk7YnJlYWs7Y2FzZSAyMzpyLnRyYW5zX2xpc3Rfc2VxPWUudWludDMyKCk7YnJlYWs7Y2FzZSAyNDpyLnRyYW5zX3NlcXMmJnIudHJhbnNfc2Vxcy5sZW5ndGh8fChyLnRyYW5zX3NlcXM9W10pLHIudHJhbnNfc2Vxcy5wdXNoKGMubGl2ZXJvb21fY3MuU3RUcmFuc0luZm8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgMjU6ci5jbHVzdGVyX25hbWU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDI2OnIudG9rZW5fcmVtYWluX3RpbWU9ZS51aW50MzIoKTticmVhaztjYXNlIDI3OnIuc3RyZWFtX2ZldGNoX2ZsYWc9ZS51aW50MzIoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LF9lKSxvLlN0QW5jaG9ySW5mbz0oZmUucHJvdG90eXBlLmFuY2hvcl9pZF9uYW1lPWEubmV3QnVmZmVyKFtdKSxmZS5wcm90b3R5cGUuYW5jaG9yX2lkPWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCEwKTowLGZlLnByb3RvdHlwZS5hbmNob3Jfbmlja19uYW1lPWEubmV3QnVmZmVyKFtdKSxmZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBmZShlKX0sZmUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLmFuY2hvcl9pZF9uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYW5jaG9yX2lkX25hbWVcIikmJnQudWludDMyKDEwKS5ieXRlcyhlLmFuY2hvcl9pZF9uYW1lKSxudWxsIT1lLmFuY2hvcl9pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImFuY2hvcl9pZFwiKSYmdC51aW50MzIoMTYpLnVpbnQ2NChlLmFuY2hvcl9pZCksbnVsbCE9ZS5hbmNob3Jfbmlja19uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYW5jaG9yX25pY2tfbmFtZVwiKSYmdC51aW50MzIoMjYpLmJ5dGVzKGUuYW5jaG9yX25pY2tfbmFtZSksdH0sZmUuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU3RBbmNob3JJbmZvO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIuYW5jaG9yX2lkX25hbWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMjpyLmFuY2hvcl9pZD1lLnVpbnQ2NCgpO2JyZWFrO2Nhc2UgMzpyLmFuY2hvcl9uaWNrX25hbWU9ZS5ieXRlcygpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sZmUpLG8uUXVpdFJlcT0oZ2UucHJvdG90eXBlLnJlcV9oZWFkPW51bGwsZ2UucHJvdG90eXBlLnN3aXRjaF9zZXNzaW9uX2lkPWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCEwKTowLGdlLnByb3RvdHlwZS5yb29tX2lkMzI9MCxnZS5wcm90b3R5cGUubmlja19uYW1lPWEubmV3QnVmZmVyKFtdKSxnZS5wcm90b3R5cGUucm9sZT0wLGdlLnByb3RvdHlwZS5uZXRfdHlwZT0wLGdlLnByb3RvdHlwZS5jb25maWdfbGlzdD1udWxsLGdlLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGdlKGUpfSxnZS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUucmVxX2hlYWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyZXFfaGVhZFwiKSYmYy5saXZlcm9vbV9jcy5SZXFIZWFkLmVuY29kZShlLnJlcV9oZWFkLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLG51bGwhPWUuc3dpdGNoX3Nlc3Npb25faWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzd2l0Y2hfc2Vzc2lvbl9pZFwiKSYmdC51aW50MzIoMTYpLnVpbnQ2NChlLnN3aXRjaF9zZXNzaW9uX2lkKSxudWxsIT1lLnJvb21faWQzMiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJvb21faWQzMlwiKSYmdC51aW50MzIoMjQpLnVpbnQzMihlLnJvb21faWQzMiksbnVsbCE9ZS5uaWNrX25hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuaWNrX25hbWVcIikmJnQudWludDMyKDM0KS5ieXRlcyhlLm5pY2tfbmFtZSksbnVsbCE9ZS5yb2xlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9sZVwiKSYmdC51aW50MzIoNDApLnVpbnQzMihlLnJvbGUpLG51bGwhPWUubmV0X3R5cGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuZXRfdHlwZVwiKSYmdC51aW50MzIoNDgpLnVpbnQzMihlLm5ldF90eXBlKSxudWxsIT1lLmNvbmZpZ19saXN0JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY29uZmlnX2xpc3RcIikmJmMubGl2ZXJvb21fY3MuU3RDb25maWdMaXN0LmVuY29kZShlLmNvbmZpZ19saXN0LHQudWludDMyKDU4KS5mb3JrKCkpLmxkZWxpbSgpLHR9LGdlLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlF1aXRSZXE7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yZXFfaGVhZD1jLmxpdmVyb29tX2NzLlJlcUhlYWQuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSAyOnIuc3dpdGNoX3Nlc3Npb25faWQ9ZS51aW50NjQoKTticmVhaztjYXNlIDM6ci5yb29tX2lkMzI9ZS51aW50MzIoKTticmVhaztjYXNlIDQ6ci5uaWNrX25hbWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgNTpyLnJvbGU9ZS51aW50MzIoKTticmVhaztjYXNlIDY6ci5uZXRfdHlwZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNzpyLmNvbmZpZ19saXN0PWMubGl2ZXJvb21fY3MuU3RDb25maWdMaXN0LmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sZ2UpLG8uU3RDb25maWdMaXN0PShtZS5wcm90b3R5cGUucm9vbV9jcmVhdGVfZmxhZz0wLG1lLnByb3RvdHlwZS51c2VyX3N0YXRlX2ZsYWc9MCxtZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBtZShlKX0sbWUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJvb21fY3JlYXRlX2ZsYWcmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyb29tX2NyZWF0ZV9mbGFnXCIpJiZ0LnVpbnQzMig4KS51aW50MzIoZS5yb29tX2NyZWF0ZV9mbGFnKSxudWxsIT1lLnVzZXJfc3RhdGVfZmxhZyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInVzZXJfc3RhdGVfZmxhZ1wiKSYmdC51aW50MzIoMTYpLnVpbnQzMihlLnVzZXJfc3RhdGVfZmxhZyksdH0sbWUuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU3RDb25maWdMaXN0O2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIucm9vbV9jcmVhdGVfZmxhZz1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMjpyLnVzZXJfc3RhdGVfZmxhZz1lLnVpbnQzMigpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sbWUpLG8uUXVpdFJzcD0oeWUucHJvdG90eXBlLnJzcF9oZWFkPW51bGwseWUucHJvdG90eXBlLnJvb21faWQ9YS5uZXdCdWZmZXIoW10pLHllLnByb3RvdHlwZS5yb29tX2lkMzI9MCx5ZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyB5ZShlKX0seWUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJzcF9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicnNwX2hlYWRcIikmJmMubGl2ZXJvb21fY3MuUnNwSGVhZC5lbmNvZGUoZS5yc3BfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnJvb21faWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyb29tX2lkXCIpJiZ0LnVpbnQzMigxOCkuYnl0ZXMoZS5yb29tX2lkKSxudWxsIT1lLnJvb21faWQzMiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJvb21faWQzMlwiKSYmdC51aW50MzIoMjQpLnVpbnQzMihlLnJvb21faWQzMiksdH0seWUuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuUXVpdFJzcDtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnJzcF9oZWFkPWMubGl2ZXJvb21fY3MuUnNwSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci5yb29tX2lkPWUuYnl0ZXMoKTticmVhaztjYXNlIDM6ci5yb29tX2lkMzI9ZS51aW50MzIoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LHllKSxvLlJvb21MaXN0UmVxPSh2ZS5wcm90b3R5cGUucmVxX2hlYWQ9bnVsbCx2ZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyB2ZShlKX0sdmUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJlcV9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVxX2hlYWRcIikmJmMubGl2ZXJvb21fY3MuUmVxSGVhZC5lbmNvZGUoZS5yZXFfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSx0fSx2ZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5Sb29tTGlzdFJlcTtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtvPj4+Mz09MT9yLnJlcV9oZWFkPWMubGl2ZXJvb21fY3MuUmVxSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTplLnNraXBUeXBlKDcmbyl9cmV0dXJuIHJ9LHZlKSxvLlJvb21MaXN0UnNwPShiZS5wcm90b3R5cGUucnNwX2hlYWQ9bnVsbCxiZS5wcm90b3R5cGUucm9vbV9saXN0PWEuZW1wdHlBcnJheSxiZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBiZShlKX0sYmUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxzLmNyZWF0ZSgpLG51bGwhPWUucnNwX2hlYWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyc3BfaGVhZFwiKSYmYy5saXZlcm9vbV9jcy5Sc3BIZWFkLmVuY29kZShlLnJzcF9oZWFkLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLG51bGwhPWUucm9vbV9saXN0JiZlLnJvb21fbGlzdC5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLnJvb21fbGlzdC5sZW5ndGg7KytuKWMubGl2ZXJvb21fY3MuU3RSb29tTGlzdFJvb20uZW5jb2RlKGUucm9vbV9saXN0W25dLHQudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxiZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5Sb29tTGlzdFJzcDtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnJzcF9oZWFkPWMubGl2ZXJvb21fY3MuUnNwSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci5yb29tX2xpc3QmJnIucm9vbV9saXN0Lmxlbmd0aHx8KHIucm9vbV9saXN0PVtdKSxyLnJvb21fbGlzdC5wdXNoKGMubGl2ZXJvb21fY3MuU3RSb29tTGlzdFJvb20uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sYmUpLG8uU3RSb29tTGlzdFN0cmVhbT0oRWUucHJvdG90eXBlLnN0cmVhbV9pZD1hLm5ld0J1ZmZlcihbXSksRWUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgRWUoZSl9LEVlLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5zdHJlYW1faWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1faWRcIikmJnQudWludDMyKDEwKS5ieXRlcyhlLnN0cmVhbV9pZCksdH0sRWUuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU3RSb29tTGlzdFN0cmVhbTtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtvPj4+Mz09MT9yLnN0cmVhbV9pZD1lLmJ5dGVzKCk6ZS5za2lwVHlwZSg3Jm8pfXJldHVybiByfSxFZSksby5TdFJvb21MaXN0Um9vbT0oT2UucHJvdG90eXBlLnJvb21faWQ9YS5uZXdCdWZmZXIoW10pLE9lLnByb3RvdHlwZS5yb29tX25hbWU9YS5uZXdCdWZmZXIoW10pLE9lLnByb3RvdHlwZS5hbmNob3JfaWRfbmFtZT1hLm5ld0J1ZmZlcihbXSksT2UucHJvdG90eXBlLmFuY2hvcl9uaWNrX25hbWU9YS5uZXdCdWZmZXIoW10pLE9lLnByb3RvdHlwZS5zdHJlYW1fbGlzdD1hLmVtcHR5QXJyYXksT2UuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgT2UoZSl9LE9lLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJvb21faWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyb29tX2lkXCIpJiZ0LnVpbnQzMigxMCkuYnl0ZXMoZS5yb29tX2lkKSxudWxsIT1lLnJvb21fbmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJvb21fbmFtZVwiKSYmdC51aW50MzIoMTgpLmJ5dGVzKGUucm9vbV9uYW1lKSxudWxsIT1lLmFuY2hvcl9pZF9uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYW5jaG9yX2lkX25hbWVcIikmJnQudWludDMyKDI2KS5ieXRlcyhlLmFuY2hvcl9pZF9uYW1lKSxudWxsIT1lLmFuY2hvcl9uaWNrX25hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJhbmNob3Jfbmlja19uYW1lXCIpJiZ0LnVpbnQzMigzNCkuYnl0ZXMoZS5hbmNob3Jfbmlja19uYW1lKSxudWxsIT1lLnN0cmVhbV9saXN0JiZlLnN0cmVhbV9saXN0Lmxlbmd0aClmb3IodmFyIG49MDtuPGUuc3RyZWFtX2xpc3QubGVuZ3RoOysrbiljLmxpdmVyb29tX2NzLlN0Um9vbUxpc3RTdHJlYW0uZW5jb2RlKGUuc3RyZWFtX2xpc3Rbbl0sdC51aW50MzIoNDIpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LE9lLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlN0Um9vbUxpc3RSb29tO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIucm9vbV9pZD1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAyOnIucm9vbV9uYW1lPWUuYnl0ZXMoKTticmVhaztjYXNlIDM6ci5hbmNob3JfaWRfbmFtZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA0OnIuYW5jaG9yX25pY2tfbmFtZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA1OnIuc3RyZWFtX2xpc3QmJnIuc3RyZWFtX2xpc3QubGVuZ3RofHwoci5zdHJlYW1fbGlzdD1bXSksci5zdHJlYW1fbGlzdC5wdXNoKGMubGl2ZXJvb21fY3MuU3RSb29tTGlzdFN0cmVhbS5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxPZSksby5TdFRyYW5zU2VxSW5mbz0oVGUucHJvdG90eXBlLnRyYW5zX3R5cGU9YS5uZXdCdWZmZXIoW10pLFRlLnByb3RvdHlwZS50cmFuc19zZXE9MCxUZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBUZShlKX0sVGUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnRyYW5zX3R5cGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc190eXBlXCIpJiZ0LnVpbnQzMigxMCkuYnl0ZXMoZS50cmFuc190eXBlKSxudWxsIT1lLnRyYW5zX3NlcSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRyYW5zX3NlcVwiKSYmdC51aW50MzIoMTYpLnVpbnQzMihlLnRyYW5zX3NlcSksdH0sVGUuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU3RUcmFuc1NlcUluZm87ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci50cmFuc190eXBlPWUuYnl0ZXMoKTticmVhaztjYXNlIDI6ci50cmFuc19zZXE9ZS51aW50MzIoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LFRlKSxvLlN0VHJhbnNJbmZvPShTZS5wcm90b3R5cGUudHJhbnNfY2hhbm5lbD1hLm5ld0J1ZmZlcihbXSksU2UucHJvdG90eXBlLnRyYW5zX3NlcV9hcnJheT1hLmVtcHR5QXJyYXksU2UuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgU2UoZSl9LFNlLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnRyYW5zX2NoYW5uZWwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19jaGFubmVsXCIpJiZ0LnVpbnQzMigxMCkuYnl0ZXMoZS50cmFuc19jaGFubmVsKSxudWxsIT1lLnRyYW5zX3NlcV9hcnJheSYmZS50cmFuc19zZXFfYXJyYXkubGVuZ3RoKWZvcih2YXIgbj0wO248ZS50cmFuc19zZXFfYXJyYXkubGVuZ3RoOysrbiljLmxpdmVyb29tX2NzLlN0VHJhbnNTZXFJbmZvLmVuY29kZShlLnRyYW5zX3NlcV9hcnJheVtuXSx0LnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gdH0sU2UuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU3RUcmFuc0luZm87ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci50cmFuc19jaGFubmVsPWUuYnl0ZXMoKTticmVhaztjYXNlIDI6ci50cmFuc19zZXFfYXJyYXkmJnIudHJhbnNfc2VxX2FycmF5Lmxlbmd0aHx8KHIudHJhbnNfc2VxX2FycmF5PVtdKSxyLnRyYW5zX3NlcV9hcnJheS5wdXNoKGMubGl2ZXJvb21fY3MuU3RUcmFuc1NlcUluZm8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sU2UpLG8uVHJhbnNSZXE9KFJlLnByb3RvdHlwZS5yZXFfaGVhZD1udWxsLFJlLnByb3RvdHlwZS5uaWNrX25hbWU9YS5uZXdCdWZmZXIoW10pLFJlLnByb3RvdHlwZS5yb2xlPTAsUmUucHJvdG90eXBlLnRyYW5zX3R5cGU9YS5uZXdCdWZmZXIoW10pLFJlLnByb3RvdHlwZS50cmFuc19kYXRhPWEubmV3QnVmZmVyKFtdKSxSZS5wcm90b3R5cGUudHJhbnNfbG9jYWxfc2VxPTAsUmUucHJvdG90eXBlLnRyYW5zX2NoYW5uZWw9YS5uZXdCdWZmZXIoW10pLFJlLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFJlKGUpfSxSZS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUucmVxX2hlYWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyZXFfaGVhZFwiKSYmYy5saXZlcm9vbV9jcy5SZXFIZWFkLmVuY29kZShlLnJlcV9oZWFkLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLG51bGwhPWUubmlja19uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibmlja19uYW1lXCIpJiZ0LnVpbnQzMigxOCkuYnl0ZXMoZS5uaWNrX25hbWUpLG51bGwhPWUucm9sZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJvbGVcIikmJnQudWludDMyKDI0KS51aW50MzIoZS5yb2xlKSxudWxsIT1lLnRyYW5zX3R5cGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc190eXBlXCIpJiZ0LnVpbnQzMigzNCkuYnl0ZXMoZS50cmFuc190eXBlKSxudWxsIT1lLnRyYW5zX2RhdGEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19kYXRhXCIpJiZ0LnVpbnQzMig0MikuYnl0ZXMoZS50cmFuc19kYXRhKSxudWxsIT1lLnRyYW5zX2xvY2FsX3NlcSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRyYW5zX2xvY2FsX3NlcVwiKSYmdC51aW50MzIoNDgpLnVpbnQzMihlLnRyYW5zX2xvY2FsX3NlcSksbnVsbCE9ZS50cmFuc19jaGFubmVsJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfY2hhbm5lbFwiKSYmdC51aW50MzIoNTgpLmJ5dGVzKGUudHJhbnNfY2hhbm5lbCksdH0sUmUuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuVHJhbnNSZXE7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yZXFfaGVhZD1jLmxpdmVyb29tX2NzLlJlcUhlYWQuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSAyOnIubmlja19uYW1lPWUuYnl0ZXMoKTticmVhaztjYXNlIDM6ci5yb2xlPWUudWludDMyKCk7YnJlYWs7Y2FzZSA0OnIudHJhbnNfdHlwZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA1OnIudHJhbnNfZGF0YT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA2OnIudHJhbnNfbG9jYWxfc2VxPWUudWludDMyKCk7YnJlYWs7Y2FzZSA3OnIudHJhbnNfY2hhbm5lbD1lLmJ5dGVzKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxSZSksby5UcmFuc1JzcD0oa2UucHJvdG90eXBlLnJzcF9oZWFkPW51bGwsa2UucHJvdG90eXBlLnRyYW5zX3R5cGU9YS5uZXdCdWZmZXIoW10pLGtlLnByb3RvdHlwZS50cmFuc19zZXE9MCxrZS5wcm90b3R5cGUudHJhbnNfbGlzdF9zZXE9MCxrZS5wcm90b3R5cGUudHJhbnNfY2hhbm5lbD1hLm5ld0J1ZmZlcihbXSksa2UuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcga2UoZSl9LGtlLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yc3BfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJzcF9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJzcEhlYWQuZW5jb2RlKGUucnNwX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS50cmFuc190eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfdHlwZVwiKSYmdC51aW50MzIoMTgpLmJ5dGVzKGUudHJhbnNfdHlwZSksbnVsbCE9ZS50cmFuc19zZXEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19zZXFcIikmJnQudWludDMyKDI0KS51aW50MzIoZS50cmFuc19zZXEpLG51bGwhPWUudHJhbnNfbGlzdF9zZXEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19saXN0X3NlcVwiKSYmdC51aW50MzIoMzIpLnVpbnQzMihlLnRyYW5zX2xpc3Rfc2VxKSxudWxsIT1lLnRyYW5zX2NoYW5uZWwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19jaGFubmVsXCIpJiZ0LnVpbnQzMig0MikuYnl0ZXMoZS50cmFuc19jaGFubmVsKSx0fSxrZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5UcmFuc1JzcDtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnJzcF9oZWFkPWMubGl2ZXJvb21fY3MuUnNwSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci50cmFuc190eXBlPWUuYnl0ZXMoKTticmVhaztjYXNlIDM6ci50cmFuc19zZXE9ZS51aW50MzIoKTticmVhaztjYXNlIDQ6ci50cmFuc19saXN0X3NlcT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNTpyLnRyYW5zX2NoYW5uZWw9ZS5ieXRlcygpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sa2UpLG8uVHJhbnNGZXRjaFJlcT0oQ2UucHJvdG90eXBlLnJlcV9oZWFkPW51bGwsQ2UucHJvdG90eXBlLnRyYW5zX2NoYW5uZWw9YS5uZXdCdWZmZXIoW10pLENlLnByb3RvdHlwZS5mZXRjaF9hcnJheT1hLmVtcHR5QXJyYXksQ2UuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgQ2UoZSl9LENlLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJlcV9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVxX2hlYWRcIikmJmMubGl2ZXJvb21fY3MuUmVxSGVhZC5lbmNvZGUoZS5yZXFfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnRyYW5zX2NoYW5uZWwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19jaGFubmVsXCIpJiZ0LnVpbnQzMigxOCkuYnl0ZXMoZS50cmFuc19jaGFubmVsKSxudWxsIT1lLmZldGNoX2FycmF5JiZlLmZldGNoX2FycmF5Lmxlbmd0aClmb3IodmFyIG49MDtuPGUuZmV0Y2hfYXJyYXkubGVuZ3RoOysrbiljLmxpdmVyb29tX2NzLlN0VHJhbnNGZXRjaC5lbmNvZGUoZS5mZXRjaF9hcnJheVtuXSx0LnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gdH0sQ2UuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuVHJhbnNGZXRjaFJlcTtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnJlcV9oZWFkPWMubGl2ZXJvb21fY3MuUmVxSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci50cmFuc19jaGFubmVsPWUuYnl0ZXMoKTticmVhaztjYXNlIDM6ci5mZXRjaF9hcnJheSYmci5mZXRjaF9hcnJheS5sZW5ndGh8fChyLmZldGNoX2FycmF5PVtdKSxyLmZldGNoX2FycmF5LnB1c2goYy5saXZlcm9vbV9jcy5TdFRyYW5zRmV0Y2guZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sQ2UpLG8uU3RUcmFuc0ZldGNoPSh3ZS5wcm90b3R5cGUudHJhbnNfdHlwZT1hLm5ld0J1ZmZlcihbXSksd2UucHJvdG90eXBlLnRyYW5zX2xvY2FsX3NlcT0wLHdlLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IHdlKGUpfSx3ZS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUudHJhbnNfdHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRyYW5zX3R5cGVcIikmJnQudWludDMyKDEwKS5ieXRlcyhlLnRyYW5zX3R5cGUpLG51bGwhPWUudHJhbnNfbG9jYWxfc2VxJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfbG9jYWxfc2VxXCIpJiZ0LnVpbnQzMigxNikudWludDMyKGUudHJhbnNfbG9jYWxfc2VxKSx0fSx3ZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5TdFRyYW5zRmV0Y2g7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci50cmFuc190eXBlPWUuYnl0ZXMoKTticmVhaztjYXNlIDI6ci50cmFuc19sb2NhbF9zZXE9ZS51aW50MzIoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LHdlKSxvLlRyYW5zRmV0Y2hSc3A9KE5lLnByb3RvdHlwZS5yc3BfaGVhZD1udWxsLE5lLnByb3RvdHlwZS50cmFuc19jaGFubmVsPWEubmV3QnVmZmVyKFtdKSxOZS5wcm90b3R5cGUudHJhbnNfZmV0Y2hfcmVzdWx0cz1hLmVtcHR5QXJyYXksTmUucHJvdG90eXBlLnRyYW5zX2xpc3Rfc2VxPTAsTmUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgTmUoZSl9LE5lLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJzcF9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicnNwX2hlYWRcIikmJmMubGl2ZXJvb21fY3MuUnNwSGVhZC5lbmNvZGUoZS5yc3BfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnRyYW5zX2NoYW5uZWwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19jaGFubmVsXCIpJiZ0LnVpbnQzMigxOCkuYnl0ZXMoZS50cmFuc19jaGFubmVsKSxudWxsIT1lLnRyYW5zX2ZldGNoX3Jlc3VsdHMmJmUudHJhbnNfZmV0Y2hfcmVzdWx0cy5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLnRyYW5zX2ZldGNoX3Jlc3VsdHMubGVuZ3RoOysrbiljLmxpdmVyb29tX2NzLlRyYW5zRmV0Y2hSZXN1bHQuZW5jb2RlKGUudHJhbnNfZmV0Y2hfcmVzdWx0c1tuXSx0LnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gbnVsbCE9ZS50cmFuc19saXN0X3NlcSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRyYW5zX2xpc3Rfc2VxXCIpJiZ0LnVpbnQzMigzMikudWludDMyKGUudHJhbnNfbGlzdF9zZXEpLHR9LE5lLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlRyYW5zRmV0Y2hSc3A7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yc3BfaGVhZD1jLmxpdmVyb29tX2NzLlJzcEhlYWQuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSAyOnIudHJhbnNfY2hhbm5lbD1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAzOnIudHJhbnNfZmV0Y2hfcmVzdWx0cyYmci50cmFuc19mZXRjaF9yZXN1bHRzLmxlbmd0aHx8KHIudHJhbnNfZmV0Y2hfcmVzdWx0cz1bXSksci50cmFuc19mZXRjaF9yZXN1bHRzLnB1c2goYy5saXZlcm9vbV9jcy5UcmFuc0ZldGNoUmVzdWx0LmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztjYXNlIDQ6ci50cmFuc19saXN0X3NlcT1lLnVpbnQzMigpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sTmUpLG8uVHJhbnNGZXRjaFJlc3VsdD0oSWUucHJvdG90eXBlLnRyYW5zX3R5cGU9YS5uZXdCdWZmZXIoW10pLEllLnByb3RvdHlwZS50cmFuc19kYXRhPWEubmV3QnVmZmVyKFtdKSxJZS5wcm90b3R5cGUudHJhbnNfaWRuYW1lPWEubmV3QnVmZmVyKFtdKSxJZS5wcm90b3R5cGUudHJhbnNfbmlja25hbWU9YS5uZXdCdWZmZXIoW10pLEllLnByb3RvdHlwZS50cmFuc19yb2xlPTAsSWUucHJvdG90eXBlLnRyYW5zX3NlbmRfdGltZT1hLkxvbmc/YS5Mb25nLmZyb21CaXRzKDAsMCwhMSk6MCxJZS5wcm90b3R5cGUudHJhbnNfc2VxPTAsSWUucHJvdG90eXBlLmVycl9jb2RlPTAsSWUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgSWUoZSl9LEllLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS50cmFuc190eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfdHlwZVwiKSYmdC51aW50MzIoMTApLmJ5dGVzKGUudHJhbnNfdHlwZSksbnVsbCE9ZS50cmFuc19kYXRhJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfZGF0YVwiKSYmdC51aW50MzIoMTgpLmJ5dGVzKGUudHJhbnNfZGF0YSksbnVsbCE9ZS50cmFuc19pZG5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19pZG5hbWVcIikmJnQudWludDMyKDI2KS5ieXRlcyhlLnRyYW5zX2lkbmFtZSksbnVsbCE9ZS50cmFuc19uaWNrbmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRyYW5zX25pY2tuYW1lXCIpJiZ0LnVpbnQzMigzNCkuYnl0ZXMoZS50cmFuc19uaWNrbmFtZSksbnVsbCE9ZS50cmFuc19yb2xlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfcm9sZVwiKSYmdC51aW50MzIoNDApLnVpbnQzMihlLnRyYW5zX3JvbGUpLG51bGwhPWUudHJhbnNfc2VuZF90aW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfc2VuZF90aW1lXCIpJiZ0LnVpbnQzMig0OCkuaW50NjQoZS50cmFuc19zZW5kX3RpbWUpLG51bGwhPWUudHJhbnNfc2VxJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfc2VxXCIpJiZ0LnVpbnQzMig1NikudWludDMyKGUudHJhbnNfc2VxKSxudWxsIT1lLmVycl9jb2RlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZXJyX2NvZGVcIikmJnQudWludDMyKDY0KS5pbnQzMihlLmVycl9jb2RlKSx0fSxJZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5UcmFuc0ZldGNoUmVzdWx0O2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIudHJhbnNfdHlwZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAyOnIudHJhbnNfZGF0YT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAzOnIudHJhbnNfaWRuYW1lPWUuYnl0ZXMoKTticmVhaztjYXNlIDQ6ci50cmFuc19uaWNrbmFtZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA1OnIudHJhbnNfcm9sZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNjpyLnRyYW5zX3NlbmRfdGltZT1lLmludDY0KCk7YnJlYWs7Y2FzZSA3OnIudHJhbnNfc2VxPWUudWludDMyKCk7YnJlYWs7Y2FzZSA4OnIuZXJyX2NvZGU9ZS5pbnQzMigpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sSWUpLG8uVXNlclRyYW5zRmV0Y2hSZXE9KE1lLnByb3RvdHlwZS5yZXFfaGVhZD1udWxsLE1lLnByb3RvdHlwZS5uaWNrX25hbWU9YS5uZXdCdWZmZXIoW10pLE1lLnByb3RvdHlwZS5yb2xlPTAsTWUucHJvdG90eXBlLnRyYW5zX2NoYW5uZWw9YS5uZXdCdWZmZXIoW10pLE1lLnByb3RvdHlwZS5mZXRjaF9hcnJheT1hLmVtcHR5QXJyYXksTWUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgTWUoZSl9LE1lLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJlcV9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVxX2hlYWRcIikmJmMubGl2ZXJvb21fY3MuUmVxSGVhZC5lbmNvZGUoZS5yZXFfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLm5pY2tfbmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm5pY2tfbmFtZVwiKSYmdC51aW50MzIoMTgpLmJ5dGVzKGUubmlja19uYW1lKSxudWxsIT1lLnJvbGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyb2xlXCIpJiZ0LnVpbnQzMigyNCkudWludDMyKGUucm9sZSksbnVsbCE9ZS50cmFuc19jaGFubmVsJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfY2hhbm5lbFwiKSYmdC51aW50MzIoMzQpLmJ5dGVzKGUudHJhbnNfY2hhbm5lbCksbnVsbCE9ZS5mZXRjaF9hcnJheSYmZS5mZXRjaF9hcnJheS5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLmZldGNoX2FycmF5Lmxlbmd0aDsrK24pYy5saXZlcm9vbV9jcy5TdFVzZXJUcmFuc0ZldGNoLmVuY29kZShlLmZldGNoX2FycmF5W25dLHQudWludDMyKDQyKS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxNZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5Vc2VyVHJhbnNGZXRjaFJlcTtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnJlcV9oZWFkPWMubGl2ZXJvb21fY3MuUmVxSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci5uaWNrX25hbWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMzpyLnJvbGU9ZS51aW50MzIoKTticmVhaztjYXNlIDQ6ci50cmFuc19jaGFubmVsPWUuYnl0ZXMoKTticmVhaztjYXNlIDU6ci5mZXRjaF9hcnJheSYmci5mZXRjaF9hcnJheS5sZW5ndGh8fChyLmZldGNoX2FycmF5PVtdKSxyLmZldGNoX2FycmF5LnB1c2goYy5saXZlcm9vbV9jcy5TdFVzZXJUcmFuc0ZldGNoLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LE1lKSxvLlN0VXNlclRyYW5zRmV0Y2g9KExlLnByb3RvdHlwZS50cmFuc190eXBlPWEubmV3QnVmZmVyKFtdKSxMZS5wcm90b3R5cGUudHJhbnNfbG9jYWxfc2VxPTAsTGUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgTGUoZSl9LExlLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS50cmFuc190eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfdHlwZVwiKSYmdC51aW50MzIoMTApLmJ5dGVzKGUudHJhbnNfdHlwZSksbnVsbCE9ZS50cmFuc19sb2NhbF9zZXEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19sb2NhbF9zZXFcIikmJnQudWludDMyKDE2KS51aW50MzIoZS50cmFuc19sb2NhbF9zZXEpLHR9LExlLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlN0VXNlclRyYW5zRmV0Y2g7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci50cmFuc190eXBlPWUuYnl0ZXMoKTticmVhaztjYXNlIDI6ci50cmFuc19sb2NhbF9zZXE9ZS51aW50MzIoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LExlKSxvLlVzZXJUcmFuc0ZldGNoUnNwPShQZS5wcm90b3R5cGUucnNwX2hlYWQ9bnVsbCxQZS5wcm90b3R5cGUudHJhbnNfY2hhbm5lbD1hLm5ld0J1ZmZlcihbXSksUGUucHJvdG90eXBlLnRyYW5zX2ZldGNoX3Jlc3VsdHM9YS5lbXB0eUFycmF5LFBlLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFBlKGUpfSxQZS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yc3BfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJzcF9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJzcEhlYWQuZW5jb2RlKGUucnNwX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS50cmFuc19jaGFubmVsJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfY2hhbm5lbFwiKSYmdC51aW50MzIoMTgpLmJ5dGVzKGUudHJhbnNfY2hhbm5lbCksbnVsbCE9ZS50cmFuc19mZXRjaF9yZXN1bHRzJiZlLnRyYW5zX2ZldGNoX3Jlc3VsdHMubGVuZ3RoKWZvcih2YXIgbj0wO248ZS50cmFuc19mZXRjaF9yZXN1bHRzLmxlbmd0aDsrK24pYy5saXZlcm9vbV9jcy5TdFVzZXJUcmFuc0ZldGNoUmVzdWx0LmVuY29kZShlLnRyYW5zX2ZldGNoX3Jlc3VsdHNbbl0sdC51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LFBlLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlVzZXJUcmFuc0ZldGNoUnNwO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIucnNwX2hlYWQ9Yy5saXZlcm9vbV9jcy5Sc3BIZWFkLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgMjpyLnRyYW5zX2NoYW5uZWw9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMzpyLnRyYW5zX2ZldGNoX3Jlc3VsdHMmJnIudHJhbnNfZmV0Y2hfcmVzdWx0cy5sZW5ndGh8fChyLnRyYW5zX2ZldGNoX3Jlc3VsdHM9W10pLHIudHJhbnNfZmV0Y2hfcmVzdWx0cy5wdXNoKGMubGl2ZXJvb21fY3MuU3RVc2VyVHJhbnNGZXRjaFJlc3VsdC5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxQZSksby5TdFVzZXJUcmFuc0ZldGNoUmVzdWx0PShBZS5wcm90b3R5cGUudHJhbnNfdHlwZT1hLm5ld0J1ZmZlcihbXSksQWUucHJvdG90eXBlLnRyYW5zX2RhdGE9YS5uZXdCdWZmZXIoW10pLEFlLnByb3RvdHlwZS50cmFuc19pZG5hbWU9YS5uZXdCdWZmZXIoW10pLEFlLnByb3RvdHlwZS50cmFuc19uaWNrbmFtZT1hLm5ld0J1ZmZlcihbXSksQWUucHJvdG90eXBlLnRyYW5zX3JvbGU9MCxBZS5wcm90b3R5cGUudHJhbnNfc2VuZF90aW1lPWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCExKTowLEFlLnByb3RvdHlwZS50cmFuc19zZXE9MCxBZS5wcm90b3R5cGUuZXJyX2NvZGU9MCxBZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBBZShlKX0sQWUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnRyYW5zX3R5cGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc190eXBlXCIpJiZ0LnVpbnQzMigxMCkuYnl0ZXMoZS50cmFuc190eXBlKSxudWxsIT1lLnRyYW5zX2RhdGEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19kYXRhXCIpJiZ0LnVpbnQzMigxOCkuYnl0ZXMoZS50cmFuc19kYXRhKSxudWxsIT1lLnRyYW5zX2lkbmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRyYW5zX2lkbmFtZVwiKSYmdC51aW50MzIoMjYpLmJ5dGVzKGUudHJhbnNfaWRuYW1lKSxudWxsIT1lLnRyYW5zX25pY2tuYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfbmlja25hbWVcIikmJnQudWludDMyKDM0KS5ieXRlcyhlLnRyYW5zX25pY2tuYW1lKSxudWxsIT1lLnRyYW5zX3JvbGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19yb2xlXCIpJiZ0LnVpbnQzMig0MCkudWludDMyKGUudHJhbnNfcm9sZSksbnVsbCE9ZS50cmFuc19zZW5kX3RpbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19zZW5kX3RpbWVcIikmJnQudWludDMyKDQ4KS5pbnQ2NChlLnRyYW5zX3NlbmRfdGltZSksbnVsbCE9ZS50cmFuc19zZXEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19zZXFcIikmJnQudWludDMyKDU2KS51aW50MzIoZS50cmFuc19zZXEpLG51bGwhPWUuZXJyX2NvZGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJlcnJfY29kZVwiKSYmdC51aW50MzIoNjQpLmludDMyKGUuZXJyX2NvZGUpLHR9LEFlLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlN0VXNlclRyYW5zRmV0Y2hSZXN1bHQ7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci50cmFuc190eXBlPWUuYnl0ZXMoKTticmVhaztjYXNlIDI6ci50cmFuc19kYXRhPWUuYnl0ZXMoKTticmVhaztjYXNlIDM6ci50cmFuc19pZG5hbWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgNDpyLnRyYW5zX25pY2tuYW1lPWUuYnl0ZXMoKTticmVhaztjYXNlIDU6ci50cmFuc19yb2xlPWUudWludDMyKCk7YnJlYWs7Y2FzZSA2OnIudHJhbnNfc2VuZF90aW1lPWUuaW50NjQoKTticmVhaztjYXNlIDc6ci50cmFuc19zZXE9ZS51aW50MzIoKTticmVhaztjYXNlIDg6ci5lcnJfY29kZT1lLmludDMyKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxBZSksby5CaWdpbUNoYXRSZXE9KERlLnByb3RvdHlwZS5yZXFfaGVhZD1udWxsLERlLnByb3RvdHlwZS5uaWNrX25hbWU9YS5uZXdCdWZmZXIoW10pLERlLnByb3RvdHlwZS5yb2xlPTAsRGUucHJvdG90eXBlLm1zZ3M9YS5lbXB0eUFycmF5LERlLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IERlKGUpfSxEZS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yZXFfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJlcV9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJlcUhlYWQuZW5jb2RlKGUucmVxX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS5uaWNrX25hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuaWNrX25hbWVcIikmJnQudWludDMyKDE4KS5ieXRlcyhlLm5pY2tfbmFtZSksbnVsbCE9ZS5yb2xlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9sZVwiKSYmdC51aW50MzIoMjQpLnVpbnQzMihlLnJvbGUpLG51bGwhPWUubXNncyYmZS5tc2dzLmxlbmd0aClmb3IodmFyIG49MDtuPGUubXNncy5sZW5ndGg7KytuKWMubGl2ZXJvb21fY3MuU3RCaWdpbUNoYXREYXRhLmVuY29kZShlLm1zZ3Nbbl0sdC51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LERlLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLkJpZ2ltQ2hhdFJlcTtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnJlcV9oZWFkPWMubGl2ZXJvb21fY3MuUmVxSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci5uaWNrX25hbWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMzpyLnJvbGU9ZS51aW50MzIoKTticmVhaztjYXNlIDQ6ci5tc2dzJiZyLm1zZ3MubGVuZ3RofHwoci5tc2dzPVtdKSxyLm1zZ3MucHVzaChjLmxpdmVyb29tX2NzLlN0QmlnaW1DaGF0RGF0YS5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxEZSksby5TdEJpZ2ltQ2hhdERhdGE9KEhlLnByb3RvdHlwZS5tc2dfY2F0ZWdvcnk9MCxIZS5wcm90b3R5cGUubXNnX3R5cGU9MCxIZS5wcm90b3R5cGUubXNnX2NvbnRlbnQ9YS5uZXdCdWZmZXIoW10pLEhlLnByb3RvdHlwZS5tc2dfdGltZXN0YW1wPWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCExKTowLEhlLnByb3RvdHlwZS5iaWdtc2dfY2xpZW50X2lkPWEubmV3QnVmZmVyKFtdKSxIZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBIZShlKX0sSGUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLm1zZ19jYXRlZ29yeSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1zZ19jYXRlZ29yeVwiKSYmdC51aW50MzIoOCkudWludDMyKGUubXNnX2NhdGVnb3J5KSxudWxsIT1lLm1zZ190eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibXNnX3R5cGVcIikmJnQudWludDMyKDE2KS51aW50MzIoZS5tc2dfdHlwZSksbnVsbCE9ZS5tc2dfY29udGVudCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1zZ19jb250ZW50XCIpJiZ0LnVpbnQzMigyNikuYnl0ZXMoZS5tc2dfY29udGVudCksbnVsbCE9ZS5tc2dfdGltZXN0YW1wJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibXNnX3RpbWVzdGFtcFwiKSYmdC51aW50MzIoMzIpLmludDY0KGUubXNnX3RpbWVzdGFtcCksbnVsbCE9ZS5iaWdtc2dfY2xpZW50X2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYmlnbXNnX2NsaWVudF9pZFwiKSYmdC51aW50MzIoNDIpLmJ5dGVzKGUuYmlnbXNnX2NsaWVudF9pZCksdH0sSGUuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU3RCaWdpbUNoYXREYXRhO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIubXNnX2NhdGVnb3J5PWUudWludDMyKCk7YnJlYWs7Y2FzZSAyOnIubXNnX3R5cGU9ZS51aW50MzIoKTticmVhaztjYXNlIDM6ci5tc2dfY29udGVudD1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA0OnIubXNnX3RpbWVzdGFtcD1lLmludDY0KCk7YnJlYWs7Y2FzZSA1OnIuYmlnbXNnX2NsaWVudF9pZD1lLmJ5dGVzKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxIZSksby5CaWdpbUNoYXRSc3A9KGplLnByb3RvdHlwZS5yc3BfaGVhZD1udWxsLGplLnByb3RvdHlwZS5iaWdpbV90aW1lX3dpbmRvdz0wLGplLnByb3RvdHlwZS5tc2dzPWEuZW1wdHlBcnJheSxqZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBqZShlKX0samUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxzLmNyZWF0ZSgpLG51bGwhPWUucnNwX2hlYWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyc3BfaGVhZFwiKSYmYy5saXZlcm9vbV9jcy5Sc3BIZWFkLmVuY29kZShlLnJzcF9oZWFkLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLG51bGwhPWUuYmlnaW1fdGltZV93aW5kb3cmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJiaWdpbV90aW1lX3dpbmRvd1wiKSYmdC51aW50MzIoMTYpLnVpbnQzMihlLmJpZ2ltX3RpbWVfd2luZG93KSxudWxsIT1lLm1zZ3MmJmUubXNncy5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLm1zZ3MubGVuZ3RoOysrbiljLmxpdmVyb29tX2NzLlN0QmlnaW1DaGF0UnNwRGF0YS5lbmNvZGUoZS5tc2dzW25dLHQudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxqZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5CaWdpbUNoYXRSc3A7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yc3BfaGVhZD1jLmxpdmVyb29tX2NzLlJzcEhlYWQuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSAyOnIuYmlnaW1fdGltZV93aW5kb3c9ZS51aW50MzIoKTticmVhaztjYXNlIDM6ci5tc2dzJiZyLm1zZ3MubGVuZ3RofHwoci5tc2dzPVtdKSxyLm1zZ3MucHVzaChjLmxpdmVyb29tX2NzLlN0QmlnaW1DaGF0UnNwRGF0YS5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxqZSksby5TdEJpZ2ltQ2hhdFJzcERhdGE9KHFlLnByb3RvdHlwZS5iaWdtc2dfaWQ9YS5uZXdCdWZmZXIoW10pLHFlLnByb3RvdHlwZS5iaWdtc2dfY2xpZW50X2lkPWEubmV3QnVmZmVyKFtdKSxxZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBxZShlKX0scWUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLmJpZ21zZ19pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImJpZ21zZ19pZFwiKSYmdC51aW50MzIoMTApLmJ5dGVzKGUuYmlnbXNnX2lkKSxudWxsIT1lLmJpZ21zZ19jbGllbnRfaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJiaWdtc2dfY2xpZW50X2lkXCIpJiZ0LnVpbnQzMigxOCkuYnl0ZXMoZS5iaWdtc2dfY2xpZW50X2lkKSx0fSxxZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5TdEJpZ2ltQ2hhdFJzcERhdGE7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5iaWdtc2dfaWQ9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMjpyLmJpZ21zZ19jbGllbnRfaWQ9ZS5ieXRlcygpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0scWUpLG8uUmVsYXlSZXE9KFVlLnByb3RvdHlwZS5yZXFfaGVhZD1udWxsLFVlLnByb3RvdHlwZS5uaWNrX25hbWU9YS5uZXdCdWZmZXIoW10pLFVlLnByb3RvdHlwZS5yb2xlPTAsVWUucHJvdG90eXBlLnJlbGF5X3R5cGU9YS5uZXdCdWZmZXIoW10pLFVlLnByb3RvdHlwZS5yZWxheV9kYXRhPWEubmV3QnVmZmVyKFtdKSxVZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBVZShlKX0sVWUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJlcV9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVxX2hlYWRcIikmJmMubGl2ZXJvb21fY3MuUmVxSGVhZC5lbmNvZGUoZS5yZXFfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLm5pY2tfbmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm5pY2tfbmFtZVwiKSYmdC51aW50MzIoMTgpLmJ5dGVzKGUubmlja19uYW1lKSxudWxsIT1lLnJvbGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyb2xlXCIpJiZ0LnVpbnQzMigyNCkudWludDMyKGUucm9sZSksbnVsbCE9ZS5yZWxheV90eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVsYXlfdHlwZVwiKSYmdC51aW50MzIoMzQpLmJ5dGVzKGUucmVsYXlfdHlwZSksbnVsbCE9ZS5yZWxheV9kYXRhJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVsYXlfZGF0YVwiKSYmdC51aW50MzIoNDIpLmJ5dGVzKGUucmVsYXlfZGF0YSksdH0sVWUuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuUmVsYXlSZXE7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yZXFfaGVhZD1jLmxpdmVyb29tX2NzLlJlcUhlYWQuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSAyOnIubmlja19uYW1lPWUuYnl0ZXMoKTticmVhaztjYXNlIDM6ci5yb2xlPWUudWludDMyKCk7YnJlYWs7Y2FzZSA0OnIucmVsYXlfdHlwZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA1OnIucmVsYXlfZGF0YT1lLmJ5dGVzKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxVZSksby5SZWxheVJzcD0oQmUucHJvdG90eXBlLnJzcF9oZWFkPW51bGwsQmUucHJvdG90eXBlLnJlbGV5X3R5cGU9YS5uZXdCdWZmZXIoW10pLEJlLnByb3RvdHlwZS5yZWxheV9yZXN1bHQ9YS5uZXdCdWZmZXIoW10pLEJlLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IEJlKGUpfSxCZS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUucnNwX2hlYWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyc3BfaGVhZFwiKSYmYy5saXZlcm9vbV9jcy5Sc3BIZWFkLmVuY29kZShlLnJzcF9oZWFkLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLG51bGwhPWUucmVsZXlfdHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJlbGV5X3R5cGVcIikmJnQudWludDMyKDE4KS5ieXRlcyhlLnJlbGV5X3R5cGUpLG51bGwhPWUucmVsYXlfcmVzdWx0JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVsYXlfcmVzdWx0XCIpJiZ0LnVpbnQzMigyNikuYnl0ZXMoZS5yZWxheV9yZXN1bHQpLHR9LEJlLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlJlbGF5UnNwO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIucnNwX2hlYWQ9Yy5saXZlcm9vbV9jcy5Sc3BIZWFkLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgMjpyLnJlbGV5X3R5cGU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMzpyLnJlbGF5X3Jlc3VsdD1lLmJ5dGVzKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxCZSksby5SZW5ld1Rva2VuUmVxPSh4ZS5wcm90b3R5cGUucmVxX2hlYWQ9bnVsbCx4ZS5wcm90b3R5cGUudG9rZW49XCJcIix4ZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyB4ZShlKX0seGUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJlcV9oZWFkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVxX2hlYWRcIikmJmMubGl2ZXJvb21fY3MuUmVxSGVhZC5lbmNvZGUoZS5yZXFfaGVhZCx0LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnRva2VuJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidG9rZW5cIikmJnQudWludDMyKDE4KS5zdHJpbmcoZS50b2tlbiksdH0seGUuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuUmVuZXdUb2tlblJlcTtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnJlcV9oZWFkPWMubGl2ZXJvb21fY3MuUmVxSGVhZC5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDI6ci50b2tlbj1lLnN0cmluZygpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0seGUpLG8uUmVuZXdUb2tlblJzcD0oR2UucHJvdG90eXBlLnJzcF9oZWFkPW51bGwsR2UucHJvdG90eXBlLnRva2VuX3JlbWFpbl90aW1lPTAsR2UuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgR2UoZSl9LEdlLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yc3BfaGVhZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJzcF9oZWFkXCIpJiZjLmxpdmVyb29tX2NzLlJzcEhlYWQuZW5jb2RlKGUucnNwX2hlYWQsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS50b2tlbl9yZW1haW5fdGltZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRva2VuX3JlbWFpbl90aW1lXCIpJiZ0LnVpbnQzMigxNikudWludDMyKGUudG9rZW5fcmVtYWluX3RpbWUpLHR9LEdlLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlJlbmV3VG9rZW5Sc3A7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yc3BfaGVhZD1jLmxpdmVyb29tX2NzLlJzcEhlYWQuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSAyOnIudG9rZW5fcmVtYWluX3RpbWU9ZS51aW50MzIoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LEdlKSxvLlVzZXJBY3Rpb249KFZlLnByb3RvdHlwZS5hY3Rpb249MCxWZS5wcm90b3R5cGUuaWRfbmFtZT1hLm5ld0J1ZmZlcihbXSksVmUucHJvdG90eXBlLm5pY2tfbmFtZT1hLm5ld0J1ZmZlcihbXSksVmUucHJvdG90eXBlLnJvbGU9MCxWZS5wcm90b3R5cGUubG9naW5fdGltZT1hLkxvbmc/YS5Mb25nLmZyb21CaXRzKDAsMCwhMSk6MCxWZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBWZShlKX0sVmUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLmFjdGlvbiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImFjdGlvblwiKSYmdC51aW50MzIoOCkudWludDMyKGUuYWN0aW9uKSxudWxsIT1lLmlkX25hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJpZF9uYW1lXCIpJiZ0LnVpbnQzMigxOCkuYnl0ZXMoZS5pZF9uYW1lKSxudWxsIT1lLm5pY2tfbmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm5pY2tfbmFtZVwiKSYmdC51aW50MzIoMjYpLmJ5dGVzKGUubmlja19uYW1lKSxudWxsIT1lLnJvbGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyb2xlXCIpJiZ0LnVpbnQzMigzMikudWludDMyKGUucm9sZSksbnVsbCE9ZS5sb2dpbl90aW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibG9naW5fdGltZVwiKSYmdC51aW50MzIoNDApLmludDY0KGUubG9naW5fdGltZSksdH0sVmUuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuVXNlckFjdGlvbjtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLmFjdGlvbj1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMjpyLmlkX25hbWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMzpyLm5pY2tfbmFtZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA0OnIucm9sZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNTpyLmxvZ2luX3RpbWU9ZS5pbnQ2NCgpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sVmUpLG8uUHVzaFVzZXJJbmZvVXBkYXRlZD0oemUucHJvdG90eXBlLnJvb21faWQ9YS5uZXdCdWZmZXIoW10pLHplLnByb3RvdHlwZS5zZXJ2ZXJfdXNlcl9zZXE9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITEpOjAsemUucHJvdG90eXBlLnVzZXJfbGlzdD1hLmVtcHR5QXJyYXksemUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgemUoZSl9LHplLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnJvb21faWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyb29tX2lkXCIpJiZ0LnVpbnQzMigxMCkuYnl0ZXMoZS5yb29tX2lkKSxudWxsIT1lLnNlcnZlcl91c2VyX3NlcSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlcnZlcl91c2VyX3NlcVwiKSYmdC51aW50MzIoMTYpLmludDY0KGUuc2VydmVyX3VzZXJfc2VxKSxudWxsIT1lLnVzZXJfbGlzdCYmZS51c2VyX2xpc3QubGVuZ3RoKWZvcih2YXIgbj0wO248ZS51c2VyX2xpc3QubGVuZ3RoOysrbiljLmxpdmVyb29tX2NzLlVzZXJBY3Rpb24uZW5jb2RlKGUudXNlcl9saXN0W25dLHQudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSx6ZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5QdXNoVXNlckluZm9VcGRhdGVkO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIucm9vbV9pZD1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAyOnIuc2VydmVyX3VzZXJfc2VxPWUuaW50NjQoKTticmVhaztjYXNlIDM6ci51c2VyX2xpc3QmJnIudXNlcl9saXN0Lmxlbmd0aHx8KHIudXNlcl9saXN0PVtdKSxyLnVzZXJfbGlzdC5wdXNoKGMubGl2ZXJvb21fY3MuVXNlckFjdGlvbi5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSx6ZSksby5QdXNoVXNlcktpY2tvdXQ9KEZlLnByb3RvdHlwZS5pZF9uYW1lPWEubmV3QnVmZmVyKFtdKSxGZS5wcm90b3R5cGUucm9vbV9pZD1hLm5ld0J1ZmZlcihbXSksRmUucHJvdG90eXBlLnNlc3Npb25faWQ9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITApOjAsRmUucHJvdG90eXBlLmtpY2tvdXRfcmVhc29uPTAsRmUucHJvdG90eXBlLmN1c3RvbV9yZWFzb249YS5uZXdCdWZmZXIoW10pLEZlLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IEZlKGUpfSxGZS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxzLmNyZWF0ZSgpLG51bGwhPWUuaWRfbmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImlkX25hbWVcIikmJnQudWludDMyKDEwKS5ieXRlcyhlLmlkX25hbWUpLG51bGwhPWUucm9vbV9pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJvb21faWRcIikmJnQudWludDMyKDE4KS5ieXRlcyhlLnJvb21faWQpLG51bGwhPWUuc2Vzc2lvbl9pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlc3Npb25faWRcIikmJnQudWludDMyKDI0KS51aW50NjQoZS5zZXNzaW9uX2lkKSxudWxsIT1lLmtpY2tvdXRfcmVhc29uJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwia2lja291dF9yZWFzb25cIikmJnQudWludDMyKDMyKS5pbnQzMihlLmtpY2tvdXRfcmVhc29uKSxudWxsIT1lLmN1c3RvbV9yZWFzb24mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJjdXN0b21fcmVhc29uXCIpJiZ0LnVpbnQzMig0MikuYnl0ZXMoZS5jdXN0b21fcmVhc29uKSx0fSxGZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5QdXNoVXNlcktpY2tvdXQ7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5pZF9uYW1lPWUuYnl0ZXMoKTticmVhaztjYXNlIDI6ci5yb29tX2lkPWUuYnl0ZXMoKTticmVhaztjYXNlIDM6ci5zZXNzaW9uX2lkPWUudWludDY0KCk7YnJlYWs7Y2FzZSA0OnIua2lja291dF9yZWFzb249ZS5pbnQzMigpO2JyZWFrO2Nhc2UgNTpyLmN1c3RvbV9yZWFzb249ZS5ieXRlcygpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sRmUpLG8uUHVzaFVzZXJMb2dSZXBvcnQ9KFdlLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFdlKGUpfSxXZS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8cy5jcmVhdGUoKX0sV2UuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTt2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Q7Zm9yKHQ9bmV3IGMubGl2ZXJvb21fY3MuUHVzaFVzZXJMb2dSZXBvcnQ7ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7ZS5za2lwVHlwZSg3JnIpfXJldHVybiB0fSxXZSksby5QdXNoVXNlclRva2VuRXhwaXJlPShaZS5wcm90b3R5cGUucm9vbV9pZD1hLm5ld0J1ZmZlcihbXSksWmUucHJvdG90eXBlLnRva2VuPVwiXCIsWmUucHJvdG90eXBlLnN0b3Bfc3RyZWFtPW51bGwsWmUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgWmUoZSl9LFplLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5yb29tX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9vbV9pZFwiKSYmdC51aW50MzIoMTApLmJ5dGVzKGUucm9vbV9pZCksbnVsbCE9ZS50b2tlbiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRva2VuXCIpJiZ0LnVpbnQzMigxOCkuc3RyaW5nKGUudG9rZW4pLG51bGwhPWUuc3RvcF9zdHJlYW0mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdG9wX3N0cmVhbVwiKSYmYy5saXZlcm9vbV9jcy5TdG9wU3RyZWFtLmVuY29kZShlLnN0b3Bfc3RyZWFtLHQudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpLHR9LFplLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlB1c2hVc2VyVG9rZW5FeHBpcmU7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yb29tX2lkPWUuYnl0ZXMoKTticmVhaztjYXNlIDI6ci50b2tlbj1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMzpyLnN0b3Bfc3RyZWFtPWMubGl2ZXJvb21fY3MuU3RvcFN0cmVhbS5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LFplKSxvLlN0b3BTdHJlYW09KFllLnByb3RvdHlwZS5zdHJlYW1faWRfbGlzdD1hLmVtcHR5QXJyYXksWWUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgWWUoZSl9LFllLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLnN0cmVhbV9pZF9saXN0JiZlLnN0cmVhbV9pZF9saXN0Lmxlbmd0aClmb3IodmFyIG49MDtuPGUuc3RyZWFtX2lkX2xpc3QubGVuZ3RoOysrbil0LnVpbnQzMigxMCkuYnl0ZXMoZS5zdHJlYW1faWRfbGlzdFtuXSk7cmV0dXJuIHR9LFllLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlN0b3BTdHJlYW07ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7bz4+PjM9PTE/KHIuc3RyZWFtX2lkX2xpc3QmJnIuc3RyZWFtX2lkX2xpc3QubGVuZ3RofHwoci5zdHJlYW1faWRfbGlzdD1bXSksci5zdHJlYW1faWRfbGlzdC5wdXNoKGUuYnl0ZXMoKSkpOmUuc2tpcFR5cGUoNyZvKX1yZXR1cm4gcn0sWWUpLG8uUHVzaFN0cmVhbT0oS2UucHJvdG90eXBlLnJvb21faWQ9YS5uZXdCdWZmZXIoW10pLEtlLnByb3RvdHlwZS5zdHJlYW1fc2VxPTAsS2UucHJvdG90eXBlLnN0cmVhbV9pbmZvPWEuZW1wdHlBcnJheSxLZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBLZShlKX0sS2UuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxzLmNyZWF0ZSgpLG51bGwhPWUucm9vbV9pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJvb21faWRcIikmJnQudWludDMyKDEwKS5ieXRlcyhlLnJvb21faWQpLG51bGwhPWUuc3RyZWFtX3NlcSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0cmVhbV9zZXFcIikmJnQudWludDMyKDE2KS51aW50MzIoZS5zdHJlYW1fc2VxKSxudWxsIT1lLnN0cmVhbV9pbmZvJiZlLnN0cmVhbV9pbmZvLmxlbmd0aClmb3IodmFyIG49MDtuPGUuc3RyZWFtX2luZm8ubGVuZ3RoOysrbiljLmxpdmVyb29tX2NzLlN0UHVzaFN0cmVhbUluZm8uZW5jb2RlKGUuc3RyZWFtX2luZm9bbl0sdC51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LEtlLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlB1c2hTdHJlYW07ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yb29tX2lkPWUuYnl0ZXMoKTticmVhaztjYXNlIDI6ci5zdHJlYW1fc2VxPWUudWludDMyKCk7YnJlYWs7Y2FzZSAzOnIuc3RyZWFtX2luZm8mJnIuc3RyZWFtX2luZm8ubGVuZ3RofHwoci5zdHJlYW1faW5mbz1bXSksci5zdHJlYW1faW5mby5wdXNoKGMubGl2ZXJvb21fY3MuU3RQdXNoU3RyZWFtSW5mby5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxLZSksby5TdFB1c2hTdHJlYW1JbmZvPShYZS5wcm90b3R5cGUuc3RyZWFtX2lkPWEubmV3QnVmZmVyKFtdKSxYZS5wcm90b3R5cGUuc3RyZWFtX3NpZD1cIlwiLFhlLnByb3RvdHlwZS5pZF9uYW1lPWEubmV3QnVmZmVyKFtdKSxYZS5wcm90b3R5cGUubmlja19uYW1lPWEubmV3QnVmZmVyKFtdKSxYZS5wcm90b3R5cGUuZXh0cmFfaW5mbz1hLm5ld0J1ZmZlcihbXSksWGUucHJvdG90eXBlLnRpdGxlPWEubmV3QnVmZmVyKFtdKSxYZS5wcm90b3R5cGUudGhpcmRfZGVmaW5lX2RhdGE9YS5uZXdCdWZmZXIoW10pLFhlLnByb3RvdHlwZS5jcmVhdGVfdGltZT1hLkxvbmc/YS5Mb25nLmZyb21CaXRzKDAsMCwhMSk6MCxYZS5wcm90b3R5cGUucmVxX3NlcT0wLFhlLnByb3RvdHlwZS5zdHJlYW1fdmVyPTAsWGUucHJvdG90eXBlLnN0cmVhbV9hdHRyPWEubmV3QnVmZmVyKFtdKSxYZS5wcm90b3R5cGUuc3RyZWFtX3NyYz0wLFhlLnByb3RvdHlwZS5zdHJlYW1fc3RhdGU9MCxYZS5wcm90b3R5cGUuc3RyZWFtX3R5cGU9MCxYZS5wcm90b3R5cGUuc3RyZWFtX25pZD0wLFhlLnByb3RvdHlwZS5jbG9zZV90eXBlPTAsWGUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgWGUoZSl9LFhlLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5zdHJlYW1faWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1faWRcIikmJnQudWludDMyKDEwKS5ieXRlcyhlLnN0cmVhbV9pZCksbnVsbCE9ZS5zdHJlYW1fc2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RyZWFtX3NpZFwiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLnN0cmVhbV9zaWQpLG51bGwhPWUuaWRfbmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImlkX25hbWVcIikmJnQudWludDMyKDI2KS5ieXRlcyhlLmlkX25hbWUpLG51bGwhPWUubmlja19uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibmlja19uYW1lXCIpJiZ0LnVpbnQzMigzNCkuYnl0ZXMoZS5uaWNrX25hbWUpLG51bGwhPWUuZXh0cmFfaW5mbyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImV4dHJhX2luZm9cIikmJnQudWludDMyKDQyKS5ieXRlcyhlLmV4dHJhX2luZm8pLG51bGwhPWUudGl0bGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0aXRsZVwiKSYmdC51aW50MzIoNTApLmJ5dGVzKGUudGl0bGUpLG51bGwhPWUudGhpcmRfZGVmaW5lX2RhdGEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0aGlyZF9kZWZpbmVfZGF0YVwiKSYmdC51aW50MzIoNTgpLmJ5dGVzKGUudGhpcmRfZGVmaW5lX2RhdGEpLG51bGwhPWUuY3JlYXRlX3RpbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJjcmVhdGVfdGltZVwiKSYmdC51aW50MzIoNjQpLmludDY0KGUuY3JlYXRlX3RpbWUpLG51bGwhPWUucmVxX3NlcSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJlcV9zZXFcIikmJnQudWludDMyKDcyKS51aW50MzIoZS5yZXFfc2VxKSxudWxsIT1lLnN0cmVhbV92ZXImJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fdmVyXCIpJiZ0LnVpbnQzMig4MCkudWludDMyKGUuc3RyZWFtX3ZlciksbnVsbCE9ZS5zdHJlYW1fYXR0ciYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0cmVhbV9hdHRyXCIpJiZ0LnVpbnQzMig5MCkuYnl0ZXMoZS5zdHJlYW1fYXR0ciksbnVsbCE9ZS5zdHJlYW1fc3JjJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RyZWFtX3NyY1wiKSYmdC51aW50MzIoOTYpLnVpbnQzMihlLnN0cmVhbV9zcmMpLG51bGwhPWUuc3RyZWFtX3N0YXRlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RyZWFtX3N0YXRlXCIpJiZ0LnVpbnQzMigxMDQpLnVpbnQzMihlLnN0cmVhbV9zdGF0ZSksbnVsbCE9ZS5zdHJlYW1fdHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0cmVhbV90eXBlXCIpJiZ0LnVpbnQzMigxMTIpLnVpbnQzMihlLnN0cmVhbV90eXBlKSxudWxsIT1lLnN0cmVhbV9uaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJlYW1fbmlkXCIpJiZ0LnVpbnQzMigxMjApLnVpbnQzMihlLnN0cmVhbV9uaWQpLG51bGwhPWUuY2xvc2VfdHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImNsb3NlX3R5cGVcIikmJnQudWludDMyKDEyOCkudWludDMyKGUuY2xvc2VfdHlwZSksdH0sWGUuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU3RQdXNoU3RyZWFtSW5mbztlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLnN0cmVhbV9pZD1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAyOnIuc3RyZWFtX3NpZD1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMzpyLmlkX25hbWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgNDpyLm5pY2tfbmFtZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA1OnIuZXh0cmFfaW5mbz1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA2OnIudGl0bGU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgNzpyLnRoaXJkX2RlZmluZV9kYXRhPWUuYnl0ZXMoKTticmVhaztjYXNlIDg6ci5jcmVhdGVfdGltZT1lLmludDY0KCk7YnJlYWs7Y2FzZSA5OnIucmVxX3NlcT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTA6ci5zdHJlYW1fdmVyPWUudWludDMyKCk7YnJlYWs7Y2FzZSAxMTpyLnN0cmVhbV9hdHRyPWUuYnl0ZXMoKTticmVhaztjYXNlIDEyOnIuc3RyZWFtX3NyYz1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTM6ci5zdHJlYW1fc3RhdGU9ZS51aW50MzIoKTticmVhaztjYXNlIDE0OnIuc3RyZWFtX3R5cGU9ZS51aW50MzIoKTticmVhaztjYXNlIDE1OnIuc3RyZWFtX25pZD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTY6ci5jbG9zZV90eXBlPWUudWludDMyKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxYZSksby5QdXNoSW1DaGF0PShKZS5wcm90b3R5cGUucm9vbV9pZD1hLm5ld0J1ZmZlcihbXSksSmUucHJvdG90eXBlLnNlcnZlcl9tc2dfaWQ9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITApOjAsSmUucHJvdG90eXBlLnJldF9tc2dfaWQ9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITApOjAsSmUucHJvdG90eXBlLm1zZ19kYXRhPWEuZW1wdHlBcnJheSxKZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBKZShlKX0sSmUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxzLmNyZWF0ZSgpLG51bGwhPWUucm9vbV9pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJvb21faWRcIikmJnQudWludDMyKDEwKS5ieXRlcyhlLnJvb21faWQpLG51bGwhPWUuc2VydmVyX21zZ19pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlcnZlcl9tc2dfaWRcIikmJnQudWludDMyKDE2KS51aW50NjQoZS5zZXJ2ZXJfbXNnX2lkKSxudWxsIT1lLnJldF9tc2dfaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyZXRfbXNnX2lkXCIpJiZ0LnVpbnQzMigyNCkudWludDY0KGUucmV0X21zZ19pZCksbnVsbCE9ZS5tc2dfZGF0YSYmZS5tc2dfZGF0YS5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLm1zZ19kYXRhLmxlbmd0aDsrK24pYy5saXZlcm9vbV9jcy5TdEltQ2hhdERhdGEuZW5jb2RlKGUubXNnX2RhdGFbbl0sdC51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LEplLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlB1c2hJbUNoYXQ7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5yb29tX2lkPWUuYnl0ZXMoKTticmVhaztjYXNlIDI6ci5zZXJ2ZXJfbXNnX2lkPWUudWludDY0KCk7YnJlYWs7Y2FzZSAzOnIucmV0X21zZ19pZD1lLnVpbnQ2NCgpO2JyZWFrO2Nhc2UgNDpyLm1zZ19kYXRhJiZyLm1zZ19kYXRhLmxlbmd0aHx8KHIubXNnX2RhdGE9W10pLHIubXNnX2RhdGEucHVzaChjLmxpdmVyb29tX2NzLlN0SW1DaGF0RGF0YS5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmbyl9fXJldHVybiByfSxKZSksby5TdEltQ2hhdERhdGE9KFFlLnByb3RvdHlwZS5pZF9uYW1lPWEubmV3QnVmZmVyKFtdKSxRZS5wcm90b3R5cGUubmlja19uYW1lPWEubmV3QnVmZmVyKFtdKSxRZS5wcm90b3R5cGUucm9sZT0wLFFlLnByb3RvdHlwZS5tc2dfaWQ9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITApOjAsUWUucHJvdG90eXBlLm1zZ19jYXRlZ29yeT0wLFFlLnByb3RvdHlwZS5tc2dfdHlwZT0wLFFlLnByb3RvdHlwZS5tc2dfcHJpb3JpdHk9MCxRZS5wcm90b3R5cGUubXNnX2NvbnRlbnQ9YS5uZXdCdWZmZXIoW10pLFFlLnByb3RvdHlwZS5zZW5kX3RpbWU9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITEpOjAsUWUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUWUoZSl9LFFlLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5pZF9uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiaWRfbmFtZVwiKSYmdC51aW50MzIoMTApLmJ5dGVzKGUuaWRfbmFtZSksbnVsbCE9ZS5uaWNrX25hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuaWNrX25hbWVcIikmJnQudWludDMyKDE4KS5ieXRlcyhlLm5pY2tfbmFtZSksbnVsbCE9ZS5yb2xlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9sZVwiKSYmdC51aW50MzIoMjQpLnVpbnQzMihlLnJvbGUpLG51bGwhPWUubXNnX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibXNnX2lkXCIpJiZ0LnVpbnQzMigzMikudWludDY0KGUubXNnX2lkKSxudWxsIT1lLm1zZ19jYXRlZ29yeSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1zZ19jYXRlZ29yeVwiKSYmdC51aW50MzIoNDApLnVpbnQzMihlLm1zZ19jYXRlZ29yeSksbnVsbCE9ZS5tc2dfdHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1zZ190eXBlXCIpJiZ0LnVpbnQzMig0OCkudWludDMyKGUubXNnX3R5cGUpLG51bGwhPWUubXNnX3ByaW9yaXR5JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibXNnX3ByaW9yaXR5XCIpJiZ0LnVpbnQzMig1NikudWludDMyKGUubXNnX3ByaW9yaXR5KSxudWxsIT1lLm1zZ19jb250ZW50JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibXNnX2NvbnRlbnRcIikmJnQudWludDMyKDY2KS5ieXRlcyhlLm1zZ19jb250ZW50KSxudWxsIT1lLnNlbmRfdGltZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlbmRfdGltZVwiKSYmdC51aW50MzIoNzIpLmludDY0KGUuc2VuZF90aW1lKSx0fSxRZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgaXx8KGU9aS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qscj1uZXcgYy5saXZlcm9vbV9jcy5TdEltQ2hhdERhdGE7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5pZF9uYW1lPWUuYnl0ZXMoKTticmVhaztjYXNlIDI6ci5uaWNrX25hbWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMzpyLnJvbGU9ZS51aW50MzIoKTticmVhaztjYXNlIDQ6ci5tc2dfaWQ9ZS51aW50NjQoKTticmVhaztjYXNlIDU6ci5tc2dfY2F0ZWdvcnk9ZS51aW50MzIoKTticmVhaztjYXNlIDY6ci5tc2dfdHlwZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNzpyLm1zZ19wcmlvcml0eT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgODpyLm1zZ19jb250ZW50PWUuYnl0ZXMoKTticmVhaztjYXNlIDk6ci5zZW5kX3RpbWU9ZS5pbnQ2NCgpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sUWUpLG8uUHVzaEJpZ0ltQ2hhdD0oJGUucHJvdG90eXBlLmFwcF9pZD0wLCRlLnByb3RvdHlwZS5yb29tX2lkPWEubmV3QnVmZmVyKFtdKSwkZS5wcm90b3R5cGUudGltZXN0YW1wPWEuTG9uZz9hLkxvbmcuZnJvbUJpdHMoMCwwLCExKTowLCRlLnByb3RvdHlwZS5tc2dfZGF0YT1hLmVtcHR5QXJyYXksJGUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgJGUoZSl9LCRlLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8cy5jcmVhdGUoKSxudWxsIT1lLmFwcF9pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImFwcF9pZFwiKSYmdC51aW50MzIoOCkudWludDMyKGUuYXBwX2lkKSxudWxsIT1lLnJvb21faWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyb29tX2lkXCIpJiZ0LnVpbnQzMigxOCkuYnl0ZXMoZS5yb29tX2lkKSxudWxsIT1lLnRpbWVzdGFtcCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRpbWVzdGFtcFwiKSYmdC51aW50MzIoMjQpLmludDY0KGUudGltZXN0YW1wKSxudWxsIT1lLm1zZ19kYXRhJiZlLm1zZ19kYXRhLmxlbmd0aClmb3IodmFyIG49MDtuPGUubXNnX2RhdGEubGVuZ3RoOysrbiljLmxpdmVyb29tX2NzLlN0QmlnSW1DaGF0RGF0YS5lbmNvZGUoZS5tc2dfZGF0YVtuXSx0LnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gdH0sJGUuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuUHVzaEJpZ0ltQ2hhdDtlLnBvczxuOyl7dmFyIG89ZS51aW50MzIoKTtzd2l0Y2gobz4+PjMpe2Nhc2UgMTpyLmFwcF9pZD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMjpyLnJvb21faWQ9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMzpyLnRpbWVzdGFtcD1lLmludDY0KCk7YnJlYWs7Y2FzZSA0OnIubXNnX2RhdGEmJnIubXNnX2RhdGEubGVuZ3RofHwoci5tc2dfZGF0YT1bXSksci5tc2dfZGF0YS5wdXNoKGMubGl2ZXJvb21fY3MuU3RCaWdJbUNoYXREYXRhLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LCRlKSxvLlN0QmlnSW1DaGF0RGF0YT0oZXQucHJvdG90eXBlLmlkX25hbWU9YS5uZXdCdWZmZXIoW10pLGV0LnByb3RvdHlwZS5uaWNrX25hbWU9YS5uZXdCdWZmZXIoW10pLGV0LnByb3RvdHlwZS5yb2xlPTAsZXQucHJvdG90eXBlLmJpZ21zZ19pZD1hLm5ld0J1ZmZlcihbXSksZXQucHJvdG90eXBlLm1zZ19jYXRlZ29yeT0wLGV0LnByb3RvdHlwZS5tc2dfdHlwZT0wLGV0LnByb3RvdHlwZS5tc2dfY29udGVudD1hLm5ld0J1ZmZlcihbXSksZXQucHJvdG90eXBlLm1zZ190aW1lc3RhbXA9YS5Mb25nP2EuTG9uZy5mcm9tQml0cygwLDAsITEpOjAsZXQuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgZXQoZSl9LGV0LmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5pZF9uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiaWRfbmFtZVwiKSYmdC51aW50MzIoMTApLmJ5dGVzKGUuaWRfbmFtZSksbnVsbCE9ZS5uaWNrX25hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuaWNrX25hbWVcIikmJnQudWludDMyKDE4KS5ieXRlcyhlLm5pY2tfbmFtZSksbnVsbCE9ZS5yb2xlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9sZVwiKSYmdC51aW50MzIoMjQpLnVpbnQzMihlLnJvbGUpLG51bGwhPWUuYmlnbXNnX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYmlnbXNnX2lkXCIpJiZ0LnVpbnQzMigzNCkuYnl0ZXMoZS5iaWdtc2dfaWQpLG51bGwhPWUubXNnX2NhdGVnb3J5JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibXNnX2NhdGVnb3J5XCIpJiZ0LnVpbnQzMig0MCkudWludDMyKGUubXNnX2NhdGVnb3J5KSxudWxsIT1lLm1zZ190eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibXNnX3R5cGVcIikmJnQudWludDMyKDQ4KS51aW50MzIoZS5tc2dfdHlwZSksbnVsbCE9ZS5tc2dfY29udGVudCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1zZ19jb250ZW50XCIpJiZ0LnVpbnQzMig1OCkuYnl0ZXMoZS5tc2dfY29udGVudCksbnVsbCE9ZS5tc2dfdGltZXN0YW1wJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibXNnX3RpbWVzdGFtcFwiKSYmdC51aW50MzIoNjQpLmludDY0KGUubXNnX3RpbWVzdGFtcCksdH0sZXQuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuU3RCaWdJbUNoYXREYXRhO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIuaWRfbmFtZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAyOnIubmlja19uYW1lPWUuYnl0ZXMoKTticmVhaztjYXNlIDM6ci5yb2xlPWUudWludDMyKCk7YnJlYWs7Y2FzZSA0OnIuYmlnbXNnX2lkPWUuYnl0ZXMoKTticmVhaztjYXNlIDU6ci5tc2dfY2F0ZWdvcnk9ZS51aW50MzIoKTticmVhaztjYXNlIDY6ci5tc2dfdHlwZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNzpyLm1zZ19jb250ZW50PWUuYnl0ZXMoKTticmVhaztjYXNlIDg6ci5tc2dfdGltZXN0YW1wPWUuaW50NjQoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LGV0KSxvLlB1c2hUcmFucz0odHQucHJvdG90eXBlLmFwcF9pZD0wLHR0LnByb3RvdHlwZS5yb29tX2lkPWEubmV3QnVmZmVyKFtdKSx0dC5wcm90b3R5cGUudHJhbnNfaWRuYW1lPWEubmV3QnVmZmVyKFtdKSx0dC5wcm90b3R5cGUudHJhbnNfbmlja25hbWU9YS5uZXdCdWZmZXIoW10pLHR0LnByb3RvdHlwZS50cmFuc19yb2xlPTAsdHQucHJvdG90eXBlLnRyYW5zX3R5cGU9YS5uZXdCdWZmZXIoW10pLHR0LnByb3RvdHlwZS50cmFuc19kYXRhPWEubmV3QnVmZmVyKFtdKSx0dC5wcm90b3R5cGUudHJhbnNfc2VxPTAsdHQucHJvdG90eXBlLnRyYW5zX3NlbmRfdGltZT1hLkxvbmc/YS5Mb25nLmZyb21CaXRzKDAsMCwhMSk6MCx0dC5wcm90b3R5cGUudHJhbnNfY2hhbm5lbD1hLm5ld0J1ZmZlcihbXSksdHQucHJvdG90eXBlLnRyYW5zX2xpc3Rfc2VxPTAsdHQuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgdHQoZSl9LHR0LmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS5hcHBfaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJhcHBfaWRcIikmJnQudWludDMyKDgpLnVpbnQzMihlLmFwcF9pZCksbnVsbCE9ZS5yb29tX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicm9vbV9pZFwiKSYmdC51aW50MzIoMTgpLmJ5dGVzKGUucm9vbV9pZCksbnVsbCE9ZS50cmFuc19pZG5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19pZG5hbWVcIikmJnQudWludDMyKDI2KS5ieXRlcyhlLnRyYW5zX2lkbmFtZSksbnVsbCE9ZS50cmFuc19uaWNrbmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRyYW5zX25pY2tuYW1lXCIpJiZ0LnVpbnQzMigzNCkuYnl0ZXMoZS50cmFuc19uaWNrbmFtZSksbnVsbCE9ZS50cmFuc19yb2xlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfcm9sZVwiKSYmdC51aW50MzIoNDApLnVpbnQzMihlLnRyYW5zX3JvbGUpLG51bGwhPWUudHJhbnNfdHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRyYW5zX3R5cGVcIikmJnQudWludDMyKDUwKS5ieXRlcyhlLnRyYW5zX3R5cGUpLG51bGwhPWUudHJhbnNfZGF0YSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRyYW5zX2RhdGFcIikmJnQudWludDMyKDU4KS5ieXRlcyhlLnRyYW5zX2RhdGEpLG51bGwhPWUudHJhbnNfc2VxJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfc2VxXCIpJiZ0LnVpbnQzMig2NCkudWludDMyKGUudHJhbnNfc2VxKSxudWxsIT1lLnRyYW5zX3NlbmRfdGltZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRyYW5zX3NlbmRfdGltZVwiKSYmdC51aW50MzIoNzIpLmludDY0KGUudHJhbnNfc2VuZF90aW1lKSxudWxsIT1lLnRyYW5zX2NoYW5uZWwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19jaGFubmVsXCIpJiZ0LnVpbnQzMig4MikuYnl0ZXMoZS50cmFuc19jaGFubmVsKSxudWxsIT1lLnRyYW5zX2xpc3Rfc2VxJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfbGlzdF9zZXFcIikmJnQudWludDMyKDg4KS51aW50MzIoZS50cmFuc19saXN0X3NlcSksdH0sdHQuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGl8fChlPWkuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LHI9bmV3IGMubGl2ZXJvb21fY3MuUHVzaFRyYW5zO2UucG9zPG47KXt2YXIgbz1lLnVpbnQzMigpO3N3aXRjaChvPj4+Myl7Y2FzZSAxOnIuYXBwX2lkPWUudWludDMyKCk7YnJlYWs7Y2FzZSAyOnIucm9vbV9pZD1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAzOnIudHJhbnNfaWRuYW1lPWUuYnl0ZXMoKTticmVhaztjYXNlIDQ6ci50cmFuc19uaWNrbmFtZT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA1OnIudHJhbnNfcm9sZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNjpyLnRyYW5zX3R5cGU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgNzpyLnRyYW5zX2RhdGE9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgODpyLnRyYW5zX3NlcT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgOTpyLnRyYW5zX3NlbmRfdGltZT1lLmludDY0KCk7YnJlYWs7Y2FzZSAxMDpyLnRyYW5zX2NoYW5uZWw9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgMTE6ci50cmFuc19saXN0X3NlcT1lLnVpbnQzMigpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sdHQpLG8uUHVzaFVzZXJUcmFucz0obnQucHJvdG90eXBlLmFwcF9pZD0wLG50LnByb3RvdHlwZS5yb29tX2lkPWEubmV3QnVmZmVyKFtdKSxudC5wcm90b3R5cGUudHJhbnNfaWRuYW1lPWEubmV3QnVmZmVyKFtdKSxudC5wcm90b3R5cGUudHJhbnNfbmlja25hbWU9YS5uZXdCdWZmZXIoW10pLG50LnByb3RvdHlwZS50cmFuc19yb2xlPTAsbnQucHJvdG90eXBlLnRyYW5zX3NlbmRfdGltZT1hLkxvbmc/YS5Mb25nLmZyb21CaXRzKDAsMCwhMSk6MCxudC5wcm90b3R5cGUudHJhbnNfY2hhbm5lbD1hLm5ld0J1ZmZlcihbXSksbnQucHJvdG90eXBlLnRyYW5zX2FycmF5PWEuZW1wdHlBcnJheSxudC5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBudChlKX0sbnQuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxzLmNyZWF0ZSgpLG51bGwhPWUuYXBwX2lkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYXBwX2lkXCIpJiZ0LnVpbnQzMig4KS51aW50MzIoZS5hcHBfaWQpLG51bGwhPWUucm9vbV9pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJvb21faWRcIikmJnQudWludDMyKDE4KS5ieXRlcyhlLnJvb21faWQpLG51bGwhPWUudHJhbnNfaWRuYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfaWRuYW1lXCIpJiZ0LnVpbnQzMigyNikuYnl0ZXMoZS50cmFuc19pZG5hbWUpLG51bGwhPWUudHJhbnNfbmlja25hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19uaWNrbmFtZVwiKSYmdC51aW50MzIoMzQpLmJ5dGVzKGUudHJhbnNfbmlja25hbWUpLG51bGwhPWUudHJhbnNfcm9sZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRyYW5zX3JvbGVcIikmJnQudWludDMyKDQwKS51aW50MzIoZS50cmFuc19yb2xlKSxudWxsIT1lLnRyYW5zX3NlbmRfdGltZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRyYW5zX3NlbmRfdGltZVwiKSYmdC51aW50MzIoNzIpLmludDY0KGUudHJhbnNfc2VuZF90aW1lKSxudWxsIT1lLnRyYW5zX2NoYW5uZWwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19jaGFubmVsXCIpJiZ0LnVpbnQzMig4MikuYnl0ZXMoZS50cmFuc19jaGFubmVsKSxudWxsIT1lLnRyYW5zX2FycmF5JiZlLnRyYW5zX2FycmF5Lmxlbmd0aClmb3IodmFyIG49MDtuPGUudHJhbnNfYXJyYXkubGVuZ3RoOysrbiljLmxpdmVyb29tX2NzLlN0VHJhbnNTaW1wbGUuZW5jb2RlKGUudHJhbnNfYXJyYXlbbl0sdC51aW50MzIoOTApLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LG50LmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlB1c2hVc2VyVHJhbnM7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci5hcHBfaWQ9ZS51aW50MzIoKTticmVhaztjYXNlIDI6ci5yb29tX2lkPWUuYnl0ZXMoKTticmVhaztjYXNlIDM6ci50cmFuc19pZG5hbWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgNDpyLnRyYW5zX25pY2tuYW1lPWUuYnl0ZXMoKTticmVhaztjYXNlIDU6ci50cmFuc19yb2xlPWUudWludDMyKCk7YnJlYWs7Y2FzZSA5OnIudHJhbnNfc2VuZF90aW1lPWUuaW50NjQoKTticmVhaztjYXNlIDEwOnIudHJhbnNfY2hhbm5lbD1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAxMTpyLnRyYW5zX2FycmF5JiZyLnRyYW5zX2FycmF5Lmxlbmd0aHx8KHIudHJhbnNfYXJyYXk9W10pLHIudHJhbnNfYXJyYXkucHVzaChjLmxpdmVyb29tX2NzLlN0VHJhbnNTaW1wbGUuZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3Jm8pfX1yZXR1cm4gcn0sbnQpLG8uU3RUcmFuc1NpbXBsZT0ocnQucHJvdG90eXBlLnRyYW5zX3R5cGU9YS5uZXdCdWZmZXIoW10pLHJ0LnByb3RvdHlwZS50cmFuc19kYXRhPWEubmV3QnVmZmVyKFtdKSxydC5wcm90b3R5cGUudHJhbnNfc2VxPTAscnQuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgcnQoZSl9LHJ0LmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHMuY3JlYXRlKCksbnVsbCE9ZS50cmFuc190eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfdHlwZVwiKSYmdC51aW50MzIoMTApLmJ5dGVzKGUudHJhbnNfdHlwZSksbnVsbCE9ZS50cmFuc19kYXRhJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhbnNfZGF0YVwiKSYmdC51aW50MzIoMTgpLmJ5dGVzKGUudHJhbnNfZGF0YSksbnVsbCE9ZS50cmFuc19zZXEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0cmFuc19zZXFcIikmJnQudWludDMyKDI0KS51aW50MzIoZS50cmFuc19zZXEpLHR9LHJ0LmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBpfHwoZT1pLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxyPW5ldyBjLmxpdmVyb29tX2NzLlN0VHJhbnNTaW1wbGU7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7c3dpdGNoKG8+Pj4zKXtjYXNlIDE6ci50cmFuc190eXBlPWUuYnl0ZXMoKTticmVhaztjYXNlIDI6ci50cmFuc19kYXRhPWUuYnl0ZXMoKTticmVhaztjYXNlIDM6ci50cmFuc19zZXE9ZS51aW50MzIoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZvKX19cmV0dXJuIHJ9LHJ0KSxvKSxlLmV4cG9ydHM9Y30sZnVuY3Rpb24oZSx0LG4pe3ZhciByPWZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD12b2lkIDA7dmFyIHQ9bnVsbDt0cnl7dD1uZXcgV2ViQXNzZW1ibHkuSW5zdGFuY2UobmV3IFdlYkFzc2VtYmx5Lk1vZHVsZShuZXcgVWludDhBcnJheShbMCw5NywxMTUsMTA5LDEsMCwwLDAsMSwxMywyLDk2LDAsMSwxMjcsOTYsNCwxMjcsMTI3LDEyNywxMjcsMSwxMjcsMyw3LDYsMCwxLDEsMSwxLDEsNiw2LDEsMTI3LDEsNjUsMCwxMSw3LDUwLDYsMywxMDksMTE3LDEwOCwwLDEsNSwxMDAsMTA1LDExOCw5NSwxMTUsMCwyLDUsMTAwLDEwNSwxMTgsOTUsMTE3LDAsMyw1LDExNCwxMDEsMTA5LDk1LDExNSwwLDQsNSwxMTQsMTAxLDEwOSw5NSwxMTcsMCw1LDgsMTAzLDEwMSwxMTYsOTUsMTA0LDEwNSwxMDMsMTA0LDAsMCwxMCwxOTEsMSw2LDQsMCwzNSwwLDExLDM2LDEsMSwxMjYsMzIsMCwxNzMsMzIsMSwxNzMsNjYsMzIsMTM0LDEzMiwzMiwyLDE3MywzMiwzLDE3Myw2NiwzMiwxMzQsMTMyLDEyNiwzNCw0LDY2LDMyLDEzNSwxNjcsMzYsMCwzMiw0LDE2NywxMSwzNiwxLDEsMTI2LDMyLDAsMTczLDMyLDEsMTczLDY2LDMyLDEzNCwxMzIsMzIsMiwxNzMsMzIsMywxNzMsNjYsMzIsMTM0LDEzMiwxMjcsMzQsNCw2NiwzMiwxMzUsMTY3LDM2LDAsMzIsNCwxNjcsMTEsMzYsMSwxLDEyNiwzMiwwLDE3MywzMiwxLDE3Myw2NiwzMiwxMzQsMTMyLDMyLDIsMTczLDMyLDMsMTczLDY2LDMyLDEzNCwxMzIsMTI4LDM0LDQsNjYsMzIsMTM1LDE2NywzNiwwLDMyLDQsMTY3LDExLDM2LDEsMSwxMjYsMzIsMCwxNzMsMzIsMSwxNzMsNjYsMzIsMTM0LDEzMiwzMiwyLDE3MywzMiwzLDE3Myw2NiwzMiwxMzQsMTMyLDEyOSwzNCw0LDY2LDMyLDEzNSwxNjcsMzYsMCwzMiw0LDE2NywxMSwzNiwxLDEsMTI2LDMyLDAsMTczLDMyLDEsMTczLDY2LDMyLDEzNCwxMzIsMzIsMiwxNzMsMzIsMywxNzMsNjYsMzIsMTM0LDEzMiwxMzAsMzQsNCw2NiwzMiwxMzUsMTY3LDM2LDAsMzIsNCwxNjcsMTFdKSkse30pLmV4cG9ydHN9Y2F0Y2goZSl7fWZ1bmN0aW9uIG4oZSx0LG4pe3RoaXMubG93PTB8ZSx0aGlzLmhpZ2g9MHx0LHRoaXMudW5zaWduZWQ9ISFufWZ1bmN0aW9uIHIoZSl7cmV0dXJuITA9PT0oZSYmZS5fX2lzTG9uZ19fKX1mdW5jdGlvbiBvKGUpe3ZhciB0PU1hdGguY2x6MzIoZSYtZSk7cmV0dXJuIGU/MzEtdDp0fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLnByb3RvdHlwZSxcIl9faXNMb25nX19cIix7dmFsdWU6ITB9KSxuLmlzTG9uZz1yO3ZhciBpPXt9LHM9e307ZnVuY3Rpb24gYShlLHQpe3ZhciBuLHIsbztyZXR1cm4gdD8obz0wPD0oZT4+Pj0wKSYmZTwyNTYpJiYocj1zW2VdKT9yOihuPXUoZSwwLCEwKSxvJiYoc1tlXT1uKSxuKToobz0tMTI4PD0oZXw9MCkmJmU8MTI4KSYmKHI9aVtlXSk/cjoobj11KGUsZTwwPy0xOjAsITEpLG8mJihpW2VdPW4pLG4pfWZ1bmN0aW9uIGMoZSx0KXtpZihpc05hTihlKSlyZXR1cm4gdD95Om07aWYodCl7aWYoZTwwKXJldHVybiB5O2lmKF88PWUpcmV0dXJuIFR9ZWxzZXtpZihlPD0tZilyZXR1cm4gUztpZihmPD1lKzEpcmV0dXJuIE99cmV0dXJuIGU8MD9jKC1lLHQpLm5lZygpOnUoZSVkfDAsZS9kfDAsdCl9ZnVuY3Rpb24gdShlLHQscil7cmV0dXJuIG5ldyBuKGUsdCxyKX1uLmZyb21JbnQ9YSxuLmZyb21OdW1iZXI9YyxuLmZyb21CaXRzPXU7dmFyIGw9TWF0aC5wb3c7ZnVuY3Rpb24gaChlLHQsbil7aWYoMD09PWUubGVuZ3RoKXRocm93IEVycm9yKFwiZW1wdHkgc3RyaW5nXCIpO2lmKHQ9XCJudW1iZXJcIj09dHlwZW9mIHQ/KG49dCwhMSk6ISF0LFwiTmFOXCI9PT1lfHxcIkluZmluaXR5XCI9PT1lfHxcIitJbmZpbml0eVwiPT09ZXx8XCItSW5maW5pdHlcIj09PWUpcmV0dXJuIHQ/eTptO2lmKChuPW58fDEwKTwyfHwzNjxuKXRocm93IFJhbmdlRXJyb3IoXCJyYWRpeFwiKTt2YXIgcjtpZigwPChyPWUuaW5kZXhPZihcIi1cIikpKXRocm93IEVycm9yKFwiaW50ZXJpb3IgaHlwaGVuXCIpO2lmKDA9PT1yKXJldHVybiBoKGUuc3Vic3RyaW5nKDEpLHQsbikubmVnKCk7Zm9yKHZhciBvPWMobChuLDgpKSxpPW0scz0wO3M8ZS5sZW5ndGg7cys9OCl7dmFyIGE9TWF0aC5taW4oOCxlLmxlbmd0aC1zKSx1PXBhcnNlSW50KGUuc3Vic3RyaW5nKHMscythKSxuKTtpPWE8OD8oYT1jKGwobixhKSksaS5tdWwoYSkuYWRkKGModSkpKTooaT1pLm11bChvKSkuYWRkKGModSkpfXJldHVybiBpLnVuc2lnbmVkPXQsaX1mdW5jdGlvbiBwKGUsdCl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGU/YyhlLHQpOlwic3RyaW5nXCI9PXR5cGVvZiBlP2goZSx0KTp1KGUubG93LGUuaGlnaCxcImJvb2xlYW5cIj09dHlwZW9mIHQ/dDplLnVuc2lnbmVkKX1uLmZyb21TdHJpbmc9aCxuLmZyb21WYWx1ZT1wO3ZhciBkPTQyOTQ5NjcyOTYsXz1kKmQsZj1fLzIsZz1hKDE8PDI0KSxtPWEoMCkseT0obi5aRVJPPW0sYSgwLCEwKSksdj0obi5VWkVSTz15LGEoMSkpLGI9KG4uT05FPXYsYSgxLCEwKSksRT0obi5VT05FPWIsYSgtMSkpLE89KG4uTkVHX09ORT1FLHUoLTEsMjE0NzQ4MzY0NywhMSkpLFQ9KG4uTUFYX1ZBTFVFPU8sdSgtMSwtMSwhMCkpLFM9KG4uTUFYX1VOU0lHTkVEX1ZBTFVFPVQsdSgwLC0yMTQ3NDgzNjQ4LCExKSksUj0obi5NSU5fVkFMVUU9UyxuLnByb3RvdHlwZSk7cmV0dXJuIFIudG9JbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy51bnNpZ25lZD90aGlzLmxvdz4+PjA6dGhpcy5sb3d9LFIudG9OdW1iZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy51bnNpZ25lZD8odGhpcy5oaWdoPj4+MCkqZCsodGhpcy5sb3c+Pj4wKTp0aGlzLmhpZ2gqZCsodGhpcy5sb3c+Pj4wKX0sUi50b1N0cmluZz1mdW5jdGlvbihlKXtpZigoZT1lfHwxMCk8Mnx8MzY8ZSl0aHJvdyBSYW5nZUVycm9yKFwicmFkaXhcIik7aWYodGhpcy5pc1plcm8oKSlyZXR1cm5cIjBcIjt2YXIgdCxuO2lmKHRoaXMuaXNOZWdhdGl2ZSgpKXJldHVybiB0aGlzLmVxKFMpPyhuPWMoZSksbj0odD10aGlzLmRpdihuKSkubXVsKG4pLnN1Yih0aGlzKSx0LnRvU3RyaW5nKGUpK24udG9JbnQoKS50b1N0cmluZyhlKSk6XCItXCIrdGhpcy5uZWcoKS50b1N0cmluZyhlKTtmb3IodmFyIHI9YyhsKGUsNiksdGhpcy51bnNpZ25lZCksbz10aGlzLGk9XCJcIjs7KXt2YXIgcz1vLmRpdihyKSxhPShvLnN1YihzLm11bChyKSkudG9JbnQoKT4+PjApLnRvU3RyaW5nKGUpO2lmKChvPXMpLmlzWmVybygpKXJldHVybiBhK2k7Zm9yKDthLmxlbmd0aDw2OylhPVwiMFwiK2E7aT1cIlwiK2EraX19LFIuZ2V0SGlnaEJpdHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oaWdofSxSLmdldEhpZ2hCaXRzVW5zaWduZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oaWdoPj4+MH0sUi5nZXRMb3dCaXRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubG93fSxSLmdldExvd0JpdHNVbnNpZ25lZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmxvdz4+PjB9LFIuZ2V0TnVtQml0c0Ficz1mdW5jdGlvbigpe2lmKHRoaXMuaXNOZWdhdGl2ZSgpKXJldHVybiB0aGlzLmVxKFMpPzY0OnRoaXMubmVnKCkuZ2V0TnVtQml0c0FicygpO2Zvcih2YXIgZT0wIT10aGlzLmhpZ2g/dGhpcy5oaWdoOnRoaXMubG93LHQ9MzE7MDx0JiYwPT0oZSYxPDx0KTt0LS0pO3JldHVybiAwIT10aGlzLmhpZ2g/dCszMzp0KzF9LFIuaXNaZXJvPWZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLmhpZ2gmJjA9PT10aGlzLmxvd30sUi5lcXo9Ui5pc1plcm8sUi5pc05lZ2F0aXZlPWZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMudW5zaWduZWQmJnRoaXMuaGlnaDwwfSxSLmlzUG9zaXRpdmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy51bnNpZ25lZHx8MDw9dGhpcy5oaWdofSxSLmlzT2RkPWZ1bmN0aW9uKCl7cmV0dXJuIDE9PSgxJnRoaXMubG93KX0sUi5pc0V2ZW49ZnVuY3Rpb24oKXtyZXR1cm4gMD09KDEmdGhpcy5sb3cpfSxSLmVxdWFscz1mdW5jdGlvbihlKXtyZXR1cm4gcihlKXx8KGU9cChlKSksKHRoaXMudW5zaWduZWQ9PT1lLnVuc2lnbmVkfHx0aGlzLmhpZ2g+Pj4zMSE9MXx8ZS5oaWdoPj4+MzEhPTEpJiZ0aGlzLmhpZ2g9PT1lLmhpZ2gmJnRoaXMubG93PT09ZS5sb3d9LFIuZXE9Ui5lcXVhbHMsUi5ub3RFcXVhbHM9ZnVuY3Rpb24oZSl7cmV0dXJuIXRoaXMuZXEoZSl9LFIubmVxPVIubm90RXF1YWxzLFIubmU9Ui5ub3RFcXVhbHMsUi5sZXNzVGhhbj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jb21wKGUpPDB9LFIubHQ9Ui5sZXNzVGhhbixSLmxlc3NUaGFuT3JFcXVhbD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jb21wKGUpPD0wfSxSLmx0ZT1SLmxlc3NUaGFuT3JFcXVhbCxSLmxlPVIubGVzc1RoYW5PckVxdWFsLFIuZ3JlYXRlclRoYW49ZnVuY3Rpb24oZSl7cmV0dXJuIDA8dGhpcy5jb21wKGUpfSxSLmd0PVIuZ3JlYXRlclRoYW4sUi5ncmVhdGVyVGhhbk9yRXF1YWw9ZnVuY3Rpb24oZSl7cmV0dXJuIDA8PXRoaXMuY29tcChlKX0sUi5ndGU9Ui5ncmVhdGVyVGhhbk9yRXF1YWwsUi5nZT1SLmdyZWF0ZXJUaGFuT3JFcXVhbCxSLmNvbXBhcmU9ZnVuY3Rpb24oZSl7aWYocihlKXx8KGU9cChlKSksdGhpcy5lcShlKSlyZXR1cm4gMDt2YXIgdD10aGlzLmlzTmVnYXRpdmUoKSxuPWUuaXNOZWdhdGl2ZSgpO3JldHVybiB0JiYhbj8tMTohdCYmbj8xOnRoaXMudW5zaWduZWQ/ZS5oaWdoPj4+MD50aGlzLmhpZ2g+Pj4wfHxlLmhpZ2g9PT10aGlzLmhpZ2gmJmUubG93Pj4+MD50aGlzLmxvdz4+PjA/LTE6MTp0aGlzLnN1YihlKS5pc05lZ2F0aXZlKCk/LTE6MX0sUi5jb21wPVIuY29tcGFyZSxSLm5lZ2F0ZT1mdW5jdGlvbigpe3JldHVybiF0aGlzLnVuc2lnbmVkJiZ0aGlzLmVxKFMpP1M6dGhpcy5ub3QoKS5hZGQodil9LFIubmVnPVIubmVnYXRlLFIuYWRkPWZ1bmN0aW9uKGUpe3IoZSl8fChlPXAoZSkpO3ZhciB0PXRoaXMuaGlnaD4+PjE2LG49NjU1MzUmdGhpcy5oaWdoLG89dGhpcy5sb3c+Pj4xNixpPTY1NTM1JnRoaXMubG93LHM9ZS5oaWdoPj4+MTYsYT02NTUzNSZlLmhpZ2gsYz1lLmxvdz4+PjE2LGw9MCxoPTAsZD0wLF89MDtyZXR1cm4gaCs9KGQ9ZCsoKF8rPWkrKDY1NTM1JmUubG93KSk+Pj4xNikrKG8rYykpPj4+MTYsdSgoZCY9NjU1MzUpPDwxNnwoXyY9NjU1MzUpLCgobCs9KGgrPW4rYSk+Pj4xNikrKHQrcykmNjU1MzUpPDwxNnwoaCY9NjU1MzUpLHRoaXMudW5zaWduZWQpfSxSLnN1YnRyYWN0PWZ1bmN0aW9uKGUpe3JldHVybiByKGUpfHwoZT1wKGUpKSx0aGlzLmFkZChlLm5lZygpKX0sUi5zdWI9Ui5zdWJ0cmFjdCxSLm11bHRpcGx5PWZ1bmN0aW9uKGUpe2lmKHRoaXMuaXNaZXJvKCkpcmV0dXJuIHRoaXM7aWYocihlKXx8KGU9cChlKSksdClyZXR1cm4gdSh0Lm11bCh0aGlzLmxvdyx0aGlzLmhpZ2gsZS5sb3csZS5oaWdoKSx0LmdldF9oaWdoKCksdGhpcy51bnNpZ25lZCk7aWYoZS5pc1plcm8oKSlyZXR1cm4gdGhpcy51bnNpZ25lZD95Om07aWYodGhpcy5lcShTKSlyZXR1cm4gZS5pc09kZCgpP1M6bTtpZihlLmVxKFMpKXJldHVybiB0aGlzLmlzT2RkKCk/UzptO2lmKHRoaXMuaXNOZWdhdGl2ZSgpKXJldHVybiBlLmlzTmVnYXRpdmUoKT90aGlzLm5lZygpLm11bChlLm5lZygpKTp0aGlzLm5lZygpLm11bChlKS5uZWcoKTtpZihlLmlzTmVnYXRpdmUoKSlyZXR1cm4gdGhpcy5tdWwoZS5uZWcoKSkubmVnKCk7aWYodGhpcy5sdChnKSYmZS5sdChnKSlyZXR1cm4gYyh0aGlzLnRvTnVtYmVyKCkqZS50b051bWJlcigpLHRoaXMudW5zaWduZWQpO3ZhciBuPXRoaXMuaGlnaD4+PjE2LG89NjU1MzUmdGhpcy5oaWdoLGk9dGhpcy5sb3c+Pj4xNixzPTY1NTM1JnRoaXMubG93LGE9ZS5oaWdoPj4+MTYsbD02NTUzNSZlLmhpZ2gsaD1lLmxvdz4+PjE2LGQ9MCxfPTAsZj0wLHY9KHY9MCkrKChfPV8rKChmKz1zKihlPTY1NTM1JmUubG93KSk+Pj4xNikraSplKT4+PjE2KSsoKF89KDY1NTM1Jl8pK3MqaCk+Pj4xNik7cmV0dXJuIHUoKF8mPTY1NTM1KTw8MTZ8KGYmPTY1NTM1KSwoKGQrPSh2Kz1vKmUpPj4+MTYpKygodj0oNjU1MzUmdikraSpoKT4+PjE2KSsoKHY9KDY1NTM1JnYpK3MqbCk+Pj4xNikrKG4qZStvKmgraSpsK3MqYSkmNjU1MzUpPDwxNnwodiY9NjU1MzUpLHRoaXMudW5zaWduZWQpfSxSLm11bD1SLm11bHRpcGx5LFIuZGl2aWRlPWZ1bmN0aW9uKGUpe2lmKChlPXIoZSk/ZTpwKGUpKS5pc1plcm8oKSl0aHJvdyBFcnJvcihcImRpdmlzaW9uIGJ5IHplcm9cIik7dmFyIG4sbyxpO2lmKHQpcmV0dXJuIHRoaXMudW5zaWduZWR8fC0yMTQ3NDgzNjQ4IT09dGhpcy5oaWdofHwtMSE9PWUubG93fHwtMSE9PWUuaGlnaD91KCh0aGlzLnVuc2lnbmVkP3QuZGl2X3U6dC5kaXZfcykodGhpcy5sb3csdGhpcy5oaWdoLGUubG93LGUuaGlnaCksdC5nZXRfaGlnaCgpLHRoaXMudW5zaWduZWQpOnRoaXM7aWYodGhpcy5pc1plcm8oKSlyZXR1cm4gdGhpcy51bnNpZ25lZD95Om07aWYodGhpcy51bnNpZ25lZCl7aWYoKGU9ZS51bnNpZ25lZD9lOmUudG9VbnNpZ25lZCgpKS5ndCh0aGlzKSlyZXR1cm4geTtpZihlLmd0KHRoaXMuc2hydSgxKSkpcmV0dXJuIGI7bz15fWVsc2V7aWYodGhpcy5lcShTKSlyZXR1cm4gZS5lcSh2KXx8ZS5lcShFKT9TOmUuZXEoUyk/djooaT10aGlzLnNocigxKS5kaXYoZSkuc2hsKDEpKS5lcShtKT9lLmlzTmVnYXRpdmUoKT92OkU6KG49dGhpcy5zdWIoZS5tdWwoaSkpLGkuYWRkKG4uZGl2KGUpKSk7aWYoZS5lcShTKSlyZXR1cm4gdGhpcy51bnNpZ25lZD95Om07aWYodGhpcy5pc05lZ2F0aXZlKCkpcmV0dXJuIGUuaXNOZWdhdGl2ZSgpP3RoaXMubmVnKCkuZGl2KGUubmVnKCkpOnRoaXMubmVnKCkuZGl2KGUpLm5lZygpO2lmKGUuaXNOZWdhdGl2ZSgpKXJldHVybiB0aGlzLmRpdihlLm5lZygpKS5uZWcoKTtvPW19Zm9yKG49dGhpcztuLmd0ZShlKTspe2k9TWF0aC5tYXgoMSxNYXRoLmZsb29yKG4udG9OdW1iZXIoKS9lLnRvTnVtYmVyKCkpKTtmb3IodmFyIHM9TWF0aC5jZWlsKE1hdGgubG9nKGkpL01hdGguTE4yKSxhPXM8PTQ4PzE6bCgyLHMtNDgpLGg9YyhpKSxkPWgubXVsKGUpO2QuaXNOZWdhdGl2ZSgpfHxkLmd0KG4pOylkPShoPWMoaS09YSx0aGlzLnVuc2lnbmVkKSkubXVsKGUpO2guaXNaZXJvKCkmJihoPXYpLG89by5hZGQoaCksbj1uLnN1YihkKX1yZXR1cm4gb30sUi5kaXY9Ui5kaXZpZGUsUi5tb2R1bG89ZnVuY3Rpb24oZSl7cmV0dXJuIHIoZSl8fChlPXAoZSkpLHQ/dSgodGhpcy51bnNpZ25lZD90LnJlbV91OnQucmVtX3MpKHRoaXMubG93LHRoaXMuaGlnaCxlLmxvdyxlLmhpZ2gpLHQuZ2V0X2hpZ2goKSx0aGlzLnVuc2lnbmVkKTp0aGlzLnN1Yih0aGlzLmRpdihlKS5tdWwoZSkpfSxSLm1vZD1SLm1vZHVsbyxSLnJlbT1SLm1vZHVsbyxSLm5vdD1mdW5jdGlvbigpe3JldHVybiB1KH50aGlzLmxvdyx+dGhpcy5oaWdoLHRoaXMudW5zaWduZWQpfSxSLmNvdW50TGVhZGluZ1plcm9zPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGlnaD9NYXRoLmNsejMyKHRoaXMuaGlnaCk6TWF0aC5jbHozMih0aGlzLmxvdykrMzJ9LFIuY2x6PVIuY291bnRMZWFkaW5nWmVyb3MsUi5jb3VudFRyYWlsaW5nWmVyb3M9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sb3c/byh0aGlzLmxvdyk6byh0aGlzLmhpZ2gpKzMyfSxSLmN0ej1SLmNvdW50VHJhaWxpbmdaZXJvcyxSLmFuZD1mdW5jdGlvbihlKXtyZXR1cm4gcihlKXx8KGU9cChlKSksdSh0aGlzLmxvdyZlLmxvdyx0aGlzLmhpZ2gmZS5oaWdoLHRoaXMudW5zaWduZWQpfSxSLm9yPWZ1bmN0aW9uKGUpe3JldHVybiByKGUpfHwoZT1wKGUpKSx1KHRoaXMubG93fGUubG93LHRoaXMuaGlnaHxlLmhpZ2gsdGhpcy51bnNpZ25lZCl9LFIueG9yPWZ1bmN0aW9uKGUpe3JldHVybiByKGUpfHwoZT1wKGUpKSx1KHRoaXMubG93XmUubG93LHRoaXMuaGlnaF5lLmhpZ2gsdGhpcy51bnNpZ25lZCl9LFIuc2hpZnRMZWZ0PWZ1bmN0aW9uKGUpe3JldHVybiByKGUpJiYoZT1lLnRvSW50KCkpLDA9PShlJj02Myk/dGhpczplPDMyP3UodGhpcy5sb3c8PGUsdGhpcy5oaWdoPDxlfHRoaXMubG93Pj4+MzItZSx0aGlzLnVuc2lnbmVkKTp1KDAsdGhpcy5sb3c8PGUtMzIsdGhpcy51bnNpZ25lZCl9LFIuc2hsPVIuc2hpZnRMZWZ0LFIuc2hpZnRSaWdodD1mdW5jdGlvbihlKXtyZXR1cm4gcihlKSYmKGU9ZS50b0ludCgpKSwwPT0oZSY9NjMpP3RoaXM6ZTwzMj91KHRoaXMubG93Pj4+ZXx0aGlzLmhpZ2g8PDMyLWUsdGhpcy5oaWdoPj5lLHRoaXMudW5zaWduZWQpOnUodGhpcy5oaWdoPj5lLTMyLDA8PXRoaXMuaGlnaD8wOi0xLHRoaXMudW5zaWduZWQpfSxSLnNocj1SLnNoaWZ0UmlnaHQsUi5zaGlmdFJpZ2h0VW5zaWduZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHIoZSkmJihlPWUudG9JbnQoKSksMD09KGUmPTYzKT90aGlzOmU8MzI/dSh0aGlzLmxvdz4+PmV8dGhpcy5oaWdoPDwzMi1lLHRoaXMuaGlnaD4+PmUsdGhpcy51bnNpZ25lZCk6dSgzMj09PWU/dGhpcy5oaWdoOnRoaXMuaGlnaD4+PmUtMzIsMCx0aGlzLnVuc2lnbmVkKX0sUi5zaHJ1PVIuc2hpZnRSaWdodFVuc2lnbmVkLFIuc2hyX3U9Ui5zaGlmdFJpZ2h0VW5zaWduZWQsUi5yb3RhdGVMZWZ0PWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiByKGUpJiYoZT1lLnRvSW50KCkpLDA9PShlJj02Myk/dGhpczozMj09PWU/dSh0aGlzLmhpZ2gsdGhpcy5sb3csdGhpcy51bnNpZ25lZCk6ZTwzMj91KHRoaXMubG93PDxlfHRoaXMuaGlnaD4+Pih0PTMyLWUpLHRoaXMuaGlnaDw8ZXx0aGlzLmxvdz4+PnQsdGhpcy51bnNpZ25lZCk6dSh0aGlzLmhpZ2g8PChlLT0zMil8dGhpcy5sb3c+Pj4odD0zMi1lKSx0aGlzLmxvdzw8ZXx0aGlzLmhpZ2g+Pj50LHRoaXMudW5zaWduZWQpfSxSLnJvdGw9Ui5yb3RhdGVMZWZ0LFIucm90YXRlUmlnaHQ9ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIHIoZSkmJihlPWUudG9JbnQoKSksMD09KGUmPTYzKT90aGlzOjMyPT09ZT91KHRoaXMuaGlnaCx0aGlzLmxvdyx0aGlzLnVuc2lnbmVkKTplPDMyP3UodGhpcy5oaWdoPDwodD0zMi1lKXx0aGlzLmxvdz4+PmUsdGhpcy5sb3c8PHR8dGhpcy5oaWdoPj4+ZSx0aGlzLnVuc2lnbmVkKTp1KHRoaXMubG93PDwodD0zMi0oZS09MzIpKXx0aGlzLmhpZ2g+Pj5lLHRoaXMuaGlnaDw8dHx0aGlzLmxvdz4+PmUsdGhpcy51bnNpZ25lZCl9LFIucm90cj1SLnJvdGF0ZVJpZ2h0LFIudG9TaWduZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy51bnNpZ25lZD91KHRoaXMubG93LHRoaXMuaGlnaCwhMSk6dGhpc30sUi50b1Vuc2lnbmVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudW5zaWduZWQ/dGhpczp1KHRoaXMubG93LHRoaXMuaGlnaCwhMCl9LFIudG9CeXRlcz1mdW5jdGlvbihlKXtyZXR1cm4gZT90aGlzLnRvQnl0ZXNMRSgpOnRoaXMudG9CeXRlc0JFKCl9LFIudG9CeXRlc0xFPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5oaWdoLHQ9dGhpcy5sb3c7cmV0dXJuWzI1NSZ0LHQ+Pj44JjI1NSx0Pj4+MTYmMjU1LHQ+Pj4yNCwyNTUmZSxlPj4+OCYyNTUsZT4+PjE2JjI1NSxlPj4+MjRdfSxSLnRvQnl0ZXNCRT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuaGlnaCx0PXRoaXMubG93O3JldHVybltlPj4+MjQsZT4+PjE2JjI1NSxlPj4+OCYyNTUsMjU1JmUsdD4+PjI0LHQ+Pj4xNiYyNTUsdD4+PjgmMjU1LDI1NSZ0XX0sbi5mcm9tQnl0ZXM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiByP24uZnJvbUJ5dGVzTEUoZSx0KTpuLmZyb21CeXRlc0JFKGUsdCl9LG4uZnJvbUJ5dGVzTEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IG4oZVswXXxlWzFdPDw4fGVbMl08PDE2fGVbM108PDI0LGVbNF18ZVs1XTw8OHxlWzZdPDwxNnxlWzddPDwyNCx0KX0sbi5mcm9tQnl0ZXNCRT1mdW5jdGlvbihlLHQpe3JldHVybiBuZXcgbihlWzRdPDwyNHxlWzVdPDwxNnxlWzZdPDw4fGVbN10sZVswXTw8MjR8ZVsxXTw8MTZ8ZVsyXTw8OHxlWzNdLHQpfSxlLmRlZmF1bHQ9bixcImRlZmF1bHRcImluIGU/ZS5kZWZhdWx0OmV9KHt9KTt2b2lkIDAhPT0odD1mdW5jdGlvbigpe3JldHVybiByfS5hcHBseSh0LFtdKSkmJihlLmV4cG9ydHM9dCl9LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7dmFyIHI7ZS5leHBvcnRzPShyPWZ1bmN0aW9uKGUpe3ZhciByO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5jcnlwdG8mJihyPXdpbmRvdy5jcnlwdG8pLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLmNyeXB0byYmKHI9c2VsZi5jcnlwdG8pLCEocj0hKHI9IShyPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzJiZnbG9iYWxUaGlzLmNyeXB0bz9nbG9iYWxUaGlzLmNyeXB0bzpyKSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93Lm1zQ3J5cHRvP3dpbmRvdy5tc0NyeXB0bzpyKSYmdm9pZCAwIT09dCYmdC5jcnlwdG8/dC5jcnlwdG86cikpdHJ5e3I9bigxNil9Y2F0Y2gocyl7fXZhciBvPU9iamVjdC5jcmVhdGV8fGZ1bmN0aW9uKGUpe3JldHVybiBpLnByb3RvdHlwZT1lLGU9bmV3IGksaS5wcm90b3R5cGU9bnVsbCxlfTtmdW5jdGlvbiBpKCl7fXZhciBzPXt9LGE9cy5saWI9e30sYz1hLkJhc2U9e2V4dGVuZDpmdW5jdGlvbihlKXt2YXIgdD1vKHRoaXMpO3JldHVybiBlJiZ0Lm1peEluKGUpLHQuaGFzT3duUHJvcGVydHkoXCJpbml0XCIpJiZ0aGlzLmluaXQhPT10LmluaXR8fCh0LmluaXQ9ZnVuY3Rpb24oKXt0LiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pLCh0LmluaXQucHJvdG90eXBlPXQpLiRzdXBlcj10aGlzLHR9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuZXh0ZW5kKCk7cmV0dXJuIGUuaW5pdC5hcHBseShlLGFyZ3VtZW50cyksZX0saW5pdDpmdW5jdGlvbigpe30sbWl4SW46ZnVuY3Rpb24oZSl7Zm9yKHZhciB0IGluIGUpZS5oYXNPd25Qcm9wZXJ0eSh0KSYmKHRoaXNbdF09ZVt0XSk7ZS5oYXNPd25Qcm9wZXJ0eShcInRvU3RyaW5nXCIpJiYodGhpcy50b1N0cmluZz1lLnRvU3RyaW5nKX0sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyl9fSx1PWEuV29yZEFycmF5PWMuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGUsdCl7ZT10aGlzLndvcmRzPWV8fFtdLHRoaXMuc2lnQnl0ZXM9bnVsbCE9dD90OjQqZS5sZW5ndGh9LHRvU3RyaW5nOmZ1bmN0aW9uKGUpe3JldHVybihlfHxoKS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbihlKXt2YXIgdD10aGlzLndvcmRzLG49ZS53b3JkcyxyPXRoaXMuc2lnQnl0ZXMsbz1lLnNpZ0J5dGVzO2lmKHRoaXMuY2xhbXAoKSxyJTQpZm9yKHZhciBpPTA7aTxvO2krKyl7dmFyIHM9bltpPj4+Ml0+Pj4yNC1pJTQqOCYyNTU7dFtyK2k+Pj4yXXw9czw8MjQtKHIraSklNCo4fWVsc2UgZm9yKHZhciBhPTA7YTxvO2ErPTQpdFtyK2E+Pj4yXT1uW2E+Pj4yXTtyZXR1cm4gdGhpcy5zaWdCeXRlcys9byx0aGlzfSxjbGFtcDpmdW5jdGlvbigpe3ZhciB0PXRoaXMud29yZHMsbj10aGlzLnNpZ0J5dGVzO3Rbbj4+PjJdJj00Mjk0OTY3Mjk1PDwzMi1uJTQqOCx0Lmxlbmd0aD1lLmNlaWwobi80KX0sY2xvbmU6ZnVuY3Rpb24oKXt2YXIgZT1jLmNsb25lLmNhbGwodGhpcyk7cmV0dXJuIGUud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKSxlfSxyYW5kb206ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLG49MDtuPGU7bis9NCl0LnB1c2goZnVuY3Rpb24oKXtpZihyKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByLmdldFJhbmRvbVZhbHVlcyl0cnl7cmV0dXJuIHIuZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50MzJBcnJheSgxKSlbMF19Y2F0Y2goZSl7fWlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHIucmFuZG9tQnl0ZXMpdHJ5e3JldHVybiByLnJhbmRvbUJ5dGVzKDQpLnJlYWRJbnQzMkxFKCl9Y2F0Y2goZSl7fX10aHJvdyBuZXcgRXJyb3IoXCJOYXRpdmUgY3J5cHRvIG1vZHVsZSBjb3VsZCBub3QgYmUgdXNlZCB0byBnZXQgc2VjdXJlIHJhbmRvbSBudW1iZXIuXCIpfSgpKTtyZXR1cm4gbmV3IHUuaW5pdCh0LGUpfX0pLGw9cy5lbmM9e30saD1sLkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLndvcmRzLG49ZS5zaWdCeXRlcyxyPVtdLG89MDtvPG47bysrKXt2YXIgaT10W28+Pj4yXT4+PjI0LW8lNCo4JjI1NTtyLnB1c2goKGk+Pj40KS50b1N0cmluZygxNikpLHIucHVzaCgoMTUmaSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gci5qb2luKFwiXCIpfSxwYXJzZTpmdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5sZW5ndGgsbj1bXSxyPTA7cjx0O3IrPTIpbltyPj4+M118PXBhcnNlSW50KGUuc3Vic3RyKHIsMiksMTYpPDwyNC1yJTgqNDtyZXR1cm4gbmV3IHUuaW5pdChuLHQvMil9fSxwPWwuTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUud29yZHMsbj1lLnNpZ0J5dGVzLHI9W10sbz0wO288bjtvKyspe3ZhciBpPXRbbz4+PjJdPj4+MjQtbyU0KjgmMjU1O3IucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGkpKX1yZXR1cm4gci5qb2luKFwiXCIpfSxwYXJzZTpmdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5sZW5ndGgsbj1bXSxyPTA7cjx0O3IrKyluW3I+Pj4yXXw9KDI1NSZlLmNoYXJDb2RlQXQocikpPDwyNC1yJTQqODtyZXR1cm4gbmV3IHUuaW5pdChuLHQpfX0sZD1sLlV0Zjg9e3N0cmluZ2lmeTpmdW5jdGlvbihlKXt0cnl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUocC5zdHJpbmdpZnkoZSkpKX1jYXRjaChlKXt0aHJvdyBuZXcgRXJyb3IoXCJNYWxmb3JtZWQgVVRGLTggZGF0YVwiKX19LHBhcnNlOmZ1bmN0aW9uKGUpe3JldHVybiBwLnBhcnNlKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChlKSkpfX0sXz1hLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09Yy5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgdS5pbml0LHRoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihlKXtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9ZC5wYXJzZShlKSksdGhpcy5fZGF0YS5jb25jYXQoZSksdGhpcy5fbkRhdGFCeXRlcys9ZS5zaWdCeXRlc30sX3Byb2Nlc3M6ZnVuY3Rpb24odCl7dmFyIG4scj10aGlzLl9kYXRhLG89ci53b3JkcyxpPXIuc2lnQnl0ZXMscz10aGlzLmJsb2NrU2l6ZSxhPWkvKDQqcyksYz0oYT10P2UuY2VpbChhKTplLm1heCgoMHxhKS10aGlzLl9taW5CdWZmZXJTaXplLDApKSpzO3Q9ZS5taW4oNCpjLGkpO2lmKGMpe2Zvcih2YXIgbD0wO2w8YztsKz1zKXRoaXMuX2RvUHJvY2Vzc0Jsb2NrKG8sbCk7bj1vLnNwbGljZSgwLGMpLHIuc2lnQnl0ZXMtPXR9cmV0dXJuIG5ldyB1LmluaXQobix0KX0sY2xvbmU6ZnVuY3Rpb24oKXt2YXIgZT1jLmNsb25lLmNhbGwodGhpcyk7cmV0dXJuIGUuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpLGV9LF9taW5CdWZmZXJTaXplOjB9KSxmPShhLkhhc2hlcj1fLmV4dGVuZCh7Y2ZnOmMuZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihlKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoZSksdGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe18ucmVzZXQuY2FsbCh0aGlzKSx0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fYXBwZW5kKGUpLHRoaXMuX3Byb2Nlc3MoKSx0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmdGhpcy5fYXBwZW5kKGUpLHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQsbil7cmV0dXJuIG5ldyBlLmluaXQobikuZmluYWxpemUodCl9fSxfY3JlYXRlSG1hY0hlbHBlcjpmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxuKXtyZXR1cm4gbmV3IGYuSE1BQy5pbml0KGUsbikuZmluYWxpemUodCl9fX0pLHMuYWxnbz17fSk7cmV0dXJuIHN9KE1hdGgpLHIpfSkuY2FsbCh0aGlzLG4oMTApKX0sZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ZSxuPXQubGliLkJsb2NrQ2lwaGVyLHI9dC5hbGdvLG89W10saT1bXSxzPVtdLGE9W10sYz1bXSx1PVtdLGw9W10saD1bXSxwPVtdLGQ9W10sXz1bXSxmPTA7ZjwyNTY7ZisrKV9bZl09ZjwxMjg/Zjw8MTpmPDwxXjI4Mzt2YXIgZz0wLG09MDtmb3IoZj0wO2Y8MjU2O2YrKyl7dmFyIHk9bV5tPDwxXm08PDJebTw8M15tPDw0O3k9eT4+PjheMjU1JnleOTksb1tnXT15LGlbeV09Zzt2YXIgdj1fW2ddLGI9X1t2XSxFPV9bYl0sTz0yNTcqX1t5XV4xNjg0MzAwOCp5O3NbZ109Tzw8MjR8Tz4+PjgsYVtnXT1PPDwxNnxPPj4+MTYsY1tnXT1PPDw4fE8+Pj4yNCx1W2ddPU87Tz0xNjg0MzAwOSpFXjY1NTM3KmJeMjU3KnZeMTY4NDMwMDgqZztsW3ldPU88PDI0fE8+Pj44LGhbeV09Tzw8MTZ8Tz4+PjE2LHBbeV09Tzw8OHxPPj4+MjQsZFt5XT1PLGc/KGc9dl5fW19bX1tFXnZdXV0sbV49X1tfW21dXSk6Zz1tPTF9dmFyIFQ9WzAsMSwyLDQsOCwxNiwzMiw2NCwxMjgsMjcsNTRdLFM9ci5BRVM9bi5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7aWYoIXRoaXMuX25Sb3VuZHN8fHRoaXMuX2tleVByaW9yUmVzZXQhPT10aGlzLl9rZXkpe2Zvcih2YXIgZT10aGlzLl9rZXlQcmlvclJlc2V0PXRoaXMuX2tleSx0PWUud29yZHMsbj1lLnNpZ0J5dGVzLzQscj00KigodGhpcy5fblJvdW5kcz1uKzYpKzEpLGk9dGhpcy5fa2V5U2NoZWR1bGU9W10scz0wO3M8cjtzKyspczxuP2lbc109dFtzXToodT1pW3MtMV0scyVuP24+NiYmcyVuPT00JiYodT1vW3U+Pj4yNF08PDI0fG9bdT4+PjE2JjI1NV08PDE2fG9bdT4+PjgmMjU1XTw8OHxvWzI1NSZ1XSk6KHU9b1sodT11PDw4fHU+Pj4yNCk+Pj4yNF08PDI0fG9bdT4+PjE2JjI1NV08PDE2fG9bdT4+PjgmMjU1XTw8OHxvWzI1NSZ1XSx1Xj1UW3MvbnwwXTw8MjQpLGlbc109aVtzLW5dXnUpO2Zvcih2YXIgYT10aGlzLl9pbnZLZXlTY2hlZHVsZT1bXSxjPTA7YzxyO2MrKyl7cz1yLWM7aWYoYyU0KXZhciB1PWlbc107ZWxzZSB1PWlbcy00XTthW2NdPWM8NHx8czw9ND91Omxbb1t1Pj4+MjRdXV5oW29bdT4+PjE2JjI1NV1dXnBbb1t1Pj4+OCYyNTVdXV5kW29bMjU1JnVdXX19fSxlbmNyeXB0QmxvY2s6ZnVuY3Rpb24oZSx0KXt0aGlzLl9kb0NyeXB0QmxvY2soZSx0LHRoaXMuX2tleVNjaGVkdWxlLHMsYSxjLHUsbyl9LGRlY3J5cHRCbG9jazpmdW5jdGlvbihlLHQpe3ZhciBuPWVbdCsxXTtlW3QrMV09ZVt0KzNdLGVbdCszXT1uLHRoaXMuX2RvQ3J5cHRCbG9jayhlLHQsdGhpcy5faW52S2V5U2NoZWR1bGUsbCxoLHAsZCxpKTtuPWVbdCsxXTtlW3QrMV09ZVt0KzNdLGVbdCszXT1ufSxfZG9DcnlwdEJsb2NrOmZ1bmN0aW9uKGUsdCxuLHIsbyxpLHMsYSl7Zm9yKHZhciBjPXRoaXMuX25Sb3VuZHMsdT1lW3RdXm5bMF0sbD1lW3QrMV1eblsxXSxoPWVbdCsyXV5uWzJdLHA9ZVt0KzNdXm5bM10sZD00LF89MTtfPGM7XysrKXt2YXIgZj1yW3U+Pj4yNF1eb1tsPj4+MTYmMjU1XV5pW2g+Pj44JjI1NV1ec1syNTUmcF1ebltkKytdLGc9cltsPj4+MjRdXm9baD4+PjE2JjI1NV1eaVtwPj4+OCYyNTVdXnNbMjU1JnVdXm5bZCsrXSxtPXJbaD4+PjI0XV5vW3A+Pj4xNiYyNTVdXmlbdT4+PjgmMjU1XV5zWzI1NSZsXV5uW2QrK10seT1yW3A+Pj4yNF1eb1t1Pj4+MTYmMjU1XV5pW2w+Pj44JjI1NV1ec1syNTUmaF1ebltkKytdO3U9ZixsPWcsaD1tLHA9eX1mPShhW3U+Pj4yNF08PDI0fGFbbD4+PjE2JjI1NV08PDE2fGFbaD4+PjgmMjU1XTw8OHxhWzI1NSZwXSlebltkKytdLGc9KGFbbD4+PjI0XTw8MjR8YVtoPj4+MTYmMjU1XTw8MTZ8YVtwPj4+OCYyNTVdPDw4fGFbMjU1JnVdKV5uW2QrK10sbT0oYVtoPj4+MjRdPDwyNHxhW3A+Pj4xNiYyNTVdPDwxNnxhW3U+Pj44JjI1NV08PDh8YVsyNTUmbF0pXm5bZCsrXSx5PShhW3A+Pj4yNF08PDI0fGFbdT4+PjE2JjI1NV08PDE2fGFbbD4+PjgmMjU1XTw8OHxhWzI1NSZoXSlebltkKytdO2VbdF09ZixlW3QrMV09ZyxlW3QrMl09bSxlW3QrM109eX0sa2V5U2l6ZTo4fSk7cmV0dXJuIHQuQUVTPW4uX2NyZWF0ZUhlbHBlcihTKSxlLkFFU30obigyKSwobigxNyksbig0KSxuKDExKSxuKDIwKSkpfSxmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1NYXRoLG49ZSxyPW4ubGliLG89ci5Xb3JkQXJyYXksaT1yLkhhc2hlcixzPW4uYWxnbyxhPVtdLGM9MDtjPDY0O2MrKylhW2NdPTQyOTQ5NjcyOTYqdC5hYnModC5zaW4oYysxKSl8MDt2YXIgdT1zLk1ENT1pLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBvLmluaXQoWzE3MzI1ODQxOTMsNDAyMzIzMzQxNywyNTYyMzgzMTAyLDI3MTczMzg3OF0pfSxfZG9Qcm9jZXNzQmxvY2s6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MDtuPDE2O24rKyl7dmFyIHI9dCtuLG89ZVtyXTtlW3JdPTE2NzExOTM1JihvPDw4fG8+Pj4yNCl8NDI3ODI1NTM2MCYobzw8MjR8bz4+PjgpfXZhciBpPXRoaXMuX2hhc2gud29yZHMscz1lW3QrMF0sYz1lW3QrMV0sdT1lW3QrMl0sXz1lW3QrM10sZj1lW3QrNF0sZz1lW3QrNV0sbT1lW3QrNl0seT1lW3QrN10sdj1lW3QrOF0sYj1lW3QrOV0sRT1lW3QrMTBdLE89ZVt0KzExXSxUPWVbdCsxMl0sUz1lW3QrMTNdLFI9ZVt0KzE0XSxrPWVbdCsxNV0sQz1pWzBdLHc9aVsxXSxOPWlbMl0sST1pWzNdO0M9bChDLHcsTixJLHMsNyxhWzBdKSxJPWwoSSxDLHcsTixjLDEyLGFbMV0pLE49bChOLEksQyx3LHUsMTcsYVsyXSksdz1sKHcsTixJLEMsXywyMixhWzNdKSxDPWwoQyx3LE4sSSxmLDcsYVs0XSksST1sKEksQyx3LE4sZywxMixhWzVdKSxOPWwoTixJLEMsdyxtLDE3LGFbNl0pLHc9bCh3LE4sSSxDLHksMjIsYVs3XSksQz1sKEMsdyxOLEksdiw3LGFbOF0pLEk9bChJLEMsdyxOLGIsMTIsYVs5XSksTj1sKE4sSSxDLHcsRSwxNyxhWzEwXSksdz1sKHcsTixJLEMsTywyMixhWzExXSksQz1sKEMsdyxOLEksVCw3LGFbMTJdKSxJPWwoSSxDLHcsTixTLDEyLGFbMTNdKSxOPWwoTixJLEMsdyxSLDE3LGFbMTRdKSxDPWgoQyx3PWwodyxOLEksQyxrLDIyLGFbMTVdKSxOLEksYyw1LGFbMTZdKSxJPWgoSSxDLHcsTixtLDksYVsxN10pLE49aChOLEksQyx3LE8sMTQsYVsxOF0pLHc9aCh3LE4sSSxDLHMsMjAsYVsxOV0pLEM9aChDLHcsTixJLGcsNSxhWzIwXSksST1oKEksQyx3LE4sRSw5LGFbMjFdKSxOPWgoTixJLEMsdyxrLDE0LGFbMjJdKSx3PWgodyxOLEksQyxmLDIwLGFbMjNdKSxDPWgoQyx3LE4sSSxiLDUsYVsyNF0pLEk9aChJLEMsdyxOLFIsOSxhWzI1XSksTj1oKE4sSSxDLHcsXywxNCxhWzI2XSksdz1oKHcsTixJLEMsdiwyMCxhWzI3XSksQz1oKEMsdyxOLEksUyw1LGFbMjhdKSxJPWgoSSxDLHcsTix1LDksYVsyOV0pLE49aChOLEksQyx3LHksMTQsYVszMF0pLEM9cChDLHc9aCh3LE4sSSxDLFQsMjAsYVszMV0pLE4sSSxnLDQsYVszMl0pLEk9cChJLEMsdyxOLHYsMTEsYVszM10pLE49cChOLEksQyx3LE8sMTYsYVszNF0pLHc9cCh3LE4sSSxDLFIsMjMsYVszNV0pLEM9cChDLHcsTixJLGMsNCxhWzM2XSksST1wKEksQyx3LE4sZiwxMSxhWzM3XSksTj1wKE4sSSxDLHcseSwxNixhWzM4XSksdz1wKHcsTixJLEMsRSwyMyxhWzM5XSksQz1wKEMsdyxOLEksUyw0LGFbNDBdKSxJPXAoSSxDLHcsTixzLDExLGFbNDFdKSxOPXAoTixJLEMsdyxfLDE2LGFbNDJdKSx3PXAodyxOLEksQyxtLDIzLGFbNDNdKSxDPXAoQyx3LE4sSSxiLDQsYVs0NF0pLEk9cChJLEMsdyxOLFQsMTEsYVs0NV0pLE49cChOLEksQyx3LGssMTYsYVs0Nl0pLEM9ZChDLHc9cCh3LE4sSSxDLHUsMjMsYVs0N10pLE4sSSxzLDYsYVs0OF0pLEk9ZChJLEMsdyxOLHksMTAsYVs0OV0pLE49ZChOLEksQyx3LFIsMTUsYVs1MF0pLHc9ZCh3LE4sSSxDLGcsMjEsYVs1MV0pLEM9ZChDLHcsTixJLFQsNixhWzUyXSksST1kKEksQyx3LE4sXywxMCxhWzUzXSksTj1kKE4sSSxDLHcsRSwxNSxhWzU0XSksdz1kKHcsTixJLEMsYywyMSxhWzU1XSksQz1kKEMsdyxOLEksdiw2LGFbNTZdKSxJPWQoSSxDLHcsTixrLDEwLGFbNTddKSxOPWQoTixJLEMsdyxtLDE1LGFbNThdKSx3PWQodyxOLEksQyxTLDIxLGFbNTldKSxDPWQoQyx3LE4sSSxmLDYsYVs2MF0pLEk9ZChJLEMsdyxOLE8sMTAsYVs2MV0pLE49ZChOLEksQyx3LHUsMTUsYVs2Ml0pLHc9ZCh3LE4sSSxDLGIsMjEsYVs2M10pLGlbMF09aVswXStDfDAsaVsxXT1pWzFdK3d8MCxpWzJdPWlbMl0rTnwwLGlbM109aVszXStJfDB9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fZGF0YSxuPWUud29yZHMscj04KnRoaXMuX25EYXRhQnl0ZXMsbz04KmUuc2lnQnl0ZXM7bltvPj4+NV18PTEyODw8MjQtbyUzMjt2YXIgaT10LmZsb29yKHIvNDI5NDk2NzI5Nikscz1yO25bMTUrKG8rNjQ+Pj45PDw0KV09MTY3MTE5MzUmKGk8PDh8aT4+PjI0KXw0Mjc4MjU1MzYwJihpPDwyNHxpPj4+OCksblsxNCsobys2ND4+Pjk8PDQpXT0xNjcxMTkzNSYoczw8OHxzPj4+MjQpfDQyNzgyNTUzNjAmKHM8PDI0fHM+Pj44KSxlLnNpZ0J5dGVzPTQqKG4ubGVuZ3RoKzEpLHRoaXMuX3Byb2Nlc3MoKTtmb3IodmFyIGE9dGhpcy5faGFzaCxjPWEud29yZHMsdT0wO3U8NDt1Kyspe3ZhciBsPWNbdV07Y1t1XT0xNjcxMTkzNSYobDw8OHxsPj4+MjQpfDQyNzgyNTUzNjAmKGw8PDI0fGw+Pj44KX1yZXR1cm4gYX0sY2xvbmU6ZnVuY3Rpb24oKXt2YXIgZT1pLmNsb25lLmNhbGwodGhpcyk7cmV0dXJuIGUuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpLGV9fSk7ZnVuY3Rpb24gbChlLHQsbixyLG8saSxzKXt2YXIgYT1lKyh0Jm58fnQmcikrbytzO3JldHVybihhPDxpfGE+Pj4zMi1pKSt0fWZ1bmN0aW9uIGgoZSx0LG4scixvLGkscyl7dmFyIGE9ZSsodCZyfG4mfnIpK28rcztyZXR1cm4oYTw8aXxhPj4+MzItaSkrdH1mdW5jdGlvbiBwKGUsdCxuLHIsbyxpLHMpe3ZhciBhPWUrKHRebl5yKStvK3M7cmV0dXJuKGE8PGl8YT4+PjMyLWkpK3R9ZnVuY3Rpb24gZChlLHQsbixyLG8saSxzKXt2YXIgYT1lKyhuXih0fH5yKSkrbytzO3JldHVybihhPDxpfGE+Pj4zMi1pKSt0fXJldHVybiBuLk1ENT1pLl9jcmVhdGVIZWxwZXIodSksbi5IbWFjTUQ1PWkuX2NyZWF0ZUhtYWNIZWxwZXIodSksZS5NRDV9KG4oMikpfSxmdW5jdGlvbihlLHQsbil7ZnVuY3Rpb24gcihlKXtpZihpW2VdKXJldHVybiBpW2VdLmV4cG9ydHM7dmFyIHQ9aVtlXT17aTplLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIG9bZV0uY2FsbCh0LmV4cG9ydHMsdCx0LmV4cG9ydHMsciksdC5sPSEwLHQuZXhwb3J0c312YXIgbyxpO2UuZXhwb3J0cz0obz1bZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRV9DTElFTlRfVFlQRT10LkVOVU1fTE9HX0xFVkVMPXQuRU5VTV9SRU1PVEVfVFlQRT10LlpFR09fRU5WPXQuWkVHT19CUk9XU0VSX1RZUEU9dm9pZCAwLChyPXQuWkVHT19CUk9XU0VSX1RZUEV8fCh0LlpFR09fQlJPV1NFUl9UWVBFPXt9KSlbci5JRT0wXT1cIklFXCIscltyLkZJUkVGT1g9MV09XCJGSVJFRk9YXCIscltyLkNIUk9NRT0yXT1cIkNIUk9NRVwiLHJbci5TQUZBUkk9M109XCJTQUZBUklcIixyW3IuT1BFUkE9NF09XCJPUEVSQVwiLHJbci5XRUlYSU49NV09XCJXRUlYSU5cIixyW3IuV0VJWElOTUlOST02XT1cIldFSVhJTk1JTklcIixyW3IuVU5LT1dOPTddPVwiVU5LT1dOXCIsKHI9dC5aRUdPX0VOVnx8KHQuWkVHT19FTlY9e30pKVtyLkJST1dTRVI9MF09XCJCUk9XU0VSXCIscltyLldFSVhJTk1JTkk9MV09XCJXRUlYSU5NSU5JXCIsKHI9dC5FTlVNX1JFTU9URV9UWVBFfHwodC5FTlVNX1JFTU9URV9UWVBFPXt9KSlbci5ESVNBQkxFPTBdPVwiRElTQUJMRVwiLHJbci5XRUJTT0NLRVQ9MV09XCJXRUJTT0NLRVRcIixyW3IuSFRUUFM9Ml09XCJIVFRQU1wiLHQuRU5VTV9MT0dfTEVWRUw9e0RFQlVHOjAsSU5GTzoxLFdBUk46MixFUlJPUjozLFJFUE9SVDo5OSxESVNBQkxFOjEwMCxkZWJ1ZzowLGluZm86MSx3YXJuOjIsZXJyb3I6MyxyZXBvcnQ6OTksZGlzYWJsZToxMDB9LChyPXQuRV9DTElFTlRfVFlQRXx8KHQuRV9DTElFTlRfVFlQRT17fSkpW3IuQ2xpZW50VHlwZV9Ob25lPTBdPVwiQ2xpZW50VHlwZV9Ob25lXCIscltyLkNsaWVudFR5cGVfSDU9MV09XCJDbGllbnRUeXBlX0g1XCIscltyLkNsaWVudFR5cGVfU21hbGxQcmFncmFtPTJdPVwiQ2xpZW50VHlwZV9TbWFsbFByYWdyYW1cIixyW3IuQ2xpZW50VHlwZV9XZWJydGM9M109XCJDbGllbnRUeXBlX1dlYnJ0Y1wifSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcigpe3RoaXMuX3Rlc3RFbnZpcm9ubWVudD0hMCx0aGlzLl9FTlY9MCx0aGlzLl9kZWJ1Zz0hMH1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkxvZ2dlclN0YXRlQ2VudGVyPXZvaWQgMCxyLmdldEluc3RhbmNlPWZ1bmN0aW9uKCl7cmV0dXJuIHIuaW5zdGFuY2V8fChyLmluc3RhbmNlPW5ldyByKS5pbml0KCksci5pbnN0YW5jZX0sci5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbigpe30sT2JqZWN0LmRlZmluZVByb3BlcnR5KHIucHJvdG90eXBlLFwidGVzdEVudmlyb25tZW50XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90ZXN0RW52aXJvbm1lbnR9LHNldDpmdW5jdGlvbihlKXt0aGlzLl90ZXN0RW52aXJvbm1lbnQ9ZX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoci5wcm90b3R5cGUsXCJFTlZcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX0VOVn0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX0VOVj1lfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLnByb3RvdHlwZSxcImRlYnVnXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kZWJ1Z30sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX2RlYnVnPWV9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksci5pbnN0YW5jZT1uZXcgcix0LkxvZ2dlclN0YXRlQ2VudGVyPXJ9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmNyZWF0ZVplZ29XZWJTb2NrZXQ9dC5aZWdvV2VpWGluTWluaVdlYlNvY2tldD12b2lkIDA7dmFyIHI9bigwKSxvPShpLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLl93ZWJzb2NrZXQmJih0aGlzLnJlYWR5U3RhdGU9MCx0aGlzLl93ZWJzb2NrZXQub25PcGVuKChmdW5jdGlvbih0KXtlLnJlYWR5U3RhdGU9ZS5fd2Vic29ja2V0LnJlYWR5U3RhdGUsXCJmdW5jdGlvblwiPT10eXBlb2YgZS5vbm9wZW4mJihlLm9ub3Blbih0KSxlLl93ZWJzb2NrZXQub25DbG9zZSgoZnVuY3Rpb24odCl7ZS5yZWFkeVN0YXRlPWUuX3dlYnNvY2tldC5yZWFkeVN0YXRlLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUub25jbG9zZSYmZS5vbmNsb3NlKHQpfSkpLGUuX3dlYnNvY2tldC5vbk1lc3NhZ2UoKGZ1bmN0aW9uKHQpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGUub25tZXNzYWdlJiZlLm9ubWVzc2FnZSh0KX0pKSl9KSksdGhpcy5fd2Vic29ja2V0Lm9uRXJyb3IoKGZ1bmN0aW9uKHQpe2UucmVhZHlTdGF0ZT1lLl93ZWJzb2NrZXQucmVhZHlTdGF0ZSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLm9uZXJyb3ImJmUub25lcnJvcih0KX0pKSl9LGkucHJvdG90eXBlLm9ub3Blbj1mdW5jdGlvbihlKXt9LGkucHJvdG90eXBlLm9uZXJyb3I9ZnVuY3Rpb24oZSl7fSxpLnByb3RvdHlwZS5vbmNsb3NlPWZ1bmN0aW9uKGUpe30saS5wcm90b3R5cGUub25tZXNzYWdlPWZ1bmN0aW9uKGUpe30saS5wcm90b3R5cGUuc2VuZD1mdW5jdGlvbihlKXt0aGlzLl93ZWJzb2NrZXQmJnRoaXMuX3dlYnNvY2tldC5zZW5kKHtkYXRhOmV9KX0saS5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oKXt0aGlzLl93ZWJzb2NrZXQmJnRoaXMuX3dlYnNvY2tldC5jbG9zZSgpfSxpKTtmdW5jdGlvbiBpKGUsdCl7dGhpcy51cmw9ZSx0aGlzLnJlYWR5U3RhdGU9Myx0aGlzLl93ZWJzb2NrZXQ9d3guY29ubmVjdFNvY2tldCh7dXJsOmV9KSx0aGlzLmluaXQoKX10LlplZ29XZWlYaW5NaW5pV2ViU29ja2V0PW8sdC5jcmVhdGVaZWdvV2ViU29ja2V0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyh0JTI9PT1yLlpFR09fRU5WLkJST1dTRVI/V2ViU29ja2V0Om8pKGUpfX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuTG9nZ2VyU3RhdGVDZW50ZXI9dC5jcmVhdGVaZWdvV2ViU29ja2V0PXQuWmVnb0RhdGFSZXBvcnQ9dC5aZWdvTG9nZ2VyPXZvaWQgMDt2YXIgcj1uKDEpLG89KE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiTG9nZ2VyU3RhdGVDZW50ZXJcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gci5Mb2dnZXJTdGF0ZUNlbnRlcn19KSxuKDIpKSxpPShPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcImNyZWF0ZVplZ29XZWJTb2NrZXRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gby5jcmVhdGVaZWdvV2ViU29ja2V0fX0pLG4oNCkpLHM9KE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiWmVnb0RhdGFSZXBvcnRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5aZWdvRGF0YVJlcG9ydH19KSxuKDUpKTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIlplZ29Mb2dnZXJcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcy5aZWdvTG9nZ2VyfX0pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9dGhpcyYmdGhpcy5fX2Fzc2lnbnx8ZnVuY3Rpb24oKXtyZXR1cm4ocj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQsbj0xLHI9YXJndW1lbnRzLmxlbmd0aDtuPHI7bisrKWZvcih2YXIgbyBpbiB0PWFyZ3VtZW50c1tuXSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxvKSYmKGVbb109dFtvXSk7cmV0dXJuIGV9KS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LG89KE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuWmVnb0RhdGFSZXBvcnQ9dm9pZCAwLGkucHJvdG90eXBlLm5ld1JlcG9ydD1mdW5jdGlvbihlLHQpe3RoaXMuZGF0YVN0YXRpc3RpY3NbZV09e2V2ZW50X3RpbWU6RGF0ZS5ub3coKSx0aW1lX2NvbnN1bWVkOjAsc2VxOmUsZXJyb3I6MCxtZXNzYWdlOlwic3VjY2Vzc1wiLGV2ZW50OnQsZXZlbnRzOltdfX0saS5wcm90b3R5cGUuYWRkTXNnRXh0PWZ1bmN0aW9uKGUsdCl7dGhpcy5kYXRhU3RhdGlzdGljc1tlXT90aGlzLmRhdGFTdGF0aXN0aWNzW2VdLm1zZ19leHQ9dDpjb25zb2xlLndhcm4oZStcIiBub3QgZXhpc3RcIil9LGkucHJvdG90eXBlLmFkZE1zZ0luZm89ZnVuY3Rpb24oZSx0KXt0aGlzLmRhdGFTdGF0aXN0aWNzW2VdP09iamVjdC5hc3NpZ24odGhpcy5kYXRhU3RhdGlzdGljc1tlXSx0KTpjb25zb2xlLndhcm4oZStcIiBub3QgZXhpc3RcIil9LGkucHJvdG90eXBlLmV2ZW50U3RhcnQ9ZnVuY3Rpb24oZSx0KXt0aGlzLmRhdGFTdGF0aXN0aWNzW2VdP251bGwhPXRoaXMuZGF0YVN0YXRpc3RpY3NbZV0uZXZlbnRzP3RoaXMuZGF0YVN0YXRpc3RpY3NbZV0uZXZlbnRzLnB1c2goe2V2ZW50OnQsZXZlbnRfdGltZTpEYXRlLm5vdygpLHRpbWVfY29uc3VtZWQ6MH0pOnRoaXMubG9nZ2VyLndhcm4oXCJ6ZC5lcy4wIG5vIGV2ZW50c1wiKTp0aGlzLmxvZ2dlci53YXJuKFwiemQuZXMuMCBubyBzZXEgbWF0Y2hcIil9LGkucHJvdG90eXBlLmV2ZW50RW5kPWZ1bmN0aW9uKGUsdCxuKXtpZih0aGlzLmRhdGFTdGF0aXN0aWNzW2VdKXt2YXIgcj10aGlzLmRhdGFTdGF0aXN0aWNzW2VdLmV2ZW50cztpZihyJiYwIT09ci5sZW5ndGgpe2Zvcih2YXIgbz1yLmxlbmd0aC0xOzA8PW87by0tKWlmKHJbb10uZXZlbnQ9PXQmJjA9PXJbb10udGltZV9jb25zdW1lZCl7cltvXS50aW1lX2NvbnN1bWVkPURhdGUubm93KCktcltvXS5ldmVudF90aW1lO2JyZWFrfX1lbHNlIHRoaXMubG9nZ2VyLmluZm8oXCJ6ZC5lZS4wIG5vIGV2ZW50c1wiKX1lbHNlIHRoaXMubG9nZ2VyLmluZm8oXCJ6ZC5lZS4wIG5vIHNlcSBtYXRjaFwiKX0saS5wcm90b3R5cGUuZXZlbnRFbmRXaXRoTXNnPWZ1bmN0aW9uKGUsdCxuKXtpZih0aGlzLmRhdGFTdGF0aXN0aWNzW2VdKXt2YXIgbz10aGlzLmRhdGFTdGF0aXN0aWNzW2VdLmV2ZW50cztpZihvKXtmb3IodmFyIGk9by5sZW5ndGgtMTswPD1pO2ktLSlpZihvW2ldLmV2ZW50PT10JiYwPT1vW2ldLnRpbWVfY29uc3VtZWQpe29baV0udGltZV9jb25zdW1lZD1EYXRlLm5vdygpLW9baV0uZXZlbnRfdGltZSxudWxsPT1vW2ldLm1zZ19leHQmJihvW2ldLm1zZ19leHQ9e30pLG9baV0ubXNnX2V4dD1yKHt9LG4pO2JyZWFrfX1lbHNlIHRoaXMubG9nZ2VyLndhcm4oXCJ6ZC5lZS4wIG5vIGV2ZW50c1wiKX1lbHNlIHRoaXMubG9nZ2VyLndhcm4oXCJ6ZC5lZS4wIG5vIHNlcSBtYXRjaFwiKX0saS5wcm90b3R5cGUuZXZlbnRFbmRXaXRoTXNnSW5mbz1mdW5jdGlvbihlLHQsbil7aWYodGhpcy5kYXRhU3RhdGlzdGljc1tlXSl7dmFyIHI9dGhpcy5kYXRhU3RhdGlzdGljc1tlXS5ldmVudHM7aWYocil7Zm9yKHZhciBvPXIubGVuZ3RoLTE7MDw9bztvLS0paWYocltvXS5ldmVudD09dCYmMD09cltvXS50aW1lX2NvbnN1bWVkKXtyW29dLnRpbWVfY29uc3VtZWQ9RGF0ZS5ub3coKS1yW29dLmV2ZW50X3RpbWUsT2JqZWN0LmFzc2lnbihyW29dLG4pO2JyZWFrfX1lbHNlIHRoaXMubG9nZ2VyLndhcm4oXCJ6ZC5lZS4wIG5vIGV2ZW50c1wiKX1lbHNlIHRoaXMubG9nZ2VyLndhcm4oXCJ6ZC5lZS4wIG5vIHNlcSBtYXRjaFwiKX0saS5wcm90b3R5cGUuYWRkRXZlbnRJbmZvPWZ1bmN0aW9uKGUsdCxuLHIpe2lmKHRoaXMuZGF0YVN0YXRpc3RpY3NbZV0pe3ZhciBvPXRoaXMuZGF0YVN0YXRpc3RpY3NbZV0uZXZlbnRzO2lmKG51bGwhPW8pe2Zvcih2YXIgaT1vLmxlbmd0aC0xOzA8PWk7aS0tKWlmKG9baV0uZXZlbnQ9PXQmJm51bGwhPW9baV0udGltZV9jb25zdW1lZCl7bnVsbD09b1tpXS5tc2dfZXh0P29baV0ubXNnX2V4dD17fTpvW2ldLm1zZ19leHQmJihvW2ldLm1zZ19leHRbbl09cik7YnJlYWt9fWVsc2UgdGhpcy5sb2dnZXIud2FybihcInpkLmFlaS4wIG5vIGV2ZW50c1wiKX1lbHNlIHRoaXMubG9nZ2VyLndhcm4oXCJ6ZC5hZWkuMCBubyBzZXEgbWF0Y2hcIil9LGkucHJvdG90eXBlLmFkZEV2ZW50TXNnPWZ1bmN0aW9uKGUsdCxuLHIpe2lmKHRoaXMuZGF0YVN0YXRpc3RpY3NbZV0pe3ZhciBvPXRoaXMuZGF0YVN0YXRpc3RpY3NbZV0uZXZlbnRzO2lmKG51bGwhPW8pe2Zvcih2YXIgaT1vLmxlbmd0aC0xOzA8PWk7aS0tKWlmKG9baV0uZXZlbnQ9PXQpe29baV1bbl09cjticmVha319ZWxzZSB0aGlzLmxvZ2dlci53YXJuKFwiemQuYWVtLjAgbm8gZXZlbnRzXCIpfWVsc2UgdGhpcy5sb2dnZXIud2FybihcInpkLmFlbS4wIG5vIHNlcSBtYXRjaFwiKX0saS5wcm90b3R5cGUuYWRkRXZlbnQ9ZnVuY3Rpb24oZSx0LG4pe3RoaXMuZGF0YVN0YXRpc3RpY3NbZV0/dGhpcy5kYXRhU3RhdGlzdGljc1tlXS5ldmVudHMmJihuP3RoaXMuZGF0YVN0YXRpc3RpY3NbZV0uZXZlbnRzLnB1c2goe2V2ZW50OnQsZXZlbnRfdGltZTpEYXRlLm5vdygpLG1zZ19leHQ6bn0pOnRoaXMuZGF0YVN0YXRpc3RpY3NbZV0uZXZlbnRzLnB1c2goe2V2ZW50OnQsZXZlbnRfdGltZTpEYXRlLm5vdygpfSkpOnRoaXMubG9nZ2VyLndhcm4oXCJ6ZC5hZS4wIG5vIHNlcSBtYXRjaFwiKX0saS5wcm90b3R5cGUudXBsb2FkUmVwb3J0PWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPXRoaXMuZGF0YVN0YXRpc3RpY3NbZV07bnVsbCE9byYmKHQmJihvLmV2ZW50PXQpLG8udGltZV9jb25zdW1lZD1EYXRlLm5vdygpLW8uZXZlbnRfdGltZSxuJiZ0aGlzLmFkZE1zZ0luZm8oZSx7ZXJyb3I6bi5jb2RlLG1lc3NhZ2U6bi5tZXNzYWdlfHxuLm1zZytcIiBcIisocnx8XCJcIil9KSx0aGlzLmxvZ2dlci5yZXBvcnQobyksZGVsZXRlIHRoaXMuZGF0YVN0YXRpc3RpY3NbZV0pfSxpKTtmdW5jdGlvbiBpKGUpe3RoaXMuZGF0YVN0YXRpc3RpY3M9e30sdGhpcy5sb2dnZXI9ZX10LlplZ29EYXRhUmVwb3J0PW99LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj10aGlzJiZ0aGlzLl9fYXNzaWdufHxmdW5jdGlvbigpe3JldHVybihyPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPTEscj1hcmd1bWVudHMubGVuZ3RoO248cjtuKyspZm9yKHZhciBvIGluIHQ9YXJndW1lbnRzW25dKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG8pJiYoZVtvXT10W29dKTtyZXR1cm4gZX0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sbz0oT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5aZWdvTG9nZ2VyPXZvaWQgMCxuKDApKSxpPW4oMikscz1uKDEpLGE9big2KTtmdW5jdGlvbiBjKGUpe3RoaXMubG9nTGV2ZWw9by5FTlVNX0xPR19MRVZFTC5JTkZPLHRoaXMubG9nUmVtb3RlTGV2ZWw9MCx0aGlzLndlYnNvY2tldD1udWxsLHRoaXMubG9nVXBsb2FkVGltZXI9bnVsbCx0aGlzLmxvZ1VwbG9hZEludGVydmFsPTFlNCx0aGlzLmxvZ0NhY2hlPVtdLHRoaXMubG9nQ2FjaGVTZW5kPVtdLHRoaXMubG9nQ2FjaGVNYXg9MTAwLHRoaXMuZXhpc3RVc2VySUQ9ITEsdGhpcy5zdGF0ZUNlbnRlcj1zLkxvZ2dlclN0YXRlQ2VudGVyLmdldEluc3RhbmNlKCksdGhpcy5lbnY9ZX1jLnByb3RvdHlwZS5zZXRMb2dMZXZlbD1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwIT09KGU9by5FTlVNX0xPR19MRVZFTFtlXSkmJih0aGlzLmxvZ0xldmVsPWUsITApfSxjLnByb3RvdHlwZS5zZXRSZW1vdGVMb2dMZXZlbD1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwIT09KGU9by5FTlVNX0xPR19MRVZFTFtlXSkmJih0aGlzLmxvZ1JlbW90ZUxldmVsPWUsITApfSxjLnByb3RvdHlwZS5zZXRTZXNzaW9uSW5mbz1mdW5jdGlvbihlLHQsbixyLG8saSl7dGhpcy5hcHBpZD1lLHRoaXMucm9vbWlkPXQsdGhpcy5zZXNzaW9uaWQ9bix0aGlzLnVzZXJpZD1yLHRoaXMudXNlck5hbWU9byx0aGlzLnZlcnNpb249aX0sYy5wcm90b3R5cGUucmVwb3J0PWZ1bmN0aW9uKGUpe2U9dGhpcy5sb2dSZXBvcnRQYXJhbUxpc3Qoby5FTlVNX0xPR19MRVZFTC5SRVBPUlQsZSksdGhpcy5sb2dMZXZlbCE9PW8uRU5VTV9MT0dfTEVWRUwuRElTQUJMRSYmdGhpcy5sb2dMZXZlbDw9by5FTlVNX0xPR19MRVZFTC5SRVBPUlQmJmNvbnNvbGUuZGVidWcoZSksdGhpcy5SZW1vdGVMb2coby5FTlVNX0xPR19MRVZFTC5SRVBPUlQsZSwhMCl9LGMucHJvdG90eXBlLmRlYnVnPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3ZhciBuPXRoaXMubG9nUGFyYW1MaXN0KG8uRU5VTV9MT0dfTEVWRUwuREVCVUcsZS5qb2luKFwiXCIpKTt0aGlzLmxvZ0xldmVsIT09by5FTlVNX0xPR19MRVZFTC5ESVNBQkxFJiZ0aGlzLmxvZ0xldmVsPD1vLkVOVU1fTE9HX0xFVkVMLkRFQlVHJiZjb25zb2xlLmRlYnVnKG4pLHRoaXMubG9nKG8uRU5VTV9MT0dfTEVWRUwuREVCVUcsbil9LGMucHJvdG90eXBlLmluZm89ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dmFyIG49dGhpcy5sb2dQYXJhbUxpc3Qoby5FTlVNX0xPR19MRVZFTC5JTkZPLGUuam9pbihcIlwiKSk7dGhpcy5sb2dMZXZlbCE9PW8uRU5VTV9MT0dfTEVWRUwuRElTQUJMRSYmdGhpcy5sb2dMZXZlbDw9by5FTlVNX0xPR19MRVZFTC5JTkZPJiZjb25zb2xlLmluZm8obiksdGhpcy5sb2coby5FTlVNX0xPR19MRVZFTC5JTkZPLG4pfSxjLnByb3RvdHlwZS53YXJuPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3ZhciBuPXRoaXMubG9nUGFyYW1MaXN0KG8uRU5VTV9MT0dfTEVWRUwuV0FSTixlLmpvaW4oXCJcIikpO3RoaXMubG9nTGV2ZWwhPT1vLkVOVU1fTE9HX0xFVkVMLkRJU0FCTEUmJnRoaXMubG9nTGV2ZWw8PW8uRU5VTV9MT0dfTEVWRUwuV0FSTiYmY29uc29sZS53YXJuKG4pLHRoaXMubG9nKG8uRU5VTV9MT0dfTEVWRUwuV0FSTixuKX0sYy5wcm90b3R5cGUuZXJyb3I9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dmFyIG49dGhpcy5sb2dQYXJhbUxpc3Qoby5FTlVNX0xPR19MRVZFTC5FUlJPUixlLmpvaW4oXCJcIikpO3RoaXMubG9nTGV2ZWwhPT1vLkVOVU1fTE9HX0xFVkVMLkRJU0FCTEUmJnRoaXMubG9nTGV2ZWw8PW8uRU5VTV9MT0dfTEVWRUwuRVJST1ImJihjb25zb2xlLmVycm9yKG4pLHdpbmRvdz90aGlzLnN0YXRlQ2VudGVyLmRlYnVnJiZ3aW5kb3cuYWxlcnQoZS5qb2luKFwiXCIpLnN1YnN0cihlLmpvaW4oXCJcIikuaW5kZXhPZihcIiBcIikrMSw0NTAwKSk6d3gmJnRoaXMuc3RhdGVDZW50ZXIuZGVidWcmJnd4LnNob3dNb2RhbCh7dGl0bGU6XCJcIixjb250ZW50OmUuam9pbihcIlwiKS5zdWJzdHIoZS5qb2luKFwiXCIpLmluZGV4T2YoXCIgXCIpKzEsNDUwMCl9KSksdGhpcy5sb2coby5FTlVNX0xPR19MRVZFTC5FUlJPUixuKX0sYy5wcm90b3R5cGUubG9nPWZ1bmN0aW9uKGUsdCl7dGhpcy5sb2dSZW1vdGVMZXZlbCE9PW8uRU5VTV9MT0dfTEVWRUwuRElTQUJMRSYmdGhpcy5sb2dSZW1vdGVMZXZlbDw9ZSYmdGhpcy5SZW1vdGVMb2coZSx0KX0sYy5wcm90b3R5cGUuc2V0TG9nU2VydmVyPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gZS5zdGFydHNXaXRoKFwid3NzOlwiKT8odGhpcy5sb2dUeXBlPW8uRU5VTV9SRU1PVEVfVFlQRS5XRUJTT0NLRVQsdGhpcy5vcGVuV2ViU29ja2V0TG9nU2VydmVyKGUpKTplLnN0YXJ0c1dpdGgoXCJodHRwczpcIik/KHRoaXMubG9nVHlwZT1vLkVOVU1fUkVNT1RFX1RZUEUuSFRUUFMsdGhpcy5vcGVuSHR0cHNMb2dTZXJ2ZXIoZSkpOnRoaXMubG9nVHlwZT1vLkVOVU1fUkVNT1RFX1RZUEUuRElTQUJMRSwhMH1jYXRjaChlKXtyZXR1cm4gdGhpcy5lcnJvcihKU09OLnN0cmluZ2lmeShlKSksITF9fSxjLnByb3RvdHlwZS5zdG9wTG9nU2VydmVyPWZ1bmN0aW9uKCl7dGhpcy5sb2dUeXBlPT1vLkVOVU1fUkVNT1RFX1RZUEUuV0VCU09DS0VUP3RoaXMuc3RvcFdlYlNvY2tldFNlcnZlcigpOnRoaXMubG9nVHlwZT09by5FTlVNX1JFTU9URV9UWVBFLkhUVFBTJiYodGhpcy5TZW5kSHR0cHNMb2coKSx0aGlzLnN0b3BIdHRwc1NlcnZlcigpKSx0aGlzLmxvZ1R5cGU9by5FTlVNX1JFTU9URV9UWVBFLkRJU0FCTEV9LGMucHJvdG90eXBlLnN0b3BXZWJTb2NrZXRTZXJ2ZXI9ZnVuY3Rpb24oKXt0aGlzLndlYnNvY2tldCYmKHRoaXMud2Vic29ja2V0Lm9uY2xvc2U9bnVsbCx0aGlzLndlYnNvY2tldC5vbmVycm9yPW51bGwsdGhpcy53ZWJzb2NrZXQuY2xvc2UoKSx0aGlzLndlYnNvY2tldD1udWxsKX0sYy5wcm90b3R5cGUub3Blbkh0dHBzTG9nU2VydmVyPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7KHRoaXMudXJsPWUpJiYodGhpcy5zdG9wSHR0cHNTZXJ2ZXIoKSx0aGlzLmxvZ1VwbG9hZFRpbWVyfHwodGhpcy5sb2dVcGxvYWRUaW1lcj1zZXRJbnRlcnZhbCgoZnVuY3Rpb24oKXt0LlNlbmRIdHRwc0xvZygpfSksdGhpcy5sb2dVcGxvYWRJbnRlcnZhbCkpKX0sYy5wcm90b3R5cGUuc3RvcEh0dHBzU2VydmVyPWZ1bmN0aW9uKCl7dGhpcy5sb2dVcGxvYWRUaW1lciYmKGNsZWFySW50ZXJ2YWwodGhpcy5sb2dVcGxvYWRUaW1lciksdGhpcy5sb2dVcGxvYWRUaW1lcj1udWxsKX0sYy5wcm90b3R5cGUuUmVtb3RlTG9nPWZ1bmN0aW9uKGUsdCxuKXtpZih2b2lkIDA9PT1uJiYobj0hMSksXCJcIiE9dGhpcy51cmwpaWYodGhpcy5sb2dUeXBlPT1vLkVOVU1fUkVNT1RFX1RZUEUuV0VCU09DS0VUKXRoaXMuUmVtb3RlV2ViU29ja2V0TG9nKGUsdCk7ZWxzZSBpZih0aGlzLmxvZ1R5cGU9PW8uRU5VTV9SRU1PVEVfVFlQRS5IVFRQUyl0aGlzLlJlbW90ZUh0dHBzTG9nKGUsdCxuKTtlbHNlIGlmKHRoaXMubG9nTGV2ZWwhPT1vLkVOVU1fTE9HX0xFVkVMLkRJU0FCTEUmJnRoaXMubG9nTGV2ZWw8PWUpZm9yKHRoaXMubG9nQ2FjaGVTZW5kLnB1c2godCk7dGhpcy5sb2dDYWNoZVNlbmQubGVuZ3RoPnRoaXMubG9nQ2FjaGVNYXg7KXRoaXMubG9nQ2FjaGVTZW5kLnNoaWZ0KCl9LGMucHJvdG90eXBlLlJlbW90ZVdlYlNvY2tldExvZz1mdW5jdGlvbihlLHQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0JiY0ZTM8dC5sZW5ndGgpY29uc29sZS5pbmZvKFwibG9nIG92ZXIgbWF4aW11bSwgaWdub3JlXCIpO2Vsc2UgaWYobnVsbD09dGhpcy53ZWJzb2NrZXR8fDI9PXRoaXMud2Vic29ja2V0LnJlYWR5U3RhdGV8fDM9PXRoaXMud2Vic29ja2V0LnJlYWR5U3RhdGUpe3ZhciBuPXRoaXMudXJsO3RoaXMudXJsPVwiXCIsdGhpcy5zZXRMb2dTZXJ2ZXIobiksdGhpcy5sb2dDYWNoZVNlbmQubGVuZ3RoPHRoaXMubG9nQ2FjaGVNYXgmJnRoaXMubG9nQ2FjaGVTZW5kLnB1c2godCl9ZWxzZSBpZigwPT10aGlzLndlYnNvY2tldC5yZWFkeVN0YXRlKXRoaXMubG9nQ2FjaGVTZW5kLmxlbmd0aDx0aGlzLmxvZ0NhY2hlTWF4JiZ0aGlzLmxvZ0NhY2hlU2VuZC5wdXNoKHQpO2Vsc2UgaWYoMT09dGhpcy53ZWJzb2NrZXQucmVhZHlTdGF0ZSlpZigwPHRoaXMubG9nQ2FjaGVTZW5kLmxlbmd0aCl7Zm9yKHZhciBvPVwiXCIsaT0wO2k8dGhpcy5sb2dDYWNoZVNlbmQubGVuZ3RoO2krKyl7NGUzPChvK3RoaXMubG9nQ2FjaGVTZW5kW2ldKS5sZW5ndGgmJih0aGlzLndlYnNvY2tldC5zZW5kKG8pLG89XCJcIik7dmFyIHM9SlNPTi5wYXJzZSh0aGlzLmxvZ0NhY2hlU2VuZFtpXSk7cz1yKHIoe30scykse3VzZXJpZDpzLnVzZXJpZHx8dGhpcy51c2VyaWQscm9vbWlkOnMucm9vbWlkfHx0aGlzLnJvb21pZCx1c2VyTmFtZTpzLnJvb21pZHx8dGhpcy51c2VyTmFtZX0pLG89bytKU09OLnN0cmluZ2lmeShzKStcIlxcblwifXQ9byt0LHRoaXMubG9nQ2FjaGVTZW5kPVtdLHRoaXMud2Vic29ja2V0LnNlbmQodCl9ZWxzZSB0aGlzLndlYnNvY2tldC5zZW5kKHQpO2Vsc2UgY29uc29sZS53YXJuKFwid3Jvbmcgc29ja2V0IHN0YXRlOlwiK3RoaXMud2Vic29ja2V0LnJlYWR5U3RhdGUpLHRoaXMubG9nQ2FjaGVTZW5kLmxlbmd0aDx0aGlzLmxvZ0NhY2hlTWF4JiZ0aGlzLmxvZ0NhY2hlU2VuZC5wdXNoKHQpfSxjLnByb3RvdHlwZS5SZW1vdGVIdHRwc0xvZz1mdW5jdGlvbihlLHQsbil7dGhpcy5sb2dDYWNoZVNlbmQucHVzaCh0KSwodGhpcy5sb2dDYWNoZVNlbmQubGVuZ3RoPj10aGlzLmxvZ0NhY2hlTWF4fHwhMD09PW4pJiZ0aGlzLlNlbmRIdHRwc0xvZygpfSxjLnByb3RvdHlwZS5sb2dQYXJhbUxpc3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17dGltZTpuPWEuZ2V0Q3VycmVudFRpbWUoKSxsZXZlbDplLGFjdGlvbjoodD1bdC5zdWJzdHIoMCx0LmluZGV4T2YoXCIgXCIpKXx8dCx0LnN1YnN0cih0LmluZGV4T2YoXCIgXCIpKzEsNDUwMCl8fHRdKVswXSxjb250ZW50OnRbMV0sYXBwaWQ6dGhpcy5hcHBpZCxyb29taWQ6dGhpcy5yb29taWQsdXNlcmlkOnRoaXMudXNlcmlkLHVzZXJOYW1lOnRoaXMudXNlck5hbWUsc2Vzc2lvbmlkOnRoaXMuc2Vzc2lvbmlkfTtyZXR1cm4gSlNPTi5zdHJpbmdpZnkobil9LGMucHJvdG90eXBlLmxvZ1JlcG9ydFBhcmFtTGlzdD1mdW5jdGlvbihlLHQpe3ZhciBuPWEuZ2V0Q3VycmVudFRpbWUoKTtyZXR1cm4gdD1yKHIoe30sdCkse3RpbWU6bixsZXZlbDplLGNvbnNvbGU6dGhpcy5lbnYlMj09PW8uWkVHT19FTlYuQlJPV1NFUj9cInJ0Y1wiOlwieGN4XCIsYXBwaWQ6dGhpcy5hcHBpZCxyb29tX2lkOnRoaXMucm9vbWlkLHJvb21pZDp0aGlzLnJvb21pZCx1c2VyaWQ6dGhpcy51c2VyaWQsaWRfbmFtZTp0aGlzLnVzZXJpZCx1c2VyTmFtZTp0aGlzLnVzZXJOYW1lLHNlc3Npb25pZDp0aGlzLnNlc3Npb25pZCxzZGtfdmVyc2lvbjp0aGlzLnZlcnNpb24sdGVzdF9lbnZpcm9ubWVudDp0aGlzLnN0YXRlQ2VudGVyLnRlc3RFbnZpcm9ubWVudCx2ZXJzaW9uOnRoaXMudmVyc2lvbixldmVudF9pZDp0aGlzLmFwcGlkK1wiX1wiK3RoaXMudXNlcmlkK1wiX1wiK3QuZXZlbnRfdGltZStcIl9cIit0LnNlcX0pLEpTT04uc3RyaW5naWZ5KHQpfSxjLnByb3RvdHlwZS5vcGVuV2ViU29ja2V0TG9nU2VydmVyPWZ1bmN0aW9uKGUpe3RoaXMudXJsIT1lJiYodGhpcy51cmw9ZSkmJih0aGlzLnN0b3BXZWJTb2NrZXRTZXJ2ZXIoKSx0aGlzLndlYnNvY2tldD1pLmNyZWF0ZVplZ29XZWJTb2NrZXQoZSx0aGlzLmVudiksdGhpcy53ZWJzb2NrZXQub25vcGVuPWZ1bmN0aW9uKCl7fSx0aGlzLndlYnNvY2tldC5vbmNsb3NlPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO2NvbnNvbGUud2FybihcIm9uY2xvc2UgICB3ZWJzb2NrZXQgZXJyb3I6XCIsZSl9LHRoaXMud2Vic29ja2V0Lm9ubWVzc2FnZT1mdW5jdGlvbigpe30sdGhpcy53ZWJzb2NrZXQub25lcnJvcj1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTtjb25zb2xlLndhcm4oXCJvcGVuIGxvZyB3ZWJzb2NrZXQgZXJyb3I6XCIsZSl9KX0sYy5wcm90b3R5cGUuU2VuZEh0dHBzTG9nPWZ1bmN0aW9uKCl7MCE9dGhpcy5sb2dDYWNoZVNlbmQubGVuZ3RoJiYodGhpcy5lbnYlMj09PW8uWkVHT19FTlYuQlJPV1NFUj90aGlzLlNlbmRIdHRwc0xvZ1dlYigpOnRoaXMuU2VuZEh0dHBzTG9nV2VDaGF0TWluaSgpKX0sYy5wcm90b3R5cGUuU2VuZEh0dHBzTG9nV2ViPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXMubG9nQ2FjaGVTZW5kLmpvaW4oXCJcXG5cIiksbj1uZXcgWE1MSHR0cFJlcXVlc3Q7bi5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtpZig0PT1uLnJlYWR5U3RhdGUpaWYoMjAwPT1uLnN0YXR1cyl7aWYoMCE9bi5yZXNwb25zZVRleHQubGVuZ3RoKXRyeXt2YXIgdD1KU09OLnBhcnNlKG4ucmVzcG9uc2VUZXh0KS5pbnRlcnZhbDtcIm51bWJlclwiPT10eXBlb2YgdCYmZS5sb2dVcGxvYWRJbnRlcnZhbCE9PXQmJihlLnRpbWVJbnRlcnZhbD10LGUub3Blbkh0dHBzTG9nU2VydmVyKGUudXJsKSl9Y2F0Y2godCl7Y29uc29sZS5sb2coXCJzZW5kIHJlc3VsdCBmYWlsZWQgXCIrdCl9fWVsc2UgY29uc29sZS5sb2coXCJzZW5kIGZhaWxlZCBcIituLnN0YXR1cyl9LG4ub3BlbihcIlBPU1RcIix0aGlzLnVybCwhMCksMD09dGhpcy5lbnY/bi5zZW5kKHQpOjI9PXRoaXMuZW52JiYobi5zZXRSZXF1ZXN0SGVhZGVyKFwiY29udGVudC10eXBlXCIsXCJhcHBsaWNhdGlvbi9qc29uXCIpLG4uc2VuZChKU09OLnN0cmluZ2lmeSh7dXNlcl9pZDp0aGlzLnVzZXJpZCxsb2c6dH0pKSksdGhpcy5sb2dDYWNoZVNlbmQ9W119LGMucHJvdG90eXBlLlNlbmRIdHRwc0xvZ1dlQ2hhdE1pbmk9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9KCF0aGlzLmV4aXN0VXNlcklEJiZ0aGlzLnVzZXJpZCYmdGhpcy5sb2dDYWNoZVNlbmQuZm9yRWFjaCgoZnVuY3Rpb24odCl7QXJyYXkuaXNBcnJheSh0KSYmdC5mb3JFYWNoKChmdW5jdGlvbihuLHIpe3ZhciBvPUpTT04ucGFyc2Uobik7byYmXCJcIj09SlNPTi5wYXJzZShuKS51c2VyaWQ/KG8udXNlcmlkPWUudXNlcmlkLG8uaWRfbmFtZT1lLnVzZXJpZCx0W3JdPUpTT04uc3RyaW5naWZ5KG8pKTplLmV4aXN0VXNlcklEPSEwfSkpfSkpLHRoaXMubG9nQ2FjaGVTZW5kLmpvaW4oXCJcXG5cIikpO3Q9MT09dGhpcy5lbnY/dDpKU09OLnN0cmluZ2lmeSh7dXNlcl9pZDp0aGlzLnVzZXJpZCxsb2c6dH0pO3d4LnJlcXVlc3Qoe3VybDp0aGlzLnVybCxkYXRhOnQsbWV0aG9kOlwiUE9TVFwiLHN1Y2Nlc3M6ZnVuY3Rpb24odCl7MCE9dC5kYXRhLmxlbmd0aCYmXCJudW1iZXJcIj09dHlwZW9mKHQ9dCYmdC5kYXRhJiZ0LmRhdGEuaW50ZXJ2YWwpJiZlLmxvZ1VwbG9hZEludGVydmFsIT09dCYmKGUudGltZUludGVydmFsPXQsZS5vcGVuSHR0cHNMb2dTZXJ2ZXIoZS51cmwpKX0sZmFpbDpmdW5jdGlvbihlKXtjb25zb2xlLmxvZyhcInNlbmQgZmFpbGVkIFwiK2Uuc3RhdHVzQ29kZSl9fSksdGhpcy5sb2dDYWNoZVNlbmQ9W119LHQuWmVnb0xvZ2dlcj1jfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5nZXRDdXJyZW50VGltZT10LmdldEN1cnJlbnRFbnY9dC5nZXRCcm93c2VyPXZvaWQgMDt2YXIgcj1uKDApLG89KHQuZ2V0QnJvd3Nlcj1mdW5jdGlvbigpe3ZhciBlPXdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LHQ9bnVsbCE9d2luZG93LkFjdGl2ZVhPYmplY3QmJi0xIT1lLmluZGV4T2YoXCJNU0lFXCIpLG49LTEhPWUuaW5kZXhPZihcIkZpcmVmb3hcIiksbz1udWxsIT13aW5kb3cub3ByLGk9ZS5pbmRleE9mKFwiQ2hyb21lXCIpJiZ3aW5kb3cuY2hyb21lLHM9LTEhPWUuaW5kZXhPZihcIlNhZmFyaVwiKSYmLTEhPWUuaW5kZXhPZihcIlZlcnNpb25cIik7ZT1lLnRvTG93ZXJDYXNlKCkubWF0Y2goL01pY3JvTWVzc2VuZ2VyL2kpJiZcIm1pY3JvbWVzc2VuZ2VyXCI9PT1lLnRvTG93ZXJDYXNlKCkubWF0Y2goL01pY3JvTWVzc2VuZ2VyL2kpWzBdO3JldHVybiB0P3IuWkVHT19CUk9XU0VSX1RZUEUuSUU6bj9yLlpFR09fQlJPV1NFUl9UWVBFLkZJUkVGT1g6bz9yLlpFR09fQlJPV1NFUl9UWVBFLk9QRVJBOmk/ci5aRUdPX0JST1dTRVJfVFlQRS5DSFJPTUU6cz9yLlpFR09fQlJPV1NFUl9UWVBFLlNBRkFSSTplP3IuWkVHT19CUk9XU0VSX1RZUEUuV0VJWElOOnIuWkVHT19CUk9XU0VSX1RZUEUuVU5LT1dOfSx0LmdldEN1cnJlbnRFbnY9ZnVuY3Rpb24oKXt2YXIgZT13aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQpey0xPT1lLmluZGV4T2YoXCJNaWNyb01lc3NhZ2VcIik/dChyLlpFR09fRU5WLkJST1dTRVIpOnd4Lm1pbmlQcm9ncmFtLmdldEVudigoZnVuY3Rpb24oZSl7ZS5taW5pcHJvZ3JhbX0pKX0pKX0sW1wiMDBcIixcIjAxXCIsXCIwMlwiLFwiMDNcIixcIjA0XCIsXCIwNVwiLFwiMDZcIixcIjA3XCIsXCIwOFwiLFwiMDlcIl0pO3QuZ2V0Q3VycmVudFRpbWU9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgRGF0ZTtyZXR1cm5bZS5nZXRGdWxsWWVhcigpK1wiL1wiLChvW2UuZ2V0TW9udGgoKSsxXXx8ZS5nZXRNb250aCgpKzEpK1wiL1wiLChvW2UuZ2V0RGF0ZSgpXXx8ZS5nZXREYXRlKCkpK1wiIFwiLChvW2UuZ2V0SG91cnMoKV18fGUuZ2V0SG91cnMoKSkrXCI6XCIsKG9bZS5nZXRNaW51dGVzKCldfHxlLmdldE1pbnV0ZXMoKSkrXCI6XCIsb1tlLmdldFNlY29uZHMoKV18fGUuZ2V0U2Vjb25kcygpLFwiLlwiK2UuZ2V0VGltZSgpJTFlM10uam9pbihcIlwiKX19XSxpPXt9LHIubT1vLHIuYz1pLHIuZD1mdW5jdGlvbihlLHQsbil7ci5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2VudW1lcmFibGU6ITAsZ2V0Om59KX0sci5yPWZ1bmN0aW9uKGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LHIudD1mdW5jdGlvbihlLHQpe2lmKDEmdCYmKGU9cihlKSksOCZ0KXJldHVybiBlO2lmKDQmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgbj1PYmplY3QuY3JlYXRlKG51bGwpO2lmKHIucihuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobixcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTplfSksMiZ0JiZcInN0cmluZ1wiIT10eXBlb2YgZSlmb3IodmFyIG8gaW4gZSlyLmQobixvLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfS5iaW5kKG51bGwsbykpO3JldHVybiBufSxyLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIHIuZCh0LFwiYVwiLHQpLHR9LHIubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sci5wPVwiXCIscihyLnM9MykpfSxmdW5jdGlvbih0LG4pe3QuZXhwb3J0cz1lfSxmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPW4oMikuZW5jLlV0Zjh9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt0LmJ5dGVMZW5ndGg9ZnVuY3Rpb24oZSl7cmV0dXJuIDMqKChlPXUoZSkpWzBdKyhlPWVbMV0pKS80LWV9LHQudG9CeXRlQXJyYXk9ZnVuY3Rpb24oZSl7dmFyIHQsbixyPShzPXUoZSkpWzBdLHM9c1sxXSxhPW5ldyBpKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIDMqKGUrdCkvNC10fShyLHMpKSxjPTAsbD0wPHM/ci00OnI7Zm9yKG49MDtuPGw7bis9NCl0PW9bZS5jaGFyQ29kZUF0KG4pXTw8MTh8b1tlLmNoYXJDb2RlQXQobisxKV08PDEyfG9bZS5jaGFyQ29kZUF0KG4rMildPDw2fG9bZS5jaGFyQ29kZUF0KG4rMyldLGFbYysrXT10Pj4xNiYyNTUsYVtjKytdPXQ+PjgmMjU1LGFbYysrXT0yNTUmdDtyZXR1cm4gMj09PXMmJih0PW9bZS5jaGFyQ29kZUF0KG4pXTw8MnxvW2UuY2hhckNvZGVBdChuKzEpXT4+NCxhW2MrK109MjU1JnQpLDE9PT1zJiYodD1vW2UuY2hhckNvZGVBdChuKV08PDEwfG9bZS5jaGFyQ29kZUF0KG4rMSldPDw0fG9bZS5jaGFyQ29kZUF0KG4rMildPj4yLGFbYysrXT10Pj44JjI1NSxhW2MrK109MjU1JnQpLGF9LHQuZnJvbUJ5dGVBcnJheT1mdW5jdGlvbihlKXtmb3IodmFyIHQsbj1lLmxlbmd0aCxvPW4lMyxpPVtdLHM9MCxhPW4tbztzPGE7cys9MTYzODMpaS5wdXNoKGZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIG8saT1bXSxzPXQ7czxuO3MrPTMpbz0oZVtzXTw8MTYmMTY3MTE2ODApKyhlW3MrMV08PDgmNjUyODApKygyNTUmZVtzKzJdKSxpLnB1c2goZnVuY3Rpb24oZSl7cmV0dXJuIHJbZT4+MTgmNjNdK3JbZT4+MTImNjNdK3JbZT4+NiY2M10rcls2MyZlXX0obykpO3JldHVybiBpLmpvaW4oXCJcIil9KGUscyxhPHMrMTYzODM/YTpzKzE2MzgzKSk7cmV0dXJuIDE9PW8/KHQ9ZVtuLTFdLGkucHVzaChyW3Q+PjJdK3JbdDw8NCY2M10rXCI9PVwiKSk6Mj09byYmKHQ9KGVbbi0yXTw8OCkrZVtuLTFdLGkucHVzaChyW3Q+PjEwXStyW3Q+PjQmNjNdK3JbdDw8MiY2M10rXCI9XCIpKSxpLmpvaW4oXCJcIil9O2Zvcih2YXIgcj1bXSxvPVtdLGk9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQ4QXJyYXk/VWludDhBcnJheTpBcnJheSxzPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiLGE9MCxjPXMubGVuZ3RoO2E8YzsrK2EpclthXT1zW2FdLG9bcy5jaGFyQ29kZUF0KGEpXT1hO2Z1bmN0aW9uIHUoZSl7dmFyIHQ9ZS5sZW5ndGg7aWYoMDx0JTQpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNFwiKTtyZXR1cm4gdD0oZT0tMT09PShlPWUuaW5kZXhPZihcIj1cIikpP3Q6ZSk9PT10PzA6NC1lJTQsW2UsdF19b1tcIi1cIi5jaGFyQ29kZUF0KDApXT02MixvW1wiX1wiLmNoYXJDb2RlQXQoMCldPTYzfSxmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPW4oMikuZW5jLkhleH0sZnVuY3Rpb24oZSx0KXt2YXIgbj1mdW5jdGlvbigpe3JldHVybiB0aGlzfSgpO3RyeXtuPW58fG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCl9Y2F0Y2goZSl7XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmKG49d2luZG93KX1lLmV4cG9ydHM9bn0sZnVuY3Rpb24oZSx0LG4pe3ZhciByLG8saSxzLGE7ZS5leHBvcnRzPShlPW4oMiksbigxOCksbigxOSkscj0oaT0obj1lKS5saWIpLkJhc2Usbz1pLldvcmRBcnJheSxzPShpPW4uYWxnbykuTUQ1LGE9aS5FdnBLREY9ci5leHRlbmQoe2NmZzpyLmV4dGVuZCh7a2V5U2l6ZTo0LGhhc2hlcjpzLGl0ZXJhdGlvbnM6MX0pLGluaXQ6ZnVuY3Rpb24oZSl7dGhpcy5jZmc9dGhpcy5jZmcuZXh0ZW5kKGUpfSxjb21wdXRlOmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuLHI9dGhpcy5jZmcsaT1yLmhhc2hlci5jcmVhdGUoKSxzPW8uY3JlYXRlKCksYT1zLndvcmRzLGM9ci5rZXlTaXplLHU9ci5pdGVyYXRpb25zO2EubGVuZ3RoPGM7KXtuJiZpLnVwZGF0ZShuKSxuPWkudXBkYXRlKGUpLmZpbmFsaXplKHQpLGkucmVzZXQoKTtmb3IodmFyIGw9MTtsPHU7bCsrKW49aS5maW5hbGl6ZShuKSxpLnJlc2V0KCk7cy5jb25jYXQobil9cmV0dXJuIHMuc2lnQnl0ZXM9NCpjLHN9fSksbi5FdnBLREY9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBhLmNyZWF0ZShuKS5jb21wdXRlKGUsdCl9LGUuRXZwS0RGKX0sZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIHIoZSl7aWYoc1tlXSlyZXR1cm4gc1tlXS5leHBvcnRzO3ZhciB0PXNbZV09e2k6ZSxsOiExLGV4cG9ydHM6e319O3JldHVybiBpW2VdLmNhbGwodC5leHBvcnRzLHQsdC5leHBvcnRzLHIpLHQubD0hMCx0LmV4cG9ydHN9dmFyIG8saSxzO2UuZXhwb3J0cz0obz1uKDE1KSxzPXt9LHIubT1pPVtmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5aRUdPX1NFVFRJTkdfQUNUSU9OPXZvaWQgMCwodD10LlpFR09fU0VUVElOR19BQ1RJT058fCh0LlpFR09fU0VUVElOR19BQ1RJT049e30pKS5DT05TVFJVQ1RPUj1cInpzLjBcIix0LlNFVFRJTkdfSU5JVD1cInpzLmlpLjBcIix0LlNFVFRJTkdfRkVUQ0hfU0VUVElORz1cInpzLmZzLjBcIix0LlNFVFRJTkdfX0ZFVENIX1NFVFRJTkc9XCJ6cy5mcy4xXCIsdC5TRVRUSU5HX0dFVF9DTE9VRF9TRVRUSU5HPVwienMuZ2NzLjBcIix0LlNFVFRJTkdfUE9MTElOR19TRVRUSU5HPVwienMucHMuMFwiLHQuU0VUVElOR0NBQ0hFSEFORExFUl9HRVRfQ0FDSEVfU0VUVElORz1cInpzLnNjaC5nY3MuMFwiLHQuU0VUVElOR0NBQ0hFSEFORExFUl9TVE9SRV9TRVRUSU5HPVwienMuc2NoLnNzLjBcIix0LlNFVFRJTkdGRVRDSEhBTkRMRVJfRkVUQ0hTRVRUSU5HPVwienMuc2ZoLmZzLjBcIn0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZXJyb3JMaXN0PXZvaWQgMCx0LmVycm9yTGlzdD17Tk9UX0lOSVQ6e2NvZGU6MTAwMSxtc2c6XCJub3QgaW5pdFwifSxGSUxFX1JFUVVFU1RfRkFJTDp7Y29kZToxMDAyLG1zZzpcImZldGNoIHJlcXVlc3QgZmFpbFwifSxJTkZMQVRFX0RBVEFfRkFJTDp7Y29kZToxMDAzLG1zZzpcImluZmxhdGUgZmFpbFwifSxNVUxUSV9GSUxFX05PVF9FWElTVDp7Y29kZToxMDA0LG1zZzpcImdldCBtdWx0aSBmaWxlIGZhaWxcIn0sQVVUSF9GQUlMOntjb2RlOjEwMDUsbXNnOlwiYXV0aCBmYWlsZWRcIn19fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5nZW5lcmF0ZVVVSUQ9dC5jaGVja1ZhbGlkTnVtYmVyPXQuYW5hbHl6ZUtleT10LmdldEN1cnJlbnRUaW1lPXQuZ2V0QnJvd3Nlcj12b2lkIDAsdC5nZXRCcm93c2VyPWZ1bmN0aW9uKCl7dmFyIGU9d2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQsdD1udWxsIT13aW5kb3cuQWN0aXZlWE9iamVjdCYmLTEhPWUuaW5kZXhPZihcIk1TSUVcIiksbj0tMSE9ZS5pbmRleE9mKFwiRmlyZWZveFwiKSxyPW51bGwhPXdpbmRvdy5vcHIsbz1lLmluZGV4T2YoXCJDaHJvbWVcIikmJndpbmRvdy5jaHJvbWUsaT0tMSE9ZS5pbmRleE9mKFwiU2FmYXJpXCIpJiYtMSE9ZS5pbmRleE9mKFwiVmVyc2lvblwiKTtlPWUudG9Mb3dlckNhc2UoKS5tYXRjaCgvTWljcm9NZXNzZW5nZXIvaSkmJlwibWljcm9tZXNzZW5nZXJcIj09PWUudG9Mb3dlckNhc2UoKS5tYXRjaCgvTWljcm9NZXNzZW5nZXIvaSlbMF07cmV0dXJuIHQ/XCJJRVwiOm4/XCJGSVJFRk9YXCI6cj9cIk9QRVJBXCI6bz9cIkNIUk9NRVwiOmk/XCJTQUZBUklcIjplP1wiV0VJWElOXCI6XCJVTktPV05cIn07dmFyIHI9W1wiMDBcIixcIjAxXCIsXCIwMlwiLFwiMDNcIixcIjA0XCIsXCIwNVwiLFwiMDZcIixcIjA3XCIsXCIwOFwiLFwiMDlcIl07dC5nZXRDdXJyZW50VGltZT1mdW5jdGlvbigpe3ZhciBlPW5ldyBEYXRlO3JldHVybltlLmdldEZ1bGxZZWFyKCkrXCIvXCIsKHJbZS5nZXRNb250aCgpKzFdfHxlLmdldE1vbnRoKCkrMSkrXCIvXCIsKHJbZS5nZXREYXRlKCldfHxlLmdldERhdGUoKSkrXCIgXCIsKHJbZS5nZXRIb3VycygpXXx8ZS5nZXRIb3VycygpKStcIjpcIiwocltlLmdldE1pbnV0ZXMoKV18fGUuZ2V0TWludXRlcygpKStcIjpcIixyW2UuZ2V0U2Vjb25kcygpXXx8ZS5nZXRTZWNvbmRzKCksXCIuXCIrZS5nZXRUaW1lKCklMWUzXS5qb2luKFwiXCIpfSx0LmFuYWx5emVLZXk9ZnVuY3Rpb24oZSl7cmV0dXJuIGU9ZS5zcGxpdChcIl9cIikse2xldmVsOk51bWJlcihlWzBdKSx0aW1lc3RhbXA6ZVsxXSxzZXE6ZVsyXX19LHQuY2hlY2tWYWxpZE51bWJlcj1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHQ9dHx8MSxuPW58fDFlNCxcIm51bWJlclwiPT10eXBlb2YgZSYmZSUxPT0wJiZ0PD1lJiZlPD1ufSx0LmdlbmVyYXRlVVVJRD1mdW5jdGlvbihlKXtpZigwPT09KGU9dm9pZCAwPT09ZT8wOmUpP249bG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ6X2RldmljZUlEXCIpOnd4LmdldFN0b3JhZ2VTeW5jKFwiel9kZXZpY2VJRFwiKSxuKXJldHVybiBuO3ZhciB0PShuZXcgRGF0ZSkuZ2V0VGltZSgpLG49XCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csKGZ1bmN0aW9uKGUpe3ZhciBuPSh0KzE2Kk1hdGgucmFuZG9tKCkpJTE2fDA7cmV0dXJuIHQ9TWF0aC5mbG9vcih0LzE2KSwoXCJ4XCI9PWU/bjozJm58OCkudG9TdHJpbmcoMzYpfSkpO3JldHVybiAwPT09ZT9sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInpfZGV2aWNlSURcIixuKTp3eC5zZXRTdG9yYWdlU3luYyhcInpfZGV2aWNlSURcIixuKSxufX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuWmVnb1NldHRpbmc9dm9pZCAwO3ZhciByPW4oNCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJaZWdvU2V0dGluZ1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByLlplZ29TZXR0aW5nfX0pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9dGhpcyYmdGhpcy5fX2Fzc2lnbnx8ZnVuY3Rpb24oKXtyZXR1cm4ocj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQsbj0xLHI9YXJndW1lbnRzLmxlbmd0aDtuPHI7bisrKWZvcih2YXIgbyBpbiB0PWFyZ3VtZW50c1tuXSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxvKSYmKGVbb109dFtvXSk7cmV0dXJuIGV9KS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LG89dGhpcyYmdGhpcy5fX2F3YWl0ZXJ8fGZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBuZXcobj1ufHxQcm9taXNlKSgoZnVuY3Rpb24obyxpKXtmdW5jdGlvbiBzKGUpe3RyeXtjKHIubmV4dChlKSl9Y2F0Y2goZSl7aShlKX19ZnVuY3Rpb24gYShlKXt0cnl7YyhyLnRocm93KGUpKX1jYXRjaChlKXtpKGUpfX1mdW5jdGlvbiBjKGUpe3ZhciB0O2UuZG9uZT9vKGUudmFsdWUpOigodD1lLnZhbHVlKWluc3RhbmNlb2Ygbj90Om5ldyBuKChmdW5jdGlvbihlKXtlKHQpfSkpKS50aGVuKHMsYSl9Yygocj1yLmFwcGx5KGUsdHx8W10pKS5uZXh0KCkpfSkpfSxpPXRoaXMmJnRoaXMuX19nZW5lcmF0b3J8fGZ1bmN0aW9uKGUsdCl7dmFyIG4scixvLGk9e2xhYmVsOjAsc2VudDpmdW5jdGlvbigpe2lmKDEmb1swXSl0aHJvdyBvWzFdO3JldHVybiBvWzFdfSx0cnlzOltdLG9wczpbXX0scz17bmV4dDphKDApLHRocm93OmEoMSkscmV0dXJuOmEoMil9O3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmKHNbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSkscztmdW5jdGlvbiBhKHMpe3JldHVybiBmdW5jdGlvbihhKXt2YXIgYz1bcyxhXTtpZihuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7aTspdHJ5e2lmKG49MSxyJiYobz0yJmNbMF0/ci5yZXR1cm46Y1swXT9yLnRocm93fHwoKG89ci5yZXR1cm4pJiZvLmNhbGwociksMCk6ci5uZXh0KSYmIShvPW8uY2FsbChyLGNbMV0pKS5kb25lKXJldHVybiBvO3N3aXRjaChyPTAsKGM9bz9bMiZjWzBdLG8udmFsdWVdOmMpWzBdKXtjYXNlIDA6Y2FzZSAxOm89YzticmVhaztjYXNlIDQ6cmV0dXJuIGkubGFiZWwrKyx7dmFsdWU6Y1sxXSxkb25lOiExfTtjYXNlIDU6aS5sYWJlbCsrLHI9Y1sxXSxjPVswXTtjb250aW51ZTtjYXNlIDc6Yz1pLm9wcy5wb3AoKSxpLnRyeXMucG9wKCk7Y29udGludWU7ZGVmYXVsdDppZighKG89MDwobz1pLnRyeXMpLmxlbmd0aCYmb1tvLmxlbmd0aC0xXSkmJig2PT09Y1swXXx8Mj09PWNbMF0pKXtpPTA7Y29udGludWV9aWYoMz09PWNbMF0mJighb3x8Y1sxXT5vWzBdJiZjWzFdPG9bM10pKXtpLmxhYmVsPWNbMV07YnJlYWt9aWYoNj09PWNbMF0mJmkubGFiZWw8b1sxXSl7aS5sYWJlbD1vWzFdLG89YzticmVha31pZihvJiZpLmxhYmVsPG9bMl0pe2kubGFiZWw9b1syXSxpLm9wcy5wdXNoKGMpO2JyZWFrfW9bMl0mJmkub3BzLnBvcCgpLGkudHJ5cy5wb3AoKTtjb250aW51ZX1jPXQuY2FsbChlLGkpfWNhdGNoKGEpe2M9WzYsYV0scj0wfWZpbmFsbHl7bj1vPTB9aWYoNSZjWzBdKXRocm93IGNbMV07cmV0dXJue3ZhbHVlOmNbMF0/Y1sxXTp2b2lkIDAsZG9uZTohMH19fX0scz0oT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5aZWdvU2V0dGluZz12b2lkIDAsbig1KSksYT1uKDYpLGM9bigxMCksdT1uKDApLGw9bigxMiksaD1uKDEpLHA9bigyKTtmdW5jdGlvbiBkKCl7dGhpcy5maWxlTGlzdD1bXSx0aGlzLnB1YmxpY0VudlZhcmlhYmxlPXt9LHRoaXMucHJvRW52VmFyaWFibGU9e30sdGhpcy5wb2xsaW5nVGltZXI9bnVsbCx0aGlzLnBvbGxpbmdJbnRlcnZhbD0zMDAsdGhpcy5pbml0ZWQ9ITEsdGhpcy5jaGVja0ZhaWxDb3VudD0wLHRoaXMuY2hlY2tGYWlsZWQ9ITEsdGhpcy5sb2c9bmV3IHMuWmVnb0xvZ31PYmplY3QuZGVmaW5lUHJvcGVydHkoZC5wcm90b3R5cGUsXCJlbnZWYXJpYWJsZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gT2JqZWN0LmFzc2lnbih7fSx0aGlzLnB1YmxpY0VudlZhcmlhYmxlLHRoaXMucHJvRW52VmFyaWFibGUpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLGQucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gZS5wb2xsaW5nRnJlcSYmIXAuY2hlY2tWYWxpZE51bWJlcihlLnBvbGxpbmdGcmVxKT8odGhpcy5sb2cuZXJyb3IodS5aRUdPX1NFVFRJTkdfQUNUSU9OLlNFVFRJTkdfSU5JVCtcIiBwb2xsaW5nRnJlcSBtdXN0IGJlIGludGVnZXIgbnVtYmVyXCIpLCExKToodGhpcy5vcHRpb25zPU9iamVjdC5hc3NpZ24oe30sbC5JTklUX0NPTkZJRyxlKSx0aGlzLmdldFB1YmxpY0VudlZhcmlhYmxlKCksdGhpcy5zZXR0aW5nRmV0Y2hIYW5kbGVyPW5ldyBjLlNldHRpbmdGZXRjaEhhbmRsZXIodGhpcy5vcHRpb25zLHRoaXMubG9nKSx0aGlzLnNldHRpbmdGZXRjaEhhbmRsZXIuc2V0RGF0YVJlcG9ydCh0aGlzLm9wdGlvbnMucmVwb3J0Tm90aWZ5KSxlPU1hdGgucm91bmQoNjAqTWF0aC5yYW5kb20oKSksdGhpcy5sb2cuaW5mbyh1LlpFR09fU0VUVElOR19BQ1RJT04uU0VUVElOR19JTklUK1wiIGRlbGF5IFwiK2UpLHRoaXMuZGVsYXlUaW1lciYmKGNsZWFyVGltZW91dCh0aGlzLmRlbGF5VGltZXIpLHRoaXMuZGVsYXlUaW1lcj1udWxsKSx0aGlzLm9wdGlvbnMucG9sbGluZ0ZyZXEmJjYwPD10aGlzLm9wdGlvbnMucG9sbGluZ0ZyZXEmJih0aGlzLnBvbGxpbmdJbnRlcnZhbD10aGlzLm9wdGlvbnMucG9sbGluZ0ZyZXEpLHRoaXMuZGVsYXlUaW1lcj1zZXRUaW1lb3V0KChmdW5jdGlvbigpe3QucG9sbGluZ1NldHRpbmcoMWUzKnQucG9sbGluZ0ludGVydmFsKX0pLDFlMyplKSx0aGlzLnNldHRpbmdDYWNoZUhhbmRsZXI9bmV3IGEuU2V0dGluZ0NhY2hlSGFuZGxlcihcInNldHRpbmdfXCIrKHRoaXMub3B0aW9ucy5vbmxpbmU/XCJvbmxpbmVfXCI6XCJ0ZXN0X1wiKSt0aGlzLm9wdGlvbnMucHJvZHVjdCtcIl9cIit0aGlzLm9wdGlvbnMuYXBwSUQsdGhpcy5sb2csdGhpcy5vcHRpb25zLmVudiksdGhpcy5yZWZyZXNoQXV0aENoZWNrKCksdGhpcy5pbml0ZWQ9ITApfSxkLnByb3RvdHlwZS51bmluaXQ9ZnVuY3Rpb24oKXt0aGlzLnBvbGxpbmdUaW1lciYmKGNsZWFyVGltZW91dCh0aGlzLnBvbGxpbmdUaW1lciksdGhpcy5wb2xsaW5nVGltZXI9bnVsbCl9LGQucHJvdG90eXBlLnNldEVudlZhcmlhYmxlPWZ1bmN0aW9uKGUsdCl7dGhpcy5wcm9FbnZWYXJpYWJsZVtlXT1TdHJpbmcodCl9LGQucHJvdG90eXBlLmdldEVudlZhcmlhYmxlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVudlZhcmlhYmxlW2VdfSxkLnByb3RvdHlwZS5zZXRFbnZWYXJpYWJsZXM9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztPYmplY3Qua2V5cyhlKS5mb3JFYWNoKChmdW5jdGlvbihuKXtcInN0cmluZ1wiIT10eXBlb2YgZVtuXSYmXCJudW1iZXJcIiE9dHlwZW9mIGVbbl0mJnQubG9nLmVycm9yKFwienMuc2V2IGVudiBcIituK1wiIHR5cGUgZXJyb3JcIiksdC5wcm9FbnZWYXJpYWJsZVtuXT1TdHJpbmcoZVtuXSl9KSl9LGQucHJvdG90eXBlLmdldEVudlZhcmlhYmxlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVudlZhcmlhYmxlfSxkLnByb3RvdHlwZS5lbmFibGVQb2xsaW5nPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpczt0P3QuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIHI9bi5maWxlTGlzdC5maW5kKChmdW5jdGlvbihlKXtyZXR1cm4gZS5maWxlTmFtZT09PXR9KSk7ciYmKHIubmVlZFBvbGxpbmc9ZSl9KSk6dGhpcy5maWxlTGlzdC5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gdC5uZWVkUG9sbGluZz1lfSkpfSxkLnByb3RvdHlwZS5zZXRUb2tlbj1mdW5jdGlvbihlKXt0aGlzLnRva2VuIT09ZSYmdGhpcy5yZWZyZXNoQXV0aENoZWNrKCksdGhpcy50b2tlbj1lfSxkLnByb3RvdHlwZS5zZXRVc2VySUQ9ZnVuY3Rpb24oZSl7dGhpcy51c2VySUQhPT1lJiZ0aGlzLnJlZnJlc2hBdXRoQ2hlY2soKSx0aGlzLnVzZXJJRD1lfSxkLnByb3RvdHlwZS5nZXRTZXR0aW5nQ2FjaGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG8odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciB0LG4scjtyZXR1cm4gaSh0aGlzLChmdW5jdGlvbihvKXtzd2l0Y2goby5sYWJlbCl7Y2FzZSAwOnJldHVybiB0aGlzLmluaXRlZD8odD10aGlzLmZpbGVMaXN0LmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmZpbGVOYW1lPT09ZX0pKSk/WzIsUHJvbWlzZS5yZXNvbHZlKHtzZXR0aW5nOnQuc2V0dGluZyx2ZXJzaW9uczp0LnZlcnNpb25zfSldOlszLDFdOlsyLFByb21pc2UucmVqZWN0KGguZXJyb3JMaXN0Lk5PVF9JTklUKV07Y2FzZSAxOnJldHVybiBuPXRoaXMuX2dldEZpbGVOYW1lKGUpLFs0LHRoaXMuc2V0dGluZ0NhY2hlSGFuZGxlci5nZXRDYWNoZVNldHRpbmcobildO2Nhc2UgMjpyZXR1cm4obj1vLnNlbnQoKSkmJih0aGlzLmZpbGVMaXN0LmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmZpbGVOYW1lPT09ZX0pKXx8dGhpcy5maWxlTGlzdC5wdXNoKHtmaWxlTmFtZTplLGZldGNoZWRUaW1lOjAsbmVlZFBvbGxpbmc6ITEsc2V0dGluZzpuLnNldHRpbmcsdmVyc2lvbnM6bi52ZXJzaW9uc30pLHI9e3NldHRpbmc6bi5zZXR0aW5nLHZlcnNpb25zOm4udmVyc2lvbnN9KSxbMixQcm9taXNlLnJlc29sdmUocildfX0pKX0pKX0sZC5wcm90b3R5cGUuZmV0Y2hTZXR0aW5nPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9e30pLHZvaWQgMD09PW4mJihuPSEwKSx0aGlzLmxvZy5pbmZvKHUuWkVHT19TRVRUSU5HX0FDVElPTi5TRVRUSU5HX0ZFVENIX1NFVFRJTkcrXCIgY2FsbCBcIitlKSx0aGlzLmluaXRlZD8odGhpcy5hY3RpdmVQb2xsaW5nKCksMDxPYmplY3Qua2V5cyh0KS5sZW5ndGg/KHRoaXMubG9nLmluZm8odS5aRUdPX1NFVFRJTkdfQUNUSU9OLlNFVFRJTkdfRkVUQ0hfU0VUVElORytcIiBnZXQgZmlsZSB3aXRoIHBhcmFtc1wiKSx0aGlzLl9nZXRDbG91ZFNldHRpbmcoZSxyKHIoe30sdGhpcy5lbnZWYXJpYWJsZSksdCkpKToodD10aGlzLmZpbGVMaXN0LmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmZpbGVOYW1lPT09ZX0pKSk/KHRoaXMubG9nLmluZm8odS5aRUdPX1NFVFRJTkdfQUNUSU9OLlNFVFRJTkdfRkVUQ0hfU0VUVElORytcIiBmaWxlIGV4aXN0XCIpLChuZXcgRGF0ZSkuZ2V0VGltZSgpLXQuZmV0Y2hlZFRpbWU8MWUzKnRoaXMucG9sbGluZ0ludGVydmFsPyh0aGlzLmxvZy5pbmZvKHUuWkVHT19TRVRUSU5HX0FDVElPTi5TRVRUSU5HX0ZFVENIX1NFVFRJTkcrXCIgZmV0Y2ggdGltZSBpbnRlcnZhbCBpbiBmcmVxXCIpLHQubmVlZFBvbGxpbmc9bixQcm9taXNlLnJlc29sdmUoe3NldHRpbmc6dC5zZXR0aW5nLHZlcnNpb25zOnQudmVyc2lvbnN9KSk6dGhpcy5fZmV0Y2hTZXR0aW5nKGUsdCxuKSk6KHRoaXMubG9nLmluZm8odS5aRUdPX1NFVFRJTkdfQUNUSU9OLlNFVFRJTkdfRkVUQ0hfU0VUVElORytcIiBmaWxlIG5vdCBmb3VuZFwiKSx0aGlzLl9mZXRjaFNldHRpbmcoZSx0LG4pKSk6UHJvbWlzZS5yZWplY3QoaC5lcnJvckxpc3QuTk9UX0lOSVQpfSxkLnByb3RvdHlwZS5mZXRjaE11bHRpU2V0dGluZz1mdW5jdGlvbihlLHQsbil7dmFyIHM9dGhpcztyZXR1cm4gdm9pZCAwPT09dCYmKHQ9e30pLHZvaWQgMD09PW4mJihuPSEwKSx0aGlzLmxvZy5pbmZvKHUuWkVHT19TRVRUSU5HX0FDVElPTi5TRVRUSU5HX0ZFVENIX1NFVFRJTkcrXCIgY2FsbFwiKSx0aGlzLmluaXRlZD8odGhpcy5hY3RpdmVQb2xsaW5nKCksMDxPYmplY3Qua2V5cyh0KS5sZW5ndGg/KHRoaXMubG9nLmluZm8odS5aRUdPX1NFVFRJTkdfQUNUSU9OLlNFVFRJTkdfRkVUQ0hfU0VUVElORytcIiBnZXQgZmlsZSB3aXRoIHBhcmFtc1wiKSx0aGlzLl9nZXRDbG91ZFNldHRpbmcoZSxyKHIoe30sdGhpcy5lbnZWYXJpYWJsZSksdCkpKTpuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCxyKXt2YXIgYT17fSxjPVtdO2lmKGUuZm9yRWFjaCgoZnVuY3Rpb24oZSl7cmV0dXJuIG8ocyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciB0O3JldHVybiBpKHRoaXMsKGZ1bmN0aW9uKG4pe3JldHVybih0PXRoaXMuZmlsZUxpc3QuZmluZCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuZmlsZU5hbWU9PT1lfSkpKSYmKG5ldyBEYXRlKS5nZXRUaW1lKCktdC5mZXRjaGVkVGltZTwxZTMqdGhpcy5wb2xsaW5nSW50ZXJ2YWw/KHRoaXMubG9nLmluZm8odS5aRUdPX1NFVFRJTkdfQUNUSU9OLlNFVFRJTkdfRkVUQ0hfU0VUVElORytcIiBmZXRjaCB0aW1lIGludGVydmFsIGluIGZyZXFcIiksYVtlXT17c2V0dGluZzp0LnNldHRpbmcsdmVyc2lvbnM6dC52ZXJzaW9uc30pOmMucHVzaChlKSxbMl19KSl9KSl9KSksISgwPGMubGVuZ3RoKSlyZXR1cm4gdChhKTtzLl9nZXRDbG91ZFNldHRpbmcoYyxzLmVudlZhcmlhYmxlKS50aGVuKChmdW5jdGlvbihlKXtyZXR1cm4gcy5oYW5kbGVGZXRjaEZpbGVzKGUsbiksT2JqZWN0LmFzc2lnbihhLGUpLHQoYSl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe2MuZm9yRWFjaCgoZnVuY3Rpb24oZSl7cmV0dXJuIG8ocyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciB0O3JldHVybiBpKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuKHQ9dGhpcy5maWxlTGlzdC5maW5kKChmdW5jdGlvbih0KXtyZXR1cm4gdC5maWxlTmFtZT09ZX0pKSk/dC5mZXRjaGVkVGltZT0obmV3IERhdGUpLmdldFRpbWUoKTp0aGlzLmZpbGVMaXN0LmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmZpbGVOYW1lPT09ZX0pKXx8dGhpcy5maWxlTGlzdC5wdXNoKHtmaWxlTmFtZTplLGZldGNoZWRUaW1lOihuZXcgRGF0ZSkuZ2V0VGltZSgpLG5lZWRQb2xsaW5nOm4sc2V0dGluZzp7fSx2ZXJzaW9uczp7fX0pLFs0LHRoaXMuc2V0dGluZ0NhY2hlSGFuZGxlci5nZXRDYWNoZVNldHRpbmcoZSldO2Nhc2UgMTpyZXR1cm4gdD1yLnNlbnQoKSxhW2VdPXtzZXR0aW5nOnQuc2V0dGluZyx2ZXJzaW9uczp0LnZlcnNpb25zfSxbMl19fSkpfSkpfSkpLDA8T2JqZWN0LmtleXMoYSkubGVuZ3RoP3QoYSk6cihlKX0pKX0pKSk6KHRoaXMubG9nLmluZm8odS5aRUdPX1NFVFRJTkdfQUNUSU9OLlNFVFRJTkdfRkVUQ0hfU0VUVElORytcIiBub3QgaW5pdFwiKSxQcm9taXNlLnJlamVjdChoLmVycm9yTGlzdC5OT1RfSU5JVCkpfSxkLnByb3RvdHlwZS5zZXRPcHRpb25zPWZ1bmN0aW9uKGUpe2UmJlwiYm9vbGVhblwiPT10eXBlb2YgZS51bmlmeSYmKHRoaXMub3B0aW9ucy51bmlmeT1lLnVuaWZ5LHRoaXMuc2V0dGluZ0ZldGNoSGFuZGxlci5zZXRPcHRpb25zKHRoaXMub3B0aW9ucykpfSxkLnByb3RvdHlwZS5zZXRMb2c9ZnVuY3Rpb24oZSl7dGhpcy5sb2c9ZX0sZC5wcm90b3R5cGUuX2dldENsb3VkU2V0dGluZz1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihyLHMpe3JldHVybiBvKG4sdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgbixvLGEsYyxsO3JldHVybiBpKHRoaXMsKGZ1bmN0aW9uKGkpe3N3aXRjaChpLmxhYmVsKXtjYXNlIDA6cmV0dXJuIGkudHJ5cy5wdXNoKFswLDIsLDNdKSx0aGlzLmNoZWNrRmFpbGVkPyh0aGlzLmxvZy53YXJuKHUuWkVHT19TRVRUSU5HX0FDVElPTi5TRVRUSU5HX0dFVF9DTE9VRF9TRVRUSU5HK1wiIGNoZWNrIGZhaWxcIikscyhoLmVycm9yTGlzdC5BVVRIX0ZBSUwpLFsyXSk6KGE9ZSBpbnN0YW5jZW9mIEFycmF5LFs0LHRoaXMuc2V0dGluZ0ZldGNoSGFuZGxlci5mZXRjaFNldHRpbmcoYT9lOltlXSx0LHRoaXMudG9rZW4sdGhpcy51c2VySUQpXSk7Y2FzZSAxOnJldHVybiBjPWkuc2VudCgpLG49Yy5kYXRhLGM9Yy5wb2xsaW5nX2ludGVydmFsLHRoaXMuY2hlY2tGYWlsQ291bnQ9MCx0aGlzLmxvZy5pbmZvKHUuWkVHT19TRVRUSU5HX0FDVElPTi5TRVRUSU5HX0dFVF9DTE9VRF9TRVRUSU5HK1wiIHN1Y1wiKSxcIm51bWJlclwiPT10eXBlb2YgYyYmNTw9YyYmdGhpcy5wb2xsaW5nSW50ZXJ2YWwhPT02MCpjJiYodGhpcy5sb2cud2Fybih1LlpFR09fU0VUVElOR19BQ1RJT04uU0VUVElOR19HRVRfQ0xPVURfU0VUVElORytcIiBwb2xsaW5nIGludGVydmFsIGNoYW5nZVwiKSx0aGlzLnBvbGxpbmdJbnRlcnZhbD02MCpjLHRoaXMudW5pbml0KCksdGhpcy5hY3RpdmVQb2xsaW5nKCkpLGE/KG89e30sZS5mb3JFYWNoKChmdW5jdGlvbihlKXt2YXIgdDswPT0obnVsbD09KHQ9bltlXSk/dm9pZCAwOnQuY29kZSkmJnZvaWQgMCE9PShudWxsPT0odD1uW2VdKT92b2lkIDA6dC5kYXRhKSYmKG9bZV09e3NldHRpbmc6bnVsbD09KHQ9bltlXSk/dm9pZCAwOnQuZGF0YSx2ZXJzaW9uczpudWxsPT0oZT1uW2VdKT92b2lkIDA6ZS52ZXJzaW9uc30pfSkpLDA8T2JqZWN0LmtleXMobykubGVuZ3RoP3Iobyk6cyhoLmVycm9yTGlzdC5NVUxUSV9GSUxFX05PVF9FWElTVCkpOjA9PT0obnVsbD09KGE9bltlXSk/dm9pZCAwOmEuY29kZSkmJm51bGwhPShjPW5bZV0pJiZjLmRhdGE/cih7c2V0dGluZzpudWxsPT0oYz1uW2VdKT92b2lkIDA6Yy5kYXRhLHZlcnNpb25zOm51bGw9PShjPW5bZV0pP3ZvaWQgMDpjLnZlcnNpb25zfSk6cyh7Y29kZTpudWxsPT0obD1uW2VdKT92b2lkIDA6bC5jb2RlLG1zZzpudWxsPT0obD1uW2VdKT92b2lkIDA6bC5tZXNzYWdlfSksWzMsM107Y2FzZSAyOnJldHVybiBsPWkuc2VudCgpLHRoaXMubG9nLmVycm9yKHUuWkVHT19TRVRUSU5HX0FDVElPTi5TRVRUSU5HX0dFVF9DTE9VRF9TRVRUSU5HK1wiIGZhaWwgXCIrSlNPTi5zdHJpbmdpZnkobCkpLDIxMDAyPT09KG51bGw9PWw/dm9pZCAwOmwuY29kZSkmJih0aGlzLmNoZWNrRmFpbENvdW50Kz0xKSwyPD10aGlzLmNoZWNrRmFpbENvdW50JiYodGhpcy5jaGVja0ZhaWxlZD0hMCkscyhsKSxbMywzXTtjYXNlIDM6cmV0dXJuWzJdfX0pKX0pKX0pKX0sZC5wcm90b3R5cGUuaGFuZGxlRmV0Y2hGaWxlcz1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7T2JqZWN0LmtleXMoZSkuZm9yRWFjaCgoZnVuY3Rpb24ocil7dmFyIG89bi5maWxlTGlzdC5maW5kKChmdW5jdGlvbihlKXtyZXR1cm4gZS5maWxlTmFtZT09cn0pKTtvPyhvLmZldGNoZWRUaW1lPShuZXcgRGF0ZSkuZ2V0VGltZSgpLG8uc2V0dGluZz1lW3JdLnNldHRpbmcsby52ZXJzaW9ucz1lW3JdLnZlcnNpb25zLG8ubmVlZFBvbGxpbmc9dCk6bi5maWxlTGlzdC5maW5kKChmdW5jdGlvbihlKXtyZXR1cm4gZS5maWxlTmFtZT09PXJ9KSl8fG4uZmlsZUxpc3QucHVzaCh7ZmlsZU5hbWU6cixmZXRjaGVkVGltZToobmV3IERhdGUpLmdldFRpbWUoKSxuZWVkUG9sbGluZzp0LHNldHRpbmc6ZVtyXS5zZXR0aW5nLHZlcnNpb25zOmVbcl0udmVyc2lvbnN9KSxvPW4uX2dldEZpbGVOYW1lKHIpLG4uc2V0dGluZ0NhY2hlSGFuZGxlci5zdG9yZVNldHRpbmcobyxlW3JdKX0pKX0sZC5wcm90b3R5cGUuX2ZldGNoU2V0dGluZz1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcztyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHMsYSl7ci5sb2cuaW5mbyh1LlpFR09fU0VUVElOR19BQ1RJT04uU0VUVElOR19fRkVUQ0hfU0VUVElORytcIiBjYWxsXCIpLHIuX2dldENsb3VkU2V0dGluZyhlLHIuZW52VmFyaWFibGUpLnRoZW4oKGZ1bmN0aW9uKG8pe3Q/KHQuZmV0Y2hlZFRpbWU9KG5ldyBEYXRlKS5nZXRUaW1lKCksdC5zZXR0aW5nPW8uc2V0dGluZyx0LnZlcnNpb25zPW8udmVyc2lvbnMsdC5uZWVkUG9sbGluZz1uKTpyLmZpbGVMaXN0LmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmZpbGVOYW1lPT09ZX0pKXx8ci5maWxlTGlzdC5wdXNoKHtmaWxlTmFtZTplLGZldGNoZWRUaW1lOihuZXcgRGF0ZSkuZ2V0VGltZSgpLG5lZWRQb2xsaW5nOm4sc2V0dGluZzpvLnNldHRpbmcsdmVyc2lvbnM6by52ZXJzaW9uc30pO3ZhciBpPXIuX2dldEZpbGVOYW1lKGUpO3Iuc2V0dGluZ0NhY2hlSGFuZGxlci5zdG9yZVNldHRpbmcoaSxvKSxzKG8pLHIubG9nLmluZm8odS5aRUdPX1NFVFRJTkdfQUNUSU9OLlNFVFRJTkdfX0ZFVENIX1NFVFRJTkcrXCIgY2FsbCBzdWNcIil9KSkuY2F0Y2goKGZ1bmN0aW9uKGMpe3JldHVybiBvKHIsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgcjtyZXR1cm4gaSh0aGlzLChmdW5jdGlvbihvKXtzd2l0Y2goby5sYWJlbCl7Y2FzZSAwOnQ/dC5mZXRjaGVkVGltZT0obmV3IERhdGUpLmdldFRpbWUoKTp0aGlzLmZpbGVMaXN0LmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmZpbGVOYW1lPT09ZX0pKXx8dGhpcy5maWxlTGlzdC5wdXNoKHtmaWxlTmFtZTplLGZldGNoZWRUaW1lOihuZXcgRGF0ZSkuZ2V0VGltZSgpLG5lZWRQb2xsaW5nOm4sc2V0dGluZzp7fSx2ZXJzaW9uczp7fX0pLHI9dGhpcy5fZ2V0RmlsZU5hbWUoZSksby5sYWJlbD0xO2Nhc2UgMTpyZXR1cm4gby50cnlzLnB1c2goWzEsMywsNF0pLFs0LHRoaXMuc2V0dGluZ0NhY2hlSGFuZGxlci5nZXRDYWNoZVNldHRpbmcocildO2Nhc2UgMjpyZXR1cm4gcj1vLnNlbnQoKSxzKHIpLFszLDRdO2Nhc2UgMzpyZXR1cm4gby5zZW50KCksYShjKSxbMyw0XTtjYXNlIDQ6cmV0dXJuIHRoaXMubG9nLmluZm8odS5aRUdPX1NFVFRJTkdfQUNUSU9OLlNFVFRJTkdfX0ZFVENIX1NFVFRJTkcrXCIgc2V0dGluZyBub3QgY29udGFpbiBvciBmZXRjaCBmaWxlIGZhaWxcIiksWzJdfX0pKX0pKX0pKX0pKX0sZC5wcm90b3R5cGUuZ2V0UHVibGljRW52VmFyaWFibGU9ZnVuY3Rpb24oKXt2YXIgZTswPT10aGlzLm9wdGlvbnMuZW52Pyh0aGlzLnB1YmxpY0VudlZhcmlhYmxlLnVzZXJBZ2VudD1uYXZpZ2F0b3IudXNlckFnZW50LHRoaXMucHVibGljRW52VmFyaWFibGUucGxhdGZvcm09bmF2aWdhdG9yLnBsYXRmb3JtLHRoaXMucHVibGljRW52VmFyaWFibGUuYnJvd3Nlcj1wLmdldEJyb3dzZXIoKSx0aGlzLnB1YmxpY0VudlZhcmlhYmxlLmRldmljZWlkPXAuZ2VuZXJhdGVVVUlEKCkpOjE9PXRoaXMub3B0aW9ucy5lbnYmJihlPXd4LmdldFN5c3RlbUluZm9TeW5jKCksdGhpcy5wdWJsaWNFbnZWYXJpYWJsZS5icmFuZD1lLmJyYW5kLHRoaXMucHVibGljRW52VmFyaWFibGUubW9kZWw9ZS5tb2RlbCx0aGlzLnB1YmxpY0VudlZhcmlhYmxlLnN5c3RlbT1lLnN5c3RlbSx0aGlzLnB1YmxpY0VudlZhcmlhYmxlLnBsYXRmb3JtPWUucGxhdGZvcm0sdGhpcy5wdWJsaWNFbnZWYXJpYWJsZS53ZWNoYXRWZXJzaW9uPWUudmVyc2lvbix0aGlzLnB1YmxpY0VudlZhcmlhYmxlLndlY2hhdFNES1ZlcnNpb249ZS5TREtWZXJzaW9uLHRoaXMucHVibGljRW52VmFyaWFibGUuZGV2aWNlaWQ9cC5nZW5lcmF0ZVVVSUQodGhpcy5vcHRpb25zLmVudikpfSxkLnByb3RvdHlwZS5wb2xsaW5nU2V0dGluZz1mdW5jdGlvbihlKXtyZXR1cm4gbyh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHQsbixyLHMsYT10aGlzO3JldHVybiBpKHRoaXMsKGZ1bmN0aW9uKGMpe3N3aXRjaChjLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHRoaXMubG9nLmluZm8odS5aRUdPX1NFVFRJTkdfQUNUSU9OLlNFVFRJTkdfUE9MTElOR19TRVRUSU5HK1wiIGNhbGwgXCIrZSksdD1bXSx0aGlzLmZpbGVMaXN0LmZvckVhY2goKGZ1bmN0aW9uKGUpe2UuZmlsZU5hbWUsZS5uZWVkUG9sbGluZyYmdC5wdXNoKGUuZmlsZU5hbWUpfSkpLG49ZSx0aGlzLmNoZWNrRmFpbGVkPyh0aGlzLmxvZy53YXJuKHUuWkVHT19TRVRUSU5HX0FDVElPTi5TRVRUSU5HX0dFVF9DTE9VRF9TRVRUSU5HK1wiIGhhcyBjaGVja2VkIGZhaWxcIiksWzMsN10pOlszLDFdO2Nhc2UgMTppZighKDA8dC5sZW5ndGgpKXJldHVyblszLDZdO2MubGFiZWw9MjtjYXNlIDI6cmV0dXJuIGMudHJ5cy5wdXNoKFsyLDQsLDVdKSxbNCx0aGlzLnNldHRpbmdGZXRjaEhhbmRsZXIuZmV0Y2hTZXR0aW5nKHQsdGhpcy5lbnZWYXJpYWJsZSx0aGlzLnRva2VuLHRoaXMudXNlcklEKV07Y2FzZSAzOnJldHVybiBzPWMuc2VudCgpLHI9cy5kYXRhLHM9cy5wb2xsaW5nX2ludGVydmFsLHRoaXMubG9nLmluZm8odS5aRUdPX1NFVFRJTkdfQUNUSU9OLlNFVFRJTkdfUE9MTElOR19TRVRUSU5HK1wiIGZldGNoIHN1Y1wiKSx0aGlzLmNoZWNrRmFpbENvdW50PTAsXCJudW1iZXJcIj09dHlwZW9mIHMmJjU8PXMmJnRoaXMucG9sbGluZ0ludGVydmFsIT09NjAqcyYmKHRoaXMubG9nLndhcm4odS5aRUdPX1NFVFRJTkdfQUNUSU9OLlNFVFRJTkdfUE9MTElOR19TRVRUSU5HK1wiIHBvbGxpbmcgaW50ZXJ2YWwgY2hhbmdlXCIpLHRoaXMucG9sbGluZ0ludGVydmFsPTYwKnMsbj0xZTMqdGhpcy5wb2xsaW5nSW50ZXJ2YWwpLHRoaXMuZmlsZUxpc3QuZm9yRWFjaCgoZnVuY3Rpb24oZSl7cmV0dXJuIG8oYSx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciB0LG4sbyxzO3JldHVybiBpKHRoaXMsKGZ1bmN0aW9uKGkpe3N3aXRjaChpLmxhYmVsKXtjYXNlIDA6cmV0dXJuIGUuZmV0Y2hlZFRpbWU9KG5ldyBEYXRlKS5nZXRUaW1lKCksdD10aGlzLl9nZXRGaWxlTmFtZShlLmZpbGVOYW1lKSxyW2UuZmlsZU5hbWVdJiYwPT09cltlLmZpbGVOYW1lXS5jb2RlJiZyW2UuZmlsZU5hbWVdLmRhdGE/KG49SlNPTi5zdHJpbmdpZnkocltlLmZpbGVOYW1lXS5kYXRhKSxvPUpTT04uc3RyaW5naWZ5KGUuc2V0dGluZykscz17c2V0dGluZzpyW2UuZmlsZU5hbWVdLmRhdGEsdmVyc2lvbnM6bnVsbD09KHM9cltlLmZpbGVOYW1lXSk/dm9pZCAwOnMudmVyc2lvbnN9LG8hPT1uJiYodGhpcy5sb2cuaW5mbyh1LlpFR09fU0VUVElOR19BQ1RJT04uU0VUVElOR19QT0xMSU5HX1NFVFRJTkcrXCIgXCIrZS5maWxlTmFtZStcIiBzZXR0aW5nIGNoYW5nZWRcIiksZS5zZXR0aW5nPXMuc2V0dGluZyxlLnZlcnNpb25zPXMudmVyc2lvbnMsdGhpcy5vcHRpb25zLnBvbGxpbmdOb3RpZnkoZS5maWxlTmFtZSxzKSksWzQsdGhpcy5zZXR0aW5nQ2FjaGVIYW5kbGVyLmdldENhY2hlU2V0dGluZyh0KV0pOlszLDJdO2Nhc2UgMTpvPWkuc2VudCgpLG49SlNPTi5zdHJpbmdpZnkobyksbz1KU09OLnN0cmluZ2lmeShzKSxuIT09byYmdGhpcy5zZXR0aW5nQ2FjaGVIYW5kbGVyLnN0b3JlU2V0dGluZyh0LHMpLGkubGFiZWw9MjtjYXNlIDI6cmV0dXJuWzJdfX0pKX0pKX0pKSxbMyw1XTtjYXNlIDQ6cmV0dXJuIHM9Yy5zZW50KCksdGhpcy5sb2cuZXJyb3IodS5aRUdPX1NFVFRJTkdfQUNUSU9OLlNFVFRJTkdfUE9MTElOR19TRVRUSU5HK1wiIGZldGNoIGZhaWwgXCIrSlNPTi5zdHJpbmdpZnkocykpLDIxMDAyPT09KG51bGw9PXM/dm9pZCAwOnMuY29kZSkmJih0aGlzLmNoZWNrRmFpbENvdW50Kz0xKSwyPD10aGlzLmNoZWNrRmFpbENvdW50JiYodGhpcy5jaGVja0ZhaWxlZD0hMCksWzMsNV07Y2FzZSA1OnJldHVyblszLDddO2Nhc2UgNjp0aGlzLmxvZy5pbmZvKHUuWkVHT19TRVRUSU5HX0FDVElPTi5TRVRUSU5HX1BPTExJTkdfU0VUVElORytcIiBwb2xsaW5nIG5vIGZpbGVcIiksYy5sYWJlbD03O2Nhc2UgNzpyZXR1cm4gdGhpcy5wb2xsaW5nVGltZXImJmNsZWFyVGltZW91dCh0aGlzLnBvbGxpbmdUaW1lciksdGhpcy5wb2xsaW5nVGltZXI9c2V0VGltZW91dCgoZnVuY3Rpb24oKXthLnBvbGxpbmdTZXR0aW5nKG4pfSksbiksWzJdfX0pKX0pKX0sZC5wcm90b3R5cGUuX2dldEZpbGVOYW1lPWZ1bmN0aW9uKGUpe3JldHVybiBlfSxkLnByb3RvdHlwZS5hY3RpdmVQb2xsaW5nPWZ1bmN0aW9uKCl7dGhpcy5wb2xsaW5nVGltZXJ8fHRoaXMucG9sbGluZ1NldHRpbmcoMWUzKnRoaXMucG9sbGluZ0ludGVydmFsKX0sZC5wcm90b3R5cGUucmVmcmVzaEF1dGhDaGVjaz1mdW5jdGlvbigpe3RoaXMuY2hlY2tGYWlsQ291bnQ9MCx0aGlzLmNoZWNrRmFpbGVkPSExfSx0LlplZ29TZXR0aW5nPW49ZH0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoKXt9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5aZWdvTG9nPXZvaWQgMCxyLnByb3RvdHlwZS5sb2c9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07ZS5qb2luKFwiIFwiKX0sci5wcm90b3R5cGUuZGVidWc9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07ZS5qb2luKFwiIFwiKX0sci5wcm90b3R5cGUuaW5mbz1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTtlLmpvaW4oXCIgXCIpfSxyLnByb3RvdHlwZS53YXJuPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO2Uuam9pbihcIiBcIil9LHIucHJvdG90eXBlLmVycm9yPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO2Uuam9pbihcIiBcIil9LHQuWmVnb0xvZz1yfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9dGhpcyYmdGhpcy5fX2F3YWl0ZXJ8fGZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBuZXcobj1ufHxQcm9taXNlKSgoZnVuY3Rpb24obyxpKXtmdW5jdGlvbiBzKGUpe3RyeXtjKHIubmV4dChlKSl9Y2F0Y2goZSl7aShlKX19ZnVuY3Rpb24gYShlKXt0cnl7YyhyLnRocm93KGUpKX1jYXRjaChlKXtpKGUpfX1mdW5jdGlvbiBjKGUpe3ZhciB0O2UuZG9uZT9vKGUudmFsdWUpOigodD1lLnZhbHVlKWluc3RhbmNlb2Ygbj90Om5ldyBuKChmdW5jdGlvbihlKXtlKHQpfSkpKS50aGVuKHMsYSl9Yygocj1yLmFwcGx5KGUsdHx8W10pKS5uZXh0KCkpfSkpfSxvPXRoaXMmJnRoaXMuX19nZW5lcmF0b3J8fGZ1bmN0aW9uKGUsdCl7dmFyIG4scixvLGk9e2xhYmVsOjAsc2VudDpmdW5jdGlvbigpe2lmKDEmb1swXSl0aHJvdyBvWzFdO3JldHVybiBvWzFdfSx0cnlzOltdLG9wczpbXX0scz17bmV4dDphKDApLHRocm93OmEoMSkscmV0dXJuOmEoMil9O3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmKHNbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSkscztmdW5jdGlvbiBhKHMpe3JldHVybiBmdW5jdGlvbihhKXt2YXIgYz1bcyxhXTtpZihuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7aTspdHJ5e2lmKG49MSxyJiYobz0yJmNbMF0/ci5yZXR1cm46Y1swXT9yLnRocm93fHwoKG89ci5yZXR1cm4pJiZvLmNhbGwociksMCk6ci5uZXh0KSYmIShvPW8uY2FsbChyLGNbMV0pKS5kb25lKXJldHVybiBvO3N3aXRjaChyPTAsKGM9bz9bMiZjWzBdLG8udmFsdWVdOmMpWzBdKXtjYXNlIDA6Y2FzZSAxOm89YzticmVhaztjYXNlIDQ6cmV0dXJuIGkubGFiZWwrKyx7dmFsdWU6Y1sxXSxkb25lOiExfTtjYXNlIDU6aS5sYWJlbCsrLHI9Y1sxXSxjPVswXTtjb250aW51ZTtjYXNlIDc6Yz1pLm9wcy5wb3AoKSxpLnRyeXMucG9wKCk7Y29udGludWU7ZGVmYXVsdDppZighKG89MDwobz1pLnRyeXMpLmxlbmd0aCYmb1tvLmxlbmd0aC0xXSkmJig2PT09Y1swXXx8Mj09PWNbMF0pKXtpPTA7Y29udGludWV9aWYoMz09PWNbMF0mJighb3x8Y1sxXT5vWzBdJiZjWzFdPG9bM10pKXtpLmxhYmVsPWNbMV07YnJlYWt9aWYoNj09PWNbMF0mJmkubGFiZWw8b1sxXSl7aS5sYWJlbD1vWzFdLG89YzticmVha31pZihvJiZpLmxhYmVsPG9bMl0pe2kubGFiZWw9b1syXSxpLm9wcy5wdXNoKGMpO2JyZWFrfW9bMl0mJmkub3BzLnBvcCgpLGkudHJ5cy5wb3AoKTtjb250aW51ZX1jPXQuY2FsbChlLGkpfWNhdGNoKGEpe2M9WzYsYV0scj0wfWZpbmFsbHl7bj1vPTB9aWYoNSZjWzBdKXRocm93IGNbMV07cmV0dXJue3ZhbHVlOmNbMF0/Y1sxXTp2b2lkIDAsZG9uZTohMH19fX0saT0oT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5TZXR0aW5nQ2FjaGVIYW5kbGVyPXZvaWQgMCxuKDApKSxzPW4oNyk7ZnVuY3Rpb24gYShlLHQsbil7dm9pZCAwPT09biYmKG49MCksdGhpcy5zdG9yZU5hbWU9ZSx0aGlzLmxvZz10LHRoaXMuc3RvcmU9cy5jcmVhdGVaZWdvU3RvcmUoZSxuKX1hLnByb3RvdHlwZS5nZXRDYWNoZVNldHRpbmc9ZnVuY3Rpb24oZSl7cmV0dXJuIHIodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiBvKHRoaXMsKGZ1bmN0aW9uKHQpe3N3aXRjaCh0LmxhYmVsKXtjYXNlIDA6cmV0dXJuIHRoaXMubG9nLmluZm8oaS5aRUdPX1NFVFRJTkdfQUNUSU9OLlNFVFRJTkdDQUNIRUhBTkRMRVJfR0VUX0NBQ0hFX1NFVFRJTkcrXCIgY2FsbFwiKSxbNCx0aGlzLnN0b3JlLmdldEl0ZW0oZSldO2Nhc2UgMTpyZXR1cm5bMix0LnNlbnQoKXx8XCJcIl19fSkpfSkpfSxhLnByb3RvdHlwZS5zdG9yZVNldHRpbmc9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIG8odGhpcywoZnVuY3Rpb24obil7c3dpdGNoKG4ubGFiZWwpe2Nhc2UgMDpyZXR1cm4gdGhpcy5sb2cuaW5mbyhpLlpFR09fU0VUVElOR19BQ1RJT04uU0VUVElOR0NBQ0hFSEFORExFUl9TVE9SRV9TRVRUSU5HK1wiIGNhbGxcIiksWzQsdGhpcy5zdG9yZS5zZXRJdGVtKGUsdCldO2Nhc2UgMTpyZXR1cm4gbi5zZW50KCksWzJdfX0pKX0pKX0sdC5TZXR0aW5nQ2FjaGVIYW5kbGVyPW49YX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuY3JlYXRlWmVnb1N0b3JlPXQuWmVnb1dlY2hhdE1pbmlTdG9yZT12b2lkIDA7dmFyIHI9big4KSxvPW4oOSksaT0ocy5wcm90b3R5cGUuZ2V0SXRlbT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24obixyKXt0cnl7bih3eC5nZXRTdG9yYWdlU3luYyh0LmtleVByZWZpeCtlKSl9Y2F0Y2gobil7cihuKX19KSl9LHMucHJvdG90eXBlLnNldEl0ZW09ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24ocixvKXt0cnl7d3guc2V0U3RvcmFnZVN5bmMobi5rZXlQcmVmaXgrZSx0KSxyKCl9Y2F0Y2gocil7byhyKX19KSl9LHMucHJvdG90eXBlLnJlbW92ZUl0ZW09ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKG4scil7dHJ5e24od3gucmVtb3ZlU3RvcmFnZVN5bmModC5rZXlQcmVmaXgrZSkpfWNhdGNoKG4pe3Iobil9fSkpfSxzLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSx0KXt0cnl7d3guY2xlYXJTdG9yYWdlU3luYygpLGUoKX1jYXRjaChlKXt0KGUpfX0pKX0scy5wcm90b3R5cGUua2V5cz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbih0LG4pe3RyeXt2YXIgcj13eC5nZXRTdG9yYWdlSW5mb1N5bmMoKS5rZXlzLG89W107ci5mb3JFYWNoKChmdW5jdGlvbih0KXswPT10LmluZGV4T2YoZS5rZXlQcmVmaXgpJiZvLnB1c2godC5yZXBsYWNlKGUua2V5UHJlZml4LFwiXCIpKX0pKSxvLnNvcnQoKSx0KG8pfWNhdGNoKHQpe24odCl9fSkpfSxzKTtmdW5jdGlvbiBzKGUpe3RoaXMuc3RvcmVOYW1lPWUsdGhpcy5rZXlQcmVmaXg9ZStcIi9cIix0aGlzLnN0b3JlTmFtZX10LlplZ29XZWNoYXRNaW5pU3RvcmU9aSx0LmNyZWF0ZVplZ29TdG9yZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PT09by5aRUdPX0VOVi5CUk9XU0VSP3IuY3JlYXRlSW5zdGFuY2Uoe25hbWU6ZX0pOm5ldyBpKGUpfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9b30sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuU09DS0VUX0RJU0NPTk5FQ1Q9dC5FTlVNX1JFTU9URV9UWVBFPXQuWkVHT19CUk9XU0VSX1RZUEU9dC5aRUdPX0VOVj10LlBST1RPX1ZFUlNJT049dm9pZCAwLHQuUFJPVE9fVkVSU0lPTj1cIjEuMC41XCIsKHI9dC5aRUdPX0VOVnx8KHQuWkVHT19FTlY9e30pKVtyLkJST1dTRVI9MF09XCJCUk9XU0VSXCIscltyLldFSVhJTk1JTkk9MV09XCJXRUlYSU5NSU5JXCIsKHI9dC5aRUdPX0JST1dTRVJfVFlQRXx8KHQuWkVHT19CUk9XU0VSX1RZUEU9e30pKVtyLklFPTBdPVwiSUVcIixyW3IuRklSRUZPWD0xXT1cIkZJUkVGT1hcIixyW3IuQ0hST01FPTJdPVwiQ0hST01FXCIscltyLlNBRkFSST0zXT1cIlNBRkFSSVwiLHJbci5PUEVSQT00XT1cIk9QRVJBXCIscltyLldFSVhJTj01XT1cIldFSVhJTlwiLHJbci5XRUlYSU5NSU5JPTZdPVwiV0VJWElOTUlOSVwiLHJbci5VTktPV049N109XCJVTktPV05cIiwocj10LkVOVU1fUkVNT1RFX1RZUEV8fCh0LkVOVU1fUkVNT1RFX1RZUEU9e30pKVtyLkRJU0FCTEU9MF09XCJESVNBQkxFXCIscltyLldFQlNPQ0tFVD0xXT1cIldFQlNPQ0tFVFwiLHJbci5IVFRQUz0yXT1cIkhUVFBTXCIsdC5TT0NLRVRfRElTQ09OTkVDVD0tMX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPXRoaXMmJnRoaXMuX19hc3NpZ258fGZ1bmN0aW9uKCl7cmV0dXJuKHI9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49MSxyPWFyZ3VtZW50cy5sZW5ndGg7bjxyO24rKylmb3IodmFyIG8gaW4gdD1hcmd1bWVudHNbbl0pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbykmJihlW29dPXRbb10pO3JldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlNldHRpbmdGZXRjaEhhbmRsZXI9dm9pZCAwO3ZhciBvLGkscz1uKDApLGE9bigxKSxjPW4oMTEpLHU9bigyKTtmdW5jdGlvbiBsKGUsdCl7dGhpcy5vcHRpb25zPWUsdGhpcy5sb2c9dCx0aGlzLnNlcT0wLHRoaXMudXNlcklEPVwiXCJ9bj1vPXtTRVJWSUNFX0NsT1VEX1NFVFRJTkc6MTAsMTA6XCJTRVJWSUNFX0NsT1VEX1NFVFRJTkdcIn0sbj1pPXtNRVRIT0RfVU5TRVQ6MCwwOlwiTUVUSE9EX1VOU0VUXCIsTUVUSE9EX0dFVDoxLDE6XCJNRVRIT0RfR0VUXCIsTUVUSE9EX1BPU1Q6MiwyOlwiTUVUSE9EX1BPU1RcIn0sbC5wcm90b3R5cGUuc2V0T3B0aW9ucz1mdW5jdGlvbihlKXt0aGlzLm9wdGlvbnM9ZX0sbC5wcm90b3R5cGUuc2V0RGF0YVJlcG9ydD1mdW5jdGlvbihlKXt0aGlzLnJlcG9ydEZ1bmM9ZX0sbC5wcm90b3R5cGUuc2V0VXNlcklEPWZ1bmN0aW9uKGUpe3RoaXMudXNlcklEPWV9LGwucHJvdG90eXBlLmZldGNoU2V0dGluZz1mdW5jdGlvbihlLHQsbixvKXt2YXIgaT10aGlzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oYSxsKXt2YXIgaCxwPXtwcm9kdWN0Omkub3B0aW9ucy5wcm9kdWN0LGZpbGVzOmUscGFyYW06cihyKHt9LHQpLHtkZXZpY2VpZDp2b2lkIDB9KSxhcHBpZDppLm9wdGlvbnMuYXBwSUQsdG9rZW46bixpZF9uYW1lOm8sdGltZXN0YW1wOihuZXcgRGF0ZSkuZ2V0VGltZSgpLGJpenR5cGU6MCxkZXZpY2VpZDp0LmRldmljZWlkfHx1LmdlbmVyYXRlVVVJRChpLm9wdGlvbnMuZW52KSxjb21wcmVzczohMSxtb2RlOmkub3B0aW9ucy5vbmxpbmU/XCJvbmxpbmVcIjpcInRlc3RcIn0sZD1pLnNlcSsrO2kucmVwb3J0RnVuYyYmaS5yZXBvcnRGdW5jKGQsXCJyZXF1ZXN0X3N0YXJ0XCIpLG51bGwhPShoPWkub3B0aW9ucykmJmgudW5pZnkmJmkub3B0aW9ucy5jb25uZWN0aW9uP2kuc2VuZENsb3VkUmVxdWVzdChvLHAsXCIvY2xvdWQtc2V0dGluZy9nZXRcIiwoZnVuY3Rpb24oZSl7dmFyIHQsbj1lLmNvZGUscj0oZS5tc2csZS5kYXRhKSxvPWUucG9sbGluZ19pbnRlcnZhbDtlPWUucmVwb3J0RGF0YSxpLmxvZy5pbmZvKHMuWkVHT19TRVRUSU5HX0FDVElPTi5TRVRUSU5HRkVUQ0hIQU5ETEVSX0ZFVENIU0VUVElORytcIiB1bmlmeSBcIituKSxyJiYodD1bXSxPYmplY3Qua2V5cyhyKS5mb3JFYWNoKChmdW5jdGlvbihlKXt0LnB1c2goe25hbWU6ZSxlcnJvcjpyW2VdLmNvZGV9KX0pKSksaS5yZXBvcnRGdW5jJiZpLnJlcG9ydEZ1bmMoZCxcInJlcXVlc3RfZW5kXCIse2NvZGU6bixyZXBvcnREYXRhOmUscGFyYW1zOnAsZmlsZXM6dH0pLGEoe2RhdGE6cixwb2xsaW5nX2ludGVydmFsOm99KX0pLChmdW5jdGlvbihlKXt2YXIgdD1lLmNvZGUsbj1lLm1zZztlLmRhdGEsZT1lLnJlcG9ydERhdGEsaS5sb2cud2FybihzLlpFR09fU0VUVElOR19BQ1RJT04uU0VUVElOR0ZFVENISEFORExFUl9GRVRDSFNFVFRJTkcrXCIgdW5pZnkgXCIrdCksaS5yZXBvcnRGdW5jJiZpLnJlcG9ydEZ1bmMoZCxcInJlcXVlc3RfZW5kXCIse2NvZGU6dCxwYXJhbXM6cCxyZXBvcnREYXRhOmV9KSxsKHtjb2RlOnQsbXNnOm59KX0pKTpjLmZldGNoKGkub3B0aW9ucy51cmxzLHAsaS5vcHRpb25zLmVudnx8MCkudGhlbigoZnVuY3Rpb24oZSl7dmFyIHQsbj1lLmNvZGUscj0oZS5tc2csZS5kYXRhKSxvPWUucG9sbGluZ19pbnRlcnZhbDtlPWUucmVwb3J0RGF0YSxpLmxvZy5pbmZvKHMuWkVHT19TRVRUSU5HX0FDVElPTi5TRVRUSU5HRkVUQ0hIQU5ETEVSX0ZFVENIU0VUVElORytcIiBcIituKSxyJiYodD1bXSxPYmplY3Qua2V5cyhyKS5mb3JFYWNoKChmdW5jdGlvbihlKXt0LnB1c2goe25hbWU6ZSxlcnJvcjpyW2VdLmNvZGV9KX0pKSksaS5yZXBvcnRGdW5jJiZpLnJlcG9ydEZ1bmMoZCxcInJlcXVlc3RfZW5kXCIse2NvZGU6bixyZXBvcnREYXRhOmUscGFyYW1zOnAsZmlsZXM6dH0pLGEoe2RhdGE6cixwb2xsaW5nX2ludGVydmFsOm99KX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7dmFyIHQ9ZS5jb2RlLG49ZS5tc2c7ZS5kYXRhLGU9ZS5yZXBvcnREYXRhLGkubG9nLndhcm4ocy5aRUdPX1NFVFRJTkdfQUNUSU9OLlNFVFRJTkdGRVRDSEhBTkRMRVJfRkVUQ0hTRVRUSU5HK1wiIFwiK3QpLGkucmVwb3J0RnVuYyYmaS5yZXBvcnRGdW5jKGQsXCJyZXF1ZXN0X2VuZFwiLHtjb2RlOnQscGFyYW1zOnAscmVwb3J0RGF0YTplfSksbCh7Y29kZTp0LG1zZzpufSl9KSl9KSl9LGwucHJvdG90eXBlLnNlbmRDbG91ZFJlcXVlc3Q9ZnVuY3Rpb24oZSx0LG4scyxjLHUsbCl7dmFyIGgscD10aGlzLGQ9KHZvaWQgMD09PXUmJih1PTMpLHZvaWQgMD09PWwmJihsPVtdKSwobmV3IERhdGUpLmdldFRpbWUoKSk7bnVsbCE9KGg9dGhpcy5vcHRpb25zLmNvbm5lY3Rpb24pJiZoLnN0YXJ0SHR0cFJlcXVlc3Qoe3NlcnZpY2U6by5TRVJWSUNFX0NsT1VEX1NFVFRJTkcsYm9keTp0LGFjazohMSxpZE5hbWU6ZSxtZXRob2Rfbm86aS5NRVRIT0RfUE9TVCxsb2NhdGlvbjpufSwoZnVuY3Rpb24obyl7dmFyIGksaCxfLGYsZzsyMDA9PT0obnVsbD09bz92b2lkIDA6by5zdGF0dXNfY29kZSk/KGk9KGY9SlNPTi5wYXJzZShvLmJvZHkpKS5jb2RlLGc9Zi5tZXNzYWdlLGg9Zi5kYXRhLF89Zi5wb2xsaW5nX2ludGVydmFsLGY9KG5ldyBEYXRlKS5nZXRUaW1lKCktZCxsLnB1c2goe3RpbWVzdGFtcDpkLHVybDpuLGVycm9yOmksZHVyYXRpb246Zn0pLDA9PT1pP3Moe2NvZGU6aSxtc2c6ZyxkYXRhOmgscG9sbGluZ19pbnRlcnZhbDpfLHJlcG9ydERhdGE6bH0pOmMoe2NvZGU6aSxtc2c6ZyxyZXBvcnREYXRhOmx9KSk6KGc9KG5ldyBEYXRlKS5nZXRUaW1lKCktZCxsLnB1c2goe3RpbWVzdGFtcDpkLHVybDpuLGVycm9yOm51bGw9PW8/dm9pZCAwOm8uc3RhdHVzX2NvZGUsZHVyYXRpb246Z30pLDA8dT8odS0tLHAuc2VuZENsb3VkUmVxdWVzdChlLHQsbixzLGMsdSxsKSk6YyhyKHIoe30sYS5lcnJvckxpc3QuRklMRV9SRVFVRVNUX0ZBSUwpLHtyZXBvcnREYXRhOmx9KSkpfSksKGZ1bmN0aW9uKG8pe3ZhciBpPShuZXcgRGF0ZSkuZ2V0VGltZSgpLWQ7bC5wdXNoKHt0aW1lc3RhbXA6ZCx1cmw6bixlcnJvcjpvLmNvZGUsZHVyYXRpb246aX0pLDA8dT8odS0tLHAuc2VuZENsb3VkUmVxdWVzdChlLHQsbixzLGMsdSxsKSk6YyhyKHIoe30sYS5lcnJvckxpc3QuRklMRV9SRVFVRVNUX0ZBSUwpLHtyZXBvcnREYXRhOmx9KSl9KSxudWxsLHt0aW1lb3V0OjRlM30pfSx0LlNldHRpbmdGZXRjaEhhbmRsZXI9bj1sfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9dGhpcyYmdGhpcy5fX2Fzc2lnbnx8ZnVuY3Rpb24oKXtyZXR1cm4ocj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQsbj0xLHI9YXJndW1lbnRzLmxlbmd0aDtuPHI7bisrKWZvcih2YXIgbyBpbiB0PWFyZ3VtZW50c1tuXSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxvKSYmKGVbb109dFtvXSk7cmV0dXJuIGV9KS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LG89KE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZmV0Y2g9dm9pZCAwLG4oMSkpO3QuZmV0Y2g9ZnVuY3Rpb24gZSh0LG4saSxzLGEsYyl7cmV0dXJuIHZvaWQgMD09PXMmJihzPTUpLHZvaWQgMD09PWEmJihhPTApLHZvaWQgMD09PWMmJihjPVtdKSxuZXcgUHJvbWlzZSgoZnVuY3Rpb24odSxsKXthPWF8fChuZXcgRGF0ZSkuZ2V0VGltZSgpO3ZhciBoLHAsZCxfPShuZXcgRGF0ZSkuZ2V0VGltZSgpOzA9PT1pPyhoPW5ldyBYTUxIdHRwUmVxdWVzdCxwPXRbKHMrMSklMl18fHRbMF0saC5vcGVuKFwicG9zdFwiLHApLDE9PW4uY29tcHJlc3MmJihoLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCIpLGgub250aW1lb3V0PWZ1bmN0aW9uKCl7fSxoLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe3ZhciBkLGYsZyxtLHk7ND09aC5yZWFkeVN0YXRlJiYoMjAwPD1oLnN0YXR1cyYmaC5zdGF0dXM8MzAwfHwzMDQ9PWguc3RhdHVzPyhmPXZvaWQgMCwxIT1uLmNvbXByZXNzJiYoZj1oLnJlc3BvbnNlVGV4dCkseT0obmV3IERhdGUpLmdldFRpbWUoKS1fLGQ9KGc9SlNPTi5wYXJzZShmKSkuY29kZSxtPWcubWVzc2FnZSxmPWcuZGF0YSxnPWcucG9sbGluZ19pbnRlcnZhbCxjLnB1c2goe3RpbWVzdGFtcDpfLHVybDpwLGVycm9yOmQsZHVyYXRpb246eX0pLDA9PT1kP3Uoe2NvZGU6ZCxtc2c6bSxkYXRhOmYscG9sbGluZ19pbnRlcnZhbDpnLHJlcG9ydERhdGE6Y30pOmwoe2NvZGU6ZCxtc2c6bSxyZXBvcnREYXRhOmN9KSk6KG09KG5ldyBEYXRlKS5nZXRUaW1lKCktXyxjLnB1c2goe3RpbWVzdGFtcDpfLHVybDpwLGVycm9yOmguc3RhdHVzLGR1cmF0aW9uOm19KSx5PShuZXcgRGF0ZSkuZ2V0VGltZSgpLWEsMDxzJiZ5PDhlMz9lKHQsbixpLC0tcyxhLGMpLnRoZW4oKGZ1bmN0aW9uKGUpe3UoZSl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe2woZSl9KSk6bChyKHIoe30sby5lcnJvckxpc3QuRklMRV9SRVFVRVNUX0ZBSUwpLHtyZXBvcnREYXRhOmN9KSkpKX0saC50aW1lb3V0PThlMyxoLnNlbmQoSlNPTi5zdHJpbmdpZnkobikpKTooZD10WyhzKzEpJTJdfHx0WzBdLHd4LnJlcXVlc3Qoe3VybDpkLGRhdGE6bixtZXRob2Q6XCJQT1NUXCIsc3VjY2VzczpmdW5jdGlvbihoKXt2YXIgcD0obT1oLmRhdGEpLmNvZGUsZj1tLm1lc3NhZ2UsZz1tLmRhdGEsbT1tLnBvbGxpbmdfaW50ZXJ2YWw7dm9pZCAwIT09cD8wPT09cD91KHtjb2RlOnAsbXNnOmYsZGF0YTpnLHBvbGxpbmdfaW50ZXJ2YWw6bSxyZXBvcnREYXRhOmN9KTpsKHtjb2RlOnAsbXNnOmYscmVwb3J0RGF0YTpjfSk6KGY9KG5ldyBEYXRlKS5nZXRUaW1lKCktXyxjLnB1c2goe3RpbWVzdGFtcDpfLHVybDpkLGVycm9yOm8uZXJyb3JMaXN0LkZJTEVfUkVRVUVTVF9GQUlMLmNvZGUsbXNnOmguZGF0YSxkdXJhdGlvbjpmfSksMDxzP2UodCxuLGksLS1zLGEsYykudGhlbigoZnVuY3Rpb24oZSl7dShlKX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7bChlKX0pKTpsKHIocih7fSxvLmVycm9yTGlzdC5GSUxFX1JFUVVFU1RfRkFJTCkse3JlcG9ydERhdGE6Y30pKSl9LGZhaWw6ZnVuY3Rpb24oaCl7dmFyIHA9KG5ldyBEYXRlKS5nZXRUaW1lKCktXztjLnB1c2goe3RpbWVzdGFtcDpfLHVybDpkLGVycm9yOm8uZXJyb3JMaXN0LkZJTEVfUkVRVUVTVF9GQUlMLmNvZGUsbXNnOmguZXJyTXNnLGR1cmF0aW9uOnB9KSwwPHM/ZSh0LG4saSwtLXMsYSxjKS50aGVuKChmdW5jdGlvbihlKXt1KGUpfSkpLmNhdGNoKChmdW5jdGlvbihlKXtsKGUpfSkpOmwocihyKHt9LG8uZXJyb3JMaXN0LkZJTEVfUkVRVUVTVF9GQUlMKSx7cmVwb3J0RGF0YTpjfSkpfX0pKX0pKX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LklOSVRfQ09ORklHPXZvaWQgMCx0LklOSVRfQ09ORklHPXtlbnY6MH19XSxyLmM9cyxyLmQ9ZnVuY3Rpb24oZSx0LG4pe3IubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtlbnVtZXJhYmxlOiEwLGdldDpufSl9LHIucj1mdW5jdGlvbihlKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxyLnQ9ZnVuY3Rpb24oZSx0KXtpZigxJnQmJihlPXIoZSkpLDgmdClyZXR1cm4gZTtpZig0JnQmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIG49T2JqZWN0LmNyZWF0ZShudWxsKTtpZihyLnIobiksT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6ZX0pLDImdCYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpZm9yKHZhciBvIGluIGUpci5kKG4sbyxmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0uYmluZChudWxsLG8pKTtyZXR1cm4gbn0sci5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiByLmQodCxcImFcIix0KSx0fSxyLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LHIucD1cIlwiLHIoci5zPTMpKX0sZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIHIoZSl7aWYoYVtlXSlyZXR1cm4gYVtlXS5leHBvcnRzO3ZhciB0PWFbZV09e2k6ZSxsOiExLGV4cG9ydHM6e319O3JldHVybiBzW2VdLmNhbGwodC5leHBvcnRzLHQsdC5leHBvcnRzLHIpLHQubD0hMCx0LmV4cG9ydHN9dmFyIG8saSxzLGE7ZS5leHBvcnRzPShvPW4oNiksaT1uKDEpLHM9W2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcixvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQudHlwZU1hcD10LkJyb2tlblR5cGU9dC5Db25uZWN0ZWRUeXBlPXQuRGlzY29ubmVjdGVkVHlwZT10Lk1ldGhvZD10LkNvbm5lY3Rpb25DbG9zZWRBY3Rpb249dC5OZXRXb3JrU3RhdGU9dC5leHRlcm5hbEVycm9yTGlzdD10LlN0aWNrPXQuUGNDb25uZWN0U3RhdGU9dC5FTlVNX0NPTk5FQ1RfU1RBVEU9dC5TdHJlYW1UeXBlPXQuTW9kZT10LlplZ29jb25uUnVuRW52PXQuQnVzaW5lc3NTZXJ2aWNlPXQuQWNjZXNzSHViX0Vycm9yX0NvZGU9dC5BY2Nlc3NIdWJNZXNzYWdlVHlwZT10LkVOVU1fTkVUV09SS19TVEFURT12b2lkIDAsKG89dC5FTlVNX05FVFdPUktfU1RBVEV8fCh0LkVOVU1fTkVUV09SS19TVEFURT17fSkpW28ub2ZmbGluZT0wXT1cIm9mZmxpbmVcIixvW28ub25saW5lPTFdPVwib25saW5lXCIsKG89dC5BY2Nlc3NIdWJNZXNzYWdlVHlwZXx8KHQuQWNjZXNzSHViTWVzc2FnZVR5cGU9e30pKVtvLk1TR19UWVBFX1NUUkVBTV9DTE9TRUQ9Ml09XCJNU0dfVFlQRV9TVFJFQU1fQ0xPU0VEXCIsb1tvLk1TR19UWVBFX0NMT1NFX0NPTk5FQ1RJT049M109XCJNU0dfVFlQRV9DTE9TRV9DT05ORUNUSU9OXCIsb1tvLk1TR19UWVBFX0hUVFBfUkVRVUVTVD00XT1cIk1TR19UWVBFX0hUVFBfUkVRVUVTVFwiLG9bby5NU0dfVFlQRV9IVFRQX1JFU1BPTlNFPTVdPVwiTVNHX1RZUEVfSFRUUF9SRVNQT05TRVwiLG9bby5NU0dfVFlQRV9IQl9SRVFVRVNUPTEyXT1cIk1TR19UWVBFX0hCX1JFUVVFU1RcIixvW28uTVNHX1RZUEVfSEJfUkVTUE9OU0U9MTNdPVwiTVNHX1RZUEVfSEJfUkVTUE9OU0VcIixvW28uTVNHX1RZUEVfR0VUX0NPTkZJR19SRVFVRVNUPTE0XT1cIk1TR19UWVBFX0dFVF9DT05GSUdfUkVRVUVTVFwiLG9bby5NU0dfVFlQRV9HRVRfQ09ORklHX1JFU1BPTlNFPTE1XT1cIk1TR19UWVBFX0dFVF9DT05GSUdfUkVTUE9OU0VcIixvW28uTVNHX1RZUEVfSFRUUF9SRVFVRVNUX0FDSz0xNl09XCJNU0dfVFlQRV9IVFRQX1JFUVVFU1RfQUNLXCIsb1tvLk1TR19UWVBFX1BDX1VQV0FSRF9NRVNTQUdFPTE3XT1cIk1TR19UWVBFX1BDX1VQV0FSRF9NRVNTQUdFXCIsb1tvLk1TR19UWVBFX1BDX1VQV0FSRF9NRVNTQUdFX0FDSz0xOF09XCJNU0dfVFlQRV9QQ19VUFdBUkRfTUVTU0FHRV9BQ0tcIixvW28uTVNHX1RZUEVfUENfRVNUQUJMSVNIRUQ9MTldPVwiTVNHX1RZUEVfUENfRVNUQUJMSVNIRURcIixvW28uTVNHX1RZUEVfUENfQlJPS0VOPTIwXT1cIk1TR19UWVBFX1BDX0JST0tFTlwiLG9bby5NU0dfVFlQRV9QQ19ET1dOV0FSRF9NRVNTQUdFPTIxXT1cIk1TR19UWVBFX1BDX0RPV05XQVJEX01FU1NBR0VcIixvW28uTVNHX1RZUEVfUkVESVJFQ1Q9MjJdPVwiTVNHX1RZUEVfUkVESVJFQ1RcIixvW28uTVNHX1RZUEVfR0VUX0FQUENPTkZJR19SRVFVRVNUPTIzXT1cIk1TR19UWVBFX0dFVF9BUFBDT05GSUdfUkVRVUVTVFwiLG9bby5NU0dfVFlQRV9HRVRfQVBQQ09ORklHX1JFU1BPTlNFPTI0XT1cIk1TR19UWVBFX0dFVF9BUFBDT05GSUdfUkVTUE9OU0VcIixvW28uTVNHX1RZUEVfUFVTSF9BUFBDT05GSUc9MjVdPVwiTVNHX1RZUEVfUFVTSF9BUFBDT05GSUdcIixvW28uTVNHX1RZUEVfQUNDRVNTSFVCX0RJU1BBVENIX1JFUVVFU1Q9MjZdPVwiTVNHX1RZUEVfQUNDRVNTSFVCX0RJU1BBVENIX1JFUVVFU1RcIixvW28uTVNHX1RZUEVfQUNDRVNTSFVCX0RJU1BBVENIX1JFU1BPTlNFPTI3XT1cIk1TR19UWVBFX0FDQ0VTU0hVQl9ESVNQQVRDSF9SRVNQT05TRVwiLG9bby5NU0dfVFlQRV9QVVNIX0VYQ0VQVElPTj0zMF09XCJNU0dfVFlQRV9QVVNIX0VYQ0VQVElPTlwiLChyPW89dC5BY2Nlc3NIdWJfRXJyb3JfQ29kZXx8KHQuQWNjZXNzSHViX0Vycm9yX0NvZGU9e30pKVtyLkFDQ0VTU0hVQl9JTlZBTElEX0ZSQU1FPTJlNF09XCJBQ0NFU1NIVUJfSU5WQUxJRF9GUkFNRVwiLHJbci5BQ0NFU1NIVUJfTkVFRF9FTkNSWVBUPTIwMDAxXT1cIkFDQ0VTU0hVQl9ORUVEX0VOQ1JZUFRcIixyW3IuQUNDRVNTSFVCX0RFQ1JZUFQ9MjAwMDJdPVwiQUNDRVNTSFVCX0RFQ1JZUFRcIixyW3IuQUNDRVNTSFVCX01TR1RZUEU9MjAwMDNdPVwiQUNDRVNTSFVCX01TR1RZUEVcIixyW3IuQUNDRVNTSFVCX1VOTUFSU0hBTD0yMDAwNF09XCJBQ0NFU1NIVUJfVU5NQVJTSEFMXCIscltyLkFDQ0VTU0hVQl9USU1FT1VUPTIwMDA1XT1cIkFDQ0VTU0hVQl9USU1FT1VUXCIscltyLkFDQ0VTU0hVQl9DT05ORUNUPTIwMDA2XT1cIkFDQ0VTU0hVQl9DT05ORUNUXCIscltyLkFDQ0VTU0hVQl9CUk9LRU49MjAwMDddPVwiQUNDRVNTSFVCX0JST0tFTlwiLHJbci5BQ0NFU1NIVUJfSU5URVJOQUxfRVJST1I9MjAwMDhdPVwiQUNDRVNTSFVCX0lOVEVSTkFMX0VSUk9SXCIscltyLkFDQ0VTU0hVQl9NQVJTSEFMPTIwMDA5XT1cIkFDQ0VTU0hVQl9NQVJTSEFMXCIscltyLkFDQ0VTU0hVQl9VTlNVUFBPUlRFRF9TRVJWSUNFPTIwMDEwXT1cIkFDQ0VTU0hVQl9VTlNVUFBPUlRFRF9TRVJWSUNFXCIscltyLkFDQ0VTU0hVQl9UT09fRlJFUVVFTlRMWT0yMDAxMV09XCJBQ0NFU1NIVUJfVE9PX0ZSRVFVRU5UTFlcIixyW3IuQUNDRVNTSFVCX0lOVkFMSURfQVBQSUQ9MjAwMTJdPVwiQUNDRVNTSFVCX0lOVkFMSURfQVBQSURcIixyW3IuQUNDRVNTSFVCX0hCX1RJTUVPVVQ9MjAwMTNdPVwiQUNDRVNTSFVCX0hCX1RJTUVPVVRcIixyW3IuQUNDRVNTSFVCX0lOVkFMSURfU0lHTkFUVVJFPTIwMDE0XT1cIkFDQ0VTU0hVQl9JTlZBTElEX1NJR05BVFVSRVwiLChyPXQuQnVzaW5lc3NTZXJ2aWNlfHwodC5CdXNpbmVzc1NlcnZpY2U9e30pKVtyLlNFUlZJQ0VfVU5TRVQ9MF09XCJTRVJWSUNFX1VOU0VUXCIscltyLlNFUlZJQ0VfTUVESUFHVz0xXT1cIlNFUlZJQ0VfTUVESUFHV1wiLHJbci5TRVJWSUNFX0xJVkVST09NPTJdPVwiU0VSVklDRV9MSVZFUk9PTVwiLHJbci5TRVJWSUNFX01JWD0zXT1cIlNFUlZJQ0VfTUlYXCIscltyLlNFUlZJQ0VfWkVVUz00XT1cIlNFUlZJQ0VfWkVVU1wiLHJbci5TRVJWSUNFX1pQVVNIPTVdPVwiU0VSVklDRV9aUFVTSFwiLHJbci5TRVJWSUNFX0wzPTZdPVwiU0VSVklDRV9MM1wiLHJbci5TRVJWSUNFX1RBTEtMSU5FPTddPVwiU0VSVklDRV9UQUxLTElORVwiLHJbci5TRVJWSUNFX0VEVVNVSVRFPThdPVwiU0VSVklDRV9FRFVTVUlURVwiLHJbci5TRVJWSUNFX1pJTT05XT1cIlNFUlZJQ0VfWklNXCIscltyLlNFUlZJQ0VfQ2xPVURfU0VUVElORz0xMF09XCJTRVJWSUNFX0NsT1VEX1NFVFRJTkdcIixyW3IuU0VSVklDRV9aRVVTSEI9MTFdPVwiU0VSVklDRV9aRVVTSEJcIixyW3IuU0VSVklDRV9VU0VSX0xPR0lDPTEyXT1cIlNFUlZJQ0VfVVNFUl9MT0dJQ1wiLHJbci5TRVJWSUNFX1VOSUZZRElTUEFUQ0g9MTNdPVwiU0VSVklDRV9VTklGWURJU1BBVENIXCIscltyLlNFUlZJQ0VfUVVBTElUWT0xNF09XCJTRVJWSUNFX1FVQUxJVFlcIixyW3IuU0VSVklDRV9TRUNVUklUWT0xNV09XCJTRVJWSUNFX1NFQ1VSSVRZXCIscltyLlNFUlZJQ0VfS1RWQ1BSPTE2XT1cIlNFUlZJQ0VfS1RWQ1BSXCIscltyLlNFUlZJQ0VfU1dJVENINExJVkVST09NPTE3XT1cIlNFUlZJQ0VfU1dJVENINExJVkVST09NXCIscltyLlNFUlZJQ0VfV0VCUlRDX1NJR05BTD0xOF09XCJTRVJWSUNFX1dFQlJUQ19TSUdOQUxcIixyW3IuU0VSVklDRV9MM19XRUJSVENfU0lHTkFMPTE5XT1cIlNFUlZJQ0VfTDNfV0VCUlRDX1NJR05BTFwiLHJbci5TRVJWSUNFX1ZJREVPQ1BSPTIwXT1cIlNFUlZJQ0VfVklERU9DUFJcIixyW3IuU0VSVklDRV9DRE49MjFdPVwiU0VSVklDRV9DRE5cIixyW3IuU0VSVklDRV9DTE9VRFJFQ09SRD0yMl09XCJTRVJWSUNFX0NMT1VEUkVDT1JEXCIscltyLlNFUlZJQ0VfSU5ORVJfRUNITz0yM109XCJTRVJWSUNFX0lOTkVSX0VDSE9cIixyW3IuU0VSVklDRV9PVVRFUl9FQ0hPPTI0XT1cIlNFUlZJQ0VfT1VURVJfRUNIT1wiLHJbci5TRVJWSUNFX0xPQ0FMSE9TVF9FQ0hPPTI1XT1cIlNFUlZJQ0VfTE9DQUxIT1NUX0VDSE9cIixyW3IuU0VSVklDRV9FQ0hPPTI2XT1cIlNFUlZJQ0VfRUNIT1wiLHJbci5TRVJWSUNFX0RPQ1NFUlZJQ0U9MjddPVwiU0VSVklDRV9ET0NTRVJWSUNFXCIscltyLlNFUlZJQ0VfQVVUSFNWUj0yOF09XCJTRVJWSUNFX0FVVEhTVlJcIiwocj10LlplZ29jb25uUnVuRW52fHwodC5aZWdvY29ublJ1bkVudj17fSkpW3IuWkVHT0NPTk5fUlVOX0VOVl9VTlNFVD0wXT1cIlpFR09DT05OX1JVTl9FTlZfVU5TRVRcIixyW3IuWkVHT0NPTk5fUlVOX0VOVl9CUk9XU0VSPTFdPVwiWkVHT0NPTk5fUlVOX0VOVl9CUk9XU0VSXCIscltyLlpFR09DT05OX1JVTl9FTlZfQVBQTEVUPTJdPVwiWkVHT0NPTk5fUlVOX0VOVl9BUFBMRVRcIiwocj10Lk1vZGV8fCh0Lk1vZGU9e30pKVtyLk1vZGVfVU5TRVQ9MF09XCJNb2RlX1VOU0VUXCIscltyLk1PREVfT05MSU5FPTFdPVwiTU9ERV9PTkxJTkVcIixyW3IuTU9ERV9URVNUPTJdPVwiTU9ERV9URVNUXCIscltyLk1PREVfQUxQSEE9M109XCJNT0RFX0FMUEhBXCIsKHI9dC5TdHJlYW1UeXBlfHwodC5TdHJlYW1UeXBlPXt9KSlbci5IVFRQPTBdPVwiSFRUUFwiLHJbci5QQz0xXT1cIlBDXCIscltyLk9USEVSPTJdPVwiT1RIRVJcIix0LkVOVU1fQ09OTkVDVF9TVEFURT17ZGlzY29ubmVjdDowLGNvbm5lY3Rpbmc6MSxjb25uZWN0ZWQ6Mn0sKHI9dC5QY0Nvbm5lY3RTdGF0ZXx8KHQuUGNDb25uZWN0U3RhdGU9e30pKVtyLkNPTk5FQ1RFRD0wXT1cIkNPTk5FQ1RFRFwiLHJbci5ESVNDT05ORUNUPTFdPVwiRElTQ09OTkVDVFwiLHJbci5CUk9LRU49Ml09XCJCUk9LRU5cIix0LlN0aWNrPXtESVNQQVRDSDpcInplZ28tYWN0aW9uLWRpc3BhdGNoXCIsUkVUUlk6XCJ6ZWdvLWFjdGlvbi1yZXRyeVwiLEFCT1JUOlwiemVnby1hY3Rpb24tYWJvcnRcIixORVhUX0dST1VQOlwiemVnby1hY3Rpb24tbmV4dC1ncm91cFwiLFBVU0hfQVBQX0NPTkZJRzpcInB1c2gtYXBwLWNvbmZpZzpcIn0sdC5leHRlcm5hbEVycm9yTGlzdD1bby5BQ0NFU1NIVUJfSU5WQUxJRF9BUFBJRCxvLkFDQ0VTU0hVQl9JTlZBTElEX1NJR05BVFVSRV0sKHI9dC5OZXRXb3JrU3RhdGV8fCh0Lk5ldFdvcmtTdGF0ZT17fSkpW3Iub2ZmbGluZT0wXT1cIm9mZmxpbmVcIixyW3Iub25saW5lPTFdPVwib25saW5lXCIsKG89dC5Db25uZWN0aW9uQ2xvc2VkQWN0aW9ufHwodC5Db25uZWN0aW9uQ2xvc2VkQWN0aW9uPXt9KSlbby5BQ1RJT05fUkVTRVJWRUQ9MF09XCJBQ1RJT05fUkVTRVJWRURcIixvW28uQUNUSU9OX0RJU1BBVENIPTFdPVwiQUNUSU9OX0RJU1BBVENIXCIsb1tvLkFDVElPTl9SRVRSWT0yXT1cIkFDVElPTl9SRVRSWVwiLG9bby5BQ1RJT05fTkVYVF9OT0RFPTNdPVwiQUNUSU9OX05FWFRfTk9ERVwiLG9bby5BQ1RJT05fQUJPUlQ9NF09XCJBQ1RJT05fQUJPUlRcIixvW28uQUNUSU9OX05FWFRfR1JPVVA9NV09XCJBQ1RJT05fTkVYVF9HUk9VUFwiLChyPXQuTWV0aG9kfHwodC5NZXRob2Q9e30pKVtyLk1FVEhPRF9VTlNFVD0wXT1cIk1FVEhPRF9VTlNFVFwiLHJbci5NRVRIT0RfR0VUPTFdPVwiTUVUSE9EX0dFVFwiLHJbci5NRVRIT0RfUE9TVD0yXT1cIk1FVEhPRF9QT1NUXCIsKG89dC5EaXNjb25uZWN0ZWRUeXBlfHwodC5EaXNjb25uZWN0ZWRUeXBlPXt9KSlbby5DTE9TRT0wXT1cIkNMT1NFXCIsb1tvLlRFTVA9MV09XCJURU1QXCIsb1tvLlRJTUVPVVQ9Ml09XCJUSU1FT1VUXCIsKHI9dC5Db25uZWN0ZWRUeXBlfHwodC5Db25uZWN0ZWRUeXBlPXt9KSlbci5BVVRPPTBdPVwiQVVUT1wiLHJbci5NQU5VQUw9MV09XCJNQU5VQUxcIiwobz10LkJyb2tlblR5cGV8fCh0LkJyb2tlblR5cGU9e30pKVtvLkVNUFRZPTBdPVwiRU1QVFlcIixvW28uQ0xPU0U9MV09XCJDTE9TRVwiLHQudHlwZU1hcD17MjpcInN0cmVhbV9jbG9zZWRcIiwzOlwiY2xvc2VfY29ubmVjdGlvblwiLDQ6XCJodHRwX3JlcXVlc3RcIiw1OlwiaHR0cF9yZXNwb25zZVwiLDEyOlwiaGJfcmVxdWVzdFwiLDEzOlwiaGJfcmVzcG9uc2VcIiwxNDpcImdldF9jb25maWdfcmVxdWVzdFwiLDE1OlwiZ2V0X2NvbmZpZ19yZXNwb25zZVwiLDE2OlwiaHR0cF9yZXF1ZXN0X2Fja1wiLDE3OlwicGNfdXB3YXJkX21lc3NhZ2VcIiwxODpcInBjX3Vwd2FyZF9tZXNzYWdlX2Fja1wiLDE5OlwicGNfZXN0YWJsaXNoZWRcIiwyMDpcInBjX2Jyb2tlblwiLDIxOlwicGNfZG93bndhcmRfbWVzc2FnZVwiLDIyOlwicmVkaXJlY3RcIiwyMzpcImdldF9hcHBjb25maWdfcmVxdWVzdFwiLDI0OlwiZ2V0X2FwcGNvbmZpZ19yZXNwb25zZVwiLDI1OlwicHVzaF9hcHBjb25maWdcIiwyNjpcImFjY2Vzc2h1Yl9kaXNwYXRjaF9yZXF1ZXN0XCIsMjc6XCJhY2Nlc3NodWJfZGlzcGF0Y2hfcmVzcG9uc2VcIiwzMDpcInB1c2hfZXhjZXB0aW9uXCJ9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5BUFBfQ09ORklHX0tFWT10Lk5FVF9BQ0NFU1NfU0VSVkVSUz10Lk5FVF9BQ0NFU1NfQ09ORklHPXZvaWQgMCxuPW4oMCksdC5ORVRfQUNDRVNTX0NPTkZJRz17ZG9tYWluczpbXCJhY2Nlc3NodWItd3NzLnplZ28uaW1cIl0sbW9kZTpcIm9ubGluZVwiLG1vZGVObzpuLk1vZGUuTU9ERV9PTkxJTkUsc2RrVHlwZTozLGNvbm5lY3RWZXI6MixwY0VzdGFibGlzaFRpbWVvdXQ6MTUsc2NoZW1lOlwid3NzXCIsbG9jYXRpb246XCJhY2Nlc3NodWJcIix3c3NNZXNzYWdlVHlwZToxfSx0Lk5FVF9BQ0NFU1NfU0VSVkVSUz1cInpfbmV0X2FjY2Vzc19zZXJ2ZXJzXCIsdC5BUFBfQ09ORklHX0tFWT1cInpfYXBwY29uZmlnXCJ9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW99LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmVycm9yQ29kZUxpc3Q9dm9pZCAwLHQuZXJyb3JDb2RlTGlzdD17VElNRU9VVDp7Y29kZToxMTAwMDAyLG1zZzpcIm5ldHdvcmsgdGltZW91dC5cIn0sU09DS0VUX0NMT1NFOntjb2RlOjExMDAwMDMsbXNnOlwic29ja2V0IGNsb3NlXCJ9LE5FVF9TT0NLRVRfVElNRU9VVDp7Y29kZToxMTAwMDA0LG1zZzpcIm5ldCBhZ2VudCB0aW1lb3V0XCJ9LE5FVF9IQl9USU1FT1VUOntjb2RlOjExMDAwMDUsbXNnOlwibmV0IGhiIHRpbWVvdXRcIn19fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC51dWlkTnVtPXQuZGVjb2RlU3RyaW5nPXQuZW5jb2RlU3RyaW5nPXZvaWQgMCx0LmVuY29kZVN0cmluZz1mdW5jdGlvbihlKXtyZXR1cm4gVWludDhBcnJheS5mcm9tKEFycmF5LmZyb20odW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGUpKSkubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gZS5jaGFyQ29kZUF0KDApfSkpKX0sdC5kZWNvZGVTdHJpbmc9ZnVuY3Rpb24oZSl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsQXJyYXkuZnJvbShlKSkpKX0sdC51dWlkTnVtPWZ1bmN0aW9uKGUsdCl7dmFyIG4scixvPVwiMDEyMzQ1Njc4OVwiLnNwbGl0KFwiXCIpLGk9W107aWYodD1vLmxlbmd0aCxlKWZvcihuPTA7bjxlO24rKylpW25dPW9bMHxNYXRoLnJhbmRvbSgpKnRdO2Vsc2UgZm9yKGlbOF09aVsxM109aVsxOF09aVsyM109XCItXCIsaVsxNF09XCI0XCIsbj0wO248MzY7bisrKWlbbl18fChyPTB8MTYqTWF0aC5yYW5kb20oKSxpW25dPW9bMTk9PW4/MyZyfDg6cl0pO3JldHVybiBpLmpvaW4oXCJcIil9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5OZXRBZ2VudFBDUmVxdWVzdD12b2lkIDA7dmFyIHI9bigwKSxvPW4oMSksaT1uKDYpLHM9big0KSxhPVtyLkJ1c2luZXNzU2VydmljZS5TRVJWSUNFX1dFQlJUQ19TSUdOQUwsci5CdXNpbmVzc1NlcnZpY2UuU0VSVklDRV9MM19XRUJSVENfU0lHTkFMXTtmdW5jdGlvbiBjKGUsdCxuLG8scyl7dGhpcy5sb2dnZXI9ZSx0aGlzLnNlcnZpY2U9dCx0aGlzLnN0cmVhbU1hbmFnZXI9bix0aGlzLnBjRXN0YWJsaXNoVGltZW91dD1vLHRoaXMub3B0aW9uPXMsdGhpcy5jb25uZWN0U3RhdGU9ci5QY0Nvbm5lY3RTdGF0ZS5ESVNDT05ORUNULHRoaXMubGFzdENvbm5lY3RTdGF0ZT1yLlBjQ29ubmVjdFN0YXRlLkRJU0NPTk5FQ1QsdGhpcy5icm9rZW5UaW1lcj1udWxsLHRoaXMubGlzdGVuZXJMaXN0PXtjb25uZWN0ZWQ6W10sYnJva2VuOltdfSx0aGlzLm5ldFBjU3RyZWFtPXRoaXMuc3RyZWFtTWFuYWdlci5jcmVhdGVTdHJlYW0oci5TdHJlYW1UeXBlLlBDKSx0aGlzLmV2ZW50TWFuYWdlcj1uZXcgaS5FdmVudE1hbmFnZXIsdGhpcy5uZXRQY1N0cmVhbS5vblB1c2hFdmVudD10aGlzLm9uUHVzaEV2ZW50LmJpbmQodGhpcyl9Yy5wcm90b3R5cGUuc2VuZFJlcXVlc3Q9ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPXRoaXMsYz1lLnBheWxvYWQsdT0oKGEuaW5jbHVkZXModGhpcy5zZXJ2aWNlKXx8bnVsbCE9KHU9dGhpcy5vcHRpb24pJiZ1LmVuY29kZSkmJihjPSgwLHMuZW5jb2RlU3RyaW5nKShlLnBheWxvYWQpKSx7c2VydmljZV9ubzp0aGlzLnNlcnZpY2UsYWNrOmUuYWNrLHBheWxvYWQ6Yyx3c3NfbWVzc2FnZV90eXBlOm8uTkVUX0FDQ0VTU19DT05GSUcud3NzTWVzc2FnZVR5cGUsd3NzX3BhdGg6bnVsbD09KHU9dGhpcy5vcHRpb24pP3ZvaWQgMDp1LnBhdGgsd3NzX3Jhd19xdWVyeTpudWxsPT0oYz10aGlzLm9wdGlvbik/dm9pZCAwOmMucXVlcnksemVnb2Nvbm5fdmVyc2lvbjpvLk5FVF9BQ0NFU1NfQ09ORklHLmNvbm5lY3RWZXJ9KTt0aGlzLm5ldFBjU3RyZWFtLmlzQ29ubmVjdCgpfHx0aGlzLmV2ZW50TWFuYWdlci5lbWl0KFwiY29ubmVjdFN0YXJ0XCIpLHRoaXMubmV0UGNTdHJlYW0uc2VuZE1lc3NhZ2Uoci5BY2Nlc3NIdWJNZXNzYWdlVHlwZS5NU0dfVFlQRV9QQ19VUFdBUkRfTUVTU0FHRSx1LChmdW5jdGlvbigpe2kubG9nZ2VyLmluZm8oXCJ6bi5uYXByLnNyIHN1Y1wiKSxuJiZuKCl9KSwoZnVuY3Rpb24oZSl7aS5sb2dnZXIuZXJyb3IoXCJ6bi5uYXByLnNyIGZhaWxcIiksdCYmdChlKX0pLG51bGwse2lzSW5TZW5kTWFwOlwiYm9vbGVhblwiPT10eXBlb2YgZS5pc0luU2VuZE1hcCYmZS5pc0luU2VuZE1hcH0pLHRoaXMubmV0UGNTdHJlYW0uaXNGaXJzdD0hMX0sYy5wcm90b3R5cGUub25QdXNoRXZlbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgbjtzd2l0Y2godGhpcy5sb2dnZXIuaW5mbyhcInpuLm5hcHIub3BlXCIrXCIgbXNnVHlwZTogXCIuY29uY2F0KGUpKSxlKXtjYXNlIHIuQWNjZXNzSHViTWVzc2FnZVR5cGUuTVNHX1RZUEVfUENfRVNUQUJMSVNIRUQ6dGhpcy5wY0VzdGFibGlzaGVkKHQpO2JyZWFrO2Nhc2Ugci5BY2Nlc3NIdWJNZXNzYWdlVHlwZS5NU0dfVFlQRV9QQ19CUk9LRU46dGhpcy5wY0Jyb2tlbigpO2JyZWFrO2Nhc2Ugci5BY2Nlc3NIdWJNZXNzYWdlVHlwZS5NU0dfVFlQRV9QQ19ET1dOV0FSRF9NRVNTQUdFOnZhciBvPXQucGF5bG9hZDsoYS5pbmNsdWRlcyh0aGlzLnNlcnZpY2UpfHxudWxsIT0obj10aGlzLm9wdGlvbikmJm4uZW5jb2RlKSYmKG89KDAscy5kZWNvZGVTdHJpbmcpKHQucGF5bG9hZCkpLHRoaXMuZXZlbnRNYW5hZ2VyLmVtaXQoXCJkb3duTG9hZE1lc3NhZ2VcIixvKX19LGMucHJvdG90eXBlLm9uPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZXZlbnRNYW5hZ2VyLmFkZEV2ZW50SGFuZGxlcihlLHQpfSxjLnByb3RvdHlwZS5vZmY9ZnVuY3Rpb24oZSx0KXt0aGlzLmV2ZW50TWFuYWdlci5yZW1vdmVFdmVudEhhbmRsZXIoZSx0KX0sYy5wcm90b3R5cGUucGNFc3RhYmxpc2hlZD1mdW5jdGlvbihlKXt0aGlzLmxvZ2dlci5pbmZvKFwiem4ubmFwci5wZSBjYWxsIFwiK0pTT04uc3RyaW5naWZ5KGUpKSx0aGlzLnNldENvbm5lY3RTdGF0ZShyLlBjQ29ubmVjdFN0YXRlLkNPTk5FQ1RFRCk7dmFyIHQ9ci5Db25uZWN0ZWRUeXBlLk1BTlVBTDt0aGlzLmxhc3RDb25uZWN0U3RhdGU9PT1yLlBjQ29ubmVjdFN0YXRlLkJST0tFTiYmdGhpcy5jb25uZWN0U3RhdGU9PT1yLlBjQ29ubmVjdFN0YXRlLkNPTk5FQ1RFRCYmKHQ9ci5Db25uZWN0ZWRUeXBlLkFVVE8pLHRoaXMuZXZlbnRNYW5hZ2VyLmVtaXQoXCJjb25uZWN0ZWRcIix0KSx0aGlzLmV2ZW50TWFuYWdlci5lbWl0KFwicGNDb25uZWN0ZWRFdmVudFwiLHtwcm94eV9saW5rX3NvdXJjZXM6bnVsbD09ZT92b2lkIDA6ZS5mcm9tfSksdGhpcy5icm9rZW5UaW1lciYmY2xlYXJUaW1lb3V0KHRoaXMuYnJva2VuVGltZXIpfSxjLnByb3RvdHlwZS5wY0Jyb2tlbj1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5sb2dnZXIuaW5mbyhcInpuLm5hcHIucGIgY2FsbFwiKSx0aGlzLnNldENvbm5lY3RTdGF0ZShyLlBjQ29ubmVjdFN0YXRlLkJST0tFTiksdGhpcy5ldmVudE1hbmFnZXIuZW1pdChcImJyb2tlblwiKSx0aGlzLmJyb2tlblRpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZS5ldmVudE1hbmFnZXIuZW1pdChcImRpc2Nvbm5lY3RlZFwiLHIuRGlzY29ubmVjdGVkVHlwZS5URU1QKX0pLDFlMyp0aGlzLnBjRXN0YWJsaXNoVGltZW91dCl9LGMucHJvdG90eXBlLnJlc2V0QnJva2VuVGltZXI9ZnVuY3Rpb24oKXt0aGlzLmJyb2tlblRpbWVyJiZjbGVhclRpbWVvdXQodGhpcy5icm9rZW5UaW1lcil9LGMucHJvdG90eXBlLl9jbG9zZT1mdW5jdGlvbihlLHQpe3ZhciBuO3RoaXMubG9nZ2VyLmluZm8oXCJ6bi5uYXByLmNyIGNhbGwgXCIrdGhpcy5zZXJ2aWNlK1wiIFwiK3RoaXMuY29ubmVjdFN0YXRlKSx0aGlzLmNvbm5lY3RTdGF0ZSE9PXIuUGNDb25uZWN0U3RhdGUuRElTQ09OTkVDVCYmKHRoaXMubmV0UGNTdHJlYW0uY2xvc2VTdHJlYW0oMCxcIlwiKSx0aGlzLnJlc2V0QnJva2VuVGltZXIoKSxuPXRoaXMuc3RyZWFtTWFuYWdlci5nZXRTdHJlYW1JRCgpLHRoaXMubmV0UGNTdHJlYW0ucmVmcmVzaChuKSx0aGlzLmV2ZW50TWFuYWdlci5lbWl0KGUsdCkpLHRoaXMuc2V0Q29ubmVjdFN0YXRlKHIuUGNDb25uZWN0U3RhdGUuRElTQ09OTkVDVCl9LGMucHJvdG90eXBlLmNsb3NlUGM9ZnVuY3Rpb24oKXt0aGlzLl9jbG9zZShcImJyb2tlblwiKX0sYy5wcm90b3R5cGUuY2xvc2VSZXF1ZXN0PWZ1bmN0aW9uKCl7dGhpcy5fY2xvc2UoXCJkaXNjb25uZWN0ZWRcIixyLkRpc2Nvbm5lY3RlZFR5cGUuQ0xPU0UpfSxjLnByb3RvdHlwZS5zZXRDb25uZWN0U3RhdGU9ZnVuY3Rpb24oZSl7dGhpcy5jb25uZWN0U3RhdGUhPT1lJiYodGhpcy5sYXN0Q29ubmVjdFN0YXRlPXRoaXMuY29ubmVjdFN0YXRlLHRoaXMuY29ubmVjdFN0YXRlPWUpfSx0Lk5ldEFnZW50UENSZXF1ZXN0PWN9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKCl7dGhpcy5oYW5kbGVyTGlzdE1hcD17fX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkV2ZW50TWFuYWdlcj12b2lkIDAsci5wcm90b3R5cGUuYWRkRXZlbnRIYW5kbGVyPWZ1bmN0aW9uKGUsdCl7aWYodGhpcy5oYW5kbGVyTGlzdE1hcFtlXXx8KHRoaXMuaGFuZGxlckxpc3RNYXBbZV09W10pLFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwiUGFyYW1zIGNhbGxCYWNrIGlzIG5vdCBhIEZ1bmN0aW9uXCIpO3JldHVybiB0aGlzLmhhbmRsZXJMaXN0TWFwW2VdJiYtMT09dGhpcy5oYW5kbGVyTGlzdE1hcFtlXS5pbmRleE9mKHQpJiZ0aGlzLmhhbmRsZXJMaXN0TWFwW2VdLnB1c2godCksITB9LHIucHJvdG90eXBlLnJlbW92ZUV2ZW50SGFuZGxlcj1mdW5jdGlvbihlLHQpe3JldHVybiEhdGhpcy5oYW5kbGVyTGlzdE1hcFtlXSYmKHRoaXMuaGFuZGxlckxpc3RNYXBbZV09dD90aGlzLmhhbmRsZXJMaXN0TWFwW2VdLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIGUhPT10fSkpOltdLCEwKX0sci5wcm90b3R5cGUuZW1pdD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10sbj0xO248YXJndW1lbnRzLmxlbmd0aDtuKyspdFtuLTFdPWFyZ3VtZW50c1tuXTt0aGlzLmhhbmRsZXJMaXN0TWFwW2VdJiZ0aGlzLmhhbmRsZXJMaXN0TWFwW2VdLmZvckVhY2goKGZ1bmN0aW9uKG4pe3RyeXtzZXRUaW1lb3V0KChmdW5jdGlvbigpe24uYXBwbHkodm9pZCAwLHQpfSksMCl9Y2F0Y2gobil7Y29uc29sZS5lcnJvcihcImRpc3BhdGNoIFwiK2UrXCIgXCIrbil9fSkpfSx0LkV2ZW50TWFuYWdlcj1yfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5OZXRBZ2VudEh0dHBSZXF1ZXN0PXZvaWQgMDt2YXIgcj1uKDApLG89big0KSxpPW4oMSk7ZnVuY3Rpb24gcyhlLHQsbil7dGhpcy5sb2dnZXI9ZSx0aGlzLnNlcnZpY2U9dCx0aGlzLnN0cmVhbU1hbmFnZXI9bix0aGlzLm5ldEh0dHBTdHJlYW09dGhpcy5zdHJlYW1NYW5hZ2VyLmNyZWF0ZVN0cmVhbShyLlN0cmVhbVR5cGUuSFRUUCl9cy5wcm90b3R5cGUuc2VuZFJlcXVlc3Q9ZnVuY3Rpb24oZSx0LG4scyxhKXt2YXIgYz10aGlzO2U9e3NlcnZpY2Vfbm86dGhpcy5zZXJ2aWNlLGFjazplLmFjayxoZWFkZXJzOmUuaGVhZGVycyxib2R5OigwLG8uZW5jb2RlU3RyaW5nKShKU09OLnN0cmluZ2lmeShlLmJvZHkpKSxpZF9uYW1lOmUuaWROYW1lLG1ldGhvZF9ubzplLm1ldGhvZF9ubyxzdGljazplLnN0aWNrLGxvY2F0aW9uOmUubG9jYXRpb24semVnb2Nvbm5fdmVyc2lvbjppLk5FVF9BQ0NFU1NfQ09ORklHLmNvbm5lY3RWZXJ9O3RoaXMubmV0SHR0cFN0cmVhbS5zZW5kTWVzc2FnZShyLkFjY2Vzc0h1Yk1lc3NhZ2VUeXBlLk1TR19UWVBFX0hUVFBfUkVRVUVTVCxlLChmdW5jdGlvbihlKXt2YXIgbj0obnVsbD09ZT92b2lkIDA6ZS5oZWFkZXJzKS5maW5kKChmdW5jdGlvbihlKXtyZXR1cm5cIkNvbnRlbnQtRW5jb2RpbmdcIj09PShudWxsPT1lP3ZvaWQgMDplLm5hbWUpfSkpO1wiZ3ppcFwiPT09KG51bGw9PW4/dm9pZCAwOm4udmFsKT9jLmxvZ2dlci5pbmZvKFwiem4ubmFoci5zciBnemlwXCIpOmUuYm9keSYmKG49KDAsby5kZWNvZGVTdHJpbmcpKGUuYm9keSksZS5ib2R5PW4pLGMubG9nZ2VyLmluZm8oXCJ6bi5uYWhyLnNyIHN1YyBcIitKU09OLnN0cmluZ2lmeShlKSksdCYmdChlKX0pLChmdW5jdGlvbihlLHQscil7Yy5sb2dnZXIuZXJyb3IoXCJ6bi5uYWhyLnNyIGZhaWxcIiksbiYmbihyfHxlKX0pLChmdW5jdGlvbihlKXtjLmxvZ2dlci5lcnJvcihcInpuLm5haHIuc3IgYWNrXCIpLHMmJnMoZSl9KSxhKSx0aGlzLm5ldEh0dHBTdHJlYW0uaXNGaXJzdD0hMX0sdC5OZXRBZ2VudEh0dHBSZXF1ZXN0PXN9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0Lk1ldGhvZD10Lk1vZGU9dC5EaXNjb25uZWN0ZWRUeXBlPXQuQ29ubmVjdGVkVHlwZT10Lk5FVF9BQ0NFU1NfQ09ORklHPXQuQnJva2VuVHlwZT10LkJ1c2luZXNzU2VydmljZT10Lk5ldEFnZW50SHR0cFJlcXVlc3Q9dC5OZXRBZ2VudFBDUmVxdWVzdD10LlplZ29Db25uZWN0aW9uQWdlbnQ9dm9pZCAwO3ZhciByPW4oMCksbz0oT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJCcm9rZW5UeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHIuQnJva2VuVHlwZX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIkJ1c2luZXNzU2VydmljZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByLkJ1c2luZXNzU2VydmljZX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIkNvbm5lY3RlZFR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gci5Db25uZWN0ZWRUeXBlfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiRGlzY29ubmVjdGVkVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByLkRpc2Nvbm5lY3RlZFR5cGV9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJNb2RlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHIuTW9kZX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIk1ldGhvZFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByLk1ldGhvZH19KSxuKDkpKSxpPShPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIlplZ29Db25uZWN0aW9uQWdlbnRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gby5aZWdvQ29ubmVjdGlvbkFnZW50fX0pLG4oNykpLHM9KE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiTmV0QWdlbnRIdHRwUmVxdWVzdFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBpLk5ldEFnZW50SHR0cFJlcXVlc3R9fSksbigxKSksYT0oT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJORVRfQUNDRVNTX0NPTkZJR1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBzLk5FVF9BQ0NFU1NfQ09ORklHfX0pLG4oNSkpO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiTmV0QWdlbnRQQ1JlcXVlc3RcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYS5OZXRBZ2VudFBDUmVxdWVzdH19KX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPXRoaXMmJnRoaXMuX19zcHJlYWRBcnJheXx8ZnVuY3Rpb24oZSx0LG4pe2lmKG58fDI9PT1hcmd1bWVudHMubGVuZ3RoKWZvcih2YXIgcixvPTAsaT10Lmxlbmd0aDtvPGk7bysrKSFyJiZvIGluIHR8fCgocj1yfHxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0LDAsbykpW29dPXRbb10pO3JldHVybiBlLmNvbmNhdChyfHxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0KSl9LG89KE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuWmVnb0Nvbm5lY3Rpb25BZ2VudD12b2lkIDAsbigwKSksaT1uKDEwKSxzPW4oMTMpLGE9bigxOCksYz1uKDE5KSx1PW4oMjApLGw9bigxKSxoPW4oNikscD1uKDIxKSxkPW4oMyksXz1uKDIyKSxmPW4oNCksZz1uKDIzKSxtPW4oNykseT1uKDI0KTtmdW5jdGlvbiB2KCl7dmFyIGU9dGhpczt0aGlzLmxpbmtDaGVja1RpbWVyPW51bGwsdGhpcy5jb25uZWN0U2VydmVycz1bXSx0aGlzLnNwZWNpZmllZFNlcnZlcnM9W10sdGhpcy5nZXRBcHBDb25maWdGYWlsQ291bnQ9MCx0aGlzLmdldEFwcENvbmZpZ1RpbWU9MCx0aGlzLmluaXRlZD0hMSx0aGlzLmxpbmtNc2dNYXhJbnRlcnZhbD05MCx0aGlzLmxpbmtNc2dDaGVja0ludGVydmFsPTUsdGhpcy5jb25uZWN0ZWRUaW1lPTAsdGhpcy5jb25uZWN0aWQ9XCJcIix0aGlzLnJlcG9ydFNlcT0wLHRoaXMuY29ubmVjdFNlcT0wLHRoaXMucHJpbWFyeURvbWFpbnM9W10sdGhpcy5vbkNvbm5lY3RlZEV2ZW50PWZ1bmN0aW9uKHQpe3ZhciBuO2UuZ2V0Q29uZmlnKCksZS5zdGF0ZUNlbnRlci5zcGVjaWZpZWR8fChuPWUucmVwb3J0U2VxKyssZS5ldmVudE1hbmFnZXIuZW1pdChcImRpc3BhdGNoRXZlbnRcIixuLFwic3RhcnRcIiksZS5kaXNwYXRjaCgpLnRoZW4oKGZ1bmN0aW9uKHQpe3ZhciByPXQuc2VydmVyczt0PXQuZG9tYWlucztlLmV2ZW50TWFuYWdlci5lbWl0KFwiZGlzcGF0Y2hFdmVudFwiLG4sXCJlbmRcIix7ZG9tYWluczp0fSksMDxyLmxlbmd0aCYmZS5ldmVudE1hbmFnZXIuZW1pdChcImRpc3BhdGNoUmVzdWx0VXBkYXRlXCIse3NlcnZlcnM6cn0pfSkpLmNhdGNoKChmdW5jdGlvbihlKXt9KSkpLGUuZXZlbnRNYW5hZ2VyLmVtaXQoXCJjb25uZWN0ZWRcIiksZS5jb25uZWN0ZWRUaW1lPShuZXcgRGF0ZSkuZ2V0VGltZSgpLGUuY29ubmVjdGlkPSgwLGYudXVpZE51bSkoMTYpLGUuZXZlbnRNYW5hZ2VyLmVtaXQoXCJjb25uZWN0ZWRFdmVudFwiLGUuY29ubmVjdFNlcSxcImVuZFwiLHtzZXJ2ZXJzOnQsY291bnQ6dC5sZW5ndGgsY29ubmVjdGlkOmUuY29ubmVjdGlkfSl9LHRoaXMub25Db25uZWN0aW5nRXZlbnQ9ZnVuY3Rpb24oKXtlLmxvZ2dlci5pbmZvKFwiem4uemNhLm9jZSBjYWxsXCIpfSx0aGlzLm9uRGlzQ29ubmVjdGVkRXZlbnQ9ZnVuY3Rpb24odCl7ZS5kaXNDb25uZWN0KCksZS5uZXRBZ2VudFBDUmVxdWVzdE1nci51cGRhdGVDb25uZWN0U3RhdGUoby5QY0Nvbm5lY3RTdGF0ZS5CUk9LRU4pfSx0aGlzLm9uUHVzaEV2ZW50PWZ1bmN0aW9uKHQsbixyKXtzd2l0Y2gobil7Y2FzZSBvLkFjY2Vzc0h1Yk1lc3NhZ2VUeXBlLk1TR19UWVBFX1JFRElSRUNUOmUucmVkaXJlY3Qocik7YnJlYWs7Y2FzZSBvLkFjY2Vzc0h1Yk1lc3NhZ2VUeXBlLk1TR19UWVBFX0NMT1NFX0NPTk5FQ1RJT046ZS5jb25uZWN0Q2xvc2VkKHIpO2JyZWFrO2Nhc2Ugby5BY2Nlc3NIdWJNZXNzYWdlVHlwZS5NU0dfVFlQRV9QQ19CUk9LRU46Y2FzZSBvLkFjY2Vzc0h1Yk1lc3NhZ2VUeXBlLk1TR19UWVBFX1BDX0VTVEFCTElTSEVEOmNhc2Ugby5BY2Nlc3NIdWJNZXNzYWdlVHlwZS5NU0dfVFlQRV9QQ19ET1dOV0FSRF9NRVNTQUdFOmUuc3RyZWFtTWFuYWdlci5vblB1c2hFdmVudCh0LG4scik7YnJlYWs7Y2FzZSBvLkFjY2Vzc0h1Yk1lc3NhZ2VUeXBlLk1TR19UWVBFX1BVU0hfQVBQQ09ORklHOmUuYnVzaW5lc3NSZXF1ZXN0TWdyLmRlY29kZUNvbmZpZ01lc3NhZ2Uoci5kYXRhKX19fXYucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oKXt0aGlzLmxvZ2dlcj1uZXcgZy5aZWdvTG9nZ2VyLHRoaXMucHJvdG9idWY9bmV3IGkuQWNjZXNzSHViUHJvdG9CdWYsdGhpcy5zdGF0ZUNlbnRlcj1uZXcgXy5TdGF0ZUNlbnRlcix0aGlzLmV2ZW50TWFuYWdlcj1uZXcgaC5FdmVudE1hbmFnZXIsdGhpcy5jaGVja0xpbmtNc2coKSx0aGlzLmluaXRlZD0hMH0sdi5wcm90b3R5cGUudW5Jbml0PWZ1bmN0aW9uKCl7dGhpcy5pbml0ZWQ9ITF9LHYucHJvdG90eXBlLnNldEFwcEluZm89ZnVuY3Rpb24oZSl7dGhpcy5zdGF0ZUNlbnRlci5hcHBJbmZvPWUsdGhpcy5zdGF0ZUNlbnRlci5uZXR3b3JrU3RhdGU9IW5hdmlnYXRvcnx8bmF2aWdhdG9yLm9uTGluZT9vLkVOVU1fTkVUV09SS19TVEFURS5vbmxpbmU6by5FTlVNX05FVFdPUktfU1RBVEUub2ZmbGluZSwwPT09ZS5lbnY/dGhpcy5iaW5kV2luZG93TGlzdGVuZXIoKToxPT09ZS5lbnYmJnRoaXMuYmluZFd4TGlzdGVuZXIoKSx0aGlzLnplZ29MaW5rPW5ldyBzLlplZ29Xc3NMaW5rKGUuYXBwSUQsZS5lbnYsdGhpcy5wcm90b2J1Zix0aGlzLmxvZ2dlcix0aGlzLnN0YXRlQ2VudGVyKSx0aGlzLnplZ29MaW5rLmluaXRFdmVudCh0aGlzLm9uQ29ubmVjdGVkRXZlbnQsdGhpcy5vbkRpc0Nvbm5lY3RlZEV2ZW50LHRoaXMub25Db25uZWN0aW5nRXZlbnQsdGhpcy5vblB1c2hFdmVudCksdGhpcy5zdHJlYW1NYW5hZ2VyPW5ldyB5LlN0cmVhbU1hbmFnZXIodGhpcy56ZWdvTGluayksdGhpcy5idXNpbmVzc1JlcXVlc3RNZ3I9bmV3IGEuTmV0QWdlbnRCdXNpbmVzc1JlcXVlc3RNZ3IodGhpcy5zdHJlYW1NYW5hZ2VyLHRoaXMucHJvdG9idWYsdGhpcy5sb2dnZXIsdGhpcy5zdGF0ZUNlbnRlciksdGhpcy5uZXRIZWFydEJlYXRIYW5kbGVyPW5ldyBjLk5ldEhlYXJ0QmVhdEhhbmRsZXIodGhpcy5zdHJlYW1NYW5hZ2VyLHRoaXMubG9nZ2VyKSx0aGlzLm5ldEFnZW50UENSZXF1ZXN0TWdyPW5ldyB1Lk5ldEFnZW50UENSZXF1ZXN0TWdyKHRoaXMuc3RyZWFtTWFuYWdlcix0aGlzLmxvZ2dlciksdGhpcy5oZWFydEJlYXRIYW5kbGVyKCl9LHYucHJvdG90eXBlLnNldFVzZXJJbmZvPWZ1bmN0aW9uKGUpe3RoaXMuc3RhdGVDZW50ZXIudXNlcklkPWV9LHYucHJvdG90eXBlLnNldE5ldEFnZW50RGVmYXVsdFNlcnZlcnM9ZnVuY3Rpb24oZSl7dGhpcy5jb25uZWN0U2VydmVycz1yKFtdLGUsITApfSx2LnByb3RvdHlwZS5zZXROZXRBZ2VudFNwZWNpZmllZFNlcnZlcnM9ZnVuY3Rpb24oZSl7dGhpcy5sb2dnZXIuaW5mbyhcInpuLnNzcy4wIFwiK0pTT04uc3RyaW5naWZ5KGUpKSx0aGlzLnN0YXRlQ2VudGVyLnNwZWNpZmllZD0hMCx0aGlzLnNwZWNpZmllZFNlcnZlcnM9cihbXSxlLCEwKX0sdi5wcm90b3R5cGUuc2V0QmFja3VwRG9tYWlucz1mdW5jdGlvbihlKXt0aGlzLnByaW1hcnlEb21haW5zPWV9LHYucHJvdG90eXBlLnNldERpc3BhdGNoQ29ubmVjdFNlcnZlcnM9ZnVuY3Rpb24oZSl7dGhpcy5jb25uZWN0KGUpfSx2LnByb3RvdHlwZS5zdGFydEh0dHBSZXF1ZXN0PWZ1bmN0aW9uKGUsdCxuLHIsbyl7dmFyIGk9dGhpcyxzPXRoaXMucmVwb3J0U2VxKys7dGhpcy5ldmVudE1hbmFnZXIuZW1pdChcInJlcXVlc3RFdmVudFwiLHMsXCJzdGFydFwiKSx0aGlzLmlzQ29ubmVjdCgpfHx0aGlzLmNvbm5lY3RVYSgpLG5ldyBtLk5ldEFnZW50SHR0cFJlcXVlc3QodGhpcy5sb2dnZXIsZS5zZXJ2aWNlLHRoaXMuc3RyZWFtTWFuYWdlcikuc2VuZFJlcXVlc3QoZSwoZnVuY3Rpb24obil7aS5ldmVudE1hbmFnZXIuZW1pdChcInJlcXVlc3RFdmVudFwiLHMsXCJlbmRcIix7bmFfcmVxX2xvY2F0aW9uOmUubG9jYXRpb24sc3RhdHVzX2NvZGU6bi5zdGF0dXNfY29kZSxlcnJfY29kZTowfSksdCYmdChuKX0pLChmdW5jdGlvbih0KXtpLmV2ZW50TWFuYWdlci5lbWl0KFwicmVxdWVzdEV2ZW50XCIscyxcImVuZFwiLHtuYV9yZXFfbG9jYXRpb246ZS5sb2NhdGlvbixlcnJfY29kZTp0LmNvZGV8fDB9KSxuJiZuKHQpfSkscixvKX0sdi5wcm90b3R5cGUuZ2V0QXBwQ29uZmlnQnlBZ2VudD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHRoaXMuaXNDb25uZWN0KCl8fHRoaXMuY29ubmVjdFVhKCksdGhpcy5nZXRBcHBDb25maWcoZSx0aGlzLnN0YXRlQ2VudGVyLnVzZXJJZCx0LG4pfSx2LnByb3RvdHlwZS5nZXRQQ1JlcXVlc3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO3JldHVybih0PXRoaXMubmV0QWdlbnRQQ1JlcXVlc3RNZ3IuZ2V0UmVxdWVzdChlLHQpKS5vbihcImRpc2Nvbm5lY3RlZFwiLChmdW5jdGlvbih0KXtuLmxvZ2dlci53YXJuKFwiem4uemNhLmdwciBcIitlK1wiIGRpc2Nvbm5lY3QgXCIrdCksdD09PW8uRGlzY29ubmVjdGVkVHlwZS5URU1QJiYobi5kaXNDb25uZWN0KCksbi5jb25uZWN0U3RhcnQoKSl9KSksdC5vbihcImNvbm5lY3RTdGFydFwiLChmdW5jdGlvbigpe24uY29ubmVjdFVhKCl9KSksdH0sdi5wcm90b3R5cGUuY29ubmVjdFVhPWZ1bmN0aW9uKCl7dGhpcy5sb2dnZXIuaW5mbyhcInpuLnpjYS5jdWEgY2FsbFwiKSx0aGlzLnJldHJ5TGlua0hhbmRsZXImJih0aGlzLnJldHJ5TGlua0hhbmRsZXIuaW5pdCgpLHRoaXMuY29ubmVjdFN0YXJ0KCExLCEwKSl9LHYucHJvdG90eXBlLmRlc3Ryb3lDb25uZWN0PWZ1bmN0aW9uKCl7dGhpcy5sb2dnZXIuaW5mbyhcInpuLnpjYS5kYy4wIGNhbGxcIiksdGhpcy5yZXNldE5ldEFnZW50KCl9LHYucHJvdG90eXBlLmlzQ29ubmVjdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnplZ29MaW5rJiZ0aGlzLnplZ29MaW5rLmlzQ29ubmVjdCgpfSx2LnByb3RvdHlwZS5vbj1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmxvZ2dlci5pbmZvKFwiem4uemNhLm8uMCBcIitlKSx0aGlzLmV2ZW50TWFuYWdlci5hZGRFdmVudEhhbmRsZXIoZSx0KX0sdi5wcm90b3R5cGUub2ZmPWZ1bmN0aW9uKGUsdCl7dGhpcy5sb2dnZXIuaW5mbyhcInpuLnpjYS5vLjEgXCIrZSksdGhpcy5ldmVudE1hbmFnZXIucmVtb3ZlRXZlbnRIYW5kbGVyKGUsdCl9LHYucHJvdG90eXBlLnNldExvZ2dlcj1mdW5jdGlvbihlKXt0aGlzLmxvZ2dlcj1lfSx2LnByb3RvdHlwZS5zZXRBY2Nlc3M9ZnVuY3Rpb24oZSl7dGhpcy5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudD1lfSx2LnByb3RvdHlwZS5oZWFydEJlYXRIYW5kbGVyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLm5ldEhlYXJ0QmVhdEhhbmRsZXIubmV0SGJMb2dvdXQ9ZnVuY3Rpb24odCl7ZS5yZXRyeUxpbmtIYW5kbGVyJiYoW2QuZXJyb3JDb2RlTGlzdC5ORVRfSEJfVElNRU9VVC5jb2RlXS5pbmNsdWRlcyh0LmNvZGUpPyhlLnJldHJ5TGlua0hhbmRsZXIuc3RhcnRNYXhUaW1lKCksZS5kaXNDb25uZWN0KCksZS5jb25uZWN0U3RhcnQoKSk6KGUucmV0cnlMaW5rSGFuZGxlci5zdG9wTWF4VGltZSgpLGUucmV0cnlMaW5rSGFuZGxlci5pbnZhbGlkKCksZS5ldmVudE1hbmFnZXIuZW1pdChcImRpc2Nvbm5lY3RlZFwiKSkpfX0sdi5wcm90b3R5cGUuYmluZFdpbmRvd0xpc3RlbmVyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwoZnVuY3Rpb24oKXtlLm5ldE9mZkxpbmVIYW5kbGUoKX0pKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm9ubGluZVwiLChmdW5jdGlvbigpe2UubmV0T25MaW5lSGFuZGxlKCl9KSl9LHYucHJvdG90eXBlLmJpbmRXeExpc3RlbmVyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt3eC5vbk5ldHdvcmtTdGF0dXNDaGFuZ2UoKGZ1bmN0aW9uKHQpe3QuaXNDb25uZWN0ZWQ/ZS5uZXRPbkxpbmVIYW5kbGUoKTplLm5ldE9mZkxpbmVIYW5kbGUoKX0pKX0sdi5wcm90b3R5cGUubmV0T25MaW5lSGFuZGxlPWZ1bmN0aW9uKCl7dGhpcy5sb2dnZXIuaW5mbyhcInpuLnpjYS5ub2guMCBuZXR3b3JrIGlzIG9ubGluZVwiKSx0aGlzLnN0YXRlQ2VudGVyLm5ldHdvcmtTdGF0ZT1vLkVOVU1fTkVUV09SS19TVEFURS5vbmxpbmUsdGhpcy5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudCYmdGhpcy5uZXRPbkxpbmVIYW5kbGVyKCl9LHYucHJvdG90eXBlLm5ldE9mZkxpbmVIYW5kbGU9ZnVuY3Rpb24oKXt0aGlzLmxvZ2dlci5pbmZvKFwiem4uemNhLm5vaC4xIG5ldHdvcmsgaXMgYnJva2VuXCIpLHRoaXMuc3RhdGVDZW50ZXIubmV0d29ya1N0YXRlPW8uRU5VTV9ORVRXT1JLX1NUQVRFLm9mZmxpbmUsdGhpcy5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudCYmdGhpcy5uZXRPZmZMaW5lSGFuZGxlcigpfSx2LnByb3RvdHlwZS5jaGVja0xpbmtNc2c9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKHRoaXMuc3RhdGVDZW50ZXIudXNlTmV0QWdlbnQpe2lmKHRoaXMuaXNDb25uZWN0KCkpe3ZhciB0PURhdGUubm93KCktdGhpcy56ZWdvTGluay51cGRhdGVkTXNnVGltZTtpZih0PjFlMyp0aGlzLmxpbmtNc2dNYXhJbnRlcnZhbClyZXR1cm4gdGhpcy5sb2dnZXIuaW5mbyhcInpuLnpjYS5jbG0gaW50ZXJ2YWw6IFwiK3QpLHZvaWQgdGhpcy5yZXNldE5ldEFnZW50KCl9dGhpcy5saW5rQ2hlY2tUaW1lciYmY2xlYXJUaW1lb3V0KHRoaXMubGlua0NoZWNrVGltZXIpLHRoaXMubGlua0NoZWNrVGltZXI9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLmNoZWNrTGlua01zZygpfSksMWUzKnRoaXMubGlua01zZ0NoZWNrSW50ZXJ2YWwpfX0sdi5wcm90b3R5cGUuY29ubmVjdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzOzA8ZS5sZW5ndGgmJih0aGlzLmNvbm5lY3RTZXJ2ZXJzPXIoW10sZSwhMCkpLHRoaXMuc3RhdGVDZW50ZXIuc3BlY2lmaWVkJiYwPHRoaXMuc3BlY2lmaWVkU2VydmVycy5sZW5ndGgmJih0aGlzLmNvbm5lY3RTZXJ2ZXJzPXRoaXMuc3BlY2lmaWVkU2VydmVycyksdGhpcy56ZWdvTGluay5jcmVhdGVTb2NrZXQodGhpcy5jb25uZWN0U2VydmVycyksdGhpcy5yZXRyeUxpbmtIYW5kbGVyfHwodGhpcy5yZXRyeUxpbmtIYW5kbGVyPW5ldyBwLk5ldFJldHJ5TGlua0hhbmRsZXIodGhpcy5sb2dnZXIsdGhpcy5zdGF0ZUNlbnRlcikpLHRoaXMucmV0cnlMaW5rSGFuZGxlci5pbml0KCksdGhpcy5yZXRyeUxpbmtIYW5kbGVyLmluaXRMaW5rKHRoaXMuemVnb0xpbmspLHRoaXMucmV0cnlMaW5rSGFuZGxlci5vbmFjdGl2ZT1mdW5jdGlvbihlLG4pe249PT1kLmVycm9yQ29kZUxpc3QuTkVUX1NPQ0tFVF9USU1FT1VUJiYodC5ldmVudE1hbmFnZXIuZW1pdChcImRpc2Nvbm5lY3RlZFwiLG4pLHQubmV0QWdlbnRQQ1JlcXVlc3RNZ3IudXBkYXRlQ29ubmVjdFN0YXRlKG8uUGNDb25uZWN0U3RhdGUuRElTQ09OTkVDVCxvLkRpc2Nvbm5lY3RlZFR5cGUuVElNRU9VVCxuKSl9LHRoaXMuY29ubmVjdFN0YXJ0KCExLCEwKX0sdi5wcm90b3R5cGUucmVzZXROZXRBZ2VudD1mdW5jdGlvbigpe3RoaXMubmV0SGVhcnRCZWF0SGFuZGxlci5yZXNldCgpLHRoaXMuemVnb0xpbmsuZGVzdHJveVNvY2tldCgpfSx2LnByb3RvdHlwZS5nZXRDb25maWc9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsbixyKXtyP3QubG9nZ2VyLmluZm8oXCJ6bi56Y2EuZ2MgZmFpbCBcIitKU09OLnN0cmluZ2lmeShyKSk6MD09PWUuY29kZT8odC5sb2dnZXIuaW5mbyhcInpuLnpjYS5nYyBzdWMgXCIrSlNPTi5zdHJpbmdpZnkoZSkpLHQuZ2V0Q29uZmlnU3VjY2VzcyhlKSk6dC5sb2dnZXIuaW5mbyhcInpuLnpjYS5nYyBmYWlsXCIpfXZhciB0PXRoaXM7dGhpcy5idXNpbmVzc1JlcXVlc3RNZ3IuZ2V0Q29uZmlnKGUsZSl9LHYucHJvdG90eXBlLmdldENvbmZpZ1N1Y2Nlc3M9ZnVuY3Rpb24oZSl7dGhpcy5uZXRIZWFydEJlYXRIYW5kbGVyLmluaXQoZSksdGhpcy5uZXRBZ2VudFBDUmVxdWVzdE1nci5zZXRFc3RhYmxpc2hUaW1lb3V0KGUuZGF0YS5wY19lc3RhYmxpc2hfdGltZW91dCl9LHYucHJvdG90eXBlLmRpc3BhdGNoPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQsbil7ZS5idXNpbmVzc1JlcXVlc3RNZ3IuZGlzcGF0Y2hVUkwoKGZ1bmN0aW9uKG4pe249bi5kYXRhLndzc19ncm91cHM7dmFyIHI9KGUubG9nZ2VyLmluZm8oXCJ6bi5uYWIuZHUgd3NzX2dyb3VwczogXCIrSlNPTi5zdHJpbmdpZnkobikpLGUuZ2V0Q29ubmVjdGlvbkRvbWFpbnMobixlLnByaW1hcnlEb21haW5zKSk7cj1lLmhhbmRsZVdzc0dyb3VwcyhyKTt0KHtzZXJ2ZXJzOnIsZG9tYWluczpufSl9KSwoZnVuY3Rpb24oZSl7bihlKX0pKX0pKX0sdi5wcm90b3R5cGUuaGFuZGxlV3NzR3JvdXBzPWZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpJiYwPGUubGVuZ3RoP2UubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gbC5ORVRfQUNDRVNTX0NPTkZJRy5zY2hlbWUrXCI6Ly9cIitlLmhvc3QrXCIvXCIrbC5ORVRfQUNDRVNTX0NPTkZJRy5sb2NhdGlvbn0pKTpbXX0sdi5wcm90b3R5cGUuZ2V0Q29ubmVjdGlvbkRvbWFpbnM9ZnVuY3Rpb24oZSx0KXt2YXIgbj1yKFtdLGUsITApO3JldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2UuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHI7KHI9ZS5tYWluX2RvbWFpbnx8KHI9ZS5ob3N0LnNwbGl0KFwiLlwiKSlbci5sZW5ndGgtMl0rXCIuXCIrcltyLmxlbmd0aC0xXSkhPT10JiYocj1lLmhvc3QucmVwbGFjZShyLHQpLG4ucHVzaCh7Z3JvdXA6ZS5ncm91cCxob3N0OnJ9KSl9KSl9KSksbn0sdi5wcm90b3R5cGUuZ2V0QXBwQ29uZmlnPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihzLGEpe1wic3RyaW5nXCI9PXR5cGVvZiB0JiZcInN0cmluZ1wiPT10eXBlb2Ygbj9pLmJ1c2luZXNzUmVxdWVzdE1nci5nZXRBcHBDb25maWcoZSx0LG4scikudGhlbigoZnVuY3Rpb24oZSl7cyhlKX0pKS5jYXRjaCgoZnVuY3Rpb24ocil7aWYoaS5sb2dnZXIuZXJyb3IoXCJ6bi56Y2EuZ2FjIFwiK0pTT04uc3RyaW5naWZ5KHIpKSwtMTxvLmV4dGVybmFsRXJyb3JMaXN0LmluZGV4T2Yoci5jb2RlKSlyZXR1cm4gaS5nZXRBcHBDb25maWdGYWlsQ291bnQ9MCx2b2lkIGEocik7aS5nZXRBcHBDb25maWdGYWlsQ291bnQrKywyMDAwOD09PXIuY29kZSYmaS5nZXRBcHBDb25maWdGYWlsQ291bnQ8Mz9pLmdldEFwcENvbmZpZyhlLHQsbikudGhlbigoZnVuY3Rpb24oZSl7cmV0dXJuIHMoZSl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe3JldHVybiBhKGUpfSkpOihpLmdldEFwcENvbmZpZ0ZhaWxDb3VudD0wLGEocikpfSkpOmkubG9nZ2VyLmVycm9yKFwiem4uemNhLmdhYyB1c2VySUQgb3IgdG9rZW4gbXVzdCBiZSBzdHJpbmdcIil9KSl9LHYucHJvdG90eXBlLnJlcG9ydERpc0Nvbm5lY3RFdmVudD1mdW5jdGlvbigpe3ZhciBlPShuZXcgRGF0ZSkuZ2V0VGltZSgpLXRoaXMuY29ubmVjdGVkVGltZTt0aGlzLmV2ZW50TWFuYWdlci5lbWl0KFwiZGlzQ29ubmVjdGVkRXZlbnRcIix7ZHVyYXRpb246ZSxzZXJ2ZXI6dGhpcy56ZWdvTGluay5jb25uZWN0U2VydmVyfSl9LHYucHJvdG90eXBlLnJlZGlyZWN0PWZ1bmN0aW9uKGUpe3RoaXMubG9nZ2VyLmluZm8oXCJ6bi56Y2EucmRcIitcIiBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoZS53c3NfZ3JvdXBzKSkpLChlPXRoaXMuaGFuZGxlV3NzR3JvdXBzKGUud3NzX2dyb3VwcykpJiZBcnJheS5pc0FycmF5KGUpJiYwPGUubGVuZ3RoPyh0aGlzLmRpc0Nvbm5lY3QoKSx0aGlzLnN0YXRlQ2VudGVyLnNwZWNpZmllZCYmKHRoaXMubG9nZ2VyLmluZm8oXCJ6bi56Y2EucmQgc3BlY2lmaWVkXCIpLGU9dGhpcy5zcGVjaWZpZWRTZXJ2ZXJzKSx0aGlzLnplZ29MaW5rLmNyZWF0ZVNvY2tldChlKSx0aGlzLmNvbm5lY3RTdGFydCghMSwhMCkpOnRoaXMubG9nZ2VyLndhcm4oXCJ6bi56Y2EucmQgd3NzX2dyb3VwcyBudWxsXCIpfSx2LnByb3RvdHlwZS5jb25uZWN0Q2xvc2VkPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7c3dpdGNoKHRoaXMubG9nZ2VyLmluZm8oXCJ6bi56Y2EuY2NcIitcIiBcIi5jb25jYXQoZS5yZWFzb24sXCIgXCIpLmNvbmNhdChlLm1zZyxcIiBcIikuY29uY2F0KGUuYWN0aW9uKSksZS5hY3Rpb24pe2Nhc2Ugby5Db25uZWN0aW9uQ2xvc2VkQWN0aW9uLkFDVElPTl9ESVNQQVRDSDp2YXIgbj10aGlzLnJlcG9ydFNlcSsrO3RoaXMuZXZlbnRNYW5hZ2VyLmVtaXQoXCJkaXNwYXRjaEV2ZW50XCIsbixcInN0YXJ0XCIpLHRoaXMuZGlzcGF0Y2goKS50aGVuKChmdW5jdGlvbihlKXt2YXIgcj1lLnNlcnZlcnM7ZT1lLmRvbWFpbnM7dC5ldmVudE1hbmFnZXIuZW1pdChcImRpc3BhdGNoRXZlbnRcIixuLFwiZW5kXCIse2RvbWFpbnM6ZSxyZWFzb246XCJDb25uZWN0Q2xvc2VkXCJ9KSxBcnJheS5pc0FycmF5KHIpJiYwPHIubGVuZ3RoJiYodC5ldmVudE1hbmFnZXIuZW1pdChcImRpc3BhdGNoUmVzdWx0VXBkYXRlXCIse3NlcnZlcnM6cn0pLGU9dC5zdGF0ZUNlbnRlci5zcGVjaWZpZWQ/dC5zcGVjaWZpZWRTZXJ2ZXJzOnIsdC5kaXNDb25uZWN0KCksdC56ZWdvTGluay5jcmVhdGVTb2NrZXQoZSksdC5jb25uZWN0U3RhcnQoITEsITApKX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7dC5sb2dnZXIuaW5mbyhcInpuLnpjYS5jYyBkaXNwYXRjaCBmYWlsXCIpfSkpO2JyZWFrO2Nhc2Ugby5Db25uZWN0aW9uQ2xvc2VkQWN0aW9uLkFDVElPTl9SRVRSWTp0aGlzLmRpc0Nvbm5lY3QoKSx0aGlzLmNvbm5lY3RTdGFydCghMSk7YnJlYWs7Y2FzZSBvLkNvbm5lY3Rpb25DbG9zZWRBY3Rpb24uQUNUSU9OX05FWFRfR1JPVVA6dGhpcy5uZXRBZ2VudFBDUmVxdWVzdE1nci5jbG9zZVBDcygpLHRoaXMuZXZlbnRNYW5hZ2VyLmVtaXQoXCJicm9rZW5cIixvLkJyb2tlblR5cGUuQ0xPU0UpLHRoaXMuY29ubmVjdFN0YXJ0KCk7Y2FzZSBvLkNvbm5lY3Rpb25DbG9zZWRBY3Rpb24uQUNUSU9OX0FCT1JUOmNhc2Ugby5Db25uZWN0aW9uQ2xvc2VkQWN0aW9uLkFDVElPTl9SRVNFUlZFRDp9fSx2LnByb3RvdHlwZS5uZXRPbkxpbmVIYW5kbGVyPWZ1bmN0aW9uKCl7dGhpcy5yZXRyeUxpbmtIYW5kbGVyJiYodGhpcy56ZWdvTGluay5pc0Nvbm5lY3QoKT90aGlzLnJldHJ5TGlua0hhbmRsZXIuc3RvcE1heFRpbWUoKTp0aGlzLmNvbm5lY3RTdGFydCgpKX0sdi5wcm90b3R5cGUubmV0T2ZmTGluZUhhbmRsZXI9ZnVuY3Rpb24oKXt0aGlzLmRpc0Nvbm5lY3QoKSx0aGlzLnJldHJ5TGlua0hhbmRsZXImJih0aGlzLnJldHJ5TGlua0hhbmRsZXIuaW52YWxpZCgpLHRoaXMucmV0cnlMaW5rSGFuZGxlci5zdGFydE1heFRpbWUoKSx0aGlzLnplZ29MaW5rLnNldFN0YXRlKG8uRU5VTV9DT05ORUNUX1NUQVRFLmRpc2Nvbm5lY3QpKX0sdi5wcm90b3R5cGUuY29ubmVjdFN0YXJ0PWZ1bmN0aW9uKGUsdCl7dGhpcy5yZXRyeUxpbmtIYW5kbGVyLmFjdGl2ZShlLHQpJiZ0aGlzLnJlcG9ydENvbm5lY3RFdmVudCgpfSx2LnByb3RvdHlwZS5yZXBvcnRDb25uZWN0RXZlbnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnJlcG9ydFNlcSsrO3RoaXMuY29ubmVjdFNlcT1lLHRoaXMuZXZlbnRNYW5hZ2VyLmVtaXQoXCJjb25uZWN0ZWRFdmVudFwiLGUsXCJzdGFydFwiKX0sdi5wcm90b3R5cGUuZGlzQ29ubmVjdD1mdW5jdGlvbigpe3RoaXMubmV0QWdlbnRQQ1JlcXVlc3RNZ3IuY2xvc2VQQ3MoKSx0aGlzLmV2ZW50TWFuYWdlci5lbWl0KFwiYnJva2VuXCIpLHRoaXMucmVwb3J0RGlzQ29ubmVjdEV2ZW50KCl9LHYucHJvdG90eXBlLnRlc3RDb25uZWN0PWZ1bmN0aW9uKCl7dGhpcy5zdGFydEh0dHBSZXF1ZXN0KHtzZXJ2aWNlOm8uQnVzaW5lc3NTZXJ2aWNlLlNFUlZJQ0VfQ2xPVURfU0VUVElORyxoZWFkZXJzOltdLGJvZHk6e2FwcGlkOjMzNDkzMTg0NDYsYml6dHlwZTowLGRldmljZWlkOlwiMjdhMzE1YWUtZmY3OC00ZGVkLTg1ODEtOGI3YjdhZmU2ZjJlXCIsZmlsZXM6W1wiaW5pdFwiLFwicm9vbVwiXSxpZF9uYW1lOlwic2FtcGxlMTY0NzM0NTMyMjQ3MVwiLG1vZGU6XCJvbmxpbmVcIixwYXJhbTp7fSxwcm9kdWN0OlwiV2ViX1NES1wiLHRpbWVzdGFtcDoxNjQ3MzQ1MzYyOTMyLHRva2VuOlwiZXlKMlpYSWlPakVzSW1oaGMyZ2lPaUl3T0dReE1EWXpNelEwTTJFek5qazFabUU0WVRnMlpETm1aR1JsTkdOaU55SXNJbTV2Ym1ObElqb2lZV0V5WkRGbU1ESm1PR1JpWWpCbE0yUTFZalk1TnpBM056TXpPR1l5T0RJaUxDSmxlSEJwY21Wa0lqb3hOalE1T1RNM016STJmUT09XCJ9LGlkTmFtZTpcInNhbXBsZTE2NDczNDUzMjI0NzFcIixhY2s6ITAsc3RpY2s6XCJ6ZWdvLWFjdGlvbi1kaXNwYXRjaFwiLG1ldGhvZF9ubzpvLk1ldGhvZC5NRVRIT0RfUE9TVCxsb2NhdGlvbjpcIi9jbG91ZC1zZXR0aW5nL2dldFwifSwoZnVuY3Rpb24oZSl7Y29uc29sZS53YXJuKFwic3VjXCIsZSl9KSwoZnVuY3Rpb24oZSl7Y29uc29sZS53YXJuKFwiZXJyXCIsZSl9KSwoZnVuY3Rpb24oZSl7Y29uc29sZS53YXJuKFwic3VjXCIsZSl9KSl9LHQuWmVnb0Nvbm5lY3Rpb25BZ2VudD12fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9dGhpcyYmdGhpcy5fX2Fzc2lnbnx8ZnVuY3Rpb24oKXtyZXR1cm4ocj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQsbj0xLHI9YXJndW1lbnRzLmxlbmd0aDtuPHI7bisrKWZvcih2YXIgbyBpbiB0PWFyZ3VtZW50c1tuXSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxvKSYmKGVbb109dFtvXSk7cmV0dXJuIGV9KS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LG89dGhpcyYmdGhpcy5fX2NyZWF0ZUJpbmRpbmd8fChPYmplY3QuY3JlYXRlP2Z1bmN0aW9uKGUsdCxuLHIpe3ZvaWQgMD09PXImJihyPW4pO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxuKTtvJiYhKFwiZ2V0XCJpbiBvPyF0Ll9fZXNNb2R1bGU6by53cml0YWJsZXx8by5jb25maWd1cmFibGUpfHwobz17ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdFtuXX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLG8pfTpmdW5jdGlvbihlLHQsbixyKXtlW3I9dm9pZCAwPT09cj9uOnJdPXRbbl19KSxpPXRoaXMmJnRoaXMuX19zZXRNb2R1bGVEZWZhdWx0fHwoT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbihlLHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnR9KX06ZnVuY3Rpb24oZSx0KXtlLmRlZmF1bHQ9dH0pLHM9dGhpcyYmdGhpcy5fX2ltcG9ydFN0YXJ8fGZ1bmN0aW9uKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD17fTtpZihudWxsIT1lKWZvcih2YXIgbiBpbiBlKVwiZGVmYXVsdFwiIT09biYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJm8odCxlLG4pO3JldHVybiBpKHQsZSksdH0sYT10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fSxjPShPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkFjY2Vzc0h1YlByb3RvQnVmPXZvaWQgMCxhKG4oMTEpKSksdT0ocz1zKG4oMikpLG4oMCkpLGw9YShuKDEyKSk7ZnVuY3Rpb24gaCgpe3ZhciBlO3RoaXMucHJvdG9JbnN0YW5jZT1sLmRlZmF1bHQsdGhpcy5wcm90b01hcD0oKGU9e30pW3UuQWNjZXNzSHViTWVzc2FnZVR5cGUuTVNHX1RZUEVfU1RSRUFNX0NMT1NFRF09W1wicHJvdG9fYWNjZXNzaHViXCIsXCJDb25uZWN0aW9uQ2xvc2VkXCJdLGVbdS5BY2Nlc3NIdWJNZXNzYWdlVHlwZS5NU0dfVFlQRV9DTE9TRV9DT05ORUNUSU9OXT1bXCJwcm90b19hY2Nlc3NodWJcIixcIkNsb3NlQ29ubmVjdGlvblwiXSxlW3UuQWNjZXNzSHViTWVzc2FnZVR5cGUuTVNHX1RZUEVfSFRUUF9SRVFVRVNUXT1bXCJwcm90b19hY2Nlc3NodWJcIixcIkhUVFBSZXF1ZXN0XCJdLGVbdS5BY2Nlc3NIdWJNZXNzYWdlVHlwZS5NU0dfVFlQRV9IVFRQX1JFU1BPTlNFXT1bXCJwcm90b19hY2Nlc3NodWJcIixcIkhUVFBSZXNwb25zZVwiXSxlW3UuQWNjZXNzSHViTWVzc2FnZVR5cGUuTVNHX1RZUEVfSEJfUkVRVUVTVF09W1wicHJvdG9fYWNjZXNzaHViXCIsXCJIQlJlcXVlc3RcIl0sZVt1LkFjY2Vzc0h1Yk1lc3NhZ2VUeXBlLk1TR19UWVBFX0hCX1JFU1BPTlNFXT1bXCJwcm90b19hY2Nlc3NodWJcIixcIkhCUmVzcG9uc2VcIl0sZVt1LkFjY2Vzc0h1Yk1lc3NhZ2VUeXBlLk1TR19UWVBFX0dFVF9DT05GSUdfUkVRVUVTVF09W1wicHJvdG9fYWNjZXNzaHViXCIsXCJHZXRDb25maWdSZXF1ZXN0XCJdLGVbdS5BY2Nlc3NIdWJNZXNzYWdlVHlwZS5NU0dfVFlQRV9HRVRfQ09ORklHX1JFU1BPTlNFXT1bXCJwcm90b19hY2Nlc3NodWJcIixcIkdldENvbmZpZ1Jlc3BvbnNlXCJdLGVbdS5BY2Nlc3NIdWJNZXNzYWdlVHlwZS5NU0dfVFlQRV9IVFRQX1JFUVVFU1RfQUNLXT1bXCJwcm90b19hY2Nlc3NodWJcIixcIkhCUmVzcG9uc2VcIl0sZVt1LkFjY2Vzc0h1Yk1lc3NhZ2VUeXBlLk1TR19UWVBFX1BDX1VQV0FSRF9NRVNTQUdFXT1bXCJwcm90b19hY2Nlc3NodWJcIixcIlBDVXB3YXJkTWVzc2FnZVwiXSxlW3UuQWNjZXNzSHViTWVzc2FnZVR5cGUuTVNHX1RZUEVfUENfVVBXQVJEX01FU1NBR0VfQUNLXT1bXCJwcm90b19hY2Nlc3NodWJcIixcIlBDVXB3YXJkTWVzc2FnZUFja1wiXSxlW3UuQWNjZXNzSHViTWVzc2FnZVR5cGUuTVNHX1RZUEVfUENfRVNUQUJMSVNIRURdPVtcInByb3RvX2FjY2Vzc2h1YlwiLFwiUENFc3RhYmxpc2hlZFwiXSxlW3UuQWNjZXNzSHViTWVzc2FnZVR5cGUuTVNHX1RZUEVfUENfQlJPS0VOXT1bXCJwcm90b19hY2Nlc3NodWJcIixcIlBDQnJva2VuXCJdLGVbdS5BY2Nlc3NIdWJNZXNzYWdlVHlwZS5NU0dfVFlQRV9QQ19ET1dOV0FSRF9NRVNTQUdFXT1bXCJwcm90b19hY2Nlc3NodWJcIixcIlBDRG93bndhcmRNZXNzYWdlXCJdLGVbdS5BY2Nlc3NIdWJNZXNzYWdlVHlwZS5NU0dfVFlQRV9SRURJUkVDVF09W1wicHJvdG9fYWNjZXNzaHViXCIsXCJSZWRpcmVjdFwiXSxlW3UuQWNjZXNzSHViTWVzc2FnZVR5cGUuTVNHX1RZUEVfR0VUX0FQUENPTkZJR19SRVFVRVNUXT1bXCJwcm90b19hY2Nlc3NodWJcIixcIkdldEFwcENvbmZpZ1JlcXVlc3RcIl0sZVt1LkFjY2Vzc0h1Yk1lc3NhZ2VUeXBlLk1TR19UWVBFX0dFVF9BUFBDT05GSUdfUkVTUE9OU0VdPVtcInByb3RvX2FjY2Vzc2h1YlwiLFwiR2V0QXBwQ29uZmlnUmVzcG9uc2VcIl0sZVt1LkFjY2Vzc0h1Yk1lc3NhZ2VUeXBlLk1TR19UWVBFX1BVU0hfQVBQQ09ORklHXT1bXCJwcm90b19hY2Nlc3NodWJcIixcIlB1c2hBcHBDb25maWdcIl0sZVt1LkFjY2Vzc0h1Yk1lc3NhZ2VUeXBlLk1TR19UWVBFX0FDQ0VTU0hVQl9ESVNQQVRDSF9SRVFVRVNUXT1bXCJwcm90b19hY2Nlc3NodWJcIixcIkFjY2Vzc2h1YkRpc3BhdGNoUmVxdWVzdFwiXSxlW3UuQWNjZXNzSHViTWVzc2FnZVR5cGUuTVNHX1RZUEVfQUNDRVNTSFVCX0RJU1BBVENIX1JFU1BPTlNFXT1bXCJwcm90b19hY2Nlc3NodWJcIixcIkFjY2Vzc2h1YkRpc3BhdGNoUmVzcG9uc2VcIl0sZVt1LkFjY2Vzc0h1Yk1lc3NhZ2VUeXBlLk1TR19UWVBFX1BVU0hfRVhDRVBUSU9OXT1bXCJwcm90b19hY2Nlc3NodWJcIixcIlB1c2hFeGNlcHRpb25cIl0sZSl9cy51dGlsLkxvbmc9Yy5kZWZhdWx0LHMuY29uZmlndXJlKCksaC5wcm90b3R5cGUuZW5jb2RlUmVxdWVzdD1mdW5jdGlvbihlLHQsbil7dmFyIHI9KG89dGhpcy5wcm90b01hcFtlXSlbMF0sbz1vWzFdO289KHI9dGhpcy5lbmNvZGUodGhpcy5wcm90b0luc3RhbmNlW3JdW29dLHQpKS5sZW5ndGg7cmV0dXJuKHQ9bmV3IFVpbnQ4QXJyYXkoMTMrbykpWzBdPTE3NSx0WzFdPTAsdFsyXT1lPj44LHRbM109ZS0odFsyXTw8OCksdC5zZXQobmV3IFVpbnQ4QXJyYXkoSW50MzJBcnJheS5mcm9tKFtvXSkuYnVmZmVyKS5yZXZlcnNlKCksNCksdC5zZXQobmV3IFVpbnQ4QXJyYXkoSW50MzJBcnJheS5mcm9tKFtuXSkuYnVmZmVyKS5yZXZlcnNlKCksOCksdFsxMl09MCx0LnNldChyLDEzKSx0fSxoLnByb3RvdHlwZS5kZWNvZGVSZXNwb25zZT1mdW5jdGlvbihlKXt2YXIgdD0oZVsyXTw8OCkrZVszXSxuPW5ldyBEYXRhVmlldyhlLmJ1ZmZlcikuZ2V0VWludDMyKDgpLHI9ZS5zbGljZSgxMyk7dHJ5e3ZhciBvPXRoaXMucHJvdG9NYXBbdF0saT1vWzBdLHM9b1sxXTtyZXR1cm5bbix0LHRoaXMuZGVjb2RlKHRoaXMucHJvdG9JbnN0YW5jZVtpXVtzXSxyKV19Y2F0Y2goZSl7cmV0dXJuW24sdCx7Y29kZToxfV19fSxoLnByb3RvdHlwZS5kZWNvZGVDb25maWdNZXNzYWdlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmRlY29kZSh0aGlzLnByb3RvSW5zdGFuY2UucHJvdG9faW5pdGNvbmZpZy5Jbml0Q29uZmlnLGUpfSxoLnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5lbmNvZGUobmV3IGUodCkpLmZpbmlzaCgpfSxoLnByb3RvdHlwZS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcih7fSxlLmRlY29kZSh0KSl9LHQuQWNjZXNzSHViUHJvdG9CdWY9aH0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9aX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO24ucih0KSxuLmQodCxcInByb3RvX2FjY2Vzc2h1YlwiLChmdW5jdGlvbigpe3JldHVybiBhfSkpLG4uZCh0LFwicHJvdG9faW5pdGNvbmZpZ1wiLChmdW5jdGlvbigpe3JldHVybiBjfSkpLG4uZCh0LFwiZGVmYXVsdFwiLChmdW5jdGlvbigpe3JldHVybiBzfSkpO2NvbnN0IHI9KHQ9bigyKSkuUmVhZGVyLG89dC5Xcml0ZXIsaT10LnV0aWwscz10LnJvb3RzLmRlZmF1bHR8fCh0LnJvb3RzLmRlZmF1bHQ9e30pLGE9cy5wcm90b19hY2Nlc3NodWI9KCgpPT57Y29uc3QgZT17fTtyZXR1cm4gZS5NZXNzYWdlVHlwZT1mdW5jdGlvbigpe2NvbnN0IGU9e30sdD1PYmplY3QuY3JlYXRlKGUpO3JldHVybiB0W2VbMF09XCJNU0dfVFlQRV9FTVBUWVwiXT0wLHRbZVsxXT1cIk1TR19UWVBFX0NPTk5FQ1RJT05fQ0xPU0VEXCJdPTEsdFtlWzJdPVwiTVNHX1RZUEVfU1RSRUFNX0NMT1NFRFwiXT0yLHRbZVszXT1cIk1TR19UWVBFX0NMT1NFX0NPTk5FQ1RJT05cIl09Myx0W2VbNF09XCJNU0dfVFlQRV9IVFRQX1JFUVVFU1RcIl09NCx0W2VbNV09XCJNU0dfVFlQRV9IVFRQX1JFU1BPTlNFXCJdPTUsdFtlWzZdPVwiTVNHX1RZUEVfSFRUUF9SRVFVRVNUX0RST1BFRFwiXT02LHRbZVs3XT1cIk1TR19UWVBFX1BST1hZX0NPTk5FQ1RcIl09Nyx0W2VbOF09XCJNU0dfVFlQRV9QUk9YWV9DT05ORUNURURcIl09OCx0W2VbOV09XCJNU0dfVFlQRV9QUk9YWV9DT05ORUNUSU9OX0NMT1NFRFwiXT05LHRbZVsxMF09XCJNU0dfVFlQRV9QUk9YWV9TRU5EX0RBVEFcIl09MTAsdFtlWzExXT1cIk1TR19UWVBFX1BST1hZX1JFQ1ZfREFUQVwiXT0xMSx0W2VbMTJdPVwiTVNHX1RZUEVfSEJfUkVRVUVTVFwiXT0xMix0W2VbMTNdPVwiTVNHX1RZUEVfSEJfUkVTUE9OU0VcIl09MTMsdFtlWzE0XT1cIk1TR19UWVBFX0dFVF9DT05GSUdfUkVRVUVTVFwiXT0xNCx0W2VbMTVdPVwiTVNHX1RZUEVfR0VUX0NPTkZJR19SRVNQT05TRVwiXT0xNSx0W2VbMTZdPVwiTVNHX1RZUEVfSFRUUF9SRVFVRVNUX0FDS1wiXT0xNix0W2VbMTddPVwiTVNHX1RZUEVfUENfVVBXQVJEX01FU1NBR0VcIl09MTcsdFtlWzE4XT1cIk1TR19UWVBFX1BDX1VQV0FSRF9NRVNTQUdFX0FDS1wiXT0xOCx0W2VbMTldPVwiTVNHX1RZUEVfUENfRVNUQUJMSVNIRURcIl09MTksdFtlWzIwXT1cIk1TR19UWVBFX1BDX0JST0tFTlwiXT0yMCx0W2VbMjFdPVwiTVNHX1RZUEVfUENfRE9XTldBUkRfTUVTU0FHRVwiXT0yMSx0W2VbMjJdPVwiTVNHX1RZUEVfUkVESVJFQ1RcIl09MjIsdFtlWzIzXT1cIk1TR19UWVBFX0dFVF9BUFBDT05GSUdfUkVRVUVTVFwiXT0yMyx0W2VbMjRdPVwiTVNHX1RZUEVfR0VUX0FQUENPTkZJR19SRVNQT05TRVwiXT0yNCx0W2VbMjVdPVwiTVNHX1RZUEVfUFVTSF9BUFBDT05GSUdcIl09MjUsdFtlWzI2XT1cIk1TR19UWVBFX0FDQ0VTU0hVQl9ESVNQQVRDSF9SRVFVRVNUXCJdPTI2LHRbZVsyN109XCJNU0dfVFlQRV9BQ0NFU1NIVUJfRElTUEFUQ0hfUkVTUE9OU0VcIl09MjcsdFtlWzI4XT1cIk1TR19UWVBFX0dFVF9JTV9DT05GSUdfUkVRVUVTVFwiXT0yOCx0W2VbMjldPVwiTVNHX1RZUEVfR0VUX0lNX0NPTkZJR19SRVNQT05TRVwiXT0yOSx0W2VbMzBdPVwiTVNHX1RZUEVfUFVTSF9FWENFUFRJT05cIl09MzAsdFtlWzUwXT1cIk1TR19UWVBFX1VBX0RJU1BBVENIX1JFUVVFU1RcIl09NTAsdFtlWzUxXT1cIk1TR19UWVBFX1VBX0RJU1BBVENIX1JFU1BPTlNFXCJdPTUxLHRbZVs1Ml09XCJNU0dfVFlQRV9VQV9FQ0hPX1JFUVVFU1RcIl09NTIsdFtlWzUzXT1cIk1TR19UWVBFX1VBX0VDSE9fUkVTUE9OU0VcIl09NTMsdFtlWzEwMF09XCJNU0dfVFlQRV9OT0RFX1JFR0lTVEVSX1JFUVVFU1RcIl09MTAwLHRbZVsxMDFdPVwiTVNHX1RZUEVfTk9ERV9SRUdJU1RFUl9SRVNQT05TRVwiXT0xMDEsdFtlWzEwMl09XCJNU0dfVFlQRV9OT0RFX0hCX1JFUVVFU1RcIl09MTAyLHRbZVsxMDNdPVwiTVNHX1RZUEVfTk9ERV9IQl9SRVNQT05TRVwiXT0xMDMsdH0oKSxlLkVycm9yQ29kZT1mdW5jdGlvbigpe2NvbnN0IGU9e30sdD1PYmplY3QuY3JlYXRlKGUpO3JldHVybiB0W2VbMF09XCJPS1wiXT0wLHRbZVsxZTRdPVwiRElTUEFUQ0hfTk9fQVZBSUxBQkxFX05PREVcIl09MWU0LHRbZVsxMDAwMV09XCJESVNQQVRDSF9JTlRFUk5BTF9FUlJPUlwiXT0xMDAwMSx0W2VbMTAwMDJdPVwiRElTUEFUQ0hfSU5WQUxJRF9GUkFNRVwiXT0xMDAwMix0W2VbMTAwMDNdPVwiRElTUEFUQ0hfVU5NQVJTSEFMXCJdPTEwMDAzLHRbZVsxMDAwNF09XCJESVNQQVRDSF9NU0dUWVBFXCJdPTEwMDA0LHRbZVsxMDAwNV09XCJESVNQQVRDSF9NQVJTSEFMXCJdPTEwMDA1LHRbZVsxMDAwNl09XCJESVNQQVRDSF9UT09fRlJFUVVFTlRMWVwiXT0xMDAwNix0W2VbMmU0XT1cIkFDQ0VTU0hVQl9JTlZBTElEX0ZSQU1FXCJdPTJlNCx0W2VbMjAwMDFdPVwiQUNDRVNTSFVCX05FRURfRU5DUllQVFwiXT0yMDAwMSx0W2VbMjAwMDJdPVwiQUNDRVNTSFVCX0RFQ1JZUFRcIl09MjAwMDIsdFtlWzIwMDAzXT1cIkFDQ0VTU0hVQl9NU0dUWVBFXCJdPTIwMDAzLHRbZVsyMDAwNF09XCJBQ0NFU1NIVUJfVU5NQVJTSEFMXCJdPTIwMDA0LHRbZVsyMDAwNV09XCJBQ0NFU1NIVUJfVElNRU9VVFwiXT0yMDAwNSx0W2VbMjAwMDZdPVwiQUNDRVNTSFVCX0NPTk5FQ1RcIl09MjAwMDYsdFtlWzIwMDA3XT1cIkFDQ0VTU0hVQl9CUk9LRU5cIl09MjAwMDcsdFtlWzIwMDA4XT1cIkFDQ0VTU0hVQl9JTlRFUk5BTF9FUlJPUlwiXT0yMDAwOCx0W2VbMjAwMDldPVwiQUNDRVNTSFVCX01BUlNIQUxcIl09MjAwMDksdFtlWzIwMDEwXT1cIkFDQ0VTU0hVQl9VTlNVUFBPUlRFRF9TRVJWSUNFXCJdPTIwMDEwLHRbZVsyMDAxMV09XCJBQ0NFU1NIVUJfVE9PX0ZSRVFVRU5UTFlcIl09MjAwMTEsdFtlWzIwMDEyXT1cIkFDQ0VTU0hVQl9JTlZBTElEX0FQUElEXCJdPTIwMDEyLHRbZVsyMDAxM109XCJBQ0NFU1NIVUJfSEJfVElNRU9VVFwiXT0yMDAxMyx0W2VbMjAwMTRdPVwiQUNDRVNTSFVCX0lOVkFMSURfU0lHTkFUVVJFXCJdPTIwMDE0LHRbZVsyMDAxNV09XCJBQ0NFU1NIVUJfQVVUSF9GQUlMRURcIl09MjAwMTUsdFtlWzNlNF09XCJBQ0NFU1NIVUJfR0VUX1NUUkVBTV9GQUlMRURcIl09M2U0LHRbZVszMDAwMV09XCJBQ0NFU1NIVUJfR0VUX0NPTk5fRkFJTEVEXCJdPTMwMDAxLHRbZVszMDAwMl09XCJBQ0NFU1NIVUJfRE9fSFRUUF9SRVFVRVNUX0ZBSUxFRFwiXT0zMDAwMix0W2VbMzAwMDNdPVwiQUNDRVNTSFVCX1VOTUFSU0hBTF9IQl9GQUlMRURcIl09MzAwMDMsdFtlWzMwMDA0XT1cIkFDQ0VTU0hVQl9ET19CQUNLRU5EX0RJU1BBVENIX0ZBSUxFRFwiXT0zMDAwNCx0fSgpLGUuTW9kZT1mdW5jdGlvbigpe2NvbnN0IGU9e30sdD1PYmplY3QuY3JlYXRlKGUpO3JldHVybiB0W2VbMF09XCJNb2RlX1VOU0VUXCJdPTAsdFtlWzFdPVwiTU9ERV9PTkxJTkVcIl09MSx0W2VbMl09XCJNT0RFX1RFU1RcIl09Mix0W2VbM109XCJNT0RFX0FMUEhBXCJdPTMsdH0oKSxlLlNlcnZpY2U9ZnVuY3Rpb24oKXtjb25zdCBlPXt9LHQ9T2JqZWN0LmNyZWF0ZShlKTtyZXR1cm4gdFtlWzBdPVwiU0VSVklDRV9VTlNFVFwiXT0wLHRbZVsxXT1cIlNFUlZJQ0VfTUVESUFHV1wiXT0xLHRbZVsyXT1cIlNFUlZJQ0VfTElWRVJPT01cIl09Mix0W2VbM109XCJTRVJWSUNFX01JWFwiXT0zLHRbZVs0XT1cIlNFUlZJQ0VfWkVVU1wiXT00LHRbZVs1XT1cIlNFUlZJQ0VfWlBVU0hcIl09NSx0W2VbNl09XCJTRVJWSUNFX0wzXCJdPTYsdFtlWzddPVwiU0VSVklDRV9UQUxLTElORVwiXT03LHRbZVs4XT1cIlNFUlZJQ0VfRURVU1VJVEVcIl09OCx0W2VbOV09XCJTRVJWSUNFX1pJTVwiXT05LHRbZVsxMF09XCJTRVJWSUNFX0NsT1VEX1NFVFRJTkdcIl09MTAsdFtlWzExXT1cIlNFUlZJQ0VfWkVVU0hCXCJdPTExLHRbZVsxMl09XCJTRVJWSUNFX1VTRVJfTE9HSUNcIl09MTIsdFtlWzEzXT1cIlNFUlZJQ0VfVU5JRllESVNQQVRDSFwiXT0xMyx0W2VbMTRdPVwiU0VSVklDRV9RVUFMSVRZXCJdPTE0LHRbZVsxNV09XCJTRVJWSUNFX1NFQ1VSSVRZXCJdPTE1LHRbZVsxNl09XCJTRVJWSUNFX0tUVkNQUlwiXT0xNix0W2VbMTddPVwiU0VSVklDRV9TV0lUQ0g0TElWRVJPT01cIl09MTcsdFtlWzE4XT1cIlNFUlZJQ0VfV0VCUlRDX1NJR05BTFwiXT0xOCx0W2VbMTldPVwiU0VSVklDRV9MM19XRUJSVENfU0lHTkFMXCJdPTE5LHRbZVsyMF09XCJTRVJWSUNFX1ZJREVPQ1BSXCJdPTIwLHRbZVsyMV09XCJTRVJWSUNFX0NETlwiXT0yMSx0W2VbMjJdPVwiU0VSVklDRV9DTE9VRFJFQ09SRFwiXT0yMix0W2VbMjNdPVwiU0VSVklDRV9JTk5FUl9FQ0hPXCJdPTIzLHRbZVsyNF09XCJTRVJWSUNFX09VVEVSX0VDSE9cIl09MjQsdFtlWzI1XT1cIlNFUlZJQ0VfTE9DQUxIT1NUX0VDSE9cIl09MjUsdFtlWzI2XT1cIlNFUlZJQ0VfRUNIT1wiXT0yNix0W2VbMjddPVwiU0VSVklDRV9ET0NTRVJWSUNFXCJdPTI3LHRbZVsyOF09XCJTRVJWSUNFX0FVVEhTVlJcIl09MjgsdFtlWzI5XT1cIlNFUlZJQ0VfV0VCTElWRVJPT01cIl09MjksdFtlWzMwXT1cIlNFUlZJQ0VfV0hJVEVCT0FSRFwiXT0zMCx0W2VbMzFdPVwiU0VSVklDRV9NRVRBV09STERcIl09MzEsdH0oKSxlLk1ldGhvZD1mdW5jdGlvbigpe2NvbnN0IGU9e30sdD1PYmplY3QuY3JlYXRlKGUpO3JldHVybiB0W2VbMF09XCJNRVRIT0RfVU5TRVRcIl09MCx0W2VbMV09XCJNRVRIT0RfR0VUXCJdPTEsdFtlWzJdPVwiTUVUSE9EX1BPU1RcIl09Mix0fSgpLGUuU2RrVHlwZT1mdW5jdGlvbigpe2NvbnN0IGU9e30sdD1PYmplY3QuY3JlYXRlKGUpO3JldHVybiB0W2VbMF09XCJTREtfVFlQRV9VTlNFVFwiXT0wLHRbZVsxXT1cIlNES19UWVBFX1FVSUNfTVRDUF9OQVRJVkVcIl09MSx0W2VbMl09XCJTREtfVFlQRV9XU1NfTkFUSVZFXCJdPTIsdFtlWzNdPVwiU0RLX1RZUEVfV1NTX1dFQlwiXT0zLHR9KCksZS5aZWdvY29ublJ1bkVudj1mdW5jdGlvbigpe2NvbnN0IGU9e30sdD1PYmplY3QuY3JlYXRlKGUpO3JldHVybiB0W2VbMF09XCJaRUdPQ09OTl9SVU5fRU5WX1VOU0VUXCJdPTAsdFtlWzFdPVwiWkVHT0NPTk5fUlVOX0VOVl9CUk9XU0VSXCJdPTEsdFtlWzJdPVwiWkVHT0NPTk5fUlVOX0VOVl9BUFBMRVRcIl09Mix0fSgpLGUuQmFja2VuZENvbm5UeXBlPWZ1bmN0aW9uKCl7Y29uc3QgZT17fSx0PU9iamVjdC5jcmVhdGUoZSk7cmV0dXJuIHRbZVswXT1cIkJBQ0tFTkRfQ09OTl9UWVBFX1VOU0VUXCJdPTAsdFtlWzFdPVwiQkFDS0VORF9DT05OX1RZUEVfVENQXCJdPTEsdFtlWzJdPVwiQkFDS0VORF9DT05OX1RZUEVfV1NTXCJdPTIsdH0oKSxlLkNvbm5lY3Rpb25DbG9zZWQ9KEEucHJvdG90eXBlLmNvZGU9MCxBLnByb3RvdHlwZS5tc2c9XCJcIixBLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fG8uY3JlYXRlKCksbnVsbCE9ZS5jb2RlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY29kZVwiKSYmdC51aW50MzIoOCkuaW50MzIoZS5jb2RlKSxudWxsIT1lLm1zZyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1zZ1wiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLm1zZyksdH0sQS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygcnx8KGU9ci5jcmVhdGUoZSkpO2xldCBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBzLnByb3RvX2FjY2Vzc2h1Yi5Db25uZWN0aW9uQ2xvc2VkO2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7c3dpdGNoKGk+Pj4zKXtjYXNlIDE6by5jb2RlPWUuaW50MzIoKTticmVhaztjYXNlIDI6by5tc2c9ZS5zdHJpbmcoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZpKX19cmV0dXJuIG99LEEpLGUuU3RyZWFtQ2xvc2VkPShQLnByb3RvdHlwZS5jb2RlPTAsUC5wcm90b3R5cGUubXNnPVwiXCIsUC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxvLmNyZWF0ZSgpLG51bGwhPWUuY29kZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImNvZGVcIikmJnQudWludDMyKDgpLmludDMyKGUuY29kZSksbnVsbCE9ZS5tc2cmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtc2dcIikmJnQudWludDMyKDE4KS5zdHJpbmcoZS5tc2cpLHR9LFAuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHJ8fChlPXIuY3JlYXRlKGUpKTtsZXQgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcy5wcm90b19hY2Nlc3NodWIuU3RyZWFtQ2xvc2VkO2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7c3dpdGNoKGk+Pj4zKXtjYXNlIDE6by5jb2RlPWUuaW50MzIoKTticmVhaztjYXNlIDI6by5tc2c9ZS5zdHJpbmcoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZpKX19cmV0dXJuIG99LFApLGUuQ2xvc2VDb25uZWN0aW9uPShMLnByb3RvdHlwZS5yZWFzb249MCxMLnByb3RvdHlwZS5tc2c9XCJcIixMLnByb3RvdHlwZS5hY3Rpb249MCxMLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fG8uY3JlYXRlKCksbnVsbCE9ZS5yZWFzb24mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyZWFzb25cIikmJnQudWludDMyKDgpLmludDMyKGUucmVhc29uKSxudWxsIT1lLm1zZyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1zZ1wiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLm1zZyksbnVsbCE9ZS5hY3Rpb24mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJhY3Rpb25cIikmJnQudWludDMyKDI0KS5pbnQzMihlLmFjdGlvbiksdH0sTC5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygcnx8KGU9ci5jcmVhdGUoZSkpO2xldCBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBzLnByb3RvX2FjY2Vzc2h1Yi5DbG9zZUNvbm5lY3Rpb247Zm9yKDtlLnBvczxuOyl7dmFyIGk9ZS51aW50MzIoKTtzd2l0Y2goaT4+PjMpe2Nhc2UgMTpvLnJlYXNvbj1lLmludDMyKCk7YnJlYWs7Y2FzZSAyOm8ubXNnPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAzOm8uYWN0aW9uPWUuaW50MzIoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZpKX19cmV0dXJuIG99LEwuQWN0aW9uPWZ1bmN0aW9uKCl7Y29uc3QgZT17fSx0PU9iamVjdC5jcmVhdGUoZSk7cmV0dXJuIHRbZVswXT1cIkFDVElPTl9SRVNFUlZFRFwiXT0wLHRbZVsxXT1cIkFDVElPTl9ESVNQQVRDSFwiXT0xLHRbZVsyXT1cIkFDVElPTl9SRVRSWVwiXT0yLHRbZVszXT1cIkFDVElPTl9ORVhUX05PREVcIl09Myx0W2VbNF09XCJBQ1RJT05fQUJPUlRcIl09NCx0W2VbNV09XCJBQ1RJT05fTkVYVF9HUk9VUFwiXT01LHR9KCksTCksZS5IVFRQUmVxdWVzdD0oSS5wcm90b3R5cGUudHhpZD1pLkxvbmc/aS5Mb25nLmZyb21CaXRzKDAsMCwhMCk6MCxJLnByb3RvdHlwZS5hcHBpZD0wLEkucHJvdG90eXBlLmJpel90eXBlPTAsSS5wcm90b3R5cGUubW9kZT1cIlwiLEkucHJvdG90eXBlLmlkX25hbWU9XCJcIixJLnByb3RvdHlwZS5yZXFpZD1cIlwiLEkucHJvdG90eXBlLnN0aWNrPVwiXCIsSS5wcm90b3R5cGUuc2VydmljZT1cIlwiLEkucHJvdG90eXBlLmxvY2F0aW9uPVwiXCIsSS5wcm90b3R5cGUubWV0aG9kPVwiXCIsSS5wcm90b3R5cGUuaGVhZGVycz1pLmVtcHR5QXJyYXksSS5wcm90b3R5cGUuYm9keT1pLm5ld0J1ZmZlcihbXSksSS5wcm90b3R5cGUuYWNrPSExLEkucHJvdG90eXBlLm1vZGVfbm89MCxJLnByb3RvdHlwZS5zZXJ2aWNlX25vPTAsSS5wcm90b3R5cGUubWV0aG9kX25vPTAsSS5wcm90b3R5cGUuc2RrX3R5cGU9MCxJLnByb3RvdHlwZS56ZWdvY29ubl9ydW5fZW52PTAsSS5wcm90b3R5cGUuemVnb2Nvbm5fdmVyc2lvbj0wLEkuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxvLmNyZWF0ZSgpLG51bGwhPWUudHhpZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInR4aWRcIikmJnQudWludDMyKDgpLnVpbnQ2NChlLnR4aWQpLG51bGwhPWUuYXBwaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJhcHBpZFwiKSYmdC51aW50MzIoMTYpLnVpbnQzMihlLmFwcGlkKSxudWxsIT1lLmJpel90eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYml6X3R5cGVcIikmJnQudWludDMyKDI0KS51aW50MzIoZS5iaXpfdHlwZSksbnVsbCE9ZS5tb2RlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibW9kZVwiKSYmdC51aW50MzIoMzQpLnN0cmluZyhlLm1vZGUpLG51bGwhPWUuaWRfbmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImlkX25hbWVcIikmJnQudWludDMyKDQyKS5zdHJpbmcoZS5pZF9uYW1lKSxudWxsIT1lLnJlcWlkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVxaWRcIikmJnQudWludDMyKDUwKS5zdHJpbmcoZS5yZXFpZCksbnVsbCE9ZS5zdGljayYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0aWNrXCIpJiZ0LnVpbnQzMig1OCkuc3RyaW5nKGUuc3RpY2spLG51bGwhPWUuc2VydmljZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlcnZpY2VcIikmJnQudWludDMyKDY2KS5zdHJpbmcoZS5zZXJ2aWNlKSxudWxsIT1lLmxvY2F0aW9uJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibG9jYXRpb25cIikmJnQudWludDMyKDc0KS5zdHJpbmcoZS5sb2NhdGlvbiksbnVsbCE9ZS5tZXRob2QmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtZXRob2RcIikmJnQudWludDMyKDgyKS5zdHJpbmcoZS5tZXRob2QpLG51bGwhPWUuaGVhZGVycyYmZS5oZWFkZXJzLmxlbmd0aClmb3IobGV0IG49MDtuPGUuaGVhZGVycy5sZW5ndGg7KytuKXMucHJvdG9fYWNjZXNzaHViLkhUVFBSZXF1ZXN0LkhUVFBIZWFkZXIuZW5jb2RlKGUuaGVhZGVyc1tuXSx0LnVpbnQzMig5MCkuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gbnVsbCE9ZS5ib2R5JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYm9keVwiKSYmdC51aW50MzIoOTgpLmJ5dGVzKGUuYm9keSksbnVsbCE9ZS5hY2smJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJhY2tcIikmJnQudWludDMyKDEwNCkuYm9vbChlLmFjayksbnVsbCE9ZS5tb2RlX25vJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibW9kZV9ub1wiKSYmdC51aW50MzIoMTEyKS5pbnQzMihlLm1vZGVfbm8pLG51bGwhPWUuc2VydmljZV9ubyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlcnZpY2Vfbm9cIikmJnQudWludDMyKDEyMCkuaW50MzIoZS5zZXJ2aWNlX25vKSxudWxsIT1lLm1ldGhvZF9ubyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1ldGhvZF9ub1wiKSYmdC51aW50MzIoMTI4KS5pbnQzMihlLm1ldGhvZF9ubyksbnVsbCE9ZS5zZGtfdHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNka190eXBlXCIpJiZ0LnVpbnQzMigxMzYpLmludDMyKGUuc2RrX3R5cGUpLG51bGwhPWUuemVnb2Nvbm5fcnVuX2VudiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInplZ29jb25uX3J1bl9lbnZcIikmJnQudWludDMyKDE0NCkuaW50MzIoZS56ZWdvY29ubl9ydW5fZW52KSxudWxsIT1lLnplZ29jb25uX3ZlcnNpb24mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ6ZWdvY29ubl92ZXJzaW9uXCIpJiZ0LnVpbnQzMigxNTIpLnVpbnQzMihlLnplZ29jb25uX3ZlcnNpb24pLHR9LEkuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHJ8fChlPXIuY3JlYXRlKGUpKTtsZXQgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcy5wcm90b19hY2Nlc3NodWIuSFRUUFJlcXVlc3Q7Zm9yKDtlLnBvczxuOyl7dmFyIGk9ZS51aW50MzIoKTtzd2l0Y2goaT4+PjMpe2Nhc2UgMTpvLnR4aWQ9ZS51aW50NjQoKTticmVhaztjYXNlIDI6by5hcHBpZD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMzpvLmJpel90eXBlPWUudWludDMyKCk7YnJlYWs7Y2FzZSA0Om8ubW9kZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgNTpvLmlkX25hbWU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDY6by5yZXFpZD1lLnN0cmluZygpO2JyZWFrO2Nhc2UgNzpvLnN0aWNrPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSA4Om8uc2VydmljZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgOTpvLmxvY2F0aW9uPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAxMDpvLm1ldGhvZD1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMTE6by5oZWFkZXJzJiZvLmhlYWRlcnMubGVuZ3RofHwoby5oZWFkZXJzPVtdKSxvLmhlYWRlcnMucHVzaChzLnByb3RvX2FjY2Vzc2h1Yi5IVFRQUmVxdWVzdC5IVFRQSGVhZGVyLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztjYXNlIDEyOm8uYm9keT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAxMzpvLmFjaz1lLmJvb2woKTticmVhaztjYXNlIDE0Om8ubW9kZV9ubz1lLmludDMyKCk7YnJlYWs7Y2FzZSAxNTpvLnNlcnZpY2Vfbm89ZS5pbnQzMigpO2JyZWFrO2Nhc2UgMTY6by5tZXRob2Rfbm89ZS5pbnQzMigpO2JyZWFrO2Nhc2UgMTc6by5zZGtfdHlwZT1lLmludDMyKCk7YnJlYWs7Y2FzZSAxODpvLnplZ29jb25uX3J1bl9lbnY9ZS5pbnQzMigpO2JyZWFrO2Nhc2UgMTk6by56ZWdvY29ubl92ZXJzaW9uPWUudWludDMyKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmaSl9fXJldHVybiBvfSxJLkhUVFBIZWFkZXI9KE0ucHJvdG90eXBlLm5hbWU9XCJcIixNLnByb3RvdHlwZS52YWw9XCJcIixNLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fG8uY3JlYXRlKCksbnVsbCE9ZS5uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibmFtZVwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLm5hbWUpLG51bGwhPWUudmFsJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidmFsXCIpJiZ0LnVpbnQzMigxOCkuc3RyaW5nKGUudmFsKSx0fSxNLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiByfHwoZT1yLmNyZWF0ZShlKSk7bGV0IG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHMucHJvdG9fYWNjZXNzaHViLkhUVFBSZXF1ZXN0LkhUVFBIZWFkZXI7Zm9yKDtlLnBvczxuOyl7dmFyIGk9ZS51aW50MzIoKTtzd2l0Y2goaT4+PjMpe2Nhc2UgMTpvLm5hbWU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDI6by52YWw9ZS5zdHJpbmcoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZpKX19cmV0dXJuIG99LE0pLEkpLGUuSFRUUFJlc3BvbnNlPShOLnByb3RvdHlwZS50eGlkPWkuTG9uZz9pLkxvbmcuZnJvbUJpdHMoMCwwLCEwKTowLE4ucHJvdG90eXBlLmhlYWRlcnM9aS5lbXB0eUFycmF5LE4ucHJvdG90eXBlLnN0YXR1c19jb2RlPTAsTi5wcm90b3R5cGUuYm9keT1pLm5ld0J1ZmZlcihbXSksTi5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fG8uY3JlYXRlKCksbnVsbCE9ZS50eGlkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHhpZFwiKSYmdC51aW50MzIoOCkudWludDY0KGUudHhpZCksbnVsbCE9ZS5oZWFkZXJzJiZlLmhlYWRlcnMubGVuZ3RoKWZvcihsZXQgbj0wO248ZS5oZWFkZXJzLmxlbmd0aDsrK24pcy5wcm90b19hY2Nlc3NodWIuSFRUUFJlcXVlc3QuSFRUUEhlYWRlci5lbmNvZGUoZS5oZWFkZXJzW25dLHQudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiBudWxsIT1lLnN0YXR1c19jb2RlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RhdHVzX2NvZGVcIikmJnQudWludDMyKDI0KS5pbnQzMihlLnN0YXR1c19jb2RlKSxudWxsIT1lLmJvZHkmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJib2R5XCIpJiZ0LnVpbnQzMigzNCkuYnl0ZXMoZS5ib2R5KSx0fSxOLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiByfHwoZT1yLmNyZWF0ZShlKSk7bGV0IG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHMucHJvdG9fYWNjZXNzaHViLkhUVFBSZXNwb25zZTtmb3IoO2UucG9zPG47KXt2YXIgaT1lLnVpbnQzMigpO3N3aXRjaChpPj4+Myl7Y2FzZSAxOm8udHhpZD1lLnVpbnQ2NCgpO2JyZWFrO2Nhc2UgMjpvLmhlYWRlcnMmJm8uaGVhZGVycy5sZW5ndGh8fChvLmhlYWRlcnM9W10pLG8uaGVhZGVycy5wdXNoKHMucHJvdG9fYWNjZXNzaHViLkhUVFBSZXF1ZXN0LkhUVFBIZWFkZXIuZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgMzpvLnN0YXR1c19jb2RlPWUuaW50MzIoKTticmVhaztjYXNlIDQ6by5ib2R5PWUuYnl0ZXMoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZpKX19cmV0dXJuIG99LE4pLGUuSFRUUFJlcXVlc3RBY2s9KHcucHJvdG90eXBlLnR4aWQ9aS5Mb25nP2kuTG9uZy5mcm9tQml0cygwLDAsITApOjAsdy5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxvLmNyZWF0ZSgpLG51bGwhPWUudHhpZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInR4aWRcIikmJnQudWludDMyKDgpLnVpbnQ2NChlLnR4aWQpLHR9LHcuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHJ8fChlPXIuY3JlYXRlKGUpKTtsZXQgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcy5wcm90b19hY2Nlc3NodWIuSFRUUFJlcXVlc3RBY2s7Zm9yKDtlLnBvczxuOyl7dmFyIGk9ZS51aW50MzIoKTtpPj4+Mz09MT9vLnR4aWQ9ZS51aW50NjQoKTplLnNraXBUeXBlKDcmaSl9cmV0dXJuIG99LHcpLGUuSFRUUFJlcXVlc3REcm9wZWQ9KEMucHJvdG90eXBlLnR4aWQ9aS5Mb25nP2kuTG9uZy5mcm9tQml0cygwLDAsITApOjAsQy5wcm90b3R5cGUucmVhc29uPTAsQy5wcm90b3R5cGUubXNnPVwiXCIsQy5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxvLmNyZWF0ZSgpLG51bGwhPWUudHhpZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInR4aWRcIikmJnQudWludDMyKDgpLnVpbnQ2NChlLnR4aWQpLG51bGwhPWUucmVhc29uJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVhc29uXCIpJiZ0LnVpbnQzMigxNikuaW50MzIoZS5yZWFzb24pLG51bGwhPWUubXNnJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibXNnXCIpJiZ0LnVpbnQzMigyNikuc3RyaW5nKGUubXNnKSx0fSxDLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiByfHwoZT1yLmNyZWF0ZShlKSk7bGV0IG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHMucHJvdG9fYWNjZXNzaHViLkhUVFBSZXF1ZXN0RHJvcGVkO2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7c3dpdGNoKGk+Pj4zKXtjYXNlIDE6by50eGlkPWUudWludDY0KCk7YnJlYWs7Y2FzZSAyOm8ucmVhc29uPWUuaW50MzIoKTticmVhaztjYXNlIDM6by5tc2c9ZS5zdHJpbmcoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZpKX19cmV0dXJuIG99LEMpLGUuUHJveHlDb25uZWN0aW9uQ2xvc2VkPShrLnByb3RvdHlwZS5jb2RlPTAsay5wcm90b3R5cGUubXNnPVwiXCIsay5wcm90b3R5cGUuY29ubmVjdGVkPTAsay5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxvLmNyZWF0ZSgpLG51bGwhPWUuY29kZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImNvZGVcIikmJnQudWludDMyKDgpLmludDMyKGUuY29kZSksbnVsbCE9ZS5tc2cmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtc2dcIikmJnQudWludDMyKDE4KS5zdHJpbmcoZS5tc2cpLG51bGwhPWUuY29ubmVjdGVkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY29ubmVjdGVkXCIpJiZ0LnVpbnQzMigyNCkuaW50MzIoZS5jb25uZWN0ZWQpLHR9LGsuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHJ8fChlPXIuY3JlYXRlKGUpKTtsZXQgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcy5wcm90b19hY2Nlc3NodWIuUHJveHlDb25uZWN0aW9uQ2xvc2VkO2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7c3dpdGNoKGk+Pj4zKXtjYXNlIDE6by5jb2RlPWUuaW50MzIoKTticmVhaztjYXNlIDI6by5tc2c9ZS5zdHJpbmcoKTticmVhaztjYXNlIDM6by5jb25uZWN0ZWQ9ZS5pbnQzMigpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JmkpfX1yZXR1cm4gb30sayksZS5IQlJlcXVlc3Q9KFIucHJvdG90eXBlLnR4aWQ9aS5Mb25nP2kuTG9uZy5mcm9tQml0cygwLDAsITApOjAsUi5wcm90b3R5cGUudHM9aS5Mb25nP2kuTG9uZy5mcm9tQml0cygwLDAsITEpOjAsUi5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxvLmNyZWF0ZSgpLG51bGwhPWUudHhpZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInR4aWRcIikmJnQudWludDMyKDgpLnVpbnQ2NChlLnR4aWQpLG51bGwhPWUudHMmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0c1wiKSYmdC51aW50MzIoMTYpLmludDY0KGUudHMpLHR9LFIuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHJ8fChlPXIuY3JlYXRlKGUpKTtsZXQgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcy5wcm90b19hY2Nlc3NodWIuSEJSZXF1ZXN0O2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7c3dpdGNoKGk+Pj4zKXtjYXNlIDE6by50eGlkPWUudWludDY0KCk7YnJlYWs7Y2FzZSAyOm8udHM9ZS5pbnQ2NCgpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JmkpfX1yZXR1cm4gb30sUiksZS5IQlJlc3BvbnNlPShTLnByb3RvdHlwZS50eGlkPWkuTG9uZz9pLkxvbmcuZnJvbUJpdHMoMCwwLCEwKTowLFMucHJvdG90eXBlLnRzPWkuTG9uZz9pLkxvbmcuZnJvbUJpdHMoMCwwLCExKTowLFMuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8by5jcmVhdGUoKSxudWxsIT1lLnR4aWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0eGlkXCIpJiZ0LnVpbnQzMig4KS51aW50NjQoZS50eGlkKSxudWxsIT1lLnRzJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHNcIikmJnQudWludDMyKDE2KS5pbnQ2NChlLnRzKSx0fSxTLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiByfHwoZT1yLmNyZWF0ZShlKSk7bGV0IG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHMucHJvdG9fYWNjZXNzaHViLkhCUmVzcG9uc2U7Zm9yKDtlLnBvczxuOyl7dmFyIGk9ZS51aW50MzIoKTtzd2l0Y2goaT4+PjMpe2Nhc2UgMTpvLnR4aWQ9ZS51aW50NjQoKTticmVhaztjYXNlIDI6by50cz1lLmludDY0KCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmaSl9fXJldHVybiBvfSxTKSxlLkdldENvbmZpZ1JlcXVlc3Q9KFQucHJvdG90eXBlLnR4aWQ9aS5Mb25nP2kuTG9uZy5mcm9tQml0cygwLDAsITApOjAsVC5wcm90b3R5cGUuYXBwaWQ9MCxULnByb3RvdHlwZS5iaXpfdHlwZT0wLFQucHJvdG90eXBlLm1vZGU9XCJcIixULnByb3RvdHlwZS5pZF9uYW1lPVwiXCIsVC5wcm90b3R5cGUucmVxaWQ9XCJcIixULnByb3RvdHlwZS56ZWdvY29ubl92ZXJzaW9uPTAsVC5wcm90b3R5cGUuc2RrX3R5cGU9MCxULnByb3RvdHlwZS56ZWdvY29ubl9ydW5fZW52PTAsVC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxvLmNyZWF0ZSgpLG51bGwhPWUudHhpZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInR4aWRcIikmJnQudWludDMyKDgpLnVpbnQ2NChlLnR4aWQpLG51bGwhPWUuYXBwaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJhcHBpZFwiKSYmdC51aW50MzIoMTYpLnVpbnQzMihlLmFwcGlkKSxudWxsIT1lLmJpel90eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYml6X3R5cGVcIikmJnQudWludDMyKDI0KS51aW50MzIoZS5iaXpfdHlwZSksbnVsbCE9ZS5tb2RlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibW9kZVwiKSYmdC51aW50MzIoMzQpLnN0cmluZyhlLm1vZGUpLG51bGwhPWUuaWRfbmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImlkX25hbWVcIikmJnQudWludDMyKDQyKS5zdHJpbmcoZS5pZF9uYW1lKSxudWxsIT1lLnJlcWlkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVxaWRcIikmJnQudWludDMyKDUwKS5zdHJpbmcoZS5yZXFpZCksbnVsbCE9ZS56ZWdvY29ubl92ZXJzaW9uJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiemVnb2Nvbm5fdmVyc2lvblwiKSYmdC51aW50MzIoNTYpLnVpbnQzMihlLnplZ29jb25uX3ZlcnNpb24pLG51bGwhPWUuc2RrX3R5cGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzZGtfdHlwZVwiKSYmdC51aW50MzIoNjQpLmludDMyKGUuc2RrX3R5cGUpLG51bGwhPWUuemVnb2Nvbm5fcnVuX2VudiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInplZ29jb25uX3J1bl9lbnZcIikmJnQudWludDMyKDcyKS5pbnQzMihlLnplZ29jb25uX3J1bl9lbnYpLHR9LFQuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHJ8fChlPXIuY3JlYXRlKGUpKTtsZXQgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcy5wcm90b19hY2Nlc3NodWIuR2V0Q29uZmlnUmVxdWVzdDtmb3IoO2UucG9zPG47KXt2YXIgaT1lLnVpbnQzMigpO3N3aXRjaChpPj4+Myl7Y2FzZSAxOm8udHhpZD1lLnVpbnQ2NCgpO2JyZWFrO2Nhc2UgMjpvLmFwcGlkPWUudWludDMyKCk7YnJlYWs7Y2FzZSAzOm8uYml6X3R5cGU9ZS51aW50MzIoKTticmVhaztjYXNlIDQ6by5tb2RlPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSA1Om8uaWRfbmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgNjpvLnJlcWlkPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSA3Om8uemVnb2Nvbm5fdmVyc2lvbj1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgODpvLnNka190eXBlPWUuaW50MzIoKTticmVhaztjYXNlIDk6by56ZWdvY29ubl9ydW5fZW52PWUuaW50MzIoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZpKX19cmV0dXJuIG99LFQpLGUuR2V0Q29uZmlnUmVzcG9uc2VEYXRhPShPLnByb3RvdHlwZS50eGlkPWkuTG9uZz9pLkxvbmcuZnJvbUJpdHMoMCwwLCEwKTowLE8ucHJvdG90eXBlLnF1aWNfaGJfaW50ZXJ2YWw9MCxPLnByb3RvdHlwZS5xdWljX2hiX3RpbWVvdXQ9MCxPLnByb3RvdHlwZS5sb2dpY19oYl9pbnRlcnZhbD0wLE8ucHJvdG90eXBlLmxvZ2ljX2hiX3RpbWVvdXQ9MCxPLnByb3RvdHlwZS5wY19lc3RhYmxpc2hfdGltZW91dD0wLE8ucHJvdG90eXBlLnNka19saW5rX2RldGVjdF9pbnRlcnZhbD0wLE8ucHJvdG90eXBlLnNka19saW5rX2RldGVjdF9kdXJhdGlvbj0wLE8ucHJvdG90eXBlLmNsaWVudF9vdXRlcl9pcD1cIlwiLE8uZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8by5jcmVhdGUoKSxudWxsIT1lLnR4aWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0eGlkXCIpJiZ0LnVpbnQzMig4KS51aW50NjQoZS50eGlkKSxudWxsIT1lLnF1aWNfaGJfaW50ZXJ2YWwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJxdWljX2hiX2ludGVydmFsXCIpJiZ0LnVpbnQzMigxNikudWludDMyKGUucXVpY19oYl9pbnRlcnZhbCksbnVsbCE9ZS5xdWljX2hiX3RpbWVvdXQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJxdWljX2hiX3RpbWVvdXRcIikmJnQudWludDMyKDI0KS51aW50MzIoZS5xdWljX2hiX3RpbWVvdXQpLG51bGwhPWUubG9naWNfaGJfaW50ZXJ2YWwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJsb2dpY19oYl9pbnRlcnZhbFwiKSYmdC51aW50MzIoMzIpLnVpbnQzMihlLmxvZ2ljX2hiX2ludGVydmFsKSxudWxsIT1lLmxvZ2ljX2hiX3RpbWVvdXQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJsb2dpY19oYl90aW1lb3V0XCIpJiZ0LnVpbnQzMig0MCkudWludDMyKGUubG9naWNfaGJfdGltZW91dCksbnVsbCE9ZS5wY19lc3RhYmxpc2hfdGltZW91dCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInBjX2VzdGFibGlzaF90aW1lb3V0XCIpJiZ0LnVpbnQzMig0OCkudWludDMyKGUucGNfZXN0YWJsaXNoX3RpbWVvdXQpLG51bGwhPWUuc2RrX2xpbmtfZGV0ZWN0X2ludGVydmFsJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic2RrX2xpbmtfZGV0ZWN0X2ludGVydmFsXCIpJiZ0LnVpbnQzMig1NikudWludDMyKGUuc2RrX2xpbmtfZGV0ZWN0X2ludGVydmFsKSxudWxsIT1lLnNka19saW5rX2RldGVjdF9kdXJhdGlvbiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNka19saW5rX2RldGVjdF9kdXJhdGlvblwiKSYmdC51aW50MzIoNjQpLnVpbnQzMihlLnNka19saW5rX2RldGVjdF9kdXJhdGlvbiksbnVsbCE9ZS5jbGllbnRfb3V0ZXJfaXAmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJjbGllbnRfb3V0ZXJfaXBcIikmJnQudWludDMyKDc0KS5zdHJpbmcoZS5jbGllbnRfb3V0ZXJfaXApLHR9LE8uZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHJ8fChlPXIuY3JlYXRlKGUpKTtsZXQgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcy5wcm90b19hY2Nlc3NodWIuR2V0Q29uZmlnUmVzcG9uc2VEYXRhO2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7c3dpdGNoKGk+Pj4zKXtjYXNlIDE6by50eGlkPWUudWludDY0KCk7YnJlYWs7Y2FzZSAyOm8ucXVpY19oYl9pbnRlcnZhbD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMzpvLnF1aWNfaGJfdGltZW91dD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNDpvLmxvZ2ljX2hiX2ludGVydmFsPWUudWludDMyKCk7YnJlYWs7Y2FzZSA1Om8ubG9naWNfaGJfdGltZW91dD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNjpvLnBjX2VzdGFibGlzaF90aW1lb3V0PWUudWludDMyKCk7YnJlYWs7Y2FzZSA3Om8uc2RrX2xpbmtfZGV0ZWN0X2ludGVydmFsPWUudWludDMyKCk7YnJlYWs7Y2FzZSA4Om8uc2RrX2xpbmtfZGV0ZWN0X2R1cmF0aW9uPWUudWludDMyKCk7YnJlYWs7Y2FzZSA5Om8uY2xpZW50X291dGVyX2lwPWUuc3RyaW5nKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmaSl9fXJldHVybiBvfSxPKSxlLkdldENvbmZpZ1Jlc3BvbnNlPShFLnByb3RvdHlwZS5jb2RlPTAsRS5wcm90b3R5cGUubWVzc2FnZT1cIlwiLEUucHJvdG90eXBlLmRhdGE9bnVsbCxFLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fG8uY3JlYXRlKCksbnVsbCE9ZS5jb2RlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY29kZVwiKSYmdC51aW50MzIoOCkuaW50MzIoZS5jb2RlKSxudWxsIT1lLm1lc3NhZ2UmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtZXNzYWdlXCIpJiZ0LnVpbnQzMigxOCkuc3RyaW5nKGUubWVzc2FnZSksbnVsbCE9ZS5kYXRhJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZGF0YVwiKSYmcy5wcm90b19hY2Nlc3NodWIuR2V0Q29uZmlnUmVzcG9uc2VEYXRhLmVuY29kZShlLmRhdGEsdC51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCksdH0sRS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygcnx8KGU9ci5jcmVhdGUoZSkpO2xldCBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBzLnByb3RvX2FjY2Vzc2h1Yi5HZXRDb25maWdSZXNwb25zZTtmb3IoO2UucG9zPG47KXt2YXIgaT1lLnVpbnQzMigpO3N3aXRjaChpPj4+Myl7Y2FzZSAxOm8uY29kZT1lLmludDMyKCk7YnJlYWs7Y2FzZSAyOm8ubWVzc2FnZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMzpvLmRhdGE9cy5wcm90b19hY2Nlc3NodWIuR2V0Q29uZmlnUmVzcG9uc2VEYXRhLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JmkpfX1yZXR1cm4gb30sRSksZS5QQ1Vwd2FyZE1lc3NhZ2U9KGIucHJvdG90eXBlLnR4aWQ9aS5Mb25nP2kuTG9uZy5mcm9tQml0cygwLDAsITApOjAsYi5wcm90b3R5cGUuYXBwaWQ9MCxiLnByb3RvdHlwZS5iaXpfdHlwZT0wLGIucHJvdG90eXBlLm1vZGVfbm89MCxiLnByb3RvdHlwZS5pZF9uYW1lPVwiXCIsYi5wcm90b3R5cGUuc2VydmljZV9ubz0wLGIucHJvdG90eXBlLmFjaz0hMSxiLnByb3RvdHlwZS5wYXlsb2FkPWkubmV3QnVmZmVyKFtdKSxiLnByb3RvdHlwZS5zZGtfdHlwZT0wLGIucHJvdG90eXBlLndzc19tZXNzYWdlX3R5cGU9MCxiLnByb3RvdHlwZS53c3NfcGF0aD1cIlwiLGIucHJvdG90eXBlLndzc19yYXdfcXVlcnk9XCJcIixiLnByb3RvdHlwZS56ZWdvY29ubl92ZXJzaW9uPTAsYi5wcm90b3R5cGUuemVnb2Nvbm5fcnVuX2Vudj0wLGIucHJvdG90eXBlLmJhY2tlbmRfY29ubl90eXBlPTAsYi5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxvLmNyZWF0ZSgpLG51bGwhPWUudHhpZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInR4aWRcIikmJnQudWludDMyKDgpLnVpbnQ2NChlLnR4aWQpLG51bGwhPWUuYXBwaWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJhcHBpZFwiKSYmdC51aW50MzIoMTYpLnVpbnQzMihlLmFwcGlkKSxudWxsIT1lLmJpel90eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYml6X3R5cGVcIikmJnQudWludDMyKDI0KS51aW50MzIoZS5iaXpfdHlwZSksbnVsbCE9ZS5tb2RlX25vJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibW9kZV9ub1wiKSYmdC51aW50MzIoMzIpLmludDMyKGUubW9kZV9ubyksbnVsbCE9ZS5pZF9uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiaWRfbmFtZVwiKSYmdC51aW50MzIoNDIpLnN0cmluZyhlLmlkX25hbWUpLG51bGwhPWUuc2VydmljZV9ubyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlcnZpY2Vfbm9cIikmJnQudWludDMyKDQ4KS5pbnQzMihlLnNlcnZpY2Vfbm8pLG51bGwhPWUuYWNrJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYWNrXCIpJiZ0LnVpbnQzMig1NikuYm9vbChlLmFjayksbnVsbCE9ZS5wYXlsb2FkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicGF5bG9hZFwiKSYmdC51aW50MzIoNjYpLmJ5dGVzKGUucGF5bG9hZCksbnVsbCE9ZS5zZGtfdHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNka190eXBlXCIpJiZ0LnVpbnQzMig3MikuaW50MzIoZS5zZGtfdHlwZSksbnVsbCE9ZS53c3NfbWVzc2FnZV90eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwid3NzX21lc3NhZ2VfdHlwZVwiKSYmdC51aW50MzIoODApLnVpbnQzMihlLndzc19tZXNzYWdlX3R5cGUpLG51bGwhPWUud3NzX3BhdGgmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ3c3NfcGF0aFwiKSYmdC51aW50MzIoOTApLnN0cmluZyhlLndzc19wYXRoKSxudWxsIT1lLndzc19yYXdfcXVlcnkmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ3c3NfcmF3X3F1ZXJ5XCIpJiZ0LnVpbnQzMig5OCkuc3RyaW5nKGUud3NzX3Jhd19xdWVyeSksbnVsbCE9ZS56ZWdvY29ubl92ZXJzaW9uJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiemVnb2Nvbm5fdmVyc2lvblwiKSYmdC51aW50MzIoMTA0KS51aW50MzIoZS56ZWdvY29ubl92ZXJzaW9uKSxudWxsIT1lLnplZ29jb25uX3J1bl9lbnYmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ6ZWdvY29ubl9ydW5fZW52XCIpJiZ0LnVpbnQzMigxMTIpLmludDMyKGUuemVnb2Nvbm5fcnVuX2VudiksbnVsbCE9ZS5iYWNrZW5kX2Nvbm5fdHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImJhY2tlbmRfY29ubl90eXBlXCIpJiZ0LnVpbnQzMigxMjApLmludDMyKGUuYmFja2VuZF9jb25uX3R5cGUpLHR9LGIuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHJ8fChlPXIuY3JlYXRlKGUpKTtsZXQgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcy5wcm90b19hY2Nlc3NodWIuUENVcHdhcmRNZXNzYWdlO2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7c3dpdGNoKGk+Pj4zKXtjYXNlIDE6by50eGlkPWUudWludDY0KCk7YnJlYWs7Y2FzZSAyOm8uYXBwaWQ9ZS51aW50MzIoKTticmVhaztjYXNlIDM6by5iaXpfdHlwZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNDpvLm1vZGVfbm89ZS5pbnQzMigpO2JyZWFrO2Nhc2UgNTpvLmlkX25hbWU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDY6by5zZXJ2aWNlX25vPWUuaW50MzIoKTticmVhaztjYXNlIDc6by5hY2s9ZS5ib29sKCk7YnJlYWs7Y2FzZSA4Om8ucGF5bG9hZD1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSA5Om8uc2RrX3R5cGU9ZS5pbnQzMigpO2JyZWFrO2Nhc2UgMTA6by53c3NfbWVzc2FnZV90eXBlPWUudWludDMyKCk7YnJlYWs7Y2FzZSAxMTpvLndzc19wYXRoPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAxMjpvLndzc19yYXdfcXVlcnk9ZS5zdHJpbmcoKTticmVhaztjYXNlIDEzOm8uemVnb2Nvbm5fdmVyc2lvbj1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMTQ6by56ZWdvY29ubl9ydW5fZW52PWUuaW50MzIoKTticmVhaztjYXNlIDE1Om8uYmFja2VuZF9jb25uX3R5cGU9ZS5pbnQzMigpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JmkpfX1yZXR1cm4gb30sYiksZS5QQ1Vwd2FyZE1lc3NhZ2VBY2s9KHYucHJvdG90eXBlLnR4aWQ9aS5Mb25nP2kuTG9uZy5mcm9tQml0cygwLDAsITApOjAsdi5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxvLmNyZWF0ZSgpLG51bGwhPWUudHhpZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInR4aWRcIikmJnQudWludDMyKDgpLnVpbnQ2NChlLnR4aWQpLHR9LHYuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHJ8fChlPXIuY3JlYXRlKGUpKTtsZXQgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcy5wcm90b19hY2Nlc3NodWIuUENVcHdhcmRNZXNzYWdlQWNrO2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7aT4+PjM9PTE/by50eGlkPWUudWludDY0KCk6ZS5za2lwVHlwZSg3JmkpfXJldHVybiBvfSx2KSxlLlBDRXN0YWJsaXNoZWQ9KHkucHJvdG90eXBlLmVsYXBzZT0wLHkucHJvdG90eXBlLmZyb209MCx5LmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fG8uY3JlYXRlKCksbnVsbCE9ZS5lbGFwc2UmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJlbGFwc2VcIikmJnQudWludDMyKDgpLnVpbnQzMihlLmVsYXBzZSksbnVsbCE9ZS5mcm9tJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZnJvbVwiKSYmdC51aW50MzIoMTYpLnVpbnQzMihlLmZyb20pLHR9LHkuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHJ8fChlPXIuY3JlYXRlKGUpKTtsZXQgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcy5wcm90b19hY2Nlc3NodWIuUENFc3RhYmxpc2hlZDtmb3IoO2UucG9zPG47KXt2YXIgaT1lLnVpbnQzMigpO3N3aXRjaChpPj4+Myl7Y2FzZSAxOm8uZWxhcHNlPWUudWludDMyKCk7YnJlYWs7Y2FzZSAyOm8uZnJvbT1lLnVpbnQzMigpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JmkpfX1yZXR1cm4gb30seSksZS5QQ0Jyb2tlbj0obS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8by5jcmVhdGUoKX0sbS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygcnx8KGU9ci5jcmVhdGUoZSkpO3ZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdDtmb3IodD1uZXcgcy5wcm90b19hY2Nlc3NodWIuUENCcm9rZW47ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7ZS5za2lwVHlwZSg3Jm8pfXJldHVybiB0fSxtKSxlLlBDRG93bndhcmRNZXNzYWdlPShnLnByb3RvdHlwZS5wYXlsb2FkPWkubmV3QnVmZmVyKFtdKSxnLnByb3RvdHlwZS53c3NfbWVzc2FnZV90eXBlPTAsZy5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxvLmNyZWF0ZSgpLG51bGwhPWUucGF5bG9hZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInBheWxvYWRcIikmJnQudWludDMyKDEwKS5ieXRlcyhlLnBheWxvYWQpLG51bGwhPWUud3NzX21lc3NhZ2VfdHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIndzc19tZXNzYWdlX3R5cGVcIikmJnQudWludDMyKDE2KS51aW50MzIoZS53c3NfbWVzc2FnZV90eXBlKSx0fSxnLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiByfHwoZT1yLmNyZWF0ZShlKSk7bGV0IG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHMucHJvdG9fYWNjZXNzaHViLlBDRG93bndhcmRNZXNzYWdlO2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7c3dpdGNoKGk+Pj4zKXtjYXNlIDE6by5wYXlsb2FkPWUuYnl0ZXMoKTticmVhaztjYXNlIDI6by53c3NfbWVzc2FnZV90eXBlPWUudWludDMyKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmaSl9fXJldHVybiBvfSxnKSxlLlJlZGlyZWN0PShmLnByb3RvdHlwZS5yYW5kPVwiXCIsZi5wcm90b3R5cGUuc2VjcmV0PVwiXCIsZi5wcm90b3R5cGUuZ3JvdXBzPWkuZW1wdHlBcnJheSxmLnByb3RvdHlwZS5vcHRfcG9ydHM9aS5lbXB0eUFycmF5LGYucHJvdG90eXBlLndzc19ncm91cHM9aS5lbXB0eUFycmF5LGYuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxvLmNyZWF0ZSgpLG51bGwhPWUucmFuZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJhbmRcIikmJnQudWludDMyKDEwKS5zdHJpbmcoZS5yYW5kKSxudWxsIT1lLnNlY3JldCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlY3JldFwiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLnNlY3JldCksbnVsbCE9ZS5ncm91cHMmJmUuZ3JvdXBzLmxlbmd0aClmb3IobGV0IG49MDtuPGUuZ3JvdXBzLmxlbmd0aDsrK24pcy5wcm90b19hY2Nlc3NodWIuQWNjZXNzaHViRGlzcGF0Y2hHcm91cC5lbmNvZGUoZS5ncm91cHNbbl0sdC51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZS5vcHRfcG9ydHMmJmUub3B0X3BvcnRzLmxlbmd0aClmb3IobGV0IG49MDtuPGUub3B0X3BvcnRzLmxlbmd0aDsrK24pdC51aW50MzIoMzIpLnVpbnQzMihlLm9wdF9wb3J0c1tuXSk7aWYobnVsbCE9ZS53c3NfZ3JvdXBzJiZlLndzc19ncm91cHMubGVuZ3RoKWZvcihsZXQgbj0wO248ZS53c3NfZ3JvdXBzLmxlbmd0aDsrK24pcy5wcm90b19hY2Nlc3NodWIuV3NzQWNjZXNzaHViRGlzcGF0Y2hHcm91cC5lbmNvZGUoZS53c3NfZ3JvdXBzW25dLHQudWludDMyKDQyKS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxmLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiByfHwoZT1yLmNyZWF0ZShlKSk7bGV0IG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHMucHJvdG9fYWNjZXNzaHViLlJlZGlyZWN0O2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7c3dpdGNoKGk+Pj4zKXtjYXNlIDE6by5yYW5kPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAyOm8uc2VjcmV0PWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAzOm8uZ3JvdXBzJiZvLmdyb3Vwcy5sZW5ndGh8fChvLmdyb3Vwcz1bXSksby5ncm91cHMucHVzaChzLnByb3RvX2FjY2Vzc2h1Yi5BY2Nlc3NodWJEaXNwYXRjaEdyb3VwLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztjYXNlIDQ6aWYoby5vcHRfcG9ydHMmJm8ub3B0X3BvcnRzLmxlbmd0aHx8KG8ub3B0X3BvcnRzPVtdKSwyPT0oNyZpKSlmb3IodmFyIGE9ZS51aW50MzIoKStlLnBvcztlLnBvczxhOylvLm9wdF9wb3J0cy5wdXNoKGUudWludDMyKCkpO2Vsc2Ugby5vcHRfcG9ydHMucHVzaChlLnVpbnQzMigpKTticmVhaztjYXNlIDU6by53c3NfZ3JvdXBzJiZvLndzc19ncm91cHMubGVuZ3RofHwoby53c3NfZ3JvdXBzPVtdKSxvLndzc19ncm91cHMucHVzaChzLnByb3RvX2FjY2Vzc2h1Yi5Xc3NBY2Nlc3NodWJEaXNwYXRjaEdyb3VwLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZpKX19cmV0dXJuIG99LGYpLGUuR2V0QXBwQ29uZmlnUmVxdWVzdD0oXy5wcm90b3R5cGUudHhpZD1pLkxvbmc/aS5Mb25nLmZyb21CaXRzKDAsMCwhMCk6MCxfLnByb3RvdHlwZS5hcHBpZD0wLF8ucHJvdG90eXBlLmJpel90eXBlPTAsXy5wcm90b3R5cGUubW9kZV9ubz0wLF8ucHJvdG90eXBlLmlkX25hbWU9XCJcIixfLnByb3RvdHlwZS5jb25maWdfa2V5PVwiXCIsXy5wcm90b3R5cGUudHM9aS5Mb25nP2kuTG9uZy5mcm9tQml0cygwLDAsITApOjAsXy5wcm90b3R5cGUuc2lnbmF0dXJlPWkubmV3QnVmZmVyKFtdKSxfLnByb3RvdHlwZS5saXRlX3NpZ249XCJcIixfLnByb3RvdHlwZS50b2tlbj1cIlwiLF8ucHJvdG90eXBlLnNka190eXBlPTAsXy5wcm90b3R5cGUuemVnb2Nvbm5fdmVyc2lvbj0wLF8ucHJvdG90eXBlLnplZ29jb25uX3J1bl9lbnY9MCxfLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fG8uY3JlYXRlKCksbnVsbCE9ZS50eGlkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHhpZFwiKSYmdC51aW50MzIoOCkudWludDY0KGUudHhpZCksbnVsbCE9ZS5hcHBpZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImFwcGlkXCIpJiZ0LnVpbnQzMigxNikudWludDMyKGUuYXBwaWQpLG51bGwhPWUuYml6X3R5cGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJiaXpfdHlwZVwiKSYmdC51aW50MzIoMjQpLnVpbnQzMihlLmJpel90eXBlKSxudWxsIT1lLm1vZGVfbm8mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtb2RlX25vXCIpJiZ0LnVpbnQzMigzMikuaW50MzIoZS5tb2RlX25vKSxudWxsIT1lLmlkX25hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJpZF9uYW1lXCIpJiZ0LnVpbnQzMig0Mikuc3RyaW5nKGUuaWRfbmFtZSksbnVsbCE9ZS5jb25maWdfa2V5JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY29uZmlnX2tleVwiKSYmdC51aW50MzIoNTApLnN0cmluZyhlLmNvbmZpZ19rZXkpLG51bGwhPWUudHMmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0c1wiKSYmdC51aW50MzIoNTYpLnVpbnQ2NChlLnRzKSxudWxsIT1lLnNpZ25hdHVyZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNpZ25hdHVyZVwiKSYmdC51aW50MzIoNjYpLmJ5dGVzKGUuc2lnbmF0dXJlKSxudWxsIT1lLmxpdGVfc2lnbiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImxpdGVfc2lnblwiKSYmdC51aW50MzIoNzQpLnN0cmluZyhlLmxpdGVfc2lnbiksbnVsbCE9ZS50b2tlbiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRva2VuXCIpJiZ0LnVpbnQzMig4Mikuc3RyaW5nKGUudG9rZW4pLG51bGwhPWUuc2RrX3R5cGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzZGtfdHlwZVwiKSYmdC51aW50MzIoODgpLmludDMyKGUuc2RrX3R5cGUpLG51bGwhPWUuemVnb2Nvbm5fdmVyc2lvbiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInplZ29jb25uX3ZlcnNpb25cIikmJnQudWludDMyKDk2KS51aW50MzIoZS56ZWdvY29ubl92ZXJzaW9uKSxudWxsIT1lLnplZ29jb25uX3J1bl9lbnYmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ6ZWdvY29ubl9ydW5fZW52XCIpJiZ0LnVpbnQzMigxMDQpLmludDMyKGUuemVnb2Nvbm5fcnVuX2VudiksdH0sXy5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygcnx8KGU9ci5jcmVhdGUoZSkpO2xldCBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBzLnByb3RvX2FjY2Vzc2h1Yi5HZXRBcHBDb25maWdSZXF1ZXN0O2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7c3dpdGNoKGk+Pj4zKXtjYXNlIDE6by50eGlkPWUudWludDY0KCk7YnJlYWs7Y2FzZSAyOm8uYXBwaWQ9ZS51aW50MzIoKTticmVhaztjYXNlIDM6by5iaXpfdHlwZT1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgNDpvLm1vZGVfbm89ZS5pbnQzMigpO2JyZWFrO2Nhc2UgNTpvLmlkX25hbWU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDY6by5jb25maWdfa2V5PWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSA3Om8udHM9ZS51aW50NjQoKTticmVhaztjYXNlIDg6by5zaWduYXR1cmU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgOTpvLmxpdGVfc2lnbj1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMTA6by50b2tlbj1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMTE6by5zZGtfdHlwZT1lLmludDMyKCk7YnJlYWs7Y2FzZSAxMjpvLnplZ29jb25uX3ZlcnNpb249ZS51aW50MzIoKTticmVhaztjYXNlIDEzOm8uemVnb2Nvbm5fcnVuX2Vudj1lLmludDMyKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmaSl9fXJldHVybiBvfSxfKSxlLkdldEFwcENvbmZpZ1Jlc3BvbnNlRGF0YT0oZC5wcm90b3R5cGUudHhpZD1pLkxvbmc/aS5Mb25nLmZyb21CaXRzKDAsMCwhMCk6MCxkLnByb3RvdHlwZS5kYXRhPWkubmV3QnVmZmVyKFtdKSxkLnByb3RvdHlwZS50cz1pLkxvbmc/aS5Mb25nLmZyb21CaXRzKDAsMCwhMCk6MCxkLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fG8uY3JlYXRlKCksbnVsbCE9ZS50eGlkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHhpZFwiKSYmdC51aW50MzIoOCkudWludDY0KGUudHhpZCksbnVsbCE9ZS5kYXRhJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZGF0YVwiKSYmdC51aW50MzIoMTgpLmJ5dGVzKGUuZGF0YSksbnVsbCE9ZS50cyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRzXCIpJiZ0LnVpbnQzMigyNCkudWludDY0KGUudHMpLHR9LGQuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHJ8fChlPXIuY3JlYXRlKGUpKTtsZXQgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcy5wcm90b19hY2Nlc3NodWIuR2V0QXBwQ29uZmlnUmVzcG9uc2VEYXRhO2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7c3dpdGNoKGk+Pj4zKXtjYXNlIDE6by50eGlkPWUudWludDY0KCk7YnJlYWs7Y2FzZSAyOm8uZGF0YT1lLmJ5dGVzKCk7YnJlYWs7Y2FzZSAzOm8udHM9ZS51aW50NjQoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZpKX19cmV0dXJuIG99LGQpLGUuR2V0QXBwQ29uZmlnUmVzcG9uc2U9KHAucHJvdG90eXBlLmNvZGU9MCxwLnByb3RvdHlwZS5tZXNzYWdlPVwiXCIscC5wcm90b3R5cGUuZGF0YT1udWxsLHAuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8by5jcmVhdGUoKSxudWxsIT1lLmNvZGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJjb2RlXCIpJiZ0LnVpbnQzMig4KS5pbnQzMihlLmNvZGUpLG51bGwhPWUubWVzc2FnZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1lc3NhZ2VcIikmJnQudWludDMyKDE4KS5zdHJpbmcoZS5tZXNzYWdlKSxudWxsIT1lLmRhdGEmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJkYXRhXCIpJiZzLnByb3RvX2FjY2Vzc2h1Yi5HZXRBcHBDb25maWdSZXNwb25zZURhdGEuZW5jb2RlKGUuZGF0YSx0LnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKSx0fSxwLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiByfHwoZT1yLmNyZWF0ZShlKSk7bGV0IG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHMucHJvdG9fYWNjZXNzaHViLkdldEFwcENvbmZpZ1Jlc3BvbnNlO2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7c3dpdGNoKGk+Pj4zKXtjYXNlIDE6by5jb2RlPWUuaW50MzIoKTticmVhaztjYXNlIDI6by5tZXNzYWdlPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAzOm8uZGF0YT1zLnByb3RvX2FjY2Vzc2h1Yi5HZXRBcHBDb25maWdSZXNwb25zZURhdGEuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmaSl9fXJldHVybiBvfSxwKSxlLlB1c2hBcHBDb25maWc9KGgucHJvdG90eXBlLmNvbmZpZ19rZXk9XCJcIixoLnByb3RvdHlwZS5kYXRhPWkubmV3QnVmZmVyKFtdKSxoLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fG8uY3JlYXRlKCksbnVsbCE9ZS5jb25maWdfa2V5JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY29uZmlnX2tleVwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLmNvbmZpZ19rZXkpLG51bGwhPWUuZGF0YSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImRhdGFcIikmJnQudWludDMyKDE4KS5ieXRlcyhlLmRhdGEpLHR9LGguZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHJ8fChlPXIuY3JlYXRlKGUpKTtsZXQgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcy5wcm90b19hY2Nlc3NodWIuUHVzaEFwcENvbmZpZztmb3IoO2UucG9zPG47KXt2YXIgaT1lLnVpbnQzMigpO3N3aXRjaChpPj4+Myl7Y2FzZSAxOm8uY29uZmlnX2tleT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLmRhdGE9ZS5ieXRlcygpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JmkpfX1yZXR1cm4gb30saCksZS5BY2Nlc3NodWJEaXNwYXRjaFJlcXVlc3Q9KGwucHJvdG90eXBlLnR4aWQ9aS5Mb25nP2kuTG9uZy5mcm9tQml0cygwLDAsITApOjAsbC5wcm90b3R5cGUuYXBwaWQ9MCxsLnByb3RvdHlwZS5iaXpfdHlwZT0wLGwucHJvdG90eXBlLm1vZGVfbm89MCxsLnByb3RvdHlwZS5pZF9uYW1lPVwiXCIsbC5wcm90b3R5cGUuc2RrX3R5cGU9MCxsLnByb3RvdHlwZS56ZWdvY29ubl92ZXJzaW9uPTAsbC5wcm90b3R5cGUuemVnb2Nvbm5fcnVuX2Vudj0wLGwuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8by5jcmVhdGUoKSxudWxsIT1lLnR4aWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0eGlkXCIpJiZ0LnVpbnQzMig4KS51aW50NjQoZS50eGlkKSxudWxsIT1lLmFwcGlkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYXBwaWRcIikmJnQudWludDMyKDE2KS51aW50MzIoZS5hcHBpZCksbnVsbCE9ZS5iaXpfdHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImJpel90eXBlXCIpJiZ0LnVpbnQzMigyNCkudWludDMyKGUuYml6X3R5cGUpLG51bGwhPWUubW9kZV9ubyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1vZGVfbm9cIikmJnQudWludDMyKDMyKS5pbnQzMihlLm1vZGVfbm8pLG51bGwhPWUuaWRfbmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImlkX25hbWVcIikmJnQudWludDMyKDQyKS5zdHJpbmcoZS5pZF9uYW1lKSxudWxsIT1lLnNka190eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic2RrX3R5cGVcIikmJnQudWludDMyKDQ4KS5pbnQzMihlLnNka190eXBlKSxudWxsIT1lLnplZ29jb25uX3ZlcnNpb24mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ6ZWdvY29ubl92ZXJzaW9uXCIpJiZ0LnVpbnQzMig1NikudWludDMyKGUuemVnb2Nvbm5fdmVyc2lvbiksbnVsbCE9ZS56ZWdvY29ubl9ydW5fZW52JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiemVnb2Nvbm5fcnVuX2VudlwiKSYmdC51aW50MzIoNjQpLmludDMyKGUuemVnb2Nvbm5fcnVuX2VudiksdH0sbC5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygcnx8KGU9ci5jcmVhdGUoZSkpO2xldCBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBzLnByb3RvX2FjY2Vzc2h1Yi5BY2Nlc3NodWJEaXNwYXRjaFJlcXVlc3Q7Zm9yKDtlLnBvczxuOyl7dmFyIGk9ZS51aW50MzIoKTtzd2l0Y2goaT4+PjMpe2Nhc2UgMTpvLnR4aWQ9ZS51aW50NjQoKTticmVhaztjYXNlIDI6by5hcHBpZD1lLnVpbnQzMigpO2JyZWFrO2Nhc2UgMzpvLmJpel90eXBlPWUudWludDMyKCk7YnJlYWs7Y2FzZSA0Om8ubW9kZV9ubz1lLmludDMyKCk7YnJlYWs7Y2FzZSA1Om8uaWRfbmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgNjpvLnNka190eXBlPWUuaW50MzIoKTticmVhaztjYXNlIDc6by56ZWdvY29ubl92ZXJzaW9uPWUudWludDMyKCk7YnJlYWs7Y2FzZSA4Om8uemVnb2Nvbm5fcnVuX2Vudj1lLmludDMyKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmaSl9fXJldHVybiBvfSxsKSxlLkFjY2Vzc2h1YkRpc3BhdGNoR3JvdXA9KHUucHJvdG90eXBlLmdyb3VwPVwiXCIsdS5wcm90b3R5cGUucXVpY19ub2Rlcz1pLmVtcHR5QXJyYXksdS5wcm90b3R5cGUubXRjcF9ub2Rlcz1pLmVtcHR5QXJyYXksdS5wcm90b3R5cGUud3NzX25vZGVzPWkuZW1wdHlBcnJheSx1LmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8by5jcmVhdGUoKSxudWxsIT1lLmdyb3VwJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZ3JvdXBcIikmJnQudWludDMyKDEwKS5zdHJpbmcoZS5ncm91cCksbnVsbCE9ZS5xdWljX25vZGVzJiZlLnF1aWNfbm9kZXMubGVuZ3RoKWZvcihsZXQgbj0wO248ZS5xdWljX25vZGVzLmxlbmd0aDsrK24pdC51aW50MzIoMTgpLnN0cmluZyhlLnF1aWNfbm9kZXNbbl0pO2lmKG51bGwhPWUubXRjcF9ub2RlcyYmZS5tdGNwX25vZGVzLmxlbmd0aClmb3IobGV0IG49MDtuPGUubXRjcF9ub2Rlcy5sZW5ndGg7KytuKXQudWludDMyKDI2KS5zdHJpbmcoZS5tdGNwX25vZGVzW25dKTtpZihudWxsIT1lLndzc19ub2RlcyYmZS53c3Nfbm9kZXMubGVuZ3RoKWZvcihsZXQgbj0wO248ZS53c3Nfbm9kZXMubGVuZ3RoOysrbil0LnVpbnQzMigzNCkuc3RyaW5nKGUud3NzX25vZGVzW25dKTtyZXR1cm4gdH0sdS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygcnx8KGU9ci5jcmVhdGUoZSkpO2xldCBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBzLnByb3RvX2FjY2Vzc2h1Yi5BY2Nlc3NodWJEaXNwYXRjaEdyb3VwO2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7c3dpdGNoKGk+Pj4zKXtjYXNlIDE6by5ncm91cD1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLnF1aWNfbm9kZXMmJm8ucXVpY19ub2Rlcy5sZW5ndGh8fChvLnF1aWNfbm9kZXM9W10pLG8ucXVpY19ub2Rlcy5wdXNoKGUuc3RyaW5nKCkpO2JyZWFrO2Nhc2UgMzpvLm10Y3Bfbm9kZXMmJm8ubXRjcF9ub2Rlcy5sZW5ndGh8fChvLm10Y3Bfbm9kZXM9W10pLG8ubXRjcF9ub2Rlcy5wdXNoKGUuc3RyaW5nKCkpO2JyZWFrO2Nhc2UgNDpvLndzc19ub2RlcyYmby53c3Nfbm9kZXMubGVuZ3RofHwoby53c3Nfbm9kZXM9W10pLG8ud3NzX25vZGVzLnB1c2goZS5zdHJpbmcoKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmaSl9fXJldHVybiBvfSx1KSxlLldzc0FjY2Vzc2h1YkRpc3BhdGNoR3JvdXA9KGMucHJvdG90eXBlLmdyb3VwPVwiXCIsYy5wcm90b3R5cGUuaG9zdD1cIlwiLGMucHJvdG90eXBlLm1haW5fZG9tYWluPVwiXCIsYy5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxvLmNyZWF0ZSgpLG51bGwhPWUuZ3JvdXAmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJncm91cFwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLmdyb3VwKSxudWxsIT1lLmhvc3QmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJob3N0XCIpJiZ0LnVpbnQzMigxOCkuc3RyaW5nKGUuaG9zdCksbnVsbCE9ZS5tYWluX2RvbWFpbiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1haW5fZG9tYWluXCIpJiZ0LnVpbnQzMigyNikuc3RyaW5nKGUubWFpbl9kb21haW4pLHR9LGMuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHJ8fChlPXIuY3JlYXRlKGUpKTtsZXQgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcy5wcm90b19hY2Nlc3NodWIuV3NzQWNjZXNzaHViRGlzcGF0Y2hHcm91cDtmb3IoO2UucG9zPG47KXt2YXIgaT1lLnVpbnQzMigpO3N3aXRjaChpPj4+Myl7Y2FzZSAxOm8uZ3JvdXA9ZS5zdHJpbmcoKTticmVhaztjYXNlIDI6by5ob3N0PWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAzOm8ubWFpbl9kb21haW49ZS5zdHJpbmcoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZpKX19cmV0dXJuIG99LGMpLGUuQWNjZXNzaHViRGlzcGF0Y2hSZXNwb25zZURhdGE9KGEucHJvdG90eXBlLnR4aWQ9aS5Mb25nP2kuTG9uZy5mcm9tQml0cygwLDAsITApOjAsYS5wcm90b3R5cGUucmFuZD1cIlwiLGEucHJvdG90eXBlLnNlY3JldD1cIlwiLGEucHJvdG90eXBlLmdyb3Vwcz1pLmVtcHR5QXJyYXksYS5wcm90b3R5cGUub3B0X3BvcnRzPWkuZW1wdHlBcnJheSxhLnByb3RvdHlwZS53c3NfZ3JvdXBzPWkuZW1wdHlBcnJheSxhLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8by5jcmVhdGUoKSxudWxsIT1lLnR4aWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0eGlkXCIpJiZ0LnVpbnQzMig4KS51aW50NjQoZS50eGlkKSxudWxsIT1lLnJhbmQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyYW5kXCIpJiZ0LnVpbnQzMigxOCkuc3RyaW5nKGUucmFuZCksbnVsbCE9ZS5zZWNyZXQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzZWNyZXRcIikmJnQudWludDMyKDI2KS5zdHJpbmcoZS5zZWNyZXQpLG51bGwhPWUuZ3JvdXBzJiZlLmdyb3Vwcy5sZW5ndGgpZm9yKGxldCBuPTA7bjxlLmdyb3Vwcy5sZW5ndGg7KytuKXMucHJvdG9fYWNjZXNzaHViLkFjY2Vzc2h1YkRpc3BhdGNoR3JvdXAuZW5jb2RlKGUuZ3JvdXBzW25dLHQudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpO2lmKG51bGwhPWUub3B0X3BvcnRzJiZlLm9wdF9wb3J0cy5sZW5ndGgpZm9yKGxldCBuPTA7bjxlLm9wdF9wb3J0cy5sZW5ndGg7KytuKXQudWludDMyKDQwKS51aW50MzIoZS5vcHRfcG9ydHNbbl0pO2lmKG51bGwhPWUud3NzX2dyb3VwcyYmZS53c3NfZ3JvdXBzLmxlbmd0aClmb3IobGV0IG49MDtuPGUud3NzX2dyb3Vwcy5sZW5ndGg7KytuKXMucHJvdG9fYWNjZXNzaHViLldzc0FjY2Vzc2h1YkRpc3BhdGNoR3JvdXAuZW5jb2RlKGUud3NzX2dyb3Vwc1tuXSx0LnVpbnQzMig1MCkuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gdH0sYS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygcnx8KGU9ci5jcmVhdGUoZSkpO2xldCBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBzLnByb3RvX2FjY2Vzc2h1Yi5BY2Nlc3NodWJEaXNwYXRjaFJlc3BvbnNlRGF0YTtmb3IoO2UucG9zPG47KXt2YXIgaT1lLnVpbnQzMigpO3N3aXRjaChpPj4+Myl7Y2FzZSAxOm8udHhpZD1lLnVpbnQ2NCgpO2JyZWFrO2Nhc2UgMjpvLnJhbmQ9ZS5zdHJpbmcoKTticmVhaztjYXNlIDM6by5zZWNyZXQ9ZS5zdHJpbmcoKTticmVhaztjYXNlIDQ6by5ncm91cHMmJm8uZ3JvdXBzLmxlbmd0aHx8KG8uZ3JvdXBzPVtdKSxvLmdyb3Vwcy5wdXNoKHMucHJvdG9fYWNjZXNzaHViLkFjY2Vzc2h1YkRpc3BhdGNoR3JvdXAuZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgNTppZihvLm9wdF9wb3J0cyYmby5vcHRfcG9ydHMubGVuZ3RofHwoby5vcHRfcG9ydHM9W10pLDI9PSg3JmkpKWZvcih2YXIgYT1lLnVpbnQzMigpK2UucG9zO2UucG9zPGE7KW8ub3B0X3BvcnRzLnB1c2goZS51aW50MzIoKSk7ZWxzZSBvLm9wdF9wb3J0cy5wdXNoKGUudWludDMyKCkpO2JyZWFrO2Nhc2UgNjpvLndzc19ncm91cHMmJm8ud3NzX2dyb3Vwcy5sZW5ndGh8fChvLndzc19ncm91cHM9W10pLG8ud3NzX2dyb3Vwcy5wdXNoKHMucHJvdG9fYWNjZXNzaHViLldzc0FjY2Vzc2h1YkRpc3BhdGNoR3JvdXAuZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JmkpfX1yZXR1cm4gb30sYSksZS5BY2Nlc3NodWJEaXNwYXRjaFJlc3BvbnNlPShuLnByb3RvdHlwZS5jb2RlPTAsbi5wcm90b3R5cGUubWVzc2FnZT1cIlwiLG4ucHJvdG90eXBlLmRhdGE9bnVsbCxuLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fG8uY3JlYXRlKCksbnVsbCE9ZS5jb2RlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY29kZVwiKSYmdC51aW50MzIoOCkuaW50MzIoZS5jb2RlKSxudWxsIT1lLm1lc3NhZ2UmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtZXNzYWdlXCIpJiZ0LnVpbnQzMigxOCkuc3RyaW5nKGUubWVzc2FnZSksbnVsbCE9ZS5kYXRhJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZGF0YVwiKSYmcy5wcm90b19hY2Nlc3NodWIuQWNjZXNzaHViRGlzcGF0Y2hSZXNwb25zZURhdGEuZW5jb2RlKGUuZGF0YSx0LnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKSx0fSxuLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiByfHwoZT1yLmNyZWF0ZShlKSk7bGV0IG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHMucHJvdG9fYWNjZXNzaHViLkFjY2Vzc2h1YkRpc3BhdGNoUmVzcG9uc2U7Zm9yKDtlLnBvczxuOyl7dmFyIGk9ZS51aW50MzIoKTtzd2l0Y2goaT4+PjMpe2Nhc2UgMTpvLmNvZGU9ZS5pbnQzMigpO2JyZWFrO2Nhc2UgMjpvLm1lc3NhZ2U9ZS5zdHJpbmcoKTticmVhaztjYXNlIDM6by5kYXRhPXMucHJvdG9fYWNjZXNzaHViLkFjY2Vzc2h1YkRpc3BhdGNoUmVzcG9uc2VEYXRhLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JmkpfX1yZXR1cm4gb30sbiksZS5QdXNoRXhjZXB0aW9uPSh0LnByb3RvdHlwZS5yZWFzb249MCx0LnByb3RvdHlwZS5tc2c9XCJcIix0LnByb3RvdHlwZS50eGlkPWkuTG9uZz9pLkxvbmcuZnJvbUJpdHMoMCwwLCEwKTowLHQuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8by5jcmVhdGUoKSxudWxsIT1lLnJlYXNvbiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJlYXNvblwiKSYmdC51aW50MzIoOCkuaW50MzIoZS5yZWFzb24pLG51bGwhPWUubXNnJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibXNnXCIpJiZ0LnVpbnQzMigxOCkuc3RyaW5nKGUubXNnKSxudWxsIT1lLnR4aWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0eGlkXCIpJiZ0LnVpbnQzMigyNCkudWludDY0KGUudHhpZCksdH0sdC5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygcnx8KGU9ci5jcmVhdGUoZSkpO2xldCBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBzLnByb3RvX2FjY2Vzc2h1Yi5QdXNoRXhjZXB0aW9uO2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7c3dpdGNoKGk+Pj4zKXtjYXNlIDE6by5yZWFzb249ZS5pbnQzMigpO2JyZWFrO2Nhc2UgMjpvLm1zZz1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMzpvLnR4aWQ9ZS51aW50NjQoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZpKX19cmV0dXJuIG99LHQpLGU7ZnVuY3Rpb24gdChlKXtpZihlKWZvcihsZXQgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gbihlKXtpZihlKWZvcihsZXQgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gYShlKXtpZih0aGlzLmdyb3Vwcz1bXSx0aGlzLm9wdF9wb3J0cz1bXSx0aGlzLndzc19ncm91cHM9W10sZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIGMoZSl7aWYoZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIHUoZSl7aWYodGhpcy5xdWljX25vZGVzPVtdLHRoaXMubXRjcF9ub2Rlcz1bXSx0aGlzLndzc19ub2Rlcz1bXSxlKWZvcihsZXQgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gbChlKXtpZihlKWZvcihsZXQgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gaChlKXtpZihlKWZvcihsZXQgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gcChlKXtpZihlKWZvcihsZXQgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gZChlKXtpZihlKWZvcihsZXQgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gXyhlKXtpZihlKWZvcihsZXQgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gZihlKXtpZih0aGlzLmdyb3Vwcz1bXSx0aGlzLm9wdF9wb3J0cz1bXSx0aGlzLndzc19ncm91cHM9W10sZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIGcoZSl7aWYoZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIG0oZSl7aWYoZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIHkoZSl7aWYoZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIHYoZSl7aWYoZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIGIoZSl7aWYoZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEUoZSl7aWYoZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIE8oZSl7aWYoZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFQoZSl7aWYoZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFMoZSl7aWYoZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFIoZSl7aWYoZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIGsoZSl7aWYoZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEMoZSl7aWYoZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIHcoZSl7aWYoZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIE4oZSl7aWYodGhpcy5oZWFkZXJzPVtdLGUpZm9yKGxldCB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBJKGUpe2lmKHRoaXMuaGVhZGVycz1bXSxlKWZvcihsZXQgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gTShlKXtpZihlKWZvcihsZXQgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gTChlKXtpZihlKWZvcihsZXQgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gUChlKXtpZihlKWZvcihsZXQgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gQShlKXtpZihlKWZvcihsZXQgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9fSkoKSxjPXMucHJvdG9faW5pdGNvbmZpZz0oKCk9Pntjb25zdCBlPXt9O3JldHVybiBlLlJlc291cmNlVHlwZT1mdW5jdGlvbigpe2NvbnN0IGU9e30sdD1PYmplY3QuY3JlYXRlKGUpO3JldHVybiB0W2VbMF09XCJDRE5cIl09MCx0W2VbMV09XCJSVENcIl09MSx0W2VbMl09XCJMM1wiXT0yLHR9KCksZS5Qcm90b2NvbFR5cGU9ZnVuY3Rpb24oKXtjb25zdCBlPXt9LHQ9T2JqZWN0LmNyZWF0ZShlKTtyZXR1cm4gdFtlWzBdPVwiVURQXCJdPTAsdFtlWzFdPVwiUlRNUFwiXT0xLHRbZVsyXT1cIkZMVlwiXT0yLHRbZVszXT1cIkhMU1wiXT0zLHRbZVs0XT1cIldFQlJUQ1wiXT00LHR9KCksZS5SZXNvbHZlVHlwZT1mdW5jdGlvbigpe2NvbnN0IGU9e30sdD1PYmplY3QuY3JlYXRlKGUpO3JldHVybiB0W2VbMF09XCJMT0NBTF9ETlNcIl09MCx0W2VbMV09XCJESVNQQVRDSFwiXT0xLHR9KCksZS5BcHBDb25maWc9KHAucHJvdG90eXBlLnRlc3RfaWQ9bnVsbCxwLnByb3RvdHlwZS5kb21haW49bnVsbCxwLnByb3RvdHlwZS5mbGV4aWJsZV9kb21haW49bnVsbCxwLnByb3RvdHlwZS5yZXBsYWNlX2ZsZXhpYmxlX2RvbWFpbj1udWxsLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLnByb3RvdHlwZSxcIl90ZXN0X2lkXCIse2dldDppLm9uZU9mR2V0dGVyKG49W1widGVzdF9pZFwiXSksc2V0Omkub25lT2ZTZXR0ZXIobil9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkocC5wcm90b3R5cGUsXCJfZG9tYWluXCIse2dldDppLm9uZU9mR2V0dGVyKG49W1wiZG9tYWluXCJdKSxzZXQ6aS5vbmVPZlNldHRlcihuKX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLnByb3RvdHlwZSxcIl9mbGV4aWJsZV9kb21haW5cIix7Z2V0Omkub25lT2ZHZXR0ZXIobj1bXCJmbGV4aWJsZV9kb21haW5cIl0pLHNldDppLm9uZU9mU2V0dGVyKG4pfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHAucHJvdG90eXBlLFwiX3JlcGxhY2VfZmxleGlibGVfZG9tYWluXCIse2dldDppLm9uZU9mR2V0dGVyKG49W1wicmVwbGFjZV9mbGV4aWJsZV9kb21haW5cIl0pLHNldDppLm9uZU9mU2V0dGVyKG4pfSkscC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxvLmNyZWF0ZSgpLG51bGwhPWUudGVzdF9pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRlc3RfaWRcIikmJnQudWludDMyKDgpLmludDMyKGUudGVzdF9pZCksbnVsbCE9ZS5kb21haW4mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJkb21haW5cIikmJnQudWludDMyKDE4KS5zdHJpbmcoZS5kb21haW4pLG51bGwhPWUuZmxleGlibGVfZG9tYWluJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZmxleGlibGVfZG9tYWluXCIpJiZ0LnVpbnQzMigyNikuc3RyaW5nKGUuZmxleGlibGVfZG9tYWluKSxudWxsIT1lLnJlcGxhY2VfZmxleGlibGVfZG9tYWluJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVwbGFjZV9mbGV4aWJsZV9kb21haW5cIikmJnQudWludDMyKDM0KS5zdHJpbmcoZS5yZXBsYWNlX2ZsZXhpYmxlX2RvbWFpbiksdH0scC5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygcnx8KGU9ci5jcmVhdGUoZSkpO2xldCBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBzLnByb3RvX2luaXRjb25maWcuQXBwQ29uZmlnO2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7c3dpdGNoKGk+Pj4zKXtjYXNlIDE6by50ZXN0X2lkPWUuaW50MzIoKTticmVhaztjYXNlIDI6by5kb21haW49ZS5zdHJpbmcoKTticmVhaztjYXNlIDM6by5mbGV4aWJsZV9kb21haW49ZS5zdHJpbmcoKTticmVhaztjYXNlIDQ6by5yZXBsYWNlX2ZsZXhpYmxlX2RvbWFpbj1lLnN0cmluZygpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JmkpfX1yZXR1cm4gb30scCksZS5NZWRpYVNlcnZpY2VQcm90b2NvbEluZm89KGgucHJvdG90eXBlLmNvbmZpZ19pZD1udWxsLGgucHJvdG90eXBlLnByb3RvY29sPW51bGwsaC5wcm90b3R5cGUudXJsX3RlbXBsYXRlPW51bGwsaC5wcm90b3R5cGUucmVzb2x2ZV90eXBlPW51bGwsaC5wcm90b3R5cGUucHVzaF9jZG5fYXV0aGVudGljYXRpb249bnVsbCxoLnByb3RvdHlwZS5jZG5fcXVpY192ZXJzaW9uPWkuZW1wdHlBcnJheSxPYmplY3QuZGVmaW5lUHJvcGVydHkoaC5wcm90b3R5cGUsXCJfY29uZmlnX2lkXCIse2dldDppLm9uZU9mR2V0dGVyKG49W1wiY29uZmlnX2lkXCJdKSxzZXQ6aS5vbmVPZlNldHRlcihuKX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShoLnByb3RvdHlwZSxcIl9wcm90b2NvbFwiLHtnZXQ6aS5vbmVPZkdldHRlcihuPVtcInByb3RvY29sXCJdKSxzZXQ6aS5vbmVPZlNldHRlcihuKX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShoLnByb3RvdHlwZSxcIl91cmxfdGVtcGxhdGVcIix7Z2V0Omkub25lT2ZHZXR0ZXIobj1bXCJ1cmxfdGVtcGxhdGVcIl0pLHNldDppLm9uZU9mU2V0dGVyKG4pfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGgucHJvdG90eXBlLFwiX3Jlc29sdmVfdHlwZVwiLHtnZXQ6aS5vbmVPZkdldHRlcihuPVtcInJlc29sdmVfdHlwZVwiXSksc2V0Omkub25lT2ZTZXR0ZXIobil9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoaC5wcm90b3R5cGUsXCJfcHVzaF9jZG5fYXV0aGVudGljYXRpb25cIix7Z2V0Omkub25lT2ZHZXR0ZXIobj1bXCJwdXNoX2Nkbl9hdXRoZW50aWNhdGlvblwiXSksc2V0Omkub25lT2ZTZXR0ZXIobil9KSxoLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8by5jcmVhdGUoKSxudWxsIT1lLmNvbmZpZ19pZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImNvbmZpZ19pZFwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLmNvbmZpZ19pZCksbnVsbCE9ZS5wcm90b2NvbCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInByb3RvY29sXCIpJiZ0LnVpbnQzMigxNikuaW50MzIoZS5wcm90b2NvbCksbnVsbCE9ZS51cmxfdGVtcGxhdGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ1cmxfdGVtcGxhdGVcIikmJnQudWludDMyKDI2KS5zdHJpbmcoZS51cmxfdGVtcGxhdGUpLG51bGwhPWUucmVzb2x2ZV90eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVzb2x2ZV90eXBlXCIpJiZ0LnVpbnQzMigzMikuaW50MzIoZS5yZXNvbHZlX3R5cGUpLG51bGwhPWUucHVzaF9jZG5fYXV0aGVudGljYXRpb24mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJwdXNoX2Nkbl9hdXRoZW50aWNhdGlvblwiKSYmdC51aW50MzIoNDApLmludDMyKGUucHVzaF9jZG5fYXV0aGVudGljYXRpb24pLG51bGwhPWUuY2RuX3F1aWNfdmVyc2lvbiYmZS5jZG5fcXVpY192ZXJzaW9uLmxlbmd0aCl7dC51aW50MzIoNTApLmZvcmsoKTtmb3IobGV0IG49MDtuPGUuY2RuX3F1aWNfdmVyc2lvbi5sZW5ndGg7KytuKXQuaW50MzIoZS5jZG5fcXVpY192ZXJzaW9uW25dKTt0LmxkZWxpbSgpfXJldHVybiB0fSxoLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiByfHwoZT1yLmNyZWF0ZShlKSk7bGV0IG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHMucHJvdG9faW5pdGNvbmZpZy5NZWRpYVNlcnZpY2VQcm90b2NvbEluZm87Zm9yKDtlLnBvczxuOyl7dmFyIGk9ZS51aW50MzIoKTtzd2l0Y2goaT4+PjMpe2Nhc2UgMTpvLmNvbmZpZ19pZD1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLnByb3RvY29sPWUuaW50MzIoKTticmVhaztjYXNlIDM6by51cmxfdGVtcGxhdGU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDQ6by5yZXNvbHZlX3R5cGU9ZS5pbnQzMigpO2JyZWFrO2Nhc2UgNTpvLnB1c2hfY2RuX2F1dGhlbnRpY2F0aW9uPWUuaW50MzIoKTticmVhaztjYXNlIDY6aWYoby5jZG5fcXVpY192ZXJzaW9uJiZvLmNkbl9xdWljX3ZlcnNpb24ubGVuZ3RofHwoby5jZG5fcXVpY192ZXJzaW9uPVtdKSwyPT0oNyZpKSlmb3IodmFyIGE9ZS51aW50MzIoKStlLnBvcztlLnBvczxhOylvLmNkbl9xdWljX3ZlcnNpb24ucHVzaChlLmludDMyKCkpO2Vsc2Ugby5jZG5fcXVpY192ZXJzaW9uLnB1c2goZS5pbnQzMigpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZpKX19cmV0dXJuIG99LGgpLGUuTWVkaWFSZXNvdXJjZUluZm89KGwucHJvdG90eXBlLnJlc291cmNlX3R5cGU9bnVsbCxsLnByb3RvdHlwZS5zZXJ2aWNlX2luZm89aS5lbXB0eUFycmF5LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShsLnByb3RvdHlwZSxcIl9yZXNvdXJjZV90eXBlXCIse2dldDppLm9uZU9mR2V0dGVyKG49W1wicmVzb3VyY2VfdHlwZVwiXSksc2V0Omkub25lT2ZTZXR0ZXIobil9KSxsLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8by5jcmVhdGUoKSxudWxsIT1lLnJlc291cmNlX3R5cGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyZXNvdXJjZV90eXBlXCIpJiZ0LnVpbnQzMig4KS5pbnQzMihlLnJlc291cmNlX3R5cGUpLG51bGwhPWUuc2VydmljZV9pbmZvJiZlLnNlcnZpY2VfaW5mby5sZW5ndGgpZm9yKGxldCBuPTA7bjxlLnNlcnZpY2VfaW5mby5sZW5ndGg7KytuKXMucHJvdG9faW5pdGNvbmZpZy5NZWRpYVNlcnZpY2VQcm90b2NvbEluZm8uZW5jb2RlKGUuc2VydmljZV9pbmZvW25dLHQudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxsLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiByfHwoZT1yLmNyZWF0ZShlKSk7bGV0IG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHMucHJvdG9faW5pdGNvbmZpZy5NZWRpYVJlc291cmNlSW5mbztmb3IoO2UucG9zPG47KXt2YXIgaT1lLnVpbnQzMigpO3N3aXRjaChpPj4+Myl7Y2FzZSAxOm8ucmVzb3VyY2VfdHlwZT1lLmludDMyKCk7YnJlYWs7Y2FzZSAyOm8uc2VydmljZV9pbmZvJiZvLnNlcnZpY2VfaW5mby5sZW5ndGh8fChvLnNlcnZpY2VfaW5mbz1bXSksby5zZXJ2aWNlX2luZm8ucHVzaChzLnByb3RvX2luaXRjb25maWcuTWVkaWFTZXJ2aWNlUHJvdG9jb2xJbmZvLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZpKX19cmV0dXJuIG99LGwpLGUuTWVkaWFQdWJsaXNoQ29uZmlnPSh1LnByb3RvdHlwZS5yZXNvdXJjZV9pbmZvPWkuZW1wdHlBcnJheSx1LmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8by5jcmVhdGUoKSxudWxsIT1lLnJlc291cmNlX2luZm8mJmUucmVzb3VyY2VfaW5mby5sZW5ndGgpZm9yKGxldCBuPTA7bjxlLnJlc291cmNlX2luZm8ubGVuZ3RoOysrbilzLnByb3RvX2luaXRjb25maWcuTWVkaWFSZXNvdXJjZUluZm8uZW5jb2RlKGUucmVzb3VyY2VfaW5mb1tuXSx0LnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gdH0sdS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygcnx8KGU9ci5jcmVhdGUoZSkpO2xldCBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBzLnByb3RvX2luaXRjb25maWcuTWVkaWFQdWJsaXNoQ29uZmlnO2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7aT4+PjM9PTI/KG8ucmVzb3VyY2VfaW5mbyYmby5yZXNvdXJjZV9pbmZvLmxlbmd0aHx8KG8ucmVzb3VyY2VfaW5mbz1bXSksby5yZXNvdXJjZV9pbmZvLnB1c2gocy5wcm90b19pbml0Y29uZmlnLk1lZGlhUmVzb3VyY2VJbmZvLmRlY29kZShlLGUudWludDMyKCkpKSk6ZS5za2lwVHlwZSg3JmkpfXJldHVybiBvfSx1KSxlLk1lZGlhUGxheUNvbmZpZz0oYy5wcm90b3R5cGUucmVzb3VyY2VfaW5mbz1pLmVtcHR5QXJyYXksYy5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fG8uY3JlYXRlKCksbnVsbCE9ZS5yZXNvdXJjZV9pbmZvJiZlLnJlc291cmNlX2luZm8ubGVuZ3RoKWZvcihsZXQgbj0wO248ZS5yZXNvdXJjZV9pbmZvLmxlbmd0aDsrK24pcy5wcm90b19pbml0Y29uZmlnLk1lZGlhUmVzb3VyY2VJbmZvLmVuY29kZShlLnJlc291cmNlX2luZm9bbl0sdC51aW50MzIoNDIpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LGMuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHJ8fChlPXIuY3JlYXRlKGUpKTtsZXQgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcy5wcm90b19pbml0Y29uZmlnLk1lZGlhUGxheUNvbmZpZztmb3IoO2UucG9zPG47KXt2YXIgaT1lLnVpbnQzMigpO2k+Pj4zPT01PyhvLnJlc291cmNlX2luZm8mJm8ucmVzb3VyY2VfaW5mby5sZW5ndGh8fChvLnJlc291cmNlX2luZm89W10pLG8ucmVzb3VyY2VfaW5mby5wdXNoKHMucHJvdG9faW5pdGNvbmZpZy5NZWRpYVJlc291cmNlSW5mby5kZWNvZGUoZSxlLnVpbnQzMigpKSkpOmUuc2tpcFR5cGUoNyZpKX1yZXR1cm4gb30sYyksZS5NZWRpYUNvbmZpZz0oYS5wcm90b3R5cGUucGxheV9jb25maWc9bnVsbCxhLnByb3RvdHlwZS5wdWJsaXNoX2NvbmZpZz1udWxsLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSxcIl9wbGF5X2NvbmZpZ1wiLHtnZXQ6aS5vbmVPZkdldHRlcihuPVtcInBsYXlfY29uZmlnXCJdKSxzZXQ6aS5vbmVPZlNldHRlcihuKX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSxcIl9wdWJsaXNoX2NvbmZpZ1wiLHtnZXQ6aS5vbmVPZkdldHRlcihuPVtcInB1Ymxpc2hfY29uZmlnXCJdKSxzZXQ6aS5vbmVPZlNldHRlcihuKX0pLGEuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8by5jcmVhdGUoKSxudWxsIT1lLnBsYXlfY29uZmlnJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicGxheV9jb25maWdcIikmJnMucHJvdG9faW5pdGNvbmZpZy5NZWRpYVBsYXlDb25maWcuZW5jb2RlKGUucGxheV9jb25maWcsdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS5wdWJsaXNoX2NvbmZpZyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInB1Ymxpc2hfY29uZmlnXCIpJiZzLnByb3RvX2luaXRjb25maWcuTWVkaWFQdWJsaXNoQ29uZmlnLmVuY29kZShlLnB1Ymxpc2hfY29uZmlnLHQudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpLHR9LGEuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHJ8fChlPXIuY3JlYXRlKGUpKTtsZXQgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcy5wcm90b19pbml0Y29uZmlnLk1lZGlhQ29uZmlnO2Zvcig7ZS5wb3M8bjspe3ZhciBpPWUudWludDMyKCk7c3dpdGNoKGk+Pj4zKXtjYXNlIDE6by5wbGF5X2NvbmZpZz1zLnByb3RvX2luaXRjb25maWcuTWVkaWFQbGF5Q29uZmlnLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgMjpvLnB1Ymxpc2hfY29uZmlnPXMucHJvdG9faW5pdGNvbmZpZy5NZWRpYVB1Ymxpc2hDb25maWcuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmaSl9fXJldHVybiBvfSxhKSxlLkluaXRDb25maWc9KHQucHJvdG90eXBlLmFwcF9jb25maWc9bnVsbCx0LnByb3RvdHlwZS5tZWRpYV9jb25maWc9bnVsbCxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJfYXBwX2NvbmZpZ1wiLHtnZXQ6aS5vbmVPZkdldHRlcihuPVtcImFwcF9jb25maWdcIl0pLHNldDppLm9uZU9mU2V0dGVyKG4pfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiX21lZGlhX2NvbmZpZ1wiLHtnZXQ6aS5vbmVPZkdldHRlcihuPVtcIm1lZGlhX2NvbmZpZ1wiXSksc2V0Omkub25lT2ZTZXR0ZXIobil9KSx0LmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fG8uY3JlYXRlKCksbnVsbCE9ZS5hcHBfY29uZmlnJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiYXBwX2NvbmZpZ1wiKSYmcy5wcm90b19pbml0Y29uZmlnLkFwcENvbmZpZy5lbmNvZGUoZS5hcHBfY29uZmlnLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLG51bGwhPWUubWVkaWFfY29uZmlnJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibWVkaWFfY29uZmlnXCIpJiZzLnByb3RvX2luaXRjb25maWcuTWVkaWFDb25maWcuZW5jb2RlKGUubWVkaWFfY29uZmlnLHQudWludDMyKDQyKS5mb3JrKCkpLmxkZWxpbSgpLHR9LHQuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHJ8fChlPXIuY3JlYXRlKGUpKTtsZXQgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcy5wcm90b19pbml0Y29uZmlnLkluaXRDb25maWc7Zm9yKDtlLnBvczxuOyl7dmFyIGk9ZS51aW50MzIoKTtzd2l0Y2goaT4+PjMpe2Nhc2UgMTpvLmFwcF9jb25maWc9cy5wcm90b19pbml0Y29uZmlnLkFwcENvbmZpZy5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDU6by5tZWRpYV9jb25maWc9cy5wcm90b19pbml0Y29uZmlnLk1lZGlhQ29uZmlnLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JmkpfX1yZXR1cm4gb30sdCksZTtmdW5jdGlvbiB0KGUpe2lmKGUpZm9yKGxldCB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX12YXIgbjtmdW5jdGlvbiBhKGUpe2lmKGUpZm9yKGxldCB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBjKGUpe2lmKHRoaXMucmVzb3VyY2VfaW5mbz1bXSxlKWZvcihsZXQgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gdShlKXtpZih0aGlzLnJlc291cmNlX2luZm89W10sZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIGwoZSl7aWYodGhpcy5zZXJ2aWNlX2luZm89W10sZSlmb3IobGV0IHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIGgoZSl7aWYodGhpcy5jZG5fcXVpY192ZXJzaW9uPVtdLGUpZm9yKGxldCB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBwKGUpe2lmKGUpZm9yKGxldCB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX19KSgpfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHIsbyxpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwocj1mdW5jdGlvbihlLHQpe3JldHVybihyPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgbiBpbiB0KU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG4pJiYoZVtuXT10W25dKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIrU3RyaW5nKHQpK1wiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7ZnVuY3Rpb24gbigpe3RoaXMuY29uc3RydWN0b3I9ZX1yKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KToobi5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IG4pfSkscz10aGlzJiZ0aGlzLl9fYXNzaWdufHxmdW5jdGlvbigpe3JldHVybihzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPTEscj1hcmd1bWVudHMubGVuZ3RoO248cjtuKyspZm9yKHZhciBvIGluIHQ9YXJndW1lbnRzW25dKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG8pJiYoZVtvXT10W29dKTtyZXR1cm4gZX0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYT10aGlzJiZ0aGlzLl9fc3ByZWFkQXJyYXl8fGZ1bmN0aW9uKGUsdCxuKXtpZihufHwyPT09YXJndW1lbnRzLmxlbmd0aClmb3IodmFyIHIsbz0wLGk9dC5sZW5ndGg7bzxpO28rKykhciYmbyBpbiB0fHwoKHI9cnx8QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodCwwLG8pKVtvXT10W29dKTtyZXR1cm4gZS5jb25jYXQocnx8QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodCkpfSxjPShPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlplZ29Xc3NMaW5rPXZvaWQgMCxuKDE0KSksdT1uKDApLGw9bigxNSksaD1uKDE2KSxwPW4oMyksZD1uKDEpO2koXyxvPWwuWmVnb0xpbmspLF8ucHJvdG90eXBlLmluaXRFdmVudD1mdW5jdGlvbihlLHQsbixyKXt0aGlzLm9uQ29ubmVjdGVkRXZlbnQ9ZSx0aGlzLm9uRGlzQ29ubmVjdGVkRXZlbnQ9dCx0aGlzLm9uQ29ubmVjdGluZ0V2ZW50PW4sdGhpcy5vblB1c2hFdmVudD1yfSxfLnByb3RvdHlwZS5jcmVhdGVTb2NrZXQ9ZnVuY3Rpb24oZSl7dGhpcy5zZXJ2ZXJzPWUsdGhpcy51cmxJbmRleD0wfSxfLnByb3RvdHlwZS5kZXN0cm95U29ja2V0PWZ1bmN0aW9uKCl7dGhpcy5sb2dnZXIuaW5mbyhcInpuLndsLmRzLjAgY2FsbFwiKSx0aGlzLnNvY2tldFNlcnZpY2UuY2xvc2VTb2NrZXQoKSx0aGlzLm5ldExpbmtTdGF0ZT11LkVOVU1fQ09OTkVDVF9TVEFURS5kaXNjb25uZWN0LHRoaXMucmVzZXRDb25uZWN0KCl9LF8ucHJvdG90eXBlLnJlZnJlc2hTZXJ2ZXJzPWZ1bmN0aW9uKGUpe3RoaXMuc2VydmVycz1hKGEoW10sZSwhMCksdGhpcy5zZXJ2ZXJzLCEwKX0sXy5wcm90b3R5cGUuY29ubmVjdFNvY2tldD1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcztyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITApLHRoaXMubG9nZ2VyLmluZm8oXCJ6bi53bC5jcy4wIGNhbGxcIiksdGhpcy5jb25uZWN0UnNwLnN1Yz10LHRoaXMuY29ubmVjdFJzcC5mYWlsPW4sdGhpcy5zdGF0ZUNlbnRlci5uZXR3b3JrU3RhdGU9PT11LkVOVU1fTkVUV09SS19TVEFURS5vbmxpbmUmJihlJiYodGhpcy51cmxJbmRleD0odGhpcy51cmxJbmRleCsxKSV0aGlzLnNlcnZlcnMubGVuZ3RoKSx0PXRoaXMuc2VydmVyc1t0aGlzLnVybEluZGV4XSx0aGlzLmNvbm5lY3RTZXJ2ZXI9dCx0aGlzLmxvZ2dlci5pbmZvKFwiem4ud2wuY3MuMCBzZXJ2ZXIgXCIrdCksdGhpcy50cnlTZXJ2ZXJzLnB1c2godCksdGhpcy5jbG9zZVNvY2tldCgpLHRoaXMubmV0TGlua1N0YXRlPXUuRU5VTV9DT05ORUNUX1NUQVRFLmNvbm5lY3RpbmcsdGhpcy5zb2NrZXRTZXJ2aWNlLmNyZWF0ZVNvY2tldCh0KSx0aGlzLm9uQ29ubmVjdGluZ0V2ZW50JiZ0aGlzLm9uQ29ubmVjdGluZ0V2ZW50KCEwKSx0aGlzLmJpbmRTb2NrZXRFdmVudCgpLHRoaXMuY29ubmVjdFRpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ci5sb2dnZXIuaW5mbyhcInpuLndsLmNzLjAgdGltZW91dFwiKSxyLmNvbm5lY3RSc3AuZmFpbCYmci5jb25uZWN0UnNwLmZhaWwoKX0pLHRoaXMuY29ubmVjdEludGVydmFsKSwhMCl9LF8ucHJvdG90eXBlLmJpbmRTb2NrZXRFdmVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5vcGVuSGFuZGxlcigoZnVuY3Rpb24oKXtlLmxvZ2dlci5pbmZvKFwiem4ud2wuYnNlIG9wZW5cIiksZS5yZXNldENvbm5lY3QoKSxlLmNvbm5lY3RSc3Auc3VjJiZlLmNvbm5lY3RSc3Auc3VjKCksZS5uZXRMaW5rU3RhdGU9dS5FTlVNX0NPTk5FQ1RfU1RBVEUuY29ubmVjdGVkLGUub25Db25uZWN0ZWRFdmVudCYmZS5vbkNvbm5lY3RlZEV2ZW50KGUudHJ5U2VydmVycyksZS5jaGVja1VuU2VuZE1zZ3MoZS51blNlbmRDb21tYW5kTGlzdCksZS5zdGFydENoZWNrKCl9KSksdGhpcy5jbG9zZUhhbmRsZXIoKGZ1bmN0aW9uKHQpe2UubG9nZ2VyLndhcm4oXCJ6bi53bC5ic2UgY2xvc2UgXCIrSlNPTi5zdHJpbmdpZnkodCkpLGUucmVzZXRDb25uZWN0KCksZS5jb25uZWN0UnNwLmZhaWwmJmUuY29ubmVjdFJzcC5mYWlsKCksZS5vbkRpc0Nvbm5lY3RlZEV2ZW50JiZlLm9uRGlzQ29ubmVjdGVkRXZlbnQoITApLGUubmV0TGlua1N0YXRlPXUuRU5VTV9DT05ORUNUX1NUQVRFLmRpc2Nvbm5lY3R9KSksdGhpcy5lcnJvckhhbmRsZXIoKGZ1bmN0aW9uKHQpe2UubG9nZ2VyLndhcm4oXCJ6bi53bC5ic2UgZXJyb3IgXCIrSlNPTi5zdHJpbmdpZnkodCkpLGUucmVzZXRDb25uZWN0KCksZS5jb25uZWN0UnNwLmZhaWwmJmUuY29ubmVjdFJzcC5mYWlsKCksZS5vbkRpc0Nvbm5lY3RlZEV2ZW50JiZlLm9uRGlzQ29ubmVjdGVkRXZlbnQoITApLGUubmV0TGlua1N0YXRlPXUuRU5VTV9DT05ORUNUX1NUQVRFLmRpc2Nvbm5lY3R9KSksdGhpcy5vbk1lc3NhZ2UoKX0sXy5wcm90b3R5cGUuY2xvc2VTb2NrZXQ9ZnVuY3Rpb24oKXt0aGlzLmxvZ2dlci5pbmZvKFwiem4ud2wuY3MuMSBjYWxsXCIpLHRoaXMuc29ja2V0U2VydmljZS5jbG9zZVNvY2tldCgpLHRoaXMubmV0TGlua1N0YXRlPXUuRU5VTV9DT05ORUNUX1NUQVRFLmRpc2Nvbm5lY3R9LF8ucHJvdG90eXBlLnJlc2V0Q29ubmVjdD1mdW5jdGlvbigpe3RoaXMuY29ubmVjdFRpbWVyJiYoY2xlYXJUaW1lb3V0KHRoaXMuY29ubmVjdFRpbWVyKSx0aGlzLmNvbm5lY3RUaW1lcj1udWxsKSx0aGlzLnN0b3BDaGVjaygpfSxfLnByb3RvdHlwZS5pc0Nvbm5lY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uZXRMaW5rU3RhdGU9PT11LkVOVU1fQ09OTkVDVF9TVEFURS5jb25uZWN0ZWR9LF8ucHJvdG90eXBlLmlzRGlzQ29ubmVjdD1mdW5jdGlvbigpe3JldHVybiF0aGlzLnNvY2tldFNlcnZpY2V8fHRoaXMuc29ja2V0U2VydmljZS5pc0Rpc0Nvbm5lY3QoKX0sXy5wcm90b3R5cGUuaXNDb25uZWN0aW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmV0TGlua1N0YXRlPT09dS5FTlVNX0NPTk5FQ1RfU1RBVEUuY29ubmVjdGluZ30sXy5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oZSl7dGhpcy5uZXRMaW5rU3RhdGU9ZX0sXy5wcm90b3R5cGUuY2xvc2VIYW5kbGVyPWZ1bmN0aW9uKGUpe3RoaXMuc29ja2V0U2VydmljZS5jbG9zZUhhbmRsZXIoZSl9LF8ucHJvdG90eXBlLm9wZW5IYW5kbGVyPWZ1bmN0aW9uKGUpe3RoaXMuc29ja2V0U2VydmljZS5vcGVuSGFuZGxlcihlKX0sXy5wcm90b3R5cGUuZXJyb3JIYW5kbGVyPWZ1bmN0aW9uKGUpe3RoaXMuc29ja2V0U2VydmljZS5lcnJvckhhbmRsZXIoZSl9LF8ucHJvdG90eXBlLnVwZGF0ZU1zZ1RpbWU9ZnVuY3Rpb24oKXt0aGlzLnVwZGF0ZWRNc2dUaW1lPURhdGUubm93KCl9LF8ucHJvdG90eXBlLnNlbmRNZXNzYWdlPWZ1bmN0aW9uKGUsdCxuLHIsbyxpLGEsYyl7dm9pZCAwPT09ciYmKHI9ITApLHZvaWQgMD09PW8mJihvPW51bGwpLHZvaWQgMD09PWkmJihpPW51bGwpLHZvaWQgMD09PWEmJihhPW51bGwpLHZvaWQgMD09PShjPXZvaWQgMD09PWM/e306YykudGltZW91dCYmKGMudGltZW91dD01ZTMpLHZvaWQgMD09PWMuaXNJblNlbmRNYXAmJihjLmlzSW5TZW5kTWFwPSEwKSx0aGlzLnR4aWQrKyxyPXthcHBpZDp0aGlzLmFwcElELGJpel90eXBlOjAsbW9kZV9ubzoobnVsbD09KHI9dGhpcy5zdGF0ZUNlbnRlci5hcHBJbmZvKT92b2lkIDA6ci5tb2RlKXx8ZC5ORVRfQUNDRVNTX0NPTkZJRy5tb2RlTm8saWRfbmFtZTp0aGlzLnN0YXRlQ2VudGVyLnVzZXJJZCxzZGtfdHlwZTpkLk5FVF9BQ0NFU1NfQ09ORklHLnNka1R5cGUsemVnb2Nvbm5fcnVuX2VudjowPT09dGhpcy5lbnY/dS5aZWdvY29ublJ1bkVudi5aRUdPQ09OTl9SVU5fRU5WX0JST1dTRVI6dS5aZWdvY29ublJ1bkVudi5aRUdPQ09OTl9SVU5fRU5WX0FQUExFVH0sbj17ZGF0YTpyPXMocyh7dHhpZDp0aGlzLnR4aWR9LHIpLG4pLHR4aWQ6dGhpcy50eGlkLHNlbmRUaW1lOkRhdGUubm93KCksc3RyZWFtSUQ6dCx0eXBlOmUsdGltZU91dDpjLnRpbWVvdXR8fHRoaXMudGltZW91dCxhY2s6bi5hY2ssc3VjY2VzczpvLGVycm9yOmksYWNrRnVuYzphLGlzU2VuZDohMCxpc0NoZWNrOmUhPT11LkFjY2Vzc0h1Yk1lc3NhZ2VUeXBlLk1TR19UWVBFX1BDX1VQV0FSRF9NRVNTQUdFfSxjLmlzSW5TZW5kTWFwJiYobz10aGlzLnNlbmRDb21tYW5kTGlzdC5wdXNoKG4pLHRoaXMuc2VuZENvbW1hbmRNYXBbdGhpcy50eGlkXT1vKSx0aGlzLnVuVXBkYXRlTXNnVGltZVR5cGVzLmluY2x1ZGVzKGUpfHwodGhpcy51cGRhdGVkTXNnVGltZT1EYXRlLm5vdygpKSwtMT09PXRoaXMudW5sb2dUeXBlcy5pbmRleE9mKGUpJiZ0aGlzLmxvZ2dlci5pbmZvKFwiem4ud2wuc20gdHlwZTogXCIrZStcIi1cIit1LnR5cGVNYXBbZV0rXCIgc3RyZWFtSUQ6IFwiK3QrXCIgdHhpZDogXCIrdGhpcy50eGlkKSx0aGlzLmlzQ29ubmVjdCgpP3RoaXMuc2VuZFVpbnQ4RGF0YShlLHIsdCk6KG4uaXNTZW5kPSExLGk9dGhpcy51blNlbmRDb21tYW5kTGlzdC5wdXNoKG4pLHRoaXMudW5TZW5kQ29tbWFuZE1hcFt0aGlzLnR4aWRdPWkpfSxfLnByb3RvdHlwZS5jaGVja1VuU2VuZE1zZ3M9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49ZS5nZXRGaXJzdCgpO251bGwhPW47KWUucmVtb3ZlKG4pLG4uX2RhdGEmJiExPT09KG51bGw9PSh0PW4uX2RhdGEpP3ZvaWQgMDp0LmlzU2VuZCkmJm4uX2RhdGEudHlwZSYmbi5fZGF0YS5zdHJlYW1JRCYmbi5fZGF0YS5kYXRhJiYodGhpcy5zZW5kVWludDhEYXRhKG4uX2RhdGEudHlwZSxuLl9kYXRhLmRhdGEsbi5fZGF0YS5zdHJlYW1JRCksbi5fZGF0YS5pc1NlbmQ9ITApLG49ZS5nZXRGaXJzdCgpfSxfLnByb3RvdHlwZS5zZW5kVWludDhEYXRhPWZ1bmN0aW9uKGUsdCxuKXtlPXRoaXMucHJvdG9idWYuZW5jb2RlUmVxdWVzdChlLHQsbiksdGhpcy5zb2NrZXRTZXJ2aWNlLnNlbmRNZXNzYWdlKGUpfSxfLnByb3RvdHlwZS5vbk1lc3NhZ2U9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuc29ja2V0U2VydmljZS5vbk1lc3NhZ2U9ZnVuY3Rpb24odCl7dD1uZXcgVWludDhBcnJheSh0KTt2YXIgbixyPSh0PWUucHJvdG9idWYuZGVjb2RlUmVzcG9uc2UodCkpWzBdLG89dFsxXTt0PXRbMl07ZS51blVwZGF0ZU1zZ1RpbWVUeXBlcy5pbmNsdWRlcyhvKXx8KGUudXBkYXRlZE1zZ1RpbWU9RGF0ZS5ub3coKSksLTE9PT1lLnVubG9nVHlwZXMuaW5kZXhPZihvKSYmZS5sb2dnZXIuaW5mbyhcInpuLndsLm9tXCIrXCIgc3RyZWFtSUQ6IFwiLmNvbmNhdChyLFwiLCBtc2dUeXBlOiBcIikuY29uY2F0KG8sXCItXCIpLmNvbmNhdCh1LnR5cGVNYXBbb10pKSwobnVsbCE9dCYmdC50eGlkfHxudWxsIT0obj1udWxsPT10P3ZvaWQgMDp0LmRhdGEpJiZuLnR4aWQpJiZlLmlzUnNwTXNnKChudWxsPT10P3ZvaWQgMDp0LnR4aWQpfHwobnVsbD09KG49bnVsbD09dD92b2lkIDA6dC5kYXRhKT92b2lkIDA6bi50eGlkKSk/ZS5oYW5kbGVTZW5kQ29tbWFuZE1zZ1JzcChyLG8sKG51bGw9PXQ/dm9pZCAwOnQudHhpZCl8fChudWxsPT0obj1udWxsPT10P3ZvaWQgMDp0LmRhdGEpP3ZvaWQgMDpuLnR4aWQpLHQpOmUub25QdXNoRXZlbnQocixvLHQpfX0sXy5wcm90b3R5cGUuaXNSc3BNc2c9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuc2VuZENvbW1hbmRNYXBbZV19LF8ucHJvdG90eXBlLnN0YXJ0Q2hlY2s9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuY2hlY2tNZXNzYWdlTGlzdFRpbWVvdXQodGhpcy5zZW5kQ29tbWFuZExpc3QsdGhpcy5zZW5kQ29tbWFuZE1hcCksdGhpcy5zZW5kRGF0YUNoZWNrVGltZXI9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLnN0YXJ0Q2hlY2soKX0pLHRoaXMuc2VuZERhdGFDaGVja0ludGVydmFsKX0sXy5wcm90b3R5cGUuc3RvcENoZWNrPWZ1bmN0aW9uKCl7dGhpcy5jaGVja1NlbmRNZXNzYWdlTGlzdCh0aGlzLnNlbmRDb21tYW5kTGlzdCksY2xlYXJUaW1lb3V0KHRoaXMuc2VuZERhdGFDaGVja1RpbWVyKX0sXy5wcm90b3R5cGUuY2hlY2tNZXNzYWdlTGlzdFRpbWVvdXQ9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4scj1lLmdldEZpcnN0KCksbz1EYXRlLm5vdygpLGk9MCxzPXRoaXM7bnVsbCE9ciYmXCJicmVha1wiIT09ZnVuY3Rpb24oKXtyZXR1cm4gci5fZGF0YSYmci5fZGF0YS5zZW5kVGltZStyLl9kYXRhLnRpbWVPdXQ+bz9cImJyZWFrXCI6KHIuX2RhdGEmJmRlbGV0ZSB0W3IuX2RhdGEuZGF0YS50eGlkXSxlLnJlbW92ZShyKSxyLl9kYXRhJiZudWxsPT1yLl9kYXRhLmVycm9yfHxyLl9kYXRhJiZyLl9kYXRhLnNlbmRUaW1lK3Muc2VuZERhdGFEcm9wVGltZW91dDxvfHwoYT1yJiZyLl9kYXRhJiZyLl9kYXRhLmVycm9yLGM9ciYmci5fZGF0YSYmci5fZGF0YS50eGlkLHU9ciYmci5fZGF0YSYmKG51bGw9PShuPXIuX2RhdGEpP3ZvaWQgMDpuLmlzQ2hlY2spLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dSYmYSYmYSh7fSxjLHAuZXJyb3JDb2RlTGlzdC5USU1FT1VUKX0pLDApKSwrK2k+PXMuc2VuZERhdGFDaGVja09uY2VDb3VudD9cImJyZWFrXCI6dm9pZChyPWUuZ2V0Rmlyc3QoKSkpO3ZhciBhLGMsdX0oKTspO30sXy5wcm90b3R5cGUuY2hlY2tTZW5kTWVzc2FnZUxpc3Q9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49ZS5nZXRGaXJzdCgpO251bGwhPW4mJm4uX2RhdGE7KSFmdW5jdGlvbigpe3ZhciByLG8saTtlLnJlbW92ZShuKSxuLl9kYXRhLmlzU2VuZCYmbi5fZGF0YS5lcnJvciYmKHI9biYmbi5fZGF0YSYmbi5fZGF0YS5lcnJvcixvPW4mJm4uX2RhdGEmJm4uX2RhdGEudHhpZCxpPW4mJm4uX2RhdGEmJihudWxsPT0odD1uLl9kYXRhKT92b2lkIDA6dC5pc0NoZWNrKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe2kmJnImJnIoe30sbyxwLmVycm9yQ29kZUxpc3QuVElNRU9VVCl9KSwwKSksbj1lLmdldEZpcnN0KCl9KCl9LF8ucHJvdG90eXBlLmhhbmRsZVNlbmRDb21tYW5kTXNnUnNwPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvLGk9dGhpcy5zZW5kQ29tbWFuZE1hcFtuXTtudWxsIT1pJiYobnVsbCE9KG89aS5fZGF0YSkmJm8uYWNrfHwoZGVsZXRlIHRoaXMuc2VuZENvbW1hbmRNYXBbbl0sdGhpcy5zZW5kQ29tbWFuZExpc3QucmVtb3ZlKGkpKSxyLmNvZGUmJjAhPT1yLmNvZGU/byYmbnVsbCE9by5lcnJvciYmby5lcnJvcihyLG4pOnQ9PT11LkFjY2Vzc0h1Yk1lc3NhZ2VUeXBlLk1TR19UWVBFX1BVU0hfRVhDRVBUSU9OPyhyLmNvZGU9ci5yZWFzb24sci5tZXNzYWdlPXIubXNnLG8mJm51bGwhPW8uZXJyb3ImJm8uZXJyb3IocixuKSk6dD09PXUuQWNjZXNzSHViTWVzc2FnZVR5cGUuTVNHX1RZUEVfSFRUUF9SRVFVRVNUX0FDSz9vJiZudWxsIT1vLmFja0Z1bmMmJm8uYWNrRnVuYyhyLG4pOm8mJm51bGwhPW8uc3VjY2VzcyYmby5zdWNjZXNzKHIsbikpfSxuPV87ZnVuY3Rpb24gXyhlLHQsbixyLGkpe3ZhciBzPW8uY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gcy5hcHBJRD1lLHMuZW52PXQscy5wcm90b2J1Zj1uLHMubG9nZ2VyPXIscy5zdGF0ZUNlbnRlcj1pLHMuc29ja2V0U2VydmljZT1uZXcgaC5OZXRTb2NrZXRTZXJ2aWNlKHMuZW52KSxzLnVybEluZGV4PTAscy51cGRhdGVkTXNnVGltZT0wLHMudW5VcGRhdGVNc2dUaW1lVHlwZXM9W3UuQWNjZXNzSHViTWVzc2FnZVR5cGUuTVNHX1RZUEVfSEJfUkVRVUVTVCx1LkFjY2Vzc0h1Yk1lc3NhZ2VUeXBlLk1TR19UWVBFX0hCX1JFU1BPTlNFLHUuQWNjZXNzSHViTWVzc2FnZVR5cGUuTVNHX1RZUEVfR0VUX0NPTkZJR19SRVFVRVNULHUuQWNjZXNzSHViTWVzc2FnZVR5cGUuTVNHX1RZUEVfR0VUX0NPTkZJR19SRVNQT05TRV0scy5uZXRMaW5rU3RhdGU9dS5FTlVNX0NPTk5FQ1RfU1RBVEUuZGlzY29ubmVjdCxzLnNlbmRDb21tYW5kTGlzdD1uZXcgYy5MaW5rZWRMaXN0LHMudW5TZW5kQ29tbWFuZExpc3Q9bmV3IGMuTGlua2VkTGlzdCxzLnNlbmRDb21tYW5kTWFwPXt9LHMudW5TZW5kQ29tbWFuZE1hcD17fSxzLnNlbmREYXRhQ2hlY2tPbmNlQ291bnQ9MTAwLHMuc2VuZERhdGFEcm9wVGltZW91dD0xZTQscy5zZW5kRGF0YUNoZWNrSW50ZXJ2YWw9MmUzLHMudGltZW91dD01ZTMscy5jb25uZWN0SW50ZXJ2YWw9MWU0LHMuY29ubmVjdFRpbWVyPW51bGwscy5jb25uZWN0UnNwPXt9LHMudW5sb2dUeXBlcz1bMTIsMTNdLHMudHJ5U2VydmVycz1bXSxzLnVwZGF0ZWRNc2dUaW1lPURhdGUubm93KCksc310LlplZ29Xc3NMaW5rPW59LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkxpbmtlZExpc3Q9dC5MaXN0Tm9kZT12b2lkIDAsT2JqZWN0LmRlZmluZVByb3BlcnR5KG8ucHJvdG90eXBlLFwiaWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lkfHxudWxsfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5faWQ9ZX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoby5wcm90b3R5cGUsXCJkYXRhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kYXRhfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fZGF0YT1lfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLG8ucHJvdG90eXBlLmhhc05leHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uZXh0JiZ0aGlzLm5leHQuaWR9LG8ucHJvdG90eXBlLmhhc1ByZXY9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcmV2JiZ0aGlzLnByZXYuaWR9O3ZhciByPW87ZnVuY3Rpb24gbyhlLHQpe3ZvaWQgMD09PWUmJihlPW51bGwpLHZvaWQgMD09PXQmJih0PW51bGwpLHRoaXMubmV4dD1udWxsLHRoaXMucHJldj1udWxsLHRoaXMuX2lkPWUsdGhpcy5fZGF0YT10fWZ1bmN0aW9uIGkoKXt0aGlzLnN0YXJ0PW5ldyByLHRoaXMuZW5kPW5ldyByLHRoaXMuX2lkQ291bnRlcj0wLHRoaXMuX251bU5vZGVzPTAsdGhpcy5zdGFydC5uZXh0PXRoaXMuZW5kLHRoaXMuc3RhcnQucHJldj1udWxsLHRoaXMuZW5kLnByZXY9dGhpcy5zdGFydCx0aGlzLmVuZC5uZXh0PW51bGx9dC5MaXN0Tm9kZT1yLGkucHJvdG90eXBlLmluc2VydEJlZm9yZT1mdW5jdGlvbihlLHQpe3JldHVybih0PW5ldyByKHRoaXMuX2lkQ291bnRlcix0KSkubmV4dD1lLHQucHJldj1lLnByZXYsZS5wcmV2JiYoZS5wcmV2Lm5leHQ9dCksZS5wcmV2PXQsKyt0aGlzLl9pZENvdW50ZXIsKyt0aGlzLl9udW1Ob2Rlcyx0fSxpLnByb3RvdHlwZS5hZGRMYXN0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmluc2VydEJlZm9yZSh0aGlzLmVuZCxlKX0saS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmFkZExhc3QoZSl9LGkucHJvdG90eXBlLmdldEZpcnN0PWZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLl9udW1Ob2Rlcz9udWxsOnRoaXMuc3RhcnQubmV4dH0saS5wcm90b3R5cGUuZ2V0TGFzdD1mdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5fbnVtTm9kZXM/bnVsbDp0aGlzLmVuZC5wcmV2fSxpLnByb3RvdHlwZS5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX251bU5vZGVzfSxpLnByb3RvdHlwZS5nZXRGcm9tRmlyc3Q9ZnVuY3Rpb24oZSl7dmFyIHQ9MCxuPXRoaXMuc3RhcnQubmV4dDtpZigwPD1lKWZvcig7dDxlJiZudWxsIT09bjspbj1uLm5leHQsKyt0O2Vsc2Ugbj1udWxsO2lmKG51bGw9PT1uKXRocm93XCJJbmRleCBvdXQgb2YgYm91bmRzLlwiO3JldHVybiBufSxpLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PT1lP3RoaXMuZ2V0Rmlyc3QoKTplPT09dGhpcy5fbnVtTm9kZXMtMT90aGlzLmdldExhc3QoKTp0aGlzLmdldEZyb21GaXJzdChlKX0saS5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKGUpe3JldHVybiBlLnByZXYmJihlLnByZXYubmV4dD1lLm5leHQpLGUubmV4dCYmKGUubmV4dC5wcmV2PWUucHJldiksLS10aGlzLl9udW1Ob2RlcyxlfSxpLnByb3RvdHlwZS5yZW1vdmVGaXJzdD1mdW5jdGlvbigpe3ZhciBlPW51bGw7cmV0dXJuIDA8dGhpcy5fbnVtTm9kZXMmJnRoaXMuc3RhcnQubmV4dD90aGlzLnJlbW92ZSh0aGlzLnN0YXJ0Lm5leHQpOmV9LGkucHJvdG90eXBlLnJlbW92ZUxhc3Q9ZnVuY3Rpb24oKXt2YXIgZT1udWxsO3JldHVybiAwPHRoaXMuX251bU5vZGVzJiZ0aGlzLmVuZC5wcmV2P3RoaXMucmVtb3ZlKHRoaXMuZW5kLnByZXYpOmV9LGkucHJvdG90eXBlLnJlbW92ZUFsbD1mdW5jdGlvbigpe3RoaXMuc3RhcnQubmV4dD10aGlzLmVuZCx0aGlzLmVuZC5wcmV2PXRoaXMuc3RhcnQsdGhpcy5fbnVtTm9kZXM9MCx0aGlzLl9pZENvdW50ZXI9MH0saS5wcm90b3R5cGUuZWFjaD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy5zdGFydDt0Lmhhc05leHQoKTspZSh0PXQubmV4dCl9LGkucHJvdG90eXBlLmZpbmQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMuc3RhcnQsbj0hMSxyPW51bGw7dC5oYXNOZXh0KCkmJiFuOyllKHQ9dC5uZXh0KSYmKHI9dCxuPSEwKTtyZXR1cm4gcn0saS5wcm90b3R5cGUubWFwPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLnN0YXJ0LG49W107dC5oYXNOZXh0KCk7KWUodD10Lm5leHQpJiZuLnB1c2godCk7cmV0dXJuIG59LGkucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYWRkTGFzdChlKX0saS5wcm90b3R5cGUudW5zaGlmdD1mdW5jdGlvbihlKXswPHRoaXMuX251bU5vZGVzP3RoaXMuaW5zZXJ0QmVmb3JlKHRoaXMuc3RhcnQubmV4dCxlKTp0aGlzLmluc2VydEJlZm9yZSh0aGlzLmVuZCxlKX0saS5wcm90b3R5cGUucG9wPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVtb3ZlTGFzdCgpfSxpLnByb3RvdHlwZS5zaGlmdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlbW92ZUZpcnN0KCl9LHQuTGlua2VkTGlzdD1pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcigpe3RoaXMudHhpZD0wLHRoaXMubGlua1JldHJ5VGltZT02MCx0aGlzLnVwZGF0ZWRNc2dUaW1lPTAsdGhpcy5jb25uZWN0U2VydmVyPVwiXCJ9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5aZWdvTGluaz12b2lkIDAsci5wcm90b3R5cGUuY3JlYXRlU29ja2V0PWZ1bmN0aW9uKGUpe30sci5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oZSl7fSxyLnByb3RvdHlwZS5pbml0RXZlbnQ9ZnVuY3Rpb24oZSx0LG4scil7fSxyLnByb3RvdHlwZS5zZW5kTWVzc2FnZT1mdW5jdGlvbihlLHQsbixyLG8saSxzLGEpe3ZvaWQgMD09PXImJihyPSEwKSx2b2lkIDA9PT1vJiYobz1udWxsKSx2b2lkIDA9PT1pJiYoaT1udWxsKSx2b2lkIDA9PT1zJiYocz1udWxsKX0sdC5aZWdvTGluaz1yfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5OZXRTb2NrZXRTZXJ2aWNlPXZvaWQgMDt2YXIgcj1uKDE3KTtmdW5jdGlvbiBvKGUpe3RoaXMuc29ja2V0PW51bGwsdGhpcy5FTlY9ZX1vLnByb3RvdHlwZS5jcmVhdGVTb2NrZXQ9ZnVuY3Rpb24oZSl7dGhpcy5zb2NrZXQ9KDAsci5jcmVhdGVaZWdvV2ViU29ja2V0KShlLHRoaXMuRU5WJTIpfSxvLnByb3RvdHlwZS5vcGVuSGFuZGxlcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMuc29ja2V0JiYodGhpcy5zb2NrZXQub25vcGVuPWZ1bmN0aW9uKG4pe3Quc29ja2V0LmJpbmFyeVR5cGU9XCJhcnJheWJ1ZmZlclwiLHQucmVzcG9uc2VIYW5kbGVyKCksZShuKX0pfSxvLnByb3RvdHlwZS5yZXNwb25zZUhhbmRsZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuc29ja2V0JiYodGhpcy5zb2NrZXQub25tZXNzYWdlPWZ1bmN0aW9uKHQpe3Q9XCJzdHJpbmdcIj09dHlwZW9mIHQuZGF0YT9KU09OLnBhcnNlKHQuZGF0YSk6dC5kYXRhLGUub25NZXNzYWdlKHQpfSl9LG8ucHJvdG90eXBlLm9uTWVzc2FnZT1mdW5jdGlvbihlKXt9LG8ucHJvdG90eXBlLmNsb3NlSGFuZGxlcj1mdW5jdGlvbihlKXt0aGlzLnNvY2tldCYmKHRoaXMuc29ja2V0Lm9uY2xvc2U9ZnVuY3Rpb24odCl7ZSh0KX0pfSxvLnByb3RvdHlwZS5lcnJvckhhbmRsZXI9ZnVuY3Rpb24oZSl7dGhpcy5zb2NrZXQmJih0aGlzLnNvY2tldC5vbmVycm9yPWUpfSxvLnByb3RvdHlwZS5jbG9zZVNvY2tldD1mdW5jdGlvbigpe3RoaXMuc29ja2V0JiYodGhpcy5zb2NrZXQub25jbG9zZT1udWxsLHRoaXMuc29ja2V0Lm9uZXJyb3I9bnVsbCx0aGlzLnNvY2tldC5jbG9zZSgpLHRoaXMuc29ja2V0PW51bGwpfSxvLnByb3RvdHlwZS5pc0Rpc0Nvbm5lY3Q9ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5zb2NrZXR8fDEhPT10aGlzLnNvY2tldC5yZWFkeVN0YXRlfSxvLnByb3RvdHlwZS5zZW5kTWVzc2FnZT1mdW5jdGlvbihlKXt0aGlzLmlzRGlzQ29ubmVjdCgpfHx0aGlzLnNvY2tldCYmdGhpcy5FTlYlMiE9MSYmdGhpcy5zb2NrZXQuc2VuZChlKX0sdC5OZXRTb2NrZXRTZXJ2aWNlPW99LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmNyZWF0ZVplZ29XZWJTb2NrZXQ9dC5aZWdvV2VpWGluTWluaVdlYlNvY2tldD10LlpFR09fRU5WPXZvaWQgMCwobz1yPXQuWkVHT19FTlZ8fCh0LlpFR09fRU5WPXt9KSlbby5CUk9XU0VSPTBdPVwiQlJPV1NFUlwiLG9bby5XRUlYSU5NSU5JPTFdPVwiV0VJWElOTUlOSVwiLHMucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuX3dlYnNvY2tldCYmKHRoaXMucmVhZHlTdGF0ZT0wLHRoaXMuX3dlYnNvY2tldC5vbk9wZW4oKGZ1bmN0aW9uKHQpe2UucmVhZHlTdGF0ZT1lLl93ZWJzb2NrZXQucmVhZHlTdGF0ZSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLm9ub3BlbiYmKGUub25vcGVuKHQpLGUuX3dlYnNvY2tldC5vbkNsb3NlKChmdW5jdGlvbih0KXtlLnJlYWR5U3RhdGU9ZS5fd2Vic29ja2V0LnJlYWR5U3RhdGUsXCJmdW5jdGlvblwiPT10eXBlb2YgZS5vbmNsb3NlJiZlLm9uY2xvc2UodCl9KSksZS5fd2Vic29ja2V0Lm9uTWVzc2FnZSgoZnVuY3Rpb24odCl7XCJmdW5jdGlvblwiPT10eXBlb2YgZS5vbm1lc3NhZ2UmJmUub25tZXNzYWdlKHQpfSkpKX0pKSx0aGlzLl93ZWJzb2NrZXQub25FcnJvcigoZnVuY3Rpb24odCl7ZS5yZWFkeVN0YXRlPWUuX3dlYnNvY2tldC5yZWFkeVN0YXRlLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUub25lcnJvciYmZS5vbmVycm9yKHQpfSkpKX0scy5wcm90b3R5cGUub25vcGVuPWZ1bmN0aW9uKGUpe30scy5wcm90b3R5cGUub25lcnJvcj1mdW5jdGlvbihlKXt9LHMucHJvdG90eXBlLm9uY2xvc2U9ZnVuY3Rpb24oZSl7fSxzLnByb3RvdHlwZS5vbm1lc3NhZ2U9ZnVuY3Rpb24oZSl7fSxzLnByb3RvdHlwZS5zZW5kPWZ1bmN0aW9uKGUpe3RoaXMuX3dlYnNvY2tldCYmdGhpcy5fd2Vic29ja2V0LnNlbmQoe2RhdGE6ZX0pfSxzLnByb3RvdHlwZS5jbG9zZT1mdW5jdGlvbigpe3RoaXMuX3dlYnNvY2tldCYmdGhpcy5fd2Vic29ja2V0LmNsb3NlKCl9O3ZhciByLG8saT1zO2Z1bmN0aW9uIHMoZSx0KXt0aGlzLnVybD1lLHRoaXMucmVhZHlTdGF0ZT0zLHRoaXMuX3dlYnNvY2tldD13eC5jb25uZWN0U29ja2V0KHt1cmw6ZX0pLHRoaXMuaW5pdCgpfXQuWmVnb1dlaVhpbk1pbmlXZWJTb2NrZXQ9aSx0LmNyZWF0ZVplZ29XZWJTb2NrZXQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3KHQlMj09PXIuQlJPV1NFUj9XZWJTb2NrZXQ6aSkoZSl9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5OZXRBZ2VudEJ1c2luZXNzUmVxdWVzdE1ncj12b2lkIDA7dmFyIHI9bigwKSxvPW4oMSk7ZnVuY3Rpb24gaShlLHQsbixyKXt0aGlzLnN0cmVhbU1hbmFnZXI9ZSx0aGlzLnByb3RvYnVmPXQsdGhpcy5sb2dnZXI9bix0aGlzLnN0YXRlQ2VudGVyPXJ9aS5wcm90b3R5cGUuZ2V0Q29uZmlnPWZ1bmN0aW9uKGUsdCl7dGhpcy5sb2dnZXIuaW5mbyhcInpuLm5hYi5nYyBjYWxsXCIpLHRoaXMuc3RyZWFtTWFuYWdlci5jcmVhdGVTdHJlYW0oci5TdHJlYW1UeXBlLk9USEVSKS5zZW5kTWVzc2FnZShyLkFjY2Vzc0h1Yk1lc3NhZ2VUeXBlLk1TR19UWVBFX0dFVF9DT05GSUdfUkVRVUVTVCx7emVnb2Nvbm5fdmVyc2lvbjpvLk5FVF9BQ0NFU1NfQ09ORklHLmNvbm5lY3RWZXJ9LGUsdCl9LGkucHJvdG90eXBlLmRpc3BhdGNoVVJMPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpczt0aGlzLmxvZ2dlci5pbmZvKFwiem4ubmFiLmR1IGNhbGxcIiksdGhpcy5zdHJlYW1NYW5hZ2VyLmNyZWF0ZVN0cmVhbShyLlN0cmVhbVR5cGUuT1RIRVIpLnNlbmRNZXNzYWdlKHIuQWNjZXNzSHViTWVzc2FnZVR5cGUuTVNHX1RZUEVfQUNDRVNTSFVCX0RJU1BBVENIX1JFUVVFU1Qse30sKGZ1bmN0aW9uKHQpe24ubG9nZ2VyLmluZm8oXCJ6bi5uYWIuZHUgc3VjIFwiKSxlJiZlKHQpfSksKGZ1bmN0aW9uKGUscixvKXtuLmxvZ2dlci5pbmZvKFwiem4ubmFiLmR1IGZhaWxcIiksdCYmdChvfHxlKX0pKX0saS5wcm90b3R5cGUuZ2V0QXBwQ29uZmlnPWZ1bmN0aW9uKGUsdCxuLGkpe3ZhciBzPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihhLGMpe2Z1bmN0aW9uIHUoZSx0LG4pe2lmKG4pcmV0dXJuIHMubG9nZ2VyLmVycm9yKFwiem4ubmFiLmdhYyBmYWlsIFwiK0pTT04uc3RyaW5naWZ5KG4pKSx2b2lkIGMobik7MD09PWUuY29kZT8ocy5sb2dnZXIuaW5mbyhcInpuLm5hYi5nYWMgc3VjXCIpLG49cy5kZWNvZGVDb25maWdNZXNzYWdlKGUuZGF0YS5kYXRhKSxhKHtjb2RlOjAsZGF0YTpufSkpOihzLmxvZ2dlci5lcnJvcihcInpuLm5hYi5nYWMgZmFpbCBcIitlLmNvZGUpLGMoe2NvZGU6ZS5jb2RlfSkpfXMubG9nZ2VyLmluZm8oXCJ6bi5uYWIuZ2FjIGNhbGxcIik7dmFyIGw9e2lkX25hbWU6dCxjb25maWdfa2V5OmUsdG9rZW46bixtb2RlX25vOihudWxsPT0obD1zLnN0YXRlQ2VudGVyLmFwcEluZm8pP3ZvaWQgMDpsLm1vZGUpfHxvLk5FVF9BQ0NFU1NfQ09ORklHLm1vZGVOb307cy5zdHJlYW1NYW5hZ2VyLmNyZWF0ZVN0cmVhbShyLlN0cmVhbVR5cGUuT1RIRVIpLnNlbmRNZXNzYWdlKHIuQWNjZXNzSHViTWVzc2FnZVR5cGUuTVNHX1RZUEVfR0VUX0FQUENPTkZJR19SRVFVRVNULGwsdSx1LG51bGwse3RpbWVvdXQ6aX0pfSkpfSxpLnByb3RvdHlwZS5kZWNvZGVDb25maWdNZXNzYWdlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnByb3RvYnVmLmRlY29kZUNvbmZpZ01lc3NhZ2UoZSl9LHQuTmV0QWdlbnRCdXNpbmVzc1JlcXVlc3RNZ3I9aX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuTmV0SGVhcnRCZWF0SGFuZGxlcj12b2lkIDA7dmFyIHI9bigzKSxvPW4oMCk7ZnVuY3Rpb24gaShlLHQpe3RoaXMuc3RyZWFtTWFuYWdlcj1lLHRoaXMubG9nZ2VyPXQsdGhpcy5oYlRpbWVyPW51bGwsdGhpcy5oYkludGVydmFsPTUsdGhpcy5oYlRpbWVvdXQ9MTAsdGhpcy5oYlRpbWVvdXRNYXhDb3VudD0wLHRoaXMudHJ5SGJDb3VudD0wfWkucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0aGlzLmxvZ2dlci5pbmZvKFwiem4ubmhiLmlpIGNhbGxcIiksdGhpcy5oYlN0cmVhbXx8KHRoaXMuaGJTdHJlYW09dGhpcy5zdHJlYW1NYW5hZ2VyLmNyZWF0ZVN0cmVhbShvLlN0cmVhbVR5cGUuT1RIRVIpKSwxPD1lLmRhdGEubG9naWNfaGJfaW50ZXJ2YWwmJmUuZGF0YS5sb2dpY19oYl9pbnRlcnZhbDw9MTAmJih0aGlzLmhiSW50ZXJ2YWw9ZS5kYXRhLmxvZ2ljX2hiX2ludGVydmFsKSwzPD1lLmRhdGEubG9naWNfaGJfdGltZW91dCYmZS5kYXRhLmxvZ2ljX2hiX3RpbWVvdXQ8PTMwJiYodGhpcy5oYlRpbWVvdXQ9ZS5kYXRhLmxvZ2ljX2hiX3RpbWVvdXQpLHRoaXMudHJ5SGJDb3VudD0wLHRoaXMuaGJUaW1lb3V0TWF4Q291bnQ9dGhpcy5oYlRpbWVvdXQvdGhpcy5oYkludGVydmFsLHRoaXMuaGJUaW1lciYmY2xlYXJUaW1lb3V0KHRoaXMuaGJUaW1lciksdGhpcy5oYlRpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC5zdGFydCgpfSksMWUzKnRoaXMuaGJJbnRlcnZhbCl9LGkucHJvdG90eXBlLnN0YXJ0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZih0aGlzLmxvZ2dlci5kZWJ1ZyhcInpuLm5oYi5zIGNhbGwgXCIpLHRoaXMudHJ5SGJDb3VudCsrPnRoaXMuaGJUaW1lb3V0TWF4Q291bnQpcmV0dXJuIHRoaXMubG9nZ2VyLmVycm9yKFwiem4ubmhiLnMgY29tZSB0byB0cnkgbGltaXRcIiksdGhpcy5yZXNldCgpLHZvaWQgdGhpcy5uZXRIYkxvZ291dChyLmVycm9yQ29kZUxpc3QuTkVUX0hCX1RJTUVPVVQpO2Z1bmN0aW9uIHQodCxyLG8pe2UubG9nZ2VyLmRlYnVnKFwiem4ubmhiLnMgaGIgY2FsbGJhY2sgXCIrKChuZXcgRGF0ZSkuZ2V0VGltZSgpLW4pKSxvJiYwIT09KG51bGw9PW8/dm9pZCAwOm8uY29kZSk/ZS5sb2dnZXIuaW5mbyhcInpuLm5oYi5zIGZhaWwgXCIrSlNPTi5zdHJpbmdpZnkobykpOmUudHJ5SGJDb3VudD0wfXZhciBuPShuZXcgRGF0ZSkuZ2V0VGltZSgpLGk9e3RzOkRhdGUubm93KCl9O3RoaXMuaGJTdHJlYW0uc2VuZE1lc3NhZ2Uoby5BY2Nlc3NIdWJNZXNzYWdlVHlwZS5NU0dfVFlQRV9IQl9SRVFVRVNULGksdCx0LG51bGwpLHRoaXMuaGJUaW1lciYmY2xlYXJUaW1lb3V0KHRoaXMuaGJUaW1lciksdGhpcy5oYlRpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZS5zdGFydCgpfSksMWUzKnRoaXMuaGJJbnRlcnZhbCl9LGkucHJvdG90eXBlLm5ldEhiTG9nb3V0PWZ1bmN0aW9uKGUpe30saS5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmhiVGltZXImJihjbGVhclRpbWVvdXQodGhpcy5oYlRpbWVyKSx0aGlzLmhiVGltZXI9bnVsbCksdGhpcy50cnlIYkNvdW50PTB9LHQuTmV0SGVhcnRCZWF0SGFuZGxlcj1pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5OZXRBZ2VudFBDUmVxdWVzdE1ncj12b2lkIDA7dmFyIHI9bigwKSxvPW4oMSksaT1uKDUpO2Z1bmN0aW9uIHMoZSx0KXt0aGlzLnN0cmVhbU1hbmFnZXI9ZSx0aGlzLmxvZ2dlcj10LHRoaXMucGNTdHJlYW1SZXF1ZXN0cz1bXSx0aGlzLnBjRXN0YWJsaXNoVGltZW91dD1vLk5FVF9BQ0NFU1NfQ09ORklHLnBjRXN0YWJsaXNoVGltZW91dH1zLnByb3RvdHlwZS5nZXRSZXF1ZXN0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9bmV3IGkuTmV0QWdlbnRQQ1JlcXVlc3QodGhpcy5sb2dnZXIsZSx0aGlzLnN0cmVhbU1hbmFnZXIsdGhpcy5wY0VzdGFibGlzaFRpbWVvdXQsdCksdGhpcy5wY1N0cmVhbVJlcXVlc3RzLnB1c2goZSksZX0scy5wcm90b3R5cGUudXBkYXRlQ29ubmVjdFN0YXRlPWZ1bmN0aW9uKGUsdCxuKXt0aGlzLnBjU3RyZWFtUmVxdWVzdHMuZm9yRWFjaCgoZnVuY3Rpb24obyl7ZT09PXIuUGNDb25uZWN0U3RhdGUuQlJPS0VOP28uZXZlbnRNYW5hZ2VyLmVtaXQoXCJicm9rZW5cIik6ZT09PXIuUGNDb25uZWN0U3RhdGUuRElTQ09OTkVDVCYmby5ldmVudE1hbmFnZXIuZW1pdChcImRpc2Nvbm5lY3RlZFwiLHQsbil9KSl9LHMucHJvdG90eXBlLmNsb3NlUENzPWZ1bmN0aW9uKCl7dGhpcy5wY1N0cmVhbVJlcXVlc3RzLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UuY2xvc2VQYygpfSkpfSxzLnByb3RvdHlwZS5zZXRFc3RhYmxpc2hUaW1lb3V0PWZ1bmN0aW9uKGUpe3RoaXMucGNFc3RhYmxpc2hUaW1lb3V0PWV9LHQuTmV0QWdlbnRQQ1JlcXVlc3RNZ3I9c30sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuTmV0UmV0cnlMaW5rSGFuZGxlcj12b2lkIDA7dmFyIHI9bigzKSxvPW4oMCk7ZnVuY3Rpb24gaShlLHQpe3RoaXMubG9nZ2VyPWUsdGhpcy5zdGF0ZUNlbnRlcj10LHRoaXMuUkVUUllfU1RBUlRfVElNRV9JTlRFUlZBTD00LHRoaXMuUkVUUllfQ09OVElOVUVfQ09VTlQ9Mix0aGlzLlJFVFJZX01BWF9USU1FX0lOVEVSVkFMPTMyLHRoaXMucmV0cnlUaW1lcj1udWxsLHRoaXMubWF4VGltZXI9bnVsbCx0aGlzLnJldHJ5U3RhcnRUaW1lPTAsdGhpcy5yZXRyeUFjdGl2ZUNvdW50PTEsdGhpcy5pc092ZXJUaW1lPSExLHRoaXMuUkVUUllfTUFYX1RJTUU9OTB9aS5wcm90b3R5cGUuaW5pdExpbms9ZnVuY3Rpb24oZSl7dGhpcy5saW5rPWV9LGkucHJvdG90eXBlLnN0YXJ0TWF4VGltZT1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5tYXhUaW1lcnx8KHRoaXMubWF4VGltZXI9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLmxvZ2dlci53YXJuKFwiem4ucmxoLnNtXCIrXCIgb3ZlciBtYXggdGltZSBcIi5jb25jYXQoZS5SRVRSWV9NQVhfVElNRSxcInMsIHN0b3AgcmV0cnlcIikpLGUuaXNPdmVyVGltZT0hMCxlLmxpbmsuZGVzdHJveVNvY2tldCgpLGUuc3RvcE1heFRpbWUoKSxlLmludmFsaWQoKSxlLm9uYWN0aXZlKCExLHIuZXJyb3JDb2RlTGlzdC5ORVRfU09DS0VUX1RJTUVPVVQpfSksMWUzKnRoaXMuUkVUUllfTUFYX1RJTUUpKX0saS5wcm90b3R5cGUuc3RvcE1heFRpbWU9ZnVuY3Rpb24oKXt0aGlzLm1heFRpbWVyJiZjbGVhclRpbWVvdXQodGhpcy5tYXhUaW1lciksdGhpcy5tYXhUaW1lcj1udWxsfSxpLnByb3RvdHlwZS5hY3RpdmU9ZnVuY3Rpb24oZSx0KXt2YXIgbixyPXRoaXM7cmV0dXJuIHRoaXMubG9nZ2VyLmluZm8oXCJ6bi5ybGguYXQgY2FsbCBcIitlK1wiIFwiK3QpLHRoaXMuc3RhdGVDZW50ZXIubmV0d29ya1N0YXRlPT1vLkVOVU1fTkVUV09SS19TVEFURS5vZmZsaW5lPyh0aGlzLmxvZ2dlci5pbmZvKFwiem4ucmxoLmF0IG5ldHdvcmsgaXMgYnJva2VuLCBzdG9wIHJldHJ5XCIpLCExKTp0aGlzLnJldHJ5VGltZXI/KHRoaXMubG9nZ2VyLmluZm8oXCJ6bi5ybGguYXQgaGFzIGFjdGl2ZWQsIGlnbm9yZVwiKSwhMSk6dGhpcy5pc092ZXJUaW1lPyh0aGlzLmxvZ2dlci5pbmZvKFwiem4ucmxoLmF0IHJldHJ5IG92ZXIgdGltZSwgc3RvcCByZXRyeVwiKSwhMSk6KDE9PXRoaXMucmV0cnlBY3RpdmVDb3VudD90aGlzLnJldHJ5QWN0aXZlSW50ZXJ2YWw9TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKigxLXRoaXMuUkVUUllfU1RBUlRfVElNRV9JTlRFUlZBTCkrdGhpcy5SRVRSWV9TVEFSVF9USU1FX0lOVEVSVkFMKToobj1NYXRoLnBvdygyLE1hdGgucm91bmQodGhpcy5yZXRyeUFjdGl2ZUNvdW50L3RoaXMuUkVUUllfQ09OVElOVUVfQ09VTlQrMSkpLHRoaXMucmV0cnlBY3RpdmVJbnRlcnZhbD1uPnRoaXMuUkVUUllfTUFYX1RJTUVfSU5URVJWQUw/dGhpcy5SRVRSWV9NQVhfVElNRV9JTlRFUlZBTDpuKSx0aGlzLmxvZ2dlci5pbmZvKFwiem4ucmxoLmF0IGludGVydmFsIFwiK3RoaXMucmV0cnlBY3RpdmVJbnRlcnZhbCksdGhpcy5yZXRyeVRpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ci5saW5rLmRlc3Ryb3lTb2NrZXQoKSxyLmxpbmsuY29ubmVjdFNvY2tldChlLChmdW5jdGlvbigpe3IubG9nZ2VyLmluZm8oXCJ6bi5ybGguYXQgc3VjXCIpLHIuc3RvcE1heFRpbWUoKSxyLmludmFsaWQoKSxyLm9uYWN0aXZlKCEwKX0pLChmdW5jdGlvbigpe3IubG9nZ2VyLmluZm8oXCJ6bi5ybGguYXQgZmFpbFwiKSxyLm1heFRpbWVyfHxyLnN0YXJ0TWF4VGltZSgpLHIuYWN0aXZlKCEwKX0pKSxyLnJldHJ5VGltZXImJmNsZWFyVGltZW91dChyLnJldHJ5VGltZXIpLHIucmV0cnlUaW1lcj1udWxsLHIucmV0cnlBY3RpdmVDb3VudCsrfSksdD8wOjFlMyp0aGlzLnJldHJ5QWN0aXZlSW50ZXJ2YWwpLCEwKX0saS5wcm90b3R5cGUub25hY3RpdmU9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF19LGkucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oZSx0LG4scil7dGhpcy5pbnZhbGlkKCksdGhpcy5zdG9wTWF4VGltZSgpLHRoaXMuaXNPdmVyVGltZT0hMSxcIm51bWJlclwiPT10eXBlb2YgZSYmZTwzNjAwJiYodGhpcy5SRVRSWV9NQVhfVElNRT1lKSxcIm51bWJlclwiPT10eXBlb2YgdCYmKHRoaXMuUkVUUllfU1RBUlRfVElNRV9JTlRFUlZBTD10KSxcIm51bWJlclwiPT10eXBlb2YgbiYmKHRoaXMuUkVUUllfQ09OVElOVUVfQ09VTlQ9biksXCJudW1iZXJcIj09dHlwZW9mIHImJih0aGlzLlJFVFJZX01BWF9USU1FX0lOVEVSVkFMPXIpfSxpLnByb3RvdHlwZS5pbnZhbGlkPWZ1bmN0aW9uKCl7dGhpcy5yZXRyeVRpbWVyJiZjbGVhclRpbWVvdXQodGhpcy5yZXRyeVRpbWVyKSx0aGlzLnJldHJ5VGltZXI9bnVsbCx0aGlzLnJldHJ5U3RhcnRUaW1lPTAsdGhpcy5yZXRyeUFjdGl2ZUNvdW50PTF9LHQuTmV0UmV0cnlMaW5rSGFuZGxlcj1pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5TdGF0ZUNlbnRlcj12b2lkIDA7dmFyIHI9bigwKTt0LlN0YXRlQ2VudGVyPWZ1bmN0aW9uKCl7dGhpcy5uZXR3b3JrU3RhdGU9ci5FTlVNX05FVFdPUktfU1RBVEUub2ZmbGluZSx0aGlzLnVzZU5ldEFnZW50PSEwLHRoaXMuc3BlY2lmaWVkPSExfX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoKXt9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5aZWdvTG9nZ2VyPXZvaWQgMCxyLnByb3RvdHlwZS5sb2c9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dmFyIG49ZS5qb2luKFwiIFwiKTtjb25zb2xlLmxvZyhuKX0sci5wcm90b3R5cGUuZGVidWc9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dmFyIG49ZS5qb2luKFwiIFwiKTtjb25zb2xlLmRlYnVnKG4pfSxyLnByb3RvdHlwZS5pbmZvPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3ZhciBuPWUuam9pbihcIiBcIik7Y29uc29sZS5pbmZvKG4pfSxyLnByb3RvdHlwZS53YXJuPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3ZhciBuPWUuam9pbihcIiBcIik7Y29uc29sZS53YXJuKG4pfSxyLnByb3RvdHlwZS5lcnJvcj1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTt2YXIgbj1lLmpvaW4oXCIgXCIpO2NvbnNvbGUuZXJyb3Iobil9LHQuWmVnb0xvZ2dlcj1yfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5TdHJlYW1NYW5hZ2VyPXZvaWQgMDt2YXIgcj1uKDApLG89bigyNSk7ZnVuY3Rpb24gaShlKXt0aGlzLnplZ29MaW5rPWUsdGhpcy5zdHJlYW1JRD0xLHRoaXMuaHR0cFN0cmVhbXM9W10sdGhpcy5wY1N0cmVhbXM9W119aS5wcm90b3R5cGUuY3JlYXRlU3RyZWFtPWZ1bmN0aW9uKGUpe3JldHVybiBlIT09ci5TdHJlYW1UeXBlLkhUVFAmJmU9PT1yLlN0cmVhbVR5cGUuUEM/KHQ9bmV3IG8uWmVnb0xpbmtTdHJlYW0oZSx0aGlzLnN0cmVhbUlEKyssdGhpcy56ZWdvTGluayksdGhpcy5wY1N0cmVhbXMucHVzaCh0KSx0KTp0aGlzLmdldFN0cmVhbShlLHRoaXMuaHR0cFN0cmVhbXMpO3ZhciB0fSxpLnByb3RvdHlwZS5nZXRTdHJlYW09ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10LmZpbmQoKGZ1bmN0aW9uKGUpe3JldHVybiEwPT09ZS5pc0ZyZWV9KSksdD8odC5pc0ZyZWU9ITEsdC5pc0ZpcnN0PSExLHQpOih0PW5ldyBvLlplZ29MaW5rU3RyZWFtKGUsdGhpcy5zdHJlYW1JRCsrLHRoaXMuemVnb0xpbmspLHRoaXMuaHR0cFN0cmVhbXMucHVzaCh0KSx0KX0saS5wcm90b3R5cGUub25QdXNoRXZlbnQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXMucGNTdHJlYW1zLmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0LlN0cmVhbUlEPT09ZX0pKTtyJiZyLm9uUHVzaEV2ZW50KHQsbil9LGkucHJvdG90eXBlLmdldFN0cmVhbUlEPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RyZWFtSUQrK30sdC5TdHJlYW1NYW5hZ2VyPWl9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlplZ29MaW5rU3RyZWFtPXZvaWQgMDt2YXIgcj1uKDApO2Z1bmN0aW9uIG8oZSx0LG4pe3RoaXMudHlwZT1lLHRoaXMuc3RyZWFtSUQ9dCx0aGlzLnplZ29MaW5rPW4sdGhpcy5pc0ZyZWU9ITEsdGhpcy5pc0ZpcnN0PSEwfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLnByb3RvdHlwZSxcIlN0cmVhbUlEXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0cmVhbUlEfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLG8ucHJvdG90eXBlLnJlZnJlc2g9ZnVuY3Rpb24oZSl7dGhpcy5zdHJlYW1JRD1lfSxvLnByb3RvdHlwZS5zZW5kTWVzc2FnZT1mdW5jdGlvbihlLHQsbixvLGkscyl7dmFyIGE9dGhpczt2b2lkIDA9PT1uJiYobj1udWxsKSx2b2lkIDA9PT1vJiYobz1udWxsKSx0aGlzLnplZ29MaW5rLnNlbmRNZXNzYWdlKGUsdGhpcy5zdHJlYW1JRCx0LHRoaXMuaXNGaXJzdCwoZnVuY3Rpb24oZSl7YS50eXBlIT09ci5TdHJlYW1UeXBlLlBDJiYoYS5pc0ZyZWU9ITApLG4mJm4oZSl9KSwoZnVuY3Rpb24oZSx0LG4pe2EudHlwZSE9PXIuU3RyZWFtVHlwZS5QQyYmKGEuaXNGcmVlPSEwKSxvJiZvKGUsdCxuKX0pLGk9dm9pZCAwPT09aT9udWxsOmkscz12b2lkIDA9PT1zP3t0aW1lb3V0OjVlMyxpc0luU2VuZE1hcDohMH06cyl9LG8ucHJvdG90eXBlLm9uUHVzaEV2ZW50PWZ1bmN0aW9uKGUsdCl7fSxvLnByb3RvdHlwZS5jbG9zZVN0cmVhbT1mdW5jdGlvbihlLHQpe3RoaXMuemVnb0xpbmsuc2VuZE1lc3NhZ2Uoci5BY2Nlc3NIdWJNZXNzYWdlVHlwZS5NU0dfVFlQRV9TVFJFQU1fQ0xPU0VELHRoaXMuc3RyZWFtSUQse2NvZGU6ZSxtc2c6dH0pfSxvLnByb3RvdHlwZS5pc0Nvbm5lY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy56ZWdvTGluay5pc0Nvbm5lY3QoKX0sdC5aZWdvTGlua1N0cmVhbT1vfV0sYT17fSxyLm09cyxyLmM9YSxyLmQ9ZnVuY3Rpb24oZSx0LG4pe3IubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtlbnVtZXJhYmxlOiEwLGdldDpufSl9LHIucj1mdW5jdGlvbihlKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxyLnQ9ZnVuY3Rpb24oZSx0KXtpZigxJnQmJihlPXIoZSkpLDgmdClyZXR1cm4gZTtpZig0JnQmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIG49T2JqZWN0LmNyZWF0ZShudWxsKTtpZihyLnIobiksT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6ZX0pLDImdCYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpZm9yKHZhciBvIGluIGUpci5kKG4sbyxmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0uYmluZChudWxsLG8pKTtyZXR1cm4gbn0sci5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiByLmQodCxcImFcIix0KSx0fSxyLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LHIucD1cIlwiLHIoci5zPTgpKX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByO2UuZXhwb3J0cz0ocj1uKDIpLGZ1bmN0aW9uKCl7dmFyIGUsdDtcImZ1bmN0aW9uXCI9PXR5cGVvZiBBcnJheUJ1ZmZlciYmKGU9ci5saWIuV29yZEFycmF5LHQ9ZS5pbml0LChlLmluaXQ9ZnVuY3Rpb24oZSl7aWYoKGU9KGU9ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyP25ldyBVaW50OEFycmF5KGUpOmUpaW5zdGFuY2VvZiBJbnQ4QXJyYXl8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OENsYW1wZWRBcnJheSYmZSBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5fHxlIGluc3RhbmNlb2YgSW50MTZBcnJheXx8ZSBpbnN0YW5jZW9mIFVpbnQxNkFycmF5fHxlIGluc3RhbmNlb2YgSW50MzJBcnJheXx8ZSBpbnN0YW5jZW9mIFVpbnQzMkFycmF5fHxlIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5fHxlIGluc3RhbmNlb2YgRmxvYXQ2NEFycmF5P25ldyBVaW50OEFycmF5KGUuYnVmZmVyLGUuYnl0ZU9mZnNldCxlLmJ5dGVMZW5ndGgpOmUpaW5zdGFuY2VvZiBVaW50OEFycmF5KXtmb3IodmFyIG49ZS5ieXRlTGVuZ3RoLHI9W10sbz0wO288bjtvKyspcltvPj4+Ml18PWVbb108PDI0LW8lNCo4O3QuY2FsbCh0aGlzLHIsbil9ZWxzZSB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pLnByb3RvdHlwZT1lKX0oKSxyLmxpYi5Xb3JkQXJyYXkpfSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe2UuZXhwb3J0cz1mdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBvKHMsYSl7aWYoIW5bc10pe2lmKCF0W3NdKXtpZihpKXJldHVybiBpKHMsITApO3ZhciBjPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrcytcIidcIik7dGhyb3cgYy5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGN9Yz1uW3NdPXtleHBvcnRzOnt9fSx0W3NdWzBdLmNhbGwoYy5leHBvcnRzLChmdW5jdGlvbihlKXtyZXR1cm4gbyh0W3NdWzFdW2VdfHxlKX0pLGMsYy5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW3NdLmV4cG9ydHN9Zm9yKHZhciBpPSExLHM9MDtzPHIubGVuZ3RoO3MrKylvKHJbc10pO3JldHVybiBvfSh7MTpbZnVuY3Rpb24oZSxuLHIpeyhmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjt2YXIgdCxyLG8saSxzPWUuTXV0YXRpb25PYnNlcnZlcnx8ZS5XZWJLaXRNdXRhdGlvbk9ic2VydmVyLGE9cz8odD0wLHM9bmV3IHModSkscj1lLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpLHMub2JzZXJ2ZShyLHtjaGFyYWN0ZXJEYXRhOiEwfSksZnVuY3Rpb24oKXtyLmRhdGE9dD0rK3QlMn0pOmUuc2V0SW1tZWRpYXRlfHx2b2lkIDA9PT1lLk1lc3NhZ2VDaGFubmVsP1wiZG9jdW1lbnRcImluIGUmJlwib25yZWFkeXN0YXRlY2hhbmdlXCJpbiBlLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik/ZnVuY3Rpb24oKXt2YXIgdD1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7dC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXt1KCksdC5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCx0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCksdD1udWxsfSxlLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCh0KX06ZnVuY3Rpb24oKXtzZXRUaW1lb3V0KHUsMCl9Oigobz1uZXcgZS5NZXNzYWdlQ2hhbm5lbCkucG9ydDEub25tZXNzYWdlPXUsZnVuY3Rpb24oKXtvLnBvcnQyLnBvc3RNZXNzYWdlKDApfSksYz1bXTtmdW5jdGlvbiB1KCl7aT0hMDtmb3IodmFyIGUsdCxuPWMubGVuZ3RoO247KXtmb3IodD1jLGM9W10sZT0tMTsrK2U8bjspdFtlXSgpO249Yy5sZW5ndGh9aT0hMX1uLmV4cG9ydHM9ZnVuY3Rpb24oZSl7MSE9PWMucHVzaChlKXx8aXx8YSgpfX0pLmNhbGwodGhpcyx2b2lkIDAhPT10P3Q6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XSwyOltmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9ZSgxKTtmdW5jdGlvbiBvKCl7fXZhciBpPXt9LHM9W1wiUkVKRUNURURcIl0sYT1bXCJGVUxGSUxMRURcIl0sYz1bXCJQRU5ESU5HXCJdO2Z1bmN0aW9uIHUoZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwicmVzb2x2ZXIgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO3RoaXMuc3RhdGU9Yyx0aGlzLnF1ZXVlPVtdLHRoaXMub3V0Y29tZT12b2lkIDAsZSE9PW8mJmQodGhpcyxlKX1mdW5jdGlvbiBsKGUsdCxuKXt0aGlzLnByb21pc2U9ZSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYodGhpcy5vbkZ1bGZpbGxlZD10LHRoaXMuY2FsbEZ1bGZpbGxlZD10aGlzLm90aGVyQ2FsbEZ1bGZpbGxlZCksXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmKHRoaXMub25SZWplY3RlZD1uLHRoaXMuY2FsbFJlamVjdGVkPXRoaXMub3RoZXJDYWxsUmVqZWN0ZWQpfWZ1bmN0aW9uIGgoZSx0LG4pe3IoKGZ1bmN0aW9uKCl7dmFyIHI7dHJ5e3I9dChuKX1jYXRjaChyKXtyZXR1cm4gaS5yZWplY3QoZSxyKX1yPT09ZT9pLnJlamVjdChlLG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVzb2x2ZSBwcm9taXNlIHdpdGggaXRzZWxmXCIpKTppLnJlc29sdmUoZSxyKX0pKX1mdW5jdGlvbiBwKGUpe3ZhciB0PWUmJmUudGhlbjtpZihlJiYoXCJvYmplY3RcIj09dHlwZW9mIGV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0KXJldHVybiBmdW5jdGlvbigpe3QuYXBwbHkoZSxhcmd1bWVudHMpfX1mdW5jdGlvbiBkKGUsdCl7dmFyIG49ITE7ZnVuY3Rpb24gcih0KXtufHwobj0hMCxpLnJlamVjdChlLHQpKX1mdW5jdGlvbiBvKHQpe258fChuPSEwLGkucmVzb2x2ZShlLHQpKX12YXIgcz1fKChmdW5jdGlvbigpe3QobyxyKX0pKTtcImVycm9yXCI9PT1zLnN0YXR1cyYmcihzLnZhbHVlKX1mdW5jdGlvbiBfKGUsdCl7dmFyIG49e307dHJ5e24udmFsdWU9ZSh0KSxuLnN0YXR1cz1cInN1Y2Nlc3NcIn1jYXRjaChlKXtuLnN0YXR1cz1cImVycm9yXCIsbi52YWx1ZT1lfXJldHVybiBufSh0LmV4cG9ydHM9dSkucHJvdG90eXBlLmNhdGNoPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnRoZW4obnVsbCxlKX0sdS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJnRoaXMuc3RhdGU9PT1hfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZ0aGlzLnN0YXRlPT09cylyZXR1cm4gdGhpczt2YXIgbj1uZXcgdGhpcy5jb25zdHJ1Y3RvcihvKTtyZXR1cm4gdGhpcy5zdGF0ZSE9PWM/aChuLHRoaXMuc3RhdGU9PT1hP2U6dCx0aGlzLm91dGNvbWUpOnRoaXMucXVldWUucHVzaChuZXcgbChuLGUsdCkpLG59LGwucHJvdG90eXBlLmNhbGxGdWxmaWxsZWQ9ZnVuY3Rpb24oZSl7aS5yZXNvbHZlKHRoaXMucHJvbWlzZSxlKX0sbC5wcm90b3R5cGUub3RoZXJDYWxsRnVsZmlsbGVkPWZ1bmN0aW9uKGUpe2godGhpcy5wcm9taXNlLHRoaXMub25GdWxmaWxsZWQsZSl9LGwucHJvdG90eXBlLmNhbGxSZWplY3RlZD1mdW5jdGlvbihlKXtpLnJlamVjdCh0aGlzLnByb21pc2UsZSl9LGwucHJvdG90eXBlLm90aGVyQ2FsbFJlamVjdGVkPWZ1bmN0aW9uKGUpe2godGhpcy5wcm9taXNlLHRoaXMub25SZWplY3RlZCxlKX0saS5yZXNvbHZlPWZ1bmN0aW9uKGUsdCl7dmFyIG49XyhwLHQpO2lmKFwiZXJyb3JcIj09PW4uc3RhdHVzKXJldHVybiBpLnJlamVjdChlLG4udmFsdWUpO2lmKG49bi52YWx1ZSlkKGUsbik7ZWxzZXtlLnN0YXRlPWEsZS5vdXRjb21lPXQ7Zm9yKHZhciByPS0xLG89ZS5xdWV1ZS5sZW5ndGg7KytyPG87KWUucXVldWVbcl0uY2FsbEZ1bGZpbGxlZCh0KX1yZXR1cm4gZX0saS5yZWplY3Q9ZnVuY3Rpb24oZSx0KXtlLnN0YXRlPXMsZS5vdXRjb21lPXQ7Zm9yKHZhciBuPS0xLHI9ZS5xdWV1ZS5sZW5ndGg7KytuPHI7KWUucXVldWVbbl0uY2FsbFJlamVjdGVkKHQpO3JldHVybiBlfSx1LnJlc29sdmU9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiB0aGlzP2U6aS5yZXNvbHZlKG5ldyB0aGlzKG8pLGUpfSx1LnJlamVjdD1mdW5jdGlvbihlKXt2YXIgdD1uZXcgdGhpcyhvKTtyZXR1cm4gaS5yZWplY3QodCxlKX0sdS5hbGw9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZihcIltvYmplY3QgQXJyYXldXCIhPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkpcmV0dXJuIHRoaXMucmVqZWN0KG5ldyBUeXBlRXJyb3IoXCJtdXN0IGJlIGFuIGFycmF5XCIpKTt2YXIgbj1lLmxlbmd0aCxyPSExO2lmKCFuKXJldHVybiB0aGlzLnJlc29sdmUoW10pO2Zvcih2YXIgcz1uZXcgQXJyYXkobiksYT0wLGM9LTEsdT1uZXcgdGhpcyhvKTsrK2M8bjspIWZ1bmN0aW9uKGUsbyl7dC5yZXNvbHZlKGUpLnRoZW4oKGZ1bmN0aW9uKGUpe3Nbb109ZSwrK2EhPT1ufHxyfHwocj0hMCxpLnJlc29sdmUodSxzKSl9KSwoZnVuY3Rpb24oZSl7cnx8KHI9ITAsaS5yZWplY3QodSxlKSl9KSl9KGVbY10sYyk7cmV0dXJuIHV9LHUucmFjZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKFwiW29iamVjdCBBcnJheV1cIiE9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSlyZXR1cm4gdGhpcy5yZWplY3QobmV3IFR5cGVFcnJvcihcIm11c3QgYmUgYW4gYXJyYXlcIikpO3ZhciBuPWUubGVuZ3RoLHI9ITE7aWYoIW4pcmV0dXJuIHRoaXMucmVzb2x2ZShbXSk7Zm9yKHZhciBzPS0xLGE9bmV3IHRoaXMobyk7KytzPG47KSFmdW5jdGlvbihlKXt0LnJlc29sdmUoZSkudGhlbigoZnVuY3Rpb24oZSl7cnx8KHI9ITAsaS5yZXNvbHZlKGEsZSkpfSksKGZ1bmN0aW9uKGUpe3J8fChyPSEwLGkucmVqZWN0KGEsZSkpfSkpfShlW3NdKTtyZXR1cm4gYX19LHsxOjF9XSwzOltmdW5jdGlvbihlLG4scil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO1wiZnVuY3Rpb25cIiE9dHlwZW9mIHQuUHJvbWlzZSYmKHQuUHJvbWlzZT1lKDIpKX0pLmNhbGwodGhpcyx2b2lkIDAhPT10P3Q6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHsyOjJ9XSw0OltmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0sbz1mdW5jdGlvbigpe3RyeXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgaW5kZXhlZERCKXJldHVybiBpbmRleGVkREI7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdlYmtpdEluZGV4ZWREQilyZXR1cm4gd2Via2l0SW5kZXhlZERCO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb3pJbmRleGVkREIpcmV0dXJuIG1vekluZGV4ZWREQjtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgT0luZGV4ZWREQilyZXR1cm4gT0luZGV4ZWREQjtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgbXNJbmRleGVkREIpcmV0dXJuIG1zSW5kZXhlZERCfWNhdGNoKGUpe3JldHVybn19KCk7ZnVuY3Rpb24gaShlLHQpe2U9ZXx8W10sdD10fHx7fTt0cnl7cmV0dXJuIG5ldyBCbG9iKGUsdCl9Y2F0Y2gobyl7aWYoXCJUeXBlRXJyb3JcIiE9PW8ubmFtZSl0aHJvdyBvO2Zvcih2YXIgbj1uZXcoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEJsb2JCdWlsZGVyP0Jsb2JCdWlsZGVyOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBNU0Jsb2JCdWlsZGVyP01TQmxvYkJ1aWxkZXI6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIE1vekJsb2JCdWlsZGVyP01vekJsb2JCdWlsZGVyOldlYktpdEJsb2JCdWlsZGVyKSxyPTA7cjxlLmxlbmd0aDtyKz0xKW4uYXBwZW5kKGVbcl0pO3JldHVybiBuLmdldEJsb2IodC50eXBlKX19XCJ1bmRlZmluZWRcIj09dHlwZW9mIFByb21pc2UmJmUoMyk7dmFyIHM9UHJvbWlzZTtmdW5jdGlvbiBhKGUsdCl7dCYmZS50aGVuKChmdW5jdGlvbihlKXt0KG51bGwsZSl9KSwoZnVuY3Rpb24oZSl7dChlKX0pKX1mdW5jdGlvbiBjKGUsdCxuKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiZlLnRoZW4odCksXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmZS5jYXRjaChuKX1mdW5jdGlvbiB1KGUpe3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBlJiYoY29uc29sZS53YXJuKGUrXCIgdXNlZCBhcyBhIGtleSwgYnV0IGl0IGlzIG5vdCBhIHN0cmluZy5cIiksZT1TdHJpbmcoZSkpLGV9ZnVuY3Rpb24gbCgpe2lmKGFyZ3VtZW50cy5sZW5ndGgmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdKXJldHVybiBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXX12YXIgaD1cImxvY2FsLWZvcmFnZS1kZXRlY3QtYmxvYi1zdXBwb3J0XCIscD12b2lkIDAsZD17fSxfPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsZj1cInJlYWRvbmx5XCIsZz1cInJlYWR3cml0ZVwiO2Z1bmN0aW9uIG0oZSl7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBwP3MucmVzb2x2ZShwKToodD1lLG5ldyBzKChmdW5jdGlvbihlKXt2YXIgbj10LnRyYW5zYWN0aW9uKGgsZykscj1pKFtcIlwiXSk7bi5vYmplY3RTdG9yZShoKS5wdXQocixcImtleVwiKSxuLm9uYWJvcnQ9ZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCksZSghMSl9LG4ub25jb21wbGV0ZT1mdW5jdGlvbigpe3ZhciB0PW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pLG49bmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLy8pO2Uobnx8IXR8fDQzPD1wYXJzZUludCh0WzFdLDEwKSl9fSkpLmNhdGNoKChmdW5jdGlvbigpe3JldHVybiExfSkpLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiBwPWV9KSkpO3ZhciB0fWZ1bmN0aW9uIHkoZSl7ZT1kW2UubmFtZV07dmFyIHQ9e307dC5wcm9taXNlPW5ldyBzKChmdW5jdGlvbihlLG4pe3QucmVzb2x2ZT1lLHQucmVqZWN0PW59KSksZS5kZWZlcnJlZE9wZXJhdGlvbnMucHVzaCh0KSxlLmRiUmVhZHk/ZS5kYlJlYWR5PWUuZGJSZWFkeS50aGVuKChmdW5jdGlvbigpe3JldHVybiB0LnByb21pc2V9KSk6ZS5kYlJlYWR5PXQucHJvbWlzZX1mdW5jdGlvbiB2KGUpeyhlPWRbZS5uYW1lXS5kZWZlcnJlZE9wZXJhdGlvbnMucG9wKCkpJiYoZS5yZXNvbHZlKCksZS5wcm9taXNlKX1mdW5jdGlvbiBiKGUsdCl7aWYoZT1kW2UubmFtZV0uZGVmZXJyZWRPcGVyYXRpb25zLnBvcCgpKXJldHVybiBlLnJlamVjdCh0KSxlLnByb21pc2V9ZnVuY3Rpb24gRShlLHQpe3JldHVybiBuZXcgcygoZnVuY3Rpb24obixyKXtpZihkW2UubmFtZV09ZFtlLm5hbWVdfHx7Zm9yYWdlczpbXSxkYjpudWxsLGRiUmVhZHk6bnVsbCxkZWZlcnJlZE9wZXJhdGlvbnM6W119LGUuZGIpe2lmKCF0KXJldHVybiBuKGUuZGIpO3koZSksZS5kYi5jbG9zZSgpfXZhciBpPVtlLm5hbWVdLHM9KHQmJmkucHVzaChlLnZlcnNpb24pLG8ub3Blbi5hcHBseShvLGkpKTt0JiYocy5vbnVwZ3JhZGVuZWVkZWQ9ZnVuY3Rpb24odCl7dmFyIG49cy5yZXN1bHQ7dHJ5e24uY3JlYXRlT2JqZWN0U3RvcmUoZS5zdG9yZU5hbWUpLHQub2xkVmVyc2lvbjw9MSYmbi5jcmVhdGVPYmplY3RTdG9yZShoKX1jYXRjaChuKXtpZihcIkNvbnN0cmFpbnRFcnJvclwiIT09bi5uYW1lKXRocm93IG47Y29uc29sZS53YXJuKCdUaGUgZGF0YWJhc2UgXCInK2UubmFtZSsnXCIgaGFzIGJlZW4gdXBncmFkZWQgZnJvbSB2ZXJzaW9uICcrdC5vbGRWZXJzaW9uK1wiIHRvIHZlcnNpb24gXCIrdC5uZXdWZXJzaW9uKycsIGJ1dCB0aGUgc3RvcmFnZSBcIicrZS5zdG9yZU5hbWUrJ1wiIGFscmVhZHkgZXhpc3RzLicpfX0pLHMub25lcnJvcj1mdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCkscihzLmVycm9yKX0scy5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXtuKHMucmVzdWx0KSx2KGUpfX0pKX1mdW5jdGlvbiBPKGUpe3JldHVybiBFKGUsITEpfWZ1bmN0aW9uIFQoZSl7cmV0dXJuIEUoZSwhMCl9ZnVuY3Rpb24gUyhlLHQpe2lmKCFlLmRiKXJldHVybiAxO3ZhciBuPSFlLmRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoZS5zdG9yZU5hbWUpLHI9ZS52ZXJzaW9uPGUuZGIudmVyc2lvbixvPWUudmVyc2lvbj5lLmRiLnZlcnNpb247cmV0dXJuIHImJihlLnZlcnNpb24hPT10JiZjb25zb2xlLndhcm4oJ1RoZSBkYXRhYmFzZSBcIicrZS5uYW1lK1wiXFxcIiBjYW4ndCBiZSBkb3duZ3JhZGVkIGZyb20gdmVyc2lvbiBcIitlLmRiLnZlcnNpb24rXCIgdG8gdmVyc2lvbiBcIitlLnZlcnNpb24rXCIuXCIpLGUudmVyc2lvbj1lLmRiLnZlcnNpb24pLChvfHxuKSYmKG4mJihyPWUuZGIudmVyc2lvbisxKT5lLnZlcnNpb24mJihlLnZlcnNpb249ciksMSl9ZnVuY3Rpb24gUihlKXtyZXR1cm4gaShbZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUubGVuZ3RoLG49bmV3IEFycmF5QnVmZmVyKHQpLHI9bmV3IFVpbnQ4QXJyYXkobiksbz0wO288dDtvKyspcltvXT1lLmNoYXJDb2RlQXQobyk7cmV0dXJuIG59KGF0b2IoZS5kYXRhKSldLHt0eXBlOmUudHlwZX0pfWZ1bmN0aW9uIGsoZSl7cmV0dXJuIGUmJmUuX19sb2NhbF9mb3JhZ2VfZW5jb2RlZF9ibG9ifWZ1bmN0aW9uIEMoZSl7dmFyIHQ9dGhpcyxuPXQuX2luaXRSZWFkeSgpLnRoZW4oKGZ1bmN0aW9uKCl7dmFyIGU9ZFt0Ll9kYkluZm8ubmFtZV07aWYoZSYmZS5kYlJlYWR5KXJldHVybiBlLmRiUmVhZHl9KSk7cmV0dXJuIGMobixlLGUpLG59ZnVuY3Rpb24gdyhlLHQsbixyKXt2b2lkIDA9PT1yJiYocj0xKTt0cnl7dmFyIG89ZS5kYi50cmFuc2FjdGlvbihlLnN0b3JlTmFtZSx0KTtuKG51bGwsbyl9Y2F0Y2gobyl7aWYoMDxyJiYoIWUuZGJ8fFwiSW52YWxpZFN0YXRlRXJyb3JcIj09PW8ubmFtZXx8XCJOb3RGb3VuZEVycm9yXCI9PT1vLm5hbWUpKXJldHVybiBzLnJlc29sdmUoKS50aGVuKChmdW5jdGlvbigpe2lmKCFlLmRifHxcIk5vdEZvdW5kRXJyb3JcIj09PW8ubmFtZSYmIWUuZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhlLnN0b3JlTmFtZSkmJmUudmVyc2lvbjw9ZS5kYi52ZXJzaW9uKXJldHVybiBlLmRiJiYoZS52ZXJzaW9uPWUuZGIudmVyc2lvbisxKSxUKGUpfSkpLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3koZSk7Zm9yKHZhciB0PWRbZS5uYW1lXSxuPXQuZm9yYWdlcyxyPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBvPW5bcl07by5fZGJJbmZvLmRiJiYoby5fZGJJbmZvLmRiLmNsb3NlKCksby5fZGJJbmZvLmRiPW51bGwpfXJldHVybiBlLmRiPW51bGwsTyhlKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gZS5kYj10LFMoZSk/VChlKTp0fSkpLnRoZW4oKGZ1bmN0aW9uKHIpe2UuZGI9dC5kYj1yO2Zvcih2YXIgbz0wO288bi5sZW5ndGg7bysrKW5bb10uX2RiSW5mby5kYj1yfSkpLmNhdGNoKChmdW5jdGlvbih0KXt0aHJvdyBiKGUsdCksdH0pKX0oZSkudGhlbigoZnVuY3Rpb24oKXt3KGUsdCxuLHItMSl9KSl9KSkuY2F0Y2gobik7bihvKX19ZT17X2RyaXZlcjpcImFzeW5jU3RvcmFnZVwiLF9pbml0U3RvcmFnZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49e2RiOm51bGx9O2lmKGUpZm9yKHZhciByIGluIGUpbltyXT1lW3JdO3ZhciBvPWRbbi5uYW1lXSxpPShvfHwobz17Zm9yYWdlczpbXSxkYjpudWxsLGRiUmVhZHk6bnVsbCxkZWZlcnJlZE9wZXJhdGlvbnM6W119LGRbbi5uYW1lXT1vKSxvLmZvcmFnZXMucHVzaCh0KSx0Ll9pbml0UmVhZHl8fCh0Ll9pbml0UmVhZHk9dC5yZWFkeSx0LnJlYWR5PUMpLFtdKTtmdW5jdGlvbiBhKCl7cmV0dXJuIHMucmVzb2x2ZSgpfWZvcih2YXIgYz0wO2M8by5mb3JhZ2VzLmxlbmd0aDtjKyspe3ZhciB1PW8uZm9yYWdlc1tjXTt1IT09dCYmaS5wdXNoKHUuX2luaXRSZWFkeSgpLmNhdGNoKGEpKX12YXIgbD1vLmZvcmFnZXMuc2xpY2UoMCk7cmV0dXJuIHMuYWxsKGkpLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIG4uZGI9by5kYixPKG4pfSkpLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiBuLmRiPWUsUyhuLHQuX2RlZmF1bHRDb25maWcudmVyc2lvbik/VChuKTplfSkpLnRoZW4oKGZ1bmN0aW9uKGUpe24uZGI9by5kYj1lLHQuX2RiSW5mbz1uO2Zvcih2YXIgcj0wO3I8bC5sZW5ndGg7cisrKXt2YXIgaT1sW3JdO2khPT10JiYoaS5fZGJJbmZvLmRiPW4uZGIsaS5fZGJJbmZvLnZlcnNpb249bi52ZXJzaW9uKX19KSl9LF9zdXBwb3J0OmZ1bmN0aW9uKCl7dHJ5e2lmKCFvfHwhby5vcGVuKXJldHVybiExO3ZhciBlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBvcGVuRGF0YWJhc2UmJi8oU2FmYXJpfGlQaG9uZXxpUGFkfGlQb2QpLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpJiYhL0Nocm9tZS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmIS9CbGFja0JlcnJ5Ly50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSksdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBmZXRjaCYmLTEhPT1mZXRjaC50b1N0cmluZygpLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVcIik7cmV0dXJuKCFlfHx0KSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGluZGV4ZWREQiYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIElEQktleVJhbmdlfWNhdGNoKGUpe3JldHVybiExfX0oKSxpdGVyYXRlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcyxyPW5ldyBzKChmdW5jdGlvbih0LHIpe24ucmVhZHkoKS50aGVuKChmdW5jdGlvbigpe3cobi5fZGJJbmZvLGYsKGZ1bmN0aW9uKG8saSl7aWYobylyZXR1cm4gcihvKTt0cnl7dmFyIHM9aS5vYmplY3RTdG9yZShuLl9kYkluZm8uc3RvcmVOYW1lKS5vcGVuQ3Vyc29yKCksYT0xO3Mub25zdWNjZXNzPWZ1bmN0aW9uKCl7dmFyIG4scj1zLnJlc3VsdDtyPyhrKG49ci52YWx1ZSkmJihuPVIobikpLHZvaWQgMCE9PShuPWUobixyLmtleSxhKyspKT90KG4pOnIuY29udGludWUoKSk6dCgpfSxzLm9uZXJyb3I9ZnVuY3Rpb24oKXtyKHMuZXJyb3IpfX1jYXRjaChvKXtyKG8pfX0pKX0pKS5jYXRjaChyKX0pKTtyZXR1cm4gYShyLHQpLHJ9LGdldEl0ZW06ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLHI9KGU9dShlKSxuZXcgcygoZnVuY3Rpb24odCxyKXtuLnJlYWR5KCkudGhlbigoZnVuY3Rpb24oKXt3KG4uX2RiSW5mbyxmLChmdW5jdGlvbihvLGkpe2lmKG8pcmV0dXJuIHIobyk7dHJ5e3ZhciBzPWkub2JqZWN0U3RvcmUobi5fZGJJbmZvLnN0b3JlTmFtZSkuZ2V0KGUpO3Mub25zdWNjZXNzPWZ1bmN0aW9uKCl7dmFyIGU9cy5yZXN1bHQ7ayhlPXZvaWQgMD09PWU/bnVsbDplKSYmKGU9UihlKSksdChlKX0scy5vbmVycm9yPWZ1bmN0aW9uKCl7cihzLmVycm9yKX19Y2F0Y2gobyl7cihvKX19KSl9KSkuY2F0Y2gocil9KSkpO3JldHVybiBhKHIsdCkscn0sc2V0SXRlbTpmdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcyxvPShlPXUoZSksbmV3IHMoKGZ1bmN0aW9uKG4sbyl7dmFyIGk7ci5yZWFkeSgpLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIGk9ci5fZGJJbmZvLFwiW29iamVjdCBCbG9iXVwiPT09Xy5jYWxsKHQpP20oaS5kYikudGhlbigoZnVuY3Rpb24oZSl7cmV0dXJuIGU/dDoobj10LG5ldyBzKChmdW5jdGlvbihlLHQpe3ZhciByPW5ldyBGaWxlUmVhZGVyO3Iub25lcnJvcj10LHIub25sb2FkZW5kPWZ1bmN0aW9uKHQpe3Q9YnRvYSh0LnRhcmdldC5yZXN1bHR8fFwiXCIpLGUoe19fbG9jYWxfZm9yYWdlX2VuY29kZWRfYmxvYjohMCxkYXRhOnQsdHlwZTpuLnR5cGV9KX0sci5yZWFkQXNCaW5hcnlTdHJpbmcobil9KSkpO3ZhciBufSkpOnR9KSkudGhlbigoZnVuY3Rpb24odCl7dyhyLl9kYkluZm8sZywoZnVuY3Rpb24oaSxzKXtpZihpKXJldHVybiBvKGkpO3RyeXt2YXIgYT1zLm9iamVjdFN0b3JlKHIuX2RiSW5mby5zdG9yZU5hbWUpLGM9KG51bGw9PT10JiYodD12b2lkIDApLGEucHV0KHQsZSkpO3Mub25jb21wbGV0ZT1mdW5jdGlvbigpe24odD12b2lkIDA9PT10P251bGw6dCl9LHMub25hYm9ydD1zLm9uZXJyb3I9ZnVuY3Rpb24oKXt2YXIgZT1jLmVycm9yfHxjLnRyYW5zYWN0aW9uLmVycm9yO28oZSl9fWNhdGNoKGkpe28oaSl9fSkpfSkpLmNhdGNoKG8pfSkpKTtyZXR1cm4gYShvLG4pLG99LHJlbW92ZUl0ZW06ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLHI9KGU9dShlKSxuZXcgcygoZnVuY3Rpb24odCxyKXtuLnJlYWR5KCkudGhlbigoZnVuY3Rpb24oKXt3KG4uX2RiSW5mbyxnLChmdW5jdGlvbihvLGkpe2lmKG8pcmV0dXJuIHIobyk7dHJ5e3ZhciBzPWkub2JqZWN0U3RvcmUobi5fZGJJbmZvLnN0b3JlTmFtZSkuZGVsZXRlKGUpO2kub25jb21wbGV0ZT1mdW5jdGlvbigpe3QoKX0saS5vbmVycm9yPWZ1bmN0aW9uKCl7cihzLmVycm9yKX0saS5vbmFib3J0PWZ1bmN0aW9uKCl7dmFyIGU9cy5lcnJvcnx8cy50cmFuc2FjdGlvbi5lcnJvcjtyKGUpfX1jYXRjaChvKXtyKG8pfX0pKX0pKS5jYXRjaChyKX0pKSk7cmV0dXJuIGEocix0KSxyfSxjbGVhcjpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49bmV3IHMoKGZ1bmN0aW9uKGUsbil7dC5yZWFkeSgpLnRoZW4oKGZ1bmN0aW9uKCl7dyh0Ll9kYkluZm8sZywoZnVuY3Rpb24ocixvKXtpZihyKXJldHVybiBuKHIpO3RyeXt2YXIgaT1vLm9iamVjdFN0b3JlKHQuX2RiSW5mby5zdG9yZU5hbWUpLmNsZWFyKCk7by5vbmNvbXBsZXRlPWZ1bmN0aW9uKCl7ZSgpfSxvLm9uYWJvcnQ9by5vbmVycm9yPWZ1bmN0aW9uKCl7dmFyIGU9aS5lcnJvcnx8aS50cmFuc2FjdGlvbi5lcnJvcjtuKGUpfX1jYXRjaChyKXtuKHIpfX0pKX0pKS5jYXRjaChuKX0pKTtyZXR1cm4gYShuLGUpLG59LGxlbmd0aDpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49bmV3IHMoKGZ1bmN0aW9uKGUsbil7dC5yZWFkeSgpLnRoZW4oKGZ1bmN0aW9uKCl7dyh0Ll9kYkluZm8sZiwoZnVuY3Rpb24ocixvKXtpZihyKXJldHVybiBuKHIpO3RyeXt2YXIgaT1vLm9iamVjdFN0b3JlKHQuX2RiSW5mby5zdG9yZU5hbWUpLmNvdW50KCk7aS5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXtlKGkucmVzdWx0KX0saS5vbmVycm9yPWZ1bmN0aW9uKCl7bihpLmVycm9yKX19Y2F0Y2gocil7bihyKX19KSl9KSkuY2F0Y2gobil9KSk7cmV0dXJuIGEobixlKSxufSxrZXk6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLHI9bmV3IHMoKGZ1bmN0aW9uKHQscil7ZTwwP3QobnVsbCk6bi5yZWFkeSgpLnRoZW4oKGZ1bmN0aW9uKCl7dyhuLl9kYkluZm8sZiwoZnVuY3Rpb24obyxpKXtpZihvKXJldHVybiByKG8pO3RyeXt2YXIgcz1pLm9iamVjdFN0b3JlKG4uX2RiSW5mby5zdG9yZU5hbWUpLGE9ITEsYz1zLm9wZW5LZXlDdXJzb3IoKTtjLm9uc3VjY2Vzcz1mdW5jdGlvbigpe3ZhciBuPWMucmVzdWx0O24/MD09PWV8fGE/dChuLmtleSk6KGE9ITAsbi5hZHZhbmNlKGUpKTp0KG51bGwpfSxjLm9uZXJyb3I9ZnVuY3Rpb24oKXtyKGMuZXJyb3IpfX1jYXRjaChvKXtyKG8pfX0pKX0pKS5jYXRjaChyKX0pKTtyZXR1cm4gYShyLHQpLHJ9LGtleXM6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPW5ldyBzKChmdW5jdGlvbihlLG4pe3QucmVhZHkoKS50aGVuKChmdW5jdGlvbigpe3codC5fZGJJbmZvLGYsKGZ1bmN0aW9uKHIsbyl7aWYocilyZXR1cm4gbihyKTt0cnl7dmFyIGk9by5vYmplY3RTdG9yZSh0Ll9kYkluZm8uc3RvcmVOYW1lKS5vcGVuS2V5Q3Vyc29yKCkscz1bXTtpLm9uc3VjY2Vzcz1mdW5jdGlvbigpe3ZhciB0PWkucmVzdWx0O3Q/KHMucHVzaCh0LmtleSksdC5jb250aW51ZSgpKTplKHMpfSxpLm9uZXJyb3I9ZnVuY3Rpb24oKXtuKGkuZXJyb3IpfX1jYXRjaChyKXtuKHIpfX0pKX0pKS5jYXRjaChuKX0pKTtyZXR1cm4gYShuLGUpLG59LGRyb3BJbnN0YW5jZTpmdW5jdGlvbihlLHQpe3Q9bC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIG49dGhpcy5jb25maWcoKTtyZXR1cm4oZT1cImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZlfHx7fSkubmFtZXx8KGUubmFtZT1lLm5hbWV8fG4ubmFtZSxlLnN0b3JlTmFtZT1lLnN0b3JlTmFtZXx8bi5zdG9yZU5hbWUpLGEobj1lLm5hbWU/KG49ZS5uYW1lPT09bi5uYW1lJiZ0aGlzLl9kYkluZm8uZGI/cy5yZXNvbHZlKHRoaXMuX2RiSW5mby5kYik6TyhlKS50aGVuKChmdW5jdGlvbih0KXt2YXIgbj1kW2UubmFtZV0scj1uLmZvcmFnZXM7bi5kYj10O2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXJbb10uX2RiSW5mby5kYj10O3JldHVybiB0fSkpLGUuc3RvcmVOYW1lP24udGhlbigoZnVuY3Rpb24odCl7aWYodC5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKGUuc3RvcmVOYW1lKSl7dmFyIG49dC52ZXJzaW9uKzEscj0oeShlKSxkW2UubmFtZV0pLGk9ci5mb3JhZ2VzO3QuY2xvc2UoKTtmb3IodmFyIGE9MDthPGkubGVuZ3RoO2ErKyl7dmFyIGM9aVthXTtjLl9kYkluZm8uZGI9bnVsbCxjLl9kYkluZm8udmVyc2lvbj1ufXJldHVybiBuZXcgcygoZnVuY3Rpb24odCxyKXt2YXIgaT1vLm9wZW4oZS5uYW1lLG4pO2kub25lcnJvcj1mdW5jdGlvbihlKXtpLnJlc3VsdC5jbG9zZSgpLHIoZSl9LGkub251cGdyYWRlbmVlZGVkPWZ1bmN0aW9uKCl7aS5yZXN1bHQuZGVsZXRlT2JqZWN0U3RvcmUoZS5zdG9yZU5hbWUpfSxpLm9uc3VjY2Vzcz1mdW5jdGlvbigpe3ZhciBlPWkucmVzdWx0O2UuY2xvc2UoKSx0KGUpfX0pKS50aGVuKChmdW5jdGlvbihlKXtyLmRiPWU7Zm9yKHZhciB0PTA7dDxpLmxlbmd0aDt0Kyspe3ZhciBuPWlbdF07bi5fZGJJbmZvLmRiPWUsdihuLl9kYkluZm8pfX0pKS5jYXRjaCgoZnVuY3Rpb24odCl7dGhyb3coYihlLHQpfHxzLnJlc29sdmUoKSkuY2F0Y2goKGZ1bmN0aW9uKCl7fSkpLHR9KSl9fSkpOm4udGhlbigoZnVuY3Rpb24odCl7eShlKTt2YXIgbj1kW2UubmFtZV0scj1uLmZvcmFnZXM7dC5jbG9zZSgpO2Zvcih2YXIgaT0wO2k8ci5sZW5ndGg7aSsrKXJbaV0uX2RiSW5mby5kYj1udWxsO3JldHVybiBuZXcgcygoZnVuY3Rpb24odCxuKXt2YXIgcj1vLmRlbGV0ZURhdGFiYXNlKGUubmFtZSk7ci5vbmVycm9yPXIub25ibG9ja2VkPWZ1bmN0aW9uKGUpe3ZhciB0PXIucmVzdWx0O3QmJnQuY2xvc2UoKSxuKGUpfSxyLm9uc3VjY2Vzcz1mdW5jdGlvbigpe3ZhciBlPXIucmVzdWx0O2UmJmUuY2xvc2UoKSx0KGUpfX0pKS50aGVuKChmdW5jdGlvbihlKXtuLmRiPWU7Zm9yKHZhciB0PTA7dDxyLmxlbmd0aDt0KyspdihyW3RdLl9kYkluZm8pfSkpLmNhdGNoKChmdW5jdGlvbih0KXt0aHJvdyhiKGUsdCl8fHMucmVzb2x2ZSgpKS5jYXRjaCgoZnVuY3Rpb24oKXt9KSksdH0pKX0pKSk6cy5yZWplY3QoXCJJbnZhbGlkIGFyZ3VtZW50c1wiKSx0KSxufX07dmFyIE49XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCIsST0vXn5+bG9jYWxfZm9yYWdlX3R5cGV+KFtefl0rKX4vLE09XCJfX2xmc2NfXzpcIixMPU0ubGVuZ3RoLFA9TCtcImFyYmZcIi5sZW5ndGgsQT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO2Z1bmN0aW9uIEQoZSl7Zm9yKHZhciB0LG4scixvLGk9Ljc1KmUubGVuZ3RoLHM9ZS5sZW5ndGgsYT0wLGM9KGk9KFwiPVwiPT09ZVtlLmxlbmd0aC0xXSYmKGktLSxcIj1cIj09PWVbZS5sZW5ndGgtMl0mJmktLSksbmV3IEFycmF5QnVmZmVyKGkpKSxuZXcgVWludDhBcnJheShpKSksdT0wO3U8czt1Kz00KXQ9Ti5pbmRleE9mKGVbdV0pLG49Ti5pbmRleE9mKGVbdSsxXSkscj1OLmluZGV4T2YoZVt1KzJdKSxvPU4uaW5kZXhPZihlW3UrM10pLGNbYSsrXT10PDwyfG4+PjQsY1thKytdPSgxNSZuKTw8NHxyPj4yLGNbYSsrXT0oMyZyKTw8Nnw2MyZvO3JldHVybiBpfWZ1bmN0aW9uIEgoZSl7Zm9yKHZhciB0PW5ldyBVaW50OEFycmF5KGUpLG49XCJcIixyPTA7cjx0Lmxlbmd0aDtyKz0zKW49KG49KG49KG4rPU5bdFtyXT4+Ml0pK05bKDMmdFtyXSk8PDR8dFtyKzFdPj40XSkrTlsoMTUmdFtyKzFdKTw8Mnx0W3IrMl0+PjZdKStOWzYzJnRbcisyXV07cmV0dXJuIHQubGVuZ3RoJTM9PTI/bj1uLnN1YnN0cmluZygwLG4ubGVuZ3RoLTEpK1wiPVwiOnQubGVuZ3RoJTM9PTEmJihuPW4uc3Vic3RyaW5nKDAsbi5sZW5ndGgtMikrXCI9PVwiKSxufXZhciBqPXtzZXJpYWxpemU6ZnVuY3Rpb24oZSx0KXt2YXIgbj1cIlwiO2lmKGUmJihuPUEuY2FsbChlKSksZSYmKFwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PW58fGUuYnVmZmVyJiZcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT1BLmNhbGwoZS5idWZmZXIpKSl7dmFyIHIsbz1NO2UgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcj8ocj1lLG8rPVwiYXJiZlwiKToocj1lLmJ1ZmZlcixcIltvYmplY3QgSW50OEFycmF5XVwiPT09bj9vKz1cInNpMDhcIjpcIltvYmplY3QgVWludDhBcnJheV1cIj09PW4/bys9XCJ1aTA4XCI6XCJbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XVwiPT09bj9vKz1cInVpYzhcIjpcIltvYmplY3QgSW50MTZBcnJheV1cIj09PW4/bys9XCJzaTE2XCI6XCJbb2JqZWN0IFVpbnQxNkFycmF5XVwiPT09bj9vKz1cInVyMTZcIjpcIltvYmplY3QgSW50MzJBcnJheV1cIj09PW4/bys9XCJzaTMyXCI6XCJbb2JqZWN0IFVpbnQzMkFycmF5XVwiPT09bj9vKz1cInVpMzJcIjpcIltvYmplY3QgRmxvYXQzMkFycmF5XVwiPT09bj9vKz1cImZsMzJcIjpcIltvYmplY3QgRmxvYXQ2NEFycmF5XVwiPT09bj9vKz1cImZsNjRcIjp0KG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZXQgdHlwZSBmb3IgQmluYXJ5QXJyYXlcIikpKSx0KG8rSChyKSl9ZWxzZSBpZihcIltvYmplY3QgQmxvYl1cIj09PW4pKG89bmV3IEZpbGVSZWFkZXIpLm9ubG9hZD1mdW5jdGlvbigpe3ZhciBuPVwifn5sb2NhbF9mb3JhZ2VfdHlwZX5cIitlLnR5cGUrXCJ+XCIrSCh0aGlzLnJlc3VsdCk7dChNK1wiYmxvYlwiK24pfSxvLnJlYWRBc0FycmF5QnVmZmVyKGUpO2Vsc2UgdHJ5e3QoSlNPTi5zdHJpbmdpZnkoZSkpfWNhdGNoKG4pe2NvbnNvbGUuZXJyb3IoXCJDb3VsZG4ndCBjb252ZXJ0IHZhbHVlIGludG8gYSBKU09OIHN0cmluZzogXCIsZSksdChudWxsLG4pfX0sZGVzZXJpYWxpemU6ZnVuY3Rpb24oZSl7aWYoZS5zdWJzdHJpbmcoMCxMKSE9PU0pcmV0dXJuIEpTT04ucGFyc2UoZSk7dmFyIHQsbj1lLnN1YnN0cmluZyhQKSxyPWUuc3Vic3RyaW5nKEwsUCksbz0oXCJibG9iXCI9PT1yJiZJLnRlc3QobikmJih0PShlPW4ubWF0Y2goSSkpWzFdLG49bi5zdWJzdHJpbmcoZVswXS5sZW5ndGgpKSxEKG4pKTtzd2l0Y2gocil7Y2FzZVwiYXJiZlwiOnJldHVybiBvO2Nhc2VcImJsb2JcIjpyZXR1cm4gaShbb10se3R5cGU6dH0pO2Nhc2VcInNpMDhcIjpyZXR1cm4gbmV3IEludDhBcnJheShvKTtjYXNlXCJ1aTA4XCI6cmV0dXJuIG5ldyBVaW50OEFycmF5KG8pO2Nhc2VcInVpYzhcIjpyZXR1cm4gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KG8pO2Nhc2VcInNpMTZcIjpyZXR1cm4gbmV3IEludDE2QXJyYXkobyk7Y2FzZVwidXIxNlwiOnJldHVybiBuZXcgVWludDE2QXJyYXkobyk7Y2FzZVwic2kzMlwiOnJldHVybiBuZXcgSW50MzJBcnJheShvKTtjYXNlXCJ1aTMyXCI6cmV0dXJuIG5ldyBVaW50MzJBcnJheShvKTtjYXNlXCJmbDMyXCI6cmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkobyk7Y2FzZVwiZmw2NFwiOnJldHVybiBuZXcgRmxvYXQ2NEFycmF5KG8pO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiVW5rb3duIHR5cGU6IFwiK3IpfX0sc3RyaW5nVG9CdWZmZXI6RCxidWZmZXJUb1N0cmluZzpIfTtmdW5jdGlvbiBxKGUsdCxuLHIpe2UuZXhlY3V0ZVNxbChcIkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIFwiK3Quc3RvcmVOYW1lK1wiIChpZCBJTlRFR0VSIFBSSU1BUlkgS0VZLCBrZXkgdW5pcXVlLCB2YWx1ZSlcIixbXSxuLHIpfWZ1bmN0aW9uIFUoZSx0LG4scixvLGkpe2UuZXhlY3V0ZVNxbChuLHIsbywoZnVuY3Rpb24oZSxzKXtzLmNvZGU9PT1zLlNZTlRBWF9FUlI/ZS5leGVjdXRlU3FsKFwiU0VMRUNUIG5hbWUgRlJPTSBzcWxpdGVfbWFzdGVyIFdIRVJFIHR5cGU9J3RhYmxlJyBBTkQgbmFtZSA9ID9cIixbdC5zdG9yZU5hbWVdLChmdW5jdGlvbihlLGEpe2Eucm93cy5sZW5ndGg/aShlLHMpOnEoZSx0LChmdW5jdGlvbigpe2UuZXhlY3V0ZVNxbChuLHIsbyxpKX0pLGkpfSksaSk6aShlLHMpfSksaSl9ZnVuY3Rpb24gQihlLHQsbixyKXt2YXIgbz10aGlzLGk9KGU9dShlKSxuZXcgcygoZnVuY3Rpb24oaSxzKXtvLnJlYWR5KCkudGhlbigoZnVuY3Rpb24oKXt2YXIgYT10PXZvaWQgMD09PXQ/bnVsbDp0LGM9by5fZGJJbmZvO2Muc2VyaWFsaXplci5zZXJpYWxpemUodCwoZnVuY3Rpb24odCx1KXt1P3ModSk6Yy5kYi50cmFuc2FjdGlvbigoZnVuY3Rpb24obil7VShuLGMsXCJJTlNFUlQgT1IgUkVQTEFDRSBJTlRPIFwiK2Muc3RvcmVOYW1lK1wiIChrZXksIHZhbHVlKSBWQUxVRVMgKD8sID8pXCIsW2UsdF0sKGZ1bmN0aW9uKCl7aShhKX0pLChmdW5jdGlvbihlLHQpe3ModCl9KSl9KSwoZnVuY3Rpb24odCl7dC5jb2RlPT09dC5RVU9UQV9FUlImJigwPHI/aShCLmFwcGx5KG8sW2UsYSxuLHItMV0pKTpzKHQpKX0pKX0pKX0pKS5jYXRjaChzKX0pKSk7cmV0dXJuIGEoaSxuKSxpfXZhciB4PXtfZHJpdmVyOlwid2ViU1FMU3RvcmFnZVwiLF9pbml0U3RvcmFnZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49e2RiOm51bGx9O2lmKGUpZm9yKHZhciByIGluIGUpbltyXT1cInN0cmluZ1wiIT10eXBlb2YgZVtyXT9lW3JdLnRvU3RyaW5nKCk6ZVtyXTt2YXIgbz1uZXcgcygoZnVuY3Rpb24oZSxyKXt0cnl7bi5kYj1vcGVuRGF0YWJhc2Uobi5uYW1lLFN0cmluZyhuLnZlcnNpb24pLG4uZGVzY3JpcHRpb24sbi5zaXplKX1jYXRjaChlKXtyZXR1cm4gcihlKX1uLmRiLnRyYW5zYWN0aW9uKChmdW5jdGlvbihvKXtxKG8sbiwoZnVuY3Rpb24oKXt0Ll9kYkluZm89bixlKCl9KSwoZnVuY3Rpb24oZSx0KXtyKHQpfSkpfSkscil9KSk7cmV0dXJuIG4uc2VyaWFsaXplcj1qLG99LF9zdXBwb3J0OlwiZnVuY3Rpb25cIj09dHlwZW9mIG9wZW5EYXRhYmFzZSxpdGVyYXRlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcyxyPW5ldyBzKChmdW5jdGlvbih0LHIpe24ucmVhZHkoKS50aGVuKChmdW5jdGlvbigpe3ZhciBvPW4uX2RiSW5mbztvLmRiLnRyYW5zYWN0aW9uKChmdW5jdGlvbihuKXtVKG4sbyxcIlNFTEVDVCAqIEZST00gXCIrby5zdG9yZU5hbWUsW10sKGZ1bmN0aW9uKG4scil7Zm9yKHZhciBpPXIucm93cyxzPWkubGVuZ3RoLGE9MDthPHM7YSsrKXt2YXIgYz1pLml0ZW0oYSksdT0odT1jLnZhbHVlKSYmby5zZXJpYWxpemVyLmRlc2VyaWFsaXplKHUpO2lmKHZvaWQgMCE9PSh1PWUodSxjLmtleSxhKzEpKSlyZXR1cm4gdm9pZCB0KHUpfXQoKX0pLChmdW5jdGlvbihlLHQpe3IodCl9KSl9KSl9KSkuY2F0Y2gocil9KSk7cmV0dXJuIGEocix0KSxyfSxnZXRJdGVtOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcyxyPShlPXUoZSksbmV3IHMoKGZ1bmN0aW9uKHQscil7bi5yZWFkeSgpLnRoZW4oKGZ1bmN0aW9uKCl7dmFyIG89bi5fZGJJbmZvO28uZGIudHJhbnNhY3Rpb24oKGZ1bmN0aW9uKG4pe1UobixvLFwiU0VMRUNUICogRlJPTSBcIitvLnN0b3JlTmFtZStcIiBXSEVSRSBrZXkgPSA/IExJTUlUIDFcIixbZV0sKGZ1bmN0aW9uKGUsbil7bj0obj1uLnJvd3MubGVuZ3RoP24ucm93cy5pdGVtKDApLnZhbHVlOm51bGwpJiZvLnNlcmlhbGl6ZXIuZGVzZXJpYWxpemUobiksdChuKX0pLChmdW5jdGlvbihlLHQpe3IodCl9KSl9KSl9KSkuY2F0Y2gocil9KSkpO3JldHVybiBhKHIsdCkscn0sc2V0SXRlbTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIEIuYXBwbHkodGhpcyxbZSx0LG4sMV0pfSxyZW1vdmVJdGVtOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcyxyPShlPXUoZSksbmV3IHMoKGZ1bmN0aW9uKHQscil7bi5yZWFkeSgpLnRoZW4oKGZ1bmN0aW9uKCl7dmFyIG89bi5fZGJJbmZvO28uZGIudHJhbnNhY3Rpb24oKGZ1bmN0aW9uKG4pe1UobixvLFwiREVMRVRFIEZST00gXCIrby5zdG9yZU5hbWUrXCIgV0hFUkUga2V5ID0gP1wiLFtlXSwoZnVuY3Rpb24oKXt0KCl9KSwoZnVuY3Rpb24oZSx0KXtyKHQpfSkpfSkpfSkpLmNhdGNoKHIpfSkpKTtyZXR1cm4gYShyLHQpLHJ9LGNsZWFyOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1uZXcgcygoZnVuY3Rpb24oZSxuKXt0LnJlYWR5KCkudGhlbigoZnVuY3Rpb24oKXt2YXIgcj10Ll9kYkluZm87ci5kYi50cmFuc2FjdGlvbigoZnVuY3Rpb24odCl7VSh0LHIsXCJERUxFVEUgRlJPTSBcIityLnN0b3JlTmFtZSxbXSwoZnVuY3Rpb24oKXtlKCl9KSwoZnVuY3Rpb24oZSx0KXtuKHQpfSkpfSkpfSkpLmNhdGNoKG4pfSkpO3JldHVybiBhKG4sZSksbn0sbGVuZ3RoOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1uZXcgcygoZnVuY3Rpb24oZSxuKXt0LnJlYWR5KCkudGhlbigoZnVuY3Rpb24oKXt2YXIgcj10Ll9kYkluZm87ci5kYi50cmFuc2FjdGlvbigoZnVuY3Rpb24odCl7VSh0LHIsXCJTRUxFQ1QgQ09VTlQoa2V5KSBhcyBjIEZST00gXCIrci5zdG9yZU5hbWUsW10sKGZ1bmN0aW9uKHQsbil7bj1uLnJvd3MuaXRlbSgwKS5jLGUobil9KSwoZnVuY3Rpb24oZSx0KXtuKHQpfSkpfSkpfSkpLmNhdGNoKG4pfSkpO3JldHVybiBhKG4sZSksbn0sa2V5OmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcyxyPW5ldyBzKChmdW5jdGlvbih0LHIpe24ucmVhZHkoKS50aGVuKChmdW5jdGlvbigpe3ZhciBvPW4uX2RiSW5mbztvLmRiLnRyYW5zYWN0aW9uKChmdW5jdGlvbihuKXtVKG4sbyxcIlNFTEVDVCBrZXkgRlJPTSBcIitvLnN0b3JlTmFtZStcIiBXSEVSRSBpZCA9ID8gTElNSVQgMVwiLFtlKzFdLChmdW5jdGlvbihlLG4pe249bi5yb3dzLmxlbmd0aD9uLnJvd3MuaXRlbSgwKS5rZXk6bnVsbCx0KG4pfSksKGZ1bmN0aW9uKGUsdCl7cih0KX0pKX0pKX0pKS5jYXRjaChyKX0pKTtyZXR1cm4gYShyLHQpLHJ9LGtleXM6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPW5ldyBzKChmdW5jdGlvbihlLG4pe3QucmVhZHkoKS50aGVuKChmdW5jdGlvbigpe3ZhciByPXQuX2RiSW5mbztyLmRiLnRyYW5zYWN0aW9uKChmdW5jdGlvbih0KXtVKHQscixcIlNFTEVDVCBrZXkgRlJPTSBcIityLnN0b3JlTmFtZSxbXSwoZnVuY3Rpb24odCxuKXtmb3IodmFyIHI9W10sbz0wO288bi5yb3dzLmxlbmd0aDtvKyspci5wdXNoKG4ucm93cy5pdGVtKG8pLmtleSk7ZShyKX0pLChmdW5jdGlvbihlLHQpe24odCl9KSl9KSl9KSkuY2F0Y2gobil9KSk7cmV0dXJuIGEobixlKSxufSxkcm9wSW5zdGFuY2U6ZnVuY3Rpb24oZSx0KXt0PWwuYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBuPXRoaXMuY29uZmlnKCkscj0oKGU9XCJmdW5jdGlvblwiIT10eXBlb2YgZSYmZXx8e30pLm5hbWV8fChlLm5hbWU9ZS5uYW1lfHxuLm5hbWUsZS5zdG9yZU5hbWU9ZS5zdG9yZU5hbWV8fG4uc3RvcmVOYW1lKSx0aGlzKSxvPWUubmFtZT9uZXcgcygoZnVuY3Rpb24odCl7dmFyIG8saT1lLm5hbWU9PT1uLm5hbWU/ci5fZGJJbmZvLmRiOm9wZW5EYXRhYmFzZShlLm5hbWUsXCJcIixcIlwiLDApO2Uuc3RvcmVOYW1lP3Qoe2RiOmksc3RvcmVOYW1lczpbZS5zdG9yZU5hbWVdfSk6dCgobz1pLG5ldyBzKChmdW5jdGlvbihlLHQpe28udHJhbnNhY3Rpb24oKGZ1bmN0aW9uKG4pe24uZXhlY3V0ZVNxbChcIlNFTEVDVCBuYW1lIEZST00gc3FsaXRlX21hc3RlciBXSEVSRSB0eXBlPSd0YWJsZScgQU5EIG5hbWUgPD4gJ19fV2ViS2l0RGF0YWJhc2VJbmZvVGFibGVfXydcIixbXSwoZnVuY3Rpb24odCxuKXtmb3IodmFyIHI9W10saT0wO2k8bi5yb3dzLmxlbmd0aDtpKyspci5wdXNoKG4ucm93cy5pdGVtKGkpLm5hbWUpO2Uoe2RiOm8sc3RvcmVOYW1lczpyfSl9KSwoZnVuY3Rpb24oZSxuKXt0KG4pfSkpfSksKGZ1bmN0aW9uKGUpe3QoZSl9KSl9KSkpKX0pKS50aGVuKChmdW5jdGlvbihlKXtyZXR1cm4gbmV3IHMoKGZ1bmN0aW9uKHQsbil7ZS5kYi50cmFuc2FjdGlvbigoZnVuY3Rpb24ocil7Zm9yKHZhciBvPVtdLGk9MCxhPWUuc3RvcmVOYW1lcy5sZW5ndGg7aTxhO2krKylvLnB1c2goZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBzKChmdW5jdGlvbih0LG4pe3IuZXhlY3V0ZVNxbChcIkRST1AgVEFCTEUgSUYgRVhJU1RTIFwiK2UsW10sKGZ1bmN0aW9uKCl7dCgpfSksKGZ1bmN0aW9uKGUsdCl7bih0KX0pKX0pKX0oZS5zdG9yZU5hbWVzW2ldKSk7cy5hbGwobykudGhlbigoZnVuY3Rpb24oKXt0KCl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe24oZSl9KSl9KSwoZnVuY3Rpb24oZSl7bihlKX0pKX0pKX0pKTpzLnJlamVjdChcIkludmFsaWQgYXJndW1lbnRzXCIpO3JldHVybiBhKG8sdCksb319O2Z1bmN0aW9uIEcoZSx0KXt2YXIgbj1lLm5hbWUrXCIvXCI7cmV0dXJuIGUuc3RvcmVOYW1lIT09dC5zdG9yZU5hbWUmJihuKz1lLnN0b3JlTmFtZStcIi9cIiksbn1mdW5jdGlvbiBWKGUsdCl7Zm9yKHZhciBuLHIsbz1lLmxlbmd0aCxpPTA7aTxvOyl7aWYoKG49ZVtpXSk9PT0ocj10KXx8XCJudW1iZXJcIj09dHlwZW9mIG4mJlwibnVtYmVyXCI9PXR5cGVvZiByJiZpc05hTihuKSYmaXNOYU4ocikpcmV0dXJuIDE7aSsrfX12YXIgej17X2RyaXZlcjpcImxvY2FsU3RvcmFnZVdyYXBwZXJcIixfaW5pdFN0b3JhZ2U6ZnVuY3Rpb24oZSl7dmFyIHQ9e307aWYoZSlmb3IodmFyIG4gaW4gZSl0W25dPWVbbl07cmV0dXJuIHQua2V5UHJlZml4PUcoZSx0aGlzLl9kZWZhdWx0Q29uZmlnKSwhZnVuY3Rpb24oKXt2YXIgZT1cIl9sb2NhbGZvcmFnZV9zdXBwb3J0X3Rlc3RcIjt0cnl7cmV0dXJuIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGUsITApLGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGUpLDB9Y2F0Y2goZSl7cmV0dXJuIDF9fSgpfHwwPGxvY2FsU3RvcmFnZS5sZW5ndGg/KCh0aGlzLl9kYkluZm89dCkuc2VyaWFsaXplcj1qLHMucmVzb2x2ZSgpKTpzLnJlamVjdCgpfSxfc3VwcG9ydDpmdW5jdGlvbigpe3RyeXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgbG9jYWxTdG9yYWdlJiZcInNldEl0ZW1cImluIGxvY2FsU3RvcmFnZSYmISFsb2NhbFN0b3JhZ2Uuc2V0SXRlbX1jYXRjaChlKXtyZXR1cm4hMX19KCksaXRlcmF0ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMscj1uLnJlYWR5KCkudGhlbigoZnVuY3Rpb24oKXtmb3IodmFyIHQ9bi5fZGJJbmZvLHI9dC5rZXlQcmVmaXgsbz1yLmxlbmd0aCxpPWxvY2FsU3RvcmFnZS5sZW5ndGgscz0xLGE9MDthPGk7YSsrKXt2YXIgYz1sb2NhbFN0b3JhZ2Uua2V5KGEpO2lmKDA9PT1jLmluZGV4T2Yocikpe3ZhciB1PSh1PWxvY2FsU3RvcmFnZS5nZXRJdGVtKGMpKSYmdC5zZXJpYWxpemVyLmRlc2VyaWFsaXplKHUpO2lmKHZvaWQgMCE9PSh1PWUodSxjLnN1YnN0cmluZyhvKSxzKyspKSlyZXR1cm4gdX19fSkpO3JldHVybiBhKHIsdCkscn0sZ2V0SXRlbTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMscj0oZT11KGUpLG4ucmVhZHkoKS50aGVuKChmdW5jdGlvbigpe3ZhciB0PW4uX2RiSW5mbyxyPWxvY2FsU3RvcmFnZS5nZXRJdGVtKHQua2V5UHJlZml4K2UpO3JldHVybiByJiZ0LnNlcmlhbGl6ZXIuZGVzZXJpYWxpemUocil9KSkpO3JldHVybiBhKHIsdCkscn0sc2V0SXRlbTpmdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcyxvPShlPXUoZSksci5yZWFkeSgpLnRoZW4oKGZ1bmN0aW9uKCl7dmFyIG49dD12b2lkIDA9PT10P251bGw6dDtyZXR1cm4gbmV3IHMoKGZ1bmN0aW9uKG8saSl7dmFyIHM9ci5fZGJJbmZvO3Muc2VyaWFsaXplci5zZXJpYWxpemUodCwoZnVuY3Rpb24odCxyKXtpZihyKWkocik7ZWxzZSB0cnl7bG9jYWxTdG9yYWdlLnNldEl0ZW0ocy5rZXlQcmVmaXgrZSx0KSxvKG4pfWNhdGNoKHQpe1wiUXVvdGFFeGNlZWRlZEVycm9yXCIhPT10Lm5hbWUmJlwiTlNfRVJST1JfRE9NX1FVT1RBX1JFQUNIRURcIiE9PXQubmFtZXx8aSh0KSxpKHQpfX0pKX0pKX0pKSk7cmV0dXJuIGEobyxuKSxvfSxyZW1vdmVJdGVtOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcyxyPShlPXUoZSksbi5yZWFkeSgpLnRoZW4oKGZ1bmN0aW9uKCl7dmFyIHQ9bi5fZGJJbmZvO2xvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHQua2V5UHJlZml4K2UpfSkpKTtyZXR1cm4gYShyLHQpLHJ9LGNsZWFyOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj10LnJlYWR5KCkudGhlbigoZnVuY3Rpb24oKXtmb3IodmFyIGU9dC5fZGJJbmZvLmtleVByZWZpeCxuPWxvY2FsU3RvcmFnZS5sZW5ndGgtMTswPD1uO24tLSl7dmFyIHI9bG9jYWxTdG9yYWdlLmtleShuKTswPT09ci5pbmRleE9mKGUpJiZsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShyKX19KSk7cmV0dXJuIGEobixlKSxufSxsZW5ndGg6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5rZXlzKCkudGhlbigoZnVuY3Rpb24oZSl7cmV0dXJuIGUubGVuZ3RofSkpO3JldHVybiBhKHQsZSksdH0sa2V5OmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcyxyPW4ucmVhZHkoKS50aGVuKChmdW5jdGlvbigpe3ZhciB0LHI9bi5fZGJJbmZvO3RyeXt0PWxvY2FsU3RvcmFnZS5rZXkoZSl9Y2F0Y2gocil7dD1udWxsfXJldHVybiB0JiZ0LnN1YnN0cmluZyhyLmtleVByZWZpeC5sZW5ndGgpfSkpO3JldHVybiBhKHIsdCkscn0sa2V5czpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49dC5yZWFkeSgpLnRoZW4oKGZ1bmN0aW9uKCl7Zm9yKHZhciBlPXQuX2RiSW5mbyxuPWxvY2FsU3RvcmFnZS5sZW5ndGgscj1bXSxvPTA7bzxuO28rKyl7dmFyIGk9bG9jYWxTdG9yYWdlLmtleShvKTswPT09aS5pbmRleE9mKGUua2V5UHJlZml4KSYmci5wdXNoKGkuc3Vic3RyaW5nKGUua2V5UHJlZml4Lmxlbmd0aCkpfXJldHVybiByfSkpO3JldHVybiBhKG4sZSksbn0sZHJvcEluc3RhbmNlOmZ1bmN0aW9uKGUsdCl7dD1sLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoZT1cImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZlfHx7fSkubmFtZXx8KHI9dGhpcy5jb25maWcoKSxlLm5hbWU9ZS5uYW1lfHxyLm5hbWUsZS5zdG9yZU5hbWU9ZS5zdG9yZU5hbWV8fHIuc3RvcmVOYW1lKTt2YXIgbj10aGlzLHI9ZS5uYW1lP25ldyBzKChmdW5jdGlvbih0KXtlLnN0b3JlTmFtZT90KEcoZSxuLl9kZWZhdWx0Q29uZmlnKSk6dChlLm5hbWUrXCIvXCIpfSkpLnRoZW4oKGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1sb2NhbFN0b3JhZ2UubGVuZ3RoLTE7MDw9dDt0LS0pe3ZhciBuPWxvY2FsU3RvcmFnZS5rZXkodCk7MD09PW4uaW5kZXhPZihlKSYmbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0obil9fSkpOnMucmVqZWN0KFwiSW52YWxpZCBhcmd1bWVudHNcIik7cmV0dXJuIGEocix0KSxyfX0sRj1BcnJheS5pc0FycmF5fHxmdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9LFc9e30sWj17fSxZPXtJTkRFWEVEREI6ZSxXRUJTUUw6eCxMT0NBTFNUT1JBR0U6en0sSz0oZT1bWS5JTkRFWEVEREIuX2RyaXZlcixZLldFQlNRTC5fZHJpdmVyLFkuTE9DQUxTVE9SQUdFLl9kcml2ZXJdLFtcImRyb3BJbnN0YW5jZVwiXSksWD1bXCJjbGVhclwiLFwiZ2V0SXRlbVwiLFwiaXRlcmF0ZVwiLFwia2V5XCIsXCJrZXlzXCIsXCJsZW5ndGhcIixcInJlbW92ZUl0ZW1cIixcInNldEl0ZW1cIl0uY29uY2F0KEspLEo9e2Rlc2NyaXB0aW9uOlwiXCIsZHJpdmVyOmUuc2xpY2UoKSxuYW1lOlwibG9jYWxmb3JhZ2VcIixzaXplOjQ5ODA3MzYsc3RvcmVOYW1lOlwia2V5dmFsdWVwYWlyc1wiLHZlcnNpb246MX07ZnVuY3Rpb24gUShlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbj1hcmd1bWVudHNbdF07aWYobilmb3IodmFyIHIgaW4gbiluLmhhc093blByb3BlcnR5KHIpJiYoRihuW3JdKT9lW3JdPW5bcl0uc2xpY2UoKTplW3JdPW5bcl0pfXJldHVybiBlfWZ1bmN0aW9uICQoZSl7dmFyIHQsbixyO2lmKCEodGhpcyBpbnN0YW5jZW9mICQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7Zm9yKHQgaW4gWSlZLmhhc093blByb3BlcnR5KHQpJiYocj0obj1ZW3RdKS5fZHJpdmVyLHRoaXNbdF09cixXW3JdfHx0aGlzLmRlZmluZURyaXZlcihuKSk7dGhpcy5fZGVmYXVsdENvbmZpZz1RKHt9LEopLHRoaXMuX2NvbmZpZz1RKHt9LHRoaXMuX2RlZmF1bHRDb25maWcsZSksdGhpcy5fZHJpdmVyU2V0PW51bGwsdGhpcy5faW5pdERyaXZlcj1udWxsLHRoaXMuX3JlYWR5PSExLHRoaXMuX2RiSW5mbz1udWxsLHRoaXMuX3dyYXBMaWJyYXJ5TWV0aG9kc1dpdGhSZWFkeSgpLHRoaXMuc2V0RHJpdmVyKHRoaXMuX2NvbmZpZy5kcml2ZXIpLmNhdGNoKChmdW5jdGlvbigpe30pKX0kLnByb3RvdHlwZS5jb25maWc9ZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9PSh2b2lkIDA9PT1lP1widW5kZWZpbmVkXCI6cihlKSkpcmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGU/dGhpcy5fY29uZmlnW2VdOnRoaXMuX2NvbmZpZztpZih0aGlzLl9yZWFkeSlyZXR1cm4gbmV3IEVycm9yKFwiQ2FuJ3QgY2FsbCBjb25maWcoKSBhZnRlciBsb2NhbGZvcmFnZSBoYXMgYmVlbiB1c2VkLlwiKTtmb3IodmFyIHQgaW4gZSl7aWYoXCJzdG9yZU5hbWVcIj09PXQmJihlW3RdPWVbdF0ucmVwbGFjZSgvXFxXL2csXCJfXCIpKSxcInZlcnNpb25cIj09PXQmJlwibnVtYmVyXCIhPXR5cGVvZiBlW3RdKXJldHVybiBuZXcgRXJyb3IoXCJEYXRhYmFzZSB2ZXJzaW9uIG11c3QgYmUgYSBudW1iZXIuXCIpO3RoaXMuX2NvbmZpZ1t0XT1lW3RdfXJldHVybiEoXCJkcml2ZXJcImluIGUmJmUuZHJpdmVyKXx8dGhpcy5zZXREcml2ZXIodGhpcy5fY29uZmlnLmRyaXZlcil9LCQucHJvdG90eXBlLmRlZmluZURyaXZlcj1mdW5jdGlvbihlLHQsbil7dmFyIHI9bmV3IHMoKGZ1bmN0aW9uKHQsbil7dHJ5e3ZhciByPWUuX2RyaXZlcixvPW5ldyBFcnJvcihcIkN1c3RvbSBkcml2ZXIgbm90IGNvbXBsaWFudDsgc2VlIGh0dHBzOi8vbW96aWxsYS5naXRodWIuaW8vbG9jYWxGb3JhZ2UvI2RlZmluZWRyaXZlclwiKTtpZighZS5fZHJpdmVyKXJldHVybiB2b2lkIG4obyk7Zm9yKHZhciBpPVguY29uY2F0KFwiX2luaXRTdG9yYWdlXCIpLGM9MCx1PWkubGVuZ3RoO2M8dTtjKyspe3ZhciBsPWlbY107aWYoKCFWKEssbCl8fGVbbF0pJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlW2xdKXJldHVybiB2b2lkIG4obyl9Zm9yKHZhciBoPTAscD1LLmxlbmd0aDtoPHA7aCsrKXt2YXIgZD1LW2hdO2VbZF18fChlW2RdPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3ZhciB0PW5ldyBFcnJvcihcIk1ldGhvZCBcIitlK1wiIGlzIG5vdCBpbXBsZW1lbnRlZCBieSB0aGUgY3VycmVudCBkcml2ZXJcIik7cmV0dXJuIGEodD1zLnJlamVjdCh0KSxhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXSksdH19KGQpKX12YXIgXz1mdW5jdGlvbihuKXtXW3JdJiZjb25zb2xlLmluZm8oXCJSZWRlZmluaW5nIExvY2FsRm9yYWdlIGRyaXZlcjogXCIrciksV1tyXT1lLFpbcl09bix0KCl9O1wiX3N1cHBvcnRcImluIGU/ZS5fc3VwcG9ydCYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5fc3VwcG9ydD9lLl9zdXBwb3J0KCkudGhlbihfLG4pOl8oISFlLl9zdXBwb3J0KTpfKCEwKX1jYXRjaChvKXtuKG8pfX0pKTtyZXR1cm4gYyhyLHQsbikscn0sJC5wcm90b3R5cGUuZHJpdmVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RyaXZlcnx8bnVsbH0sJC5wcm90b3R5cGUuZ2V0RHJpdmVyPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gYyhlPVdbZV0/cy5yZXNvbHZlKFdbZV0pOnMucmVqZWN0KG5ldyBFcnJvcihcIkRyaXZlciBub3QgZm91bmQuXCIpKSx0LG4pLGV9LCQucHJvdG90eXBlLmdldFNlcmlhbGl6ZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9cy5yZXNvbHZlKGopO3JldHVybiBjKHQsZSksdH0sJC5wcm90b3R5cGUucmVhZHk9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPXQuX2RyaXZlclNldC50aGVuKChmdW5jdGlvbigpe3JldHVybiBudWxsPT09dC5fcmVhZHkmJih0Ll9yZWFkeT10Ll9pbml0RHJpdmVyKCkpLHQuX3JlYWR5fSkpO3JldHVybiBjKG4sZSxlKSxufSwkLnByb3RvdHlwZS5zZXREcml2ZXI9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXMsbz0oRihlKXx8KGU9W2VdKSx0aGlzLl9nZXRTdXBwb3J0ZWREcml2ZXJzKGUpKTtmdW5jdGlvbiBpKCl7ci5fY29uZmlnLmRyaXZlcj1yLmRyaXZlcigpfWZ1bmN0aW9uIGEoZSl7cmV0dXJuIHIuX2V4dGVuZChlKSxpKCksci5fcmVhZHk9ci5faW5pdFN0b3JhZ2Uoci5fY29uZmlnKSxyLl9yZWFkeX1yZXR1cm4gZT1udWxsIT09dGhpcy5fZHJpdmVyU2V0P3RoaXMuX2RyaXZlclNldC5jYXRjaCgoZnVuY3Rpb24oKXtyZXR1cm4gcy5yZXNvbHZlKCl9KSk6cy5yZXNvbHZlKCksdGhpcy5fZHJpdmVyU2V0PWUudGhlbigoZnVuY3Rpb24oKXt2YXIgZT1vWzBdO3JldHVybiByLl9kYkluZm89bnVsbCxyLl9yZWFkeT1udWxsLHIuZ2V0RHJpdmVyKGUpLnRoZW4oKGZ1bmN0aW9uKGUpe3IuX2RyaXZlcj1lLl9kcml2ZXIsaSgpLHIuX3dyYXBMaWJyYXJ5TWV0aG9kc1dpdGhSZWFkeSgpLHIuX2luaXREcml2ZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHQ9MDtyZXR1cm4gZnVuY3Rpb24gbigpe2Zvcig7dDxlLmxlbmd0aDspe3ZhciBvPWVbdF07cmV0dXJuIHQrKyxyLl9kYkluZm89bnVsbCxyLl9yZWFkeT1udWxsLHIuZ2V0RHJpdmVyKG8pLnRoZW4oYSkuY2F0Y2gobil9aSgpO3ZhciBjPW5ldyBFcnJvcihcIk5vIGF2YWlsYWJsZSBzdG9yYWdlIG1ldGhvZCBmb3VuZC5cIik7cmV0dXJuIHIuX2RyaXZlclNldD1zLnJlamVjdChjKSxyLl9kcml2ZXJTZXR9KCl9fShvKX0pKX0pKS5jYXRjaCgoZnVuY3Rpb24oKXtpKCk7dmFyIGU9bmV3IEVycm9yKFwiTm8gYXZhaWxhYmxlIHN0b3JhZ2UgbWV0aG9kIGZvdW5kLlwiKTtyZXR1cm4gci5fZHJpdmVyU2V0PXMucmVqZWN0KGUpLHIuX2RyaXZlclNldH0pKSxjKHRoaXMuX2RyaXZlclNldCx0LG4pLHRoaXMuX2RyaXZlclNldH0sJC5wcm90b3R5cGUuc3VwcG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuISFaW2VdfSwkLnByb3RvdHlwZS5fZXh0ZW5kPWZ1bmN0aW9uKGUpe1EodGhpcyxlKX0sJC5wcm90b3R5cGUuX2dldFN1cHBvcnRlZERyaXZlcnM9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLG49MCxyPWUubGVuZ3RoO248cjtuKyspe3ZhciBvPWVbbl07dGhpcy5zdXBwb3J0cyhvKSYmdC5wdXNoKG8pfXJldHVybiB0fSwkLnByb3RvdHlwZS5fd3JhcExpYnJhcnlNZXRob2RzV2l0aFJlYWR5PWZ1bmN0aW9uKCl7Zm9yKHZhciBlPTAsdD1YLmxlbmd0aDtlPHQ7ZSsrKSFmdW5jdGlvbihlLHQpe2VbdF09ZnVuY3Rpb24oKXt2YXIgbj1hcmd1bWVudHM7cmV0dXJuIGUucmVhZHkoKS50aGVuKChmdW5jdGlvbigpe3JldHVybiBlW3RdLmFwcGx5KGUsbil9KSl9fSh0aGlzLFhbZV0pfSwkLnByb3RvdHlwZS5jcmVhdGVJbnN0YW5jZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3ICQoZSl9LHg9bmV3ICQsdC5leHBvcnRzPXh9LHszOjN9XX0se30sWzRdKSg0KX0pLmNhbGwodGhpcyxuKDEwKSl9LGZ1bmN0aW9uKGUsdCl7fSxmdW5jdGlvbihlLHQsbil7dmFyIHI7ZS5leHBvcnRzPShlPW4oMikscj1lLmxpYi5Xb3JkQXJyYXksZS5lbmMuQmFzZTY0PXtzdHJpbmdpZnk6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUud29yZHMsbj1lLnNpZ0J5dGVzLHI9dGhpcy5fbWFwLG89KGUuY2xhbXAoKSxbXSksaT0wO2k8bjtpKz0zKWZvcih2YXIgcz0odFtpPj4+Ml0+Pj4yNC1pJTQqOCYyNTUpPDwxNnwodFtpKzE+Pj4yXT4+PjI0LShpKzEpJTQqOCYyNTUpPDw4fHRbaSsyPj4+Ml0+Pj4yNC0oaSsyKSU0KjgmMjU1LGE9MDthPDQmJmkrLjc1KmE8bjthKyspby5wdXNoKHIuY2hhckF0KHM+Pj42KigzLWEpJjYzKSk7dmFyIGM9ci5jaGFyQXQoNjQpO2lmKGMpZm9yKDtvLmxlbmd0aCU0OylvLnB1c2goYyk7cmV0dXJuIG8uam9pbihcIlwiKX0scGFyc2U6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5sZW5ndGgsbj10aGlzLl9tYXA7aWYoIShvPXRoaXMuX3JldmVyc2VNYXApKWZvcih2YXIgbz10aGlzLl9yZXZlcnNlTWFwPVtdLGk9MDtpPG4ubGVuZ3RoO2krKylvW24uY2hhckNvZGVBdChpKV09aTt2YXIgcz1uLmNoYXJBdCg2NCk7cmV0dXJuIHMmJi0xIT09KHM9ZS5pbmRleE9mKHMpKSYmKHQ9cyksZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgbyxpLHM9W10sYT0wLGM9MDtjPHQ7YysrKWMlNCYmKG89bltlLmNoYXJDb2RlQXQoYy0xKV08PGMlNCoyLGk9bltlLmNoYXJDb2RlQXQoYyldPj4+Ni1jJTQqMixzW2E+Pj4yXXw9KG98aSk8PDI0LWElNCo4LGErKyk7cmV0dXJuIHIuY3JlYXRlKHMsYSl9KGUsdCxvKX0sX21hcDpcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCJ9LGUuZW5jLkJhc2U2NCl9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcixvLGkscztlLmV4cG9ydHM9KGU9bigyKSxzPShuPWUpLmxpYixyPXMuV29yZEFycmF5LG89cy5IYXNoZXIscz1uLmFsZ28saT1bXSxzPXMuU0hBMT1vLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyByLmluaXQoWzE3MzI1ODQxOTMsNDAyMzIzMzQxNywyNTYyMzgzMTAyLDI3MTczMzg3OCwzMjg1Mzc3NTIwXSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihlLHQpe2Zvcih2YXIgbj10aGlzLl9oYXNoLndvcmRzLHI9blswXSxvPW5bMV0scz1uWzJdLGE9blszXSxjPW5bNF0sdT0wO3U8ODA7dSsrKXt1PDE2P2lbdV09MHxlW3QrdV06KGw9aVt1LTNdXmlbdS04XV5pW3UtMTRdXmlbdS0xNl0saVt1XT1sPDwxfGw+Pj4zMSk7dmFyIGw9KHI8PDV8cj4+PjI3KStjK2lbdV07bCs9dTwyMD8xNTE4NTAwMjQ5KyhvJnN8fm8mYSk6dTw0MD8xODU5Nzc1MzkzKyhvXnNeYSk6dTw2MD8obyZzfG8mYXxzJmEpLTE4OTQwMDc1ODg6KG9ec15hKS04OTk0OTc1MTQsYz1hLGE9cyxzPW88PDMwfG8+Pj4yLG89cixyPWx9blswXT1uWzBdK3J8MCxuWzFdPW5bMV0rb3wwLG5bMl09blsyXStzfDAsblszXT1uWzNdK2F8MCxuWzRdPW5bNF0rY3wwfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuX2RhdGEsdD1lLndvcmRzLG49OCp0aGlzLl9uRGF0YUJ5dGVzLHI9OCplLnNpZ0J5dGVzO3JldHVybiB0W3I+Pj41XXw9MTI4PDwyNC1yJTMyLHRbMTQrKDY0K3I+Pj45PDw0KV09TWF0aC5mbG9vcihuLzQyOTQ5NjcyOTYpLHRbMTUrKDY0K3I+Pj45PDw0KV09bixlLnNpZ0J5dGVzPTQqdC5sZW5ndGgsdGhpcy5fcHJvY2VzcygpLHRoaXMuX2hhc2h9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGU9by5jbG9uZS5jYWxsKHRoaXMpO3JldHVybiBlLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKSxlfX0pLG4uU0hBMT1vLl9jcmVhdGVIZWxwZXIocyksbi5IbWFjU0hBMT1vLl9jcmVhdGVIbWFjSGVscGVyKHMpLGUuU0hBMSl9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtlLmV4cG9ydHM9KGU9bigyKSxuPWUubGliLkJhc2Uscj1lLmVuYy5VdGY4LHZvaWQoZS5hbGdvLkhNQUM9bi5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oZSx0KXtlPXRoaXMuX2hhc2hlcj1uZXcgZS5pbml0LFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1yLnBhcnNlKHQpKTtmb3IodmFyIG49ZS5ibG9ja1NpemUsbz00Km4saT0oZT0oKHQ9dC5zaWdCeXRlcz5vP2UuZmluYWxpemUodCk6dCkuY2xhbXAoKSx0aGlzLl9vS2V5PXQuY2xvbmUoKSksdD10aGlzLl9pS2V5PXQuY2xvbmUoKSxlLndvcmRzKSxzPXQud29yZHMsYT0wO2E8bjthKyspaVthXV49MTU0OTU1NjgyOCxzW2FdXj05MDk1MjI0ODY7ZS5zaWdCeXRlcz10LnNpZ0J5dGVzPW8sdGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuX2hhc2hlcjtlLnJlc2V0KCksZS51cGRhdGUodGhpcy5faUtleSl9LHVwZGF0ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5faGFzaGVyLnVwZGF0ZShlKSx0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl9oYXNoZXI7ZT10LmZpbmFsaXplKGUpO3JldHVybiB0LnJlc2V0KCksdC5maW5hbGl6ZSh0aGlzLl9vS2V5LmNsb25lKCkuY29uY2F0KGUpKX19KSkpfSxmdW5jdGlvbihlLHQsbil7dmFyIHIsbyxpLHMsYSxjLHUsbCxoLHAsZCxfO2UuZXhwb3J0cz0oZT1uKDIpLG4oMTEpLHZvaWQoZS5saWIuQ2lwaGVyfHwobj1lLmxpYixyPW4uQmFzZSxvPW4uV29yZEFycmF5LGk9bi5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtLChoPWUuZW5jKS5VdGY4LHM9aC5CYXNlNjQsYT1lLmFsZ28uRXZwS0RGLGM9bi5DaXBoZXI9aS5leHRlbmQoe2NmZzpyLmV4dGVuZCgpLGNyZWF0ZUVuY3J5cHRvcjpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmNyZWF0ZSh0aGlzLl9FTkNfWEZPUk1fTU9ERSxlLHQpfSxjcmVhdGVEZWNyeXB0b3I6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5jcmVhdGUodGhpcy5fREVDX1hGT1JNX01PREUsZSx0KX0saW5pdDpmdW5jdGlvbihlLHQsbil7dGhpcy5jZmc9dGhpcy5jZmcuZXh0ZW5kKG4pLHRoaXMuX3hmb3JtTW9kZT1lLHRoaXMuX2tleT10LHRoaXMucmVzZXQoKX0scmVzZXQ6ZnVuY3Rpb24oKXtpLnJlc2V0LmNhbGwodGhpcyksdGhpcy5fZG9SZXNldCgpfSxwcm9jZXNzOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9hcHBlbmQoZSksdGhpcy5fcHJvY2VzcygpfSxmaW5hbGl6ZTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmdGhpcy5fYXBwZW5kKGUpLHRoaXMuX2RvRmluYWxpemUoKX0sa2V5U2l6ZTo0LGl2U2l6ZTo0LF9FTkNfWEZPUk1fTU9ERToxLF9ERUNfWEZPUk1fTU9ERToyLF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP186cH1yZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJue2VuY3J5cHQ6ZnVuY3Rpb24obixyLG8pe3JldHVybiBlKHIpLmVuY3J5cHQodCxuLHIsbyl9LGRlY3J5cHQ6ZnVuY3Rpb24obixyLG8pe3JldHVybiBlKHIpLmRlY3J5cHQodCxuLHIsbyl9fX19KCl9KSxuLlN0cmVhbUNpcGhlcj1jLmV4dGVuZCh7X2RvRmluYWxpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHJvY2VzcyghMCl9LGJsb2NrU2l6ZToxfSksaD1lLm1vZGU9e30sdT1uLkJsb2NrQ2lwaGVyTW9kZT1yLmV4dGVuZCh7Y3JlYXRlRW5jcnlwdG9yOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuRW5jcnlwdG9yLmNyZWF0ZShlLHQpfSxjcmVhdGVEZWNyeXB0b3I6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5EZWNyeXB0b3IuY3JlYXRlKGUsdCl9LGluaXQ6ZnVuY3Rpb24oZSx0KXt0aGlzLl9jaXBoZXI9ZSx0aGlzLl9pdj10fX0pLGg9aC5DQkM9ZnVuY3Rpb24oKXt2YXIgZT11LmV4dGVuZCgpO2Z1bmN0aW9uIHQoZSx0LG4pe3ZhciByLG89dGhpcy5faXY7bz8ocj1vLHRoaXMuX2l2PXZvaWQgMCk6cj10aGlzLl9wcmV2QmxvY2s7Zm9yKHZhciBpPTA7aTxuO2krKyllW3QraV1ePXJbaV19cmV0dXJuIGUuRW5jcnlwdG9yPWUuZXh0ZW5kKHtwcm9jZXNzQmxvY2s6ZnVuY3Rpb24oZSxuKXt2YXIgcj10aGlzLl9jaXBoZXIsbz1yLmJsb2NrU2l6ZTt0LmNhbGwodGhpcyxlLG4sbyksci5lbmNyeXB0QmxvY2soZSxuKSx0aGlzLl9wcmV2QmxvY2s9ZS5zbGljZShuLG4rbyl9fSksZS5EZWNyeXB0b3I9ZS5leHRlbmQoe3Byb2Nlc3NCbG9jazpmdW5jdGlvbihlLG4pe3ZhciByPXRoaXMuX2NpcGhlcixvPXIuYmxvY2tTaXplLGk9ZS5zbGljZShuLG4rbyk7ci5kZWNyeXB0QmxvY2soZSxuKSx0LmNhbGwodGhpcyxlLG4sbyksdGhpcy5fcHJldkJsb2NrPWl9fSksZX0oKSxkPShlLnBhZD17fSkuUGtjczc9e3BhZDpmdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0odD00KnQpLWUuc2lnQnl0ZXMldCxyPW48PDI0fG48PDE2fG48PDh8bixpPVtdLHM9MDtzPG47cys9NClpLnB1c2gocik7dD1vLmNyZWF0ZShpLG4pLGUuY29uY2F0KHQpfSx1bnBhZDpmdW5jdGlvbihlKXt2YXIgdD0yNTUmZS53b3Jkc1tlLnNpZ0J5dGVzLTE+Pj4yXTtlLnNpZ0J5dGVzLT10fX0sbi5CbG9ja0NpcGhlcj1jLmV4dGVuZCh7Y2ZnOmMuY2ZnLmV4dGVuZCh7bW9kZTpoLHBhZGRpbmc6ZH0pLHJlc2V0OmZ1bmN0aW9uKCl7Yy5yZXNldC5jYWxsKHRoaXMpO3ZhciBlLHQ9KG49dGhpcy5jZmcpLml2LG49bi5tb2RlO3RoaXMuX3hmb3JtTW9kZT09dGhpcy5fRU5DX1hGT1JNX01PREU/ZT1uLmNyZWF0ZUVuY3J5cHRvcjooZT1uLmNyZWF0ZURlY3J5cHRvcix0aGlzLl9taW5CdWZmZXJTaXplPTEpLHRoaXMuX21vZGUmJnRoaXMuX21vZGUuX19jcmVhdG9yPT1lP3RoaXMuX21vZGUuaW5pdCh0aGlzLHQmJnQud29yZHMpOih0aGlzLl9tb2RlPWUuY2FsbChuLHRoaXMsdCYmdC53b3JkcyksdGhpcy5fbW9kZS5fX2NyZWF0b3I9ZSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihlLHQpe3RoaXMuX21vZGUucHJvY2Vzc0Jsb2NrKGUsdCl9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLmNmZy5wYWRkaW5nO3JldHVybiB0aGlzLl94Zm9ybU1vZGU9PXRoaXMuX0VOQ19YRk9STV9NT0RFPyh0LnBhZCh0aGlzLl9kYXRhLHRoaXMuYmxvY2tTaXplKSxlPXRoaXMuX3Byb2Nlc3MoITApKTooZT10aGlzLl9wcm9jZXNzKCEwKSx0LnVucGFkKGUpKSxlfSxibG9ja1NpemU6NH0pLGw9bi5DaXBoZXJQYXJhbXM9ci5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oZSl7dGhpcy5taXhJbihlKX0sdG9TdHJpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuKGV8fHRoaXMuZm9ybWF0dGVyKS5zdHJpbmdpZnkodGhpcyl9fSksaD0oZS5mb3JtYXQ9e30pLk9wZW5TU0w9e3N0cmluZ2lmeTpmdW5jdGlvbihlKXt2YXIgdD1lLmNpcGhlcnRleHQ7cmV0dXJuKGU9KGU9ZS5zYWx0KT9vLmNyZWF0ZShbMTM5ODg5MzY4NCwxNzAxMDc2ODMxXSkuY29uY2F0KGUpLmNvbmNhdCh0KTp0KS50b1N0cmluZyhzKX0scGFyc2U6ZnVuY3Rpb24oZSl7dmFyIHQsbj0oZT1zLnBhcnNlKGUpKS53b3JkcztyZXR1cm4gMTM5ODg5MzY4ND09blswXSYmMTcwMTA3NjgzMT09blsxXSYmKHQ9by5jcmVhdGUobi5zbGljZSgyLDQpKSxuLnNwbGljZSgwLDQpLGUuc2lnQnl0ZXMtPTE2KSxsLmNyZWF0ZSh7Y2lwaGVydGV4dDplLHNhbHQ6dH0pfX0scD1uLlNlcmlhbGl6YWJsZUNpcGhlcj1yLmV4dGVuZCh7Y2ZnOnIuZXh0ZW5kKHtmb3JtYXQ6aH0pLGVuY3J5cHQ6ZnVuY3Rpb24oZSx0LG4scil7cj10aGlzLmNmZy5leHRlbmQocik7dD0obz1lLmNyZWF0ZUVuY3J5cHRvcihuLHIpKS5maW5hbGl6ZSh0KTt2YXIgbz1vLmNmZztyZXR1cm4gbC5jcmVhdGUoe2NpcGhlcnRleHQ6dCxrZXk6bixpdjpvLml2LGFsZ29yaXRobTplLG1vZGU6by5tb2RlLHBhZGRpbmc6by5wYWRkaW5nLGJsb2NrU2l6ZTplLmJsb2NrU2l6ZSxmb3JtYXR0ZXI6ci5mb3JtYXR9KX0sZGVjcnlwdDpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gcj10aGlzLmNmZy5leHRlbmQociksdD10aGlzLl9wYXJzZSh0LHIuZm9ybWF0KSxlLmNyZWF0ZURlY3J5cHRvcihuLHIpLmZpbmFsaXplKHQuY2lwaGVydGV4dCl9LF9wYXJzZTpmdW5jdGlvbihlLHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP3QucGFyc2UoZSx0aGlzKTplfX0pLGQ9KGUua2RmPXt9KS5PcGVuU1NMPXtleGVjdXRlOmZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiByPXJ8fG8ucmFuZG9tKDgpLGU9YS5jcmVhdGUoe2tleVNpemU6dCtufSkuY29tcHV0ZShlLHIpLG49by5jcmVhdGUoZS53b3Jkcy5zbGljZSh0KSw0Km4pLGUuc2lnQnl0ZXM9NCp0LGwuY3JlYXRlKHtrZXk6ZSxpdjpuLHNhbHQ6cn0pfX0sXz1uLlBhc3N3b3JkQmFzZWRDaXBoZXI9cC5leHRlbmQoe2NmZzpwLmNmZy5leHRlbmQoe2tkZjpkfSksZW5jcnlwdDpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gbj0ocj10aGlzLmNmZy5leHRlbmQocikpLmtkZi5leGVjdXRlKG4sZS5rZXlTaXplLGUuaXZTaXplKSxyLml2PW4uaXYsKGU9cC5lbmNyeXB0LmNhbGwodGhpcyxlLHQsbi5rZXkscikpLm1peEluKG4pLGV9LGRlY3J5cHQ6ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIHI9dGhpcy5jZmcuZXh0ZW5kKHIpLHQ9dGhpcy5fcGFyc2UodCxyLmZvcm1hdCksbj1yLmtkZi5leGVjdXRlKG4sZS5rZXlTaXplLGUuaXZTaXplLHQuc2FsdCksci5pdj1uLml2LHAuZGVjcnlwdC5jYWxsKHRoaXMsZSx0LG4ua2V5LHIpfX0pKSkpfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7bi5yKHQpLG4uZCh0LFwiWmVnb0V4cHJlc3NXZWJSVE1FbmdpbmVcIiwoZnVuY3Rpb24oKXtyZXR1cm4gWGV9KSksbi5kKHQsXCJnZXRSZXBvcnRTZXFcIiwoZnVuY3Rpb24oKXtyZXR1cm4gZ30pKSxuLmQodCxcImdldFNlcVwiLChmdW5jdGlvbigpe3JldHVybiBmfSkpLG4uZCh0LFwiWmVnb0xvZ2dlclwiLChmdW5jdGlvbigpe3JldHVybiBjLlplZ29Mb2dnZXJ9KSksbi5kKHQsXCJaZWdvRGF0YVJlcG9ydFwiLChmdW5jdGlvbigpe3JldHVybiBjLlplZ29EYXRhUmVwb3J0fSkpLG4uZCh0LFwiWmVnb0V4cHJlc3NXZWJSVE1cIiwoZnVuY3Rpb24oKXtyZXR1cm4gRmV9KSksbi5kKHQsXCJCdXNpbmVzc1NlcnZpY2VcIiwoZnVuY3Rpb24oKXtyZXR1cm4gUn0pKSxuLmQodCxcIk5ldENvbm5lY3Rpb25cIiwoZnVuY3Rpb24oKXtyZXR1cm4gTn0pKTt2YXIgcixvLGkscyxhLGM9big1KSx1PXtkZWJ1ZzowLGluZm86MSx3YXJuOjIsZXJyb3I6MyxyZXBvcnQ6OTksZGlzYWJsZToxMDB9Oyh0PXI9cnx8e30pW3QuVFRfTk9ORT0wXT1cIlRUX05PTkVcIix0W3QuVFRfUEM9MV09XCJUVF9QQ1wiLHRbdC5UVF9JT1M9Ml09XCJUVF9JT1NcIix0W3QuVFRfQU5EUk9JRD0zXT1cIlRUX0FORFJPSURcIix0W3QuVFRfTUFDPTRdPVwiVFRfTUFDXCIsdFt0LlRUX0xJTlVYPTVdPVwiVFRfTElOVVhcIix0W3QuVFRfV0VCPTZdPVwiVFRfV0VCXCIsdFt0LlRUX01JTklQUk9HUkFNPTddPVwiVFRfTUlOSVBST0dSQU1cIix0W3QuVFRfVU5LTk9XTj0zMl09XCJUVF9VTktOT1dOXCIsKHQ9bz1vfHx7fSlbdC5sb2dvdXQ9MF09XCJsb2dvdXRcIix0W3QudHJ5bG9naW49MV09XCJ0cnlsb2dpblwiLHRbdC5sb2dpbj0yXT1cImxvZ2luXCIsKHQ9aT1pfHx7fSlbdC5vZmZsaW5lPTBdPVwib2ZmbGluZVwiLHRbdC5vbmxpbmU9MV09XCJvbmxpbmVcIiwodD1zPXN8fHt9KVt0Lk5UX05PTkU9MF09XCJOVF9OT05FXCIsdFt0Lk5UX0xJTkU9MV09XCJOVF9MSU5FXCIsdFt0Lk5UX1dJRkk9Ml09XCJOVF9XSUZJXCIsdFt0Lk5UXzJHPTNdPVwiTlRfMkdcIix0W3QuTlRfM0c9NF09XCJOVF8zR1wiLHRbdC5OVF80Rz01XT1cIk5UXzRHXCIsdFt0Lk5UX1VOS05PV049MzJdPVwiTlRfVU5LTk9XTlwiLCh0PWE9YXx8e30pW3QuQ2xpZW50VHlwZV9Ob25lPTBdPVwiQ2xpZW50VHlwZV9Ob25lXCIsdFt0LkNsaWVudFR5cGVfSDU9MV09XCJDbGllbnRUeXBlX0g1XCIsdFt0LkNsaWVudFR5cGVfU21hbGxQcm9ncmFtPTJdPVwiQ2xpZW50VHlwZV9TbWFsbFByb2dyYW1cIix0W3QuQ2xpZW50VHlwZV9XZWJydGM9M109XCJDbGllbnRUeXBlX1dlYnJ0Y1wiO3ZhciBsLGgscD1cImV2ZW50U3RhcnRcIixkPVwiZXZlbnRFbmRXaXRoTXNnSW5mb1wiLF89XCJhZGRFdmVudE1zZ1wiLGY9ZnVuY3Rpb24oKXtyZXR1cm4gbCsrfSxnPShoPWw9MSxmdW5jdGlvbigpe3JldHVybiBoKyt9KSxtPShPYmplY3QuZGVmaW5lUHJvcGVydHkoeS5wcm90b3R5cGUsXCJpZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faWR8fG51bGx9LHNldDpmdW5jdGlvbihlKXt0aGlzLl9pZD1lfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh5LnByb3RvdHlwZSxcImRhdGFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RhdGF9LHNldDpmdW5jdGlvbihlKXt0aGlzLl9kYXRhPWV9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSkseS5wcm90b3R5cGUuaGFzTmV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5leHQmJnRoaXMubmV4dC5pZH0seS5wcm90b3R5cGUuaGFzUHJldj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnByZXYmJnRoaXMucHJldi5pZH0seSk7ZnVuY3Rpb24geShlLHQpe3ZvaWQgMD09PWUmJihlPW51bGwpLHZvaWQgMD09PXQmJih0PW51bGwpLHRoaXMubmV4dD1udWxsLHRoaXMucHJldj1udWxsLHRoaXMuX2lkPWUsdGhpcy5fZGF0YT10fWIucHJvdG90eXBlLmluc2VydEJlZm9yZT1mdW5jdGlvbihlLHQpe3JldHVybih0PW5ldyBtKHRoaXMuX2lkQ291bnRlcix0KSkubmV4dD1lLHQucHJldj1lLnByZXYsZS5wcmV2JiYoZS5wcmV2Lm5leHQ9dCksZS5wcmV2PXQsKyt0aGlzLl9pZENvdW50ZXIsKyt0aGlzLl9udW1Ob2Rlcyx0fSxiLnByb3RvdHlwZS5hZGRMYXN0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmluc2VydEJlZm9yZSh0aGlzLmVuZCxlKX0sYi5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmFkZExhc3QoZSl9LGIucHJvdG90eXBlLmdldEZpcnN0PWZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLl9udW1Ob2Rlcz9udWxsOnRoaXMuc3RhcnQubmV4dH0sYi5wcm90b3R5cGUuZ2V0TGFzdD1mdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5fbnVtTm9kZXM/bnVsbDp0aGlzLmVuZC5wcmV2fSxiLnByb3RvdHlwZS5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX251bU5vZGVzfSxiLnByb3RvdHlwZS5nZXRGcm9tRmlyc3Q9ZnVuY3Rpb24oZSl7dmFyIHQ9MCxuPXRoaXMuc3RhcnQubmV4dDtpZigwPD1lKWZvcig7dDxlJiZudWxsIT09bjspbj1uLm5leHQsKyt0O2Vsc2Ugbj1udWxsO2lmKG51bGw9PT1uKXRocm93XCJJbmRleCBvdXQgb2YgYm91bmRzLlwiO3JldHVybiBufSxiLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PT1lP3RoaXMuZ2V0Rmlyc3QoKTplPT09dGhpcy5fbnVtTm9kZXMtMT90aGlzLmdldExhc3QoKTp0aGlzLmdldEZyb21GaXJzdChlKX0sYi5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKGUpe3JldHVybiBlLnByZXYmJihlLnByZXYubmV4dD1lLm5leHQpLGUubmV4dCYmKGUubmV4dC5wcmV2PWUucHJldiksLS10aGlzLl9udW1Ob2RlcyxlfSxiLnByb3RvdHlwZS5yZW1vdmVGaXJzdD1mdW5jdGlvbigpe3ZhciBlPW51bGw7cmV0dXJuIDA8dGhpcy5fbnVtTm9kZXMmJnRoaXMuc3RhcnQubmV4dD90aGlzLnJlbW92ZSh0aGlzLnN0YXJ0Lm5leHQpOmV9LGIucHJvdG90eXBlLnJlbW92ZUxhc3Q9ZnVuY3Rpb24oKXt2YXIgZT1udWxsO3JldHVybiAwPHRoaXMuX251bU5vZGVzJiZ0aGlzLmVuZC5wcmV2P3RoaXMucmVtb3ZlKHRoaXMuZW5kLnByZXYpOmV9LGIucHJvdG90eXBlLnJlbW92ZUFsbD1mdW5jdGlvbigpe3RoaXMuc3RhcnQubmV4dD10aGlzLmVuZCx0aGlzLmVuZC5wcmV2PXRoaXMuc3RhcnQsdGhpcy5fbnVtTm9kZXM9MCx0aGlzLl9pZENvdW50ZXI9MH0sYi5wcm90b3R5cGUuZWFjaD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy5zdGFydDt0Lmhhc05leHQoKTspZSh0PXQubmV4dCl9LGIucHJvdG90eXBlLmZpbmQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMuc3RhcnQsbj0hMSxyPW51bGw7dC5oYXNOZXh0KCkmJiFuOyllKHQ9dC5uZXh0KSYmKHI9dCxuPSEwKTtyZXR1cm4gcn0sYi5wcm90b3R5cGUubWFwPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLnN0YXJ0LG49W107dC5oYXNOZXh0KCk7KWUodD10Lm5leHQpJiZuLnB1c2godCk7cmV0dXJuIG59LGIucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYWRkTGFzdChlKX0sYi5wcm90b3R5cGUudW5zaGlmdD1mdW5jdGlvbihlKXswPHRoaXMuX251bU5vZGVzP3RoaXMuaW5zZXJ0QmVmb3JlKHRoaXMuc3RhcnQubmV4dCxlKTp0aGlzLmluc2VydEJlZm9yZSh0aGlzLmVuZCxlKX0sYi5wcm90b3R5cGUucG9wPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVtb3ZlTGFzdCgpfSxiLnByb3RvdHlwZS5zaGlmdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlbW92ZUZpcnN0KCl9O3ZhciB2PWI7ZnVuY3Rpb24gYigpe3RoaXMuc3RhcnQ9bmV3IG0sdGhpcy5lbmQ9bmV3IG0sdGhpcy5faWRDb3VudGVyPTAsdGhpcy5fbnVtTm9kZXM9MCx0aGlzLnN0YXJ0Lm5leHQ9dGhpcy5lbmQsdGhpcy5zdGFydC5wcmV2PW51bGwsdGhpcy5lbmQucHJldj10aGlzLnN0YXJ0LHRoaXMuZW5kLm5leHQ9bnVsbH12YXIgRSxPLFQsUyxSLGssQz1cIuacquW8leWFpea2iOaBr+aooeWdl1wiLHc9bigxMyksTj0oSS5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbigpe3ZhciBlO251bGwhPShlPXRoaXMuY29ubmVjdGlvbikmJmUuaW5pdCgpfSxJLnByb3RvdHlwZS51bkluaXQ9ZnVuY3Rpb24oKXt2YXIgZTtudWxsIT0oZT10aGlzLmNvbm5lY3Rpb24pJiZlLnVuSW5pdCgpfSxJLnByb3RvdHlwZS5zZXRBcHBJbmZvPWZ1bmN0aW9uKGUpe3ZhciB0O251bGwhPSh0PXRoaXMuY29ubmVjdGlvbikmJnQuc2V0QXBwSW5mbyhlKX0sSS5wcm90b3R5cGUuc2V0VXNlckluZm89ZnVuY3Rpb24oZSl7dmFyIHQ7bnVsbCE9KHQ9dGhpcy5jb25uZWN0aW9uKSYmdC5zZXRVc2VySW5mbyhlKX0sSS5wcm90b3R5cGUuc2V0TmV0QWdlbnREZWZhdWx0U2VydmVycz1mdW5jdGlvbihlKXt2YXIgdDtudWxsIT0odD10aGlzLmNvbm5lY3Rpb24pJiZ0LnNldE5ldEFnZW50RGVmYXVsdFNlcnZlcnMoZSl9LEkucHJvdG90eXBlLnNldEJhY2t1cERvbWFpbnM9ZnVuY3Rpb24oZSl7dmFyIHQ7bnVsbCE9KHQ9dGhpcy5jb25uZWN0aW9uKSYmdC5zZXRCYWNrdXBEb21haW5zKGUpfSxJLnByb3RvdHlwZS5zZXREaXNwYXRjaENvbm5lY3RTZXJ2ZXJzPWZ1bmN0aW9uKGUpe3ZhciB0O251bGwhPSh0PXRoaXMuY29ubmVjdGlvbikmJnQuc2V0RGlzcGF0Y2hDb25uZWN0U2VydmVycyhlKX0sSS5wcm90b3R5cGUuc2V0TmV0QWdlbnRTcGVjaWZpZWRTZXJ2ZXJzPWZ1bmN0aW9uKGUpe3ZhciB0O251bGwhPSh0PXRoaXMuY29ubmVjdGlvbikmJnQuc2V0TmV0QWdlbnRTcGVjaWZpZWRTZXJ2ZXJzKGUpfSxJLnByb3RvdHlwZS5zdGFydEh0dHBSZXF1ZXN0PWZ1bmN0aW9uKGUsdCxuLHIsbyl7dmFyIGk7bnVsbCE9KGk9dGhpcy5jb25uZWN0aW9uKSYmaS5zdGFydEh0dHBSZXF1ZXN0KGUsdCxuLHIsbyl9LEkucHJvdG90eXBlLmdldEFwcENvbmZpZ0J5QWdlbnQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByO3JldHVybiBudWxsPT0ocj10aGlzLmNvbm5lY3Rpb24pP3ZvaWQgMDpyLmdldEFwcENvbmZpZ0J5QWdlbnQoZSx0LG4pfSxJLnByb3RvdHlwZS5nZXRQQ1JlcXVlc3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbjtyZXR1cm4obnVsbD09KG49dGhpcy5jb25uZWN0aW9uKT92b2lkIDA6bi5nZXRQQ1JlcXVlc3QoZSx0KSl8fG51bGx9LEkucHJvdG90eXBlLmNvbm5lY3RVYT1mdW5jdGlvbigpe3ZhciBlO251bGwhPShlPXRoaXMuY29ubmVjdGlvbikmJmUuY29ubmVjdFVhKCl9LEkucHJvdG90eXBlLmRlc3Ryb3lDb25uZWN0PWZ1bmN0aW9uKCl7dmFyIGU7bnVsbCE9KGU9dGhpcy5jb25uZWN0aW9uKSYmZS5kZXN0cm95Q29ubmVjdCgpfSxJLnByb3RvdHlwZS5pc0Nvbm5lY3Q9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuY29ubmVjdGlvbiYmdGhpcy5jb25uZWN0aW9uLmlzQ29ubmVjdCgpfSxJLnByb3RvdHlwZS5vbj1mdW5jdGlvbihlLHQpe3ZhciBuO3JldHVybihudWxsPT0obj10aGlzLmNvbm5lY3Rpb24pP3ZvaWQgMDpuLm9uKGUsdCkpfHwhMH0sSS5wcm90b3R5cGUub2ZmPWZ1bmN0aW9uKGUsdCl7dmFyIG47cmV0dXJuIG51bGw9PShuPXRoaXMuY29ubmVjdGlvbik/dm9pZCAwOm4ub2ZmKGUsdCl9LEkucHJvdG90eXBlLnNldExvZ2dlcj1mdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gbnVsbD09KHQ9dGhpcy5jb25uZWN0aW9uKT92b2lkIDA6dC5zZXRMb2dnZXIoZSl9LEkucHJvdG90eXBlLnNldEFjY2Vzcz1mdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gbnVsbD09KHQ9dGhpcy5jb25uZWN0aW9uKT92b2lkIDA6dC5zZXRBY2Nlc3MoZSl9LEkpO2Z1bmN0aW9uIEkoKXt0aGlzLmlzTG9hZD0hMSx0aGlzLmNhbGxCYWNrTGlzdD1bXSx0aGlzLmNvbm5lY3Rpb249bmV3IHcuWmVnb0Nvbm5lY3Rpb25BZ2VudH0odD1FPUV8fHt9KVt0LkFVVE89MF09XCJBVVRPXCIsdFt0Lk1BTlVBTD0xXT1cIk1BTlVBTFwiLCh0PU89T3x8e30pW3QuRU1QVFk9MF09XCJFTVBUWVwiLHRbdC5DTE9TRT0xXT1cIkNMT1NFXCIsKHQ9VD1UfHx7fSlbdC5Nb2RlX1VOU0VUPTBdPVwiTW9kZV9VTlNFVFwiLHRbdC5NT0RFX09OTElORT0xXT1cIk1PREVfT05MSU5FXCIsdFt0Lk1PREVfVEVTVD0yXT1cIk1PREVfVEVTVFwiLHRbdC5NT0RFX0FMUEhBPTNdPVwiTU9ERV9BTFBIQVwiLCh0PVM9U3x8e30pW3QuQ0xPU0U9MF09XCJDTE9TRVwiLHRbdC5URU1QPTFdPVwiVEVNUFwiLHRbdC5USU1FT1VUPTJdPVwiVElNRU9VVFwiLCh0PVI9Unx8e30pW3QuU0VSVklDRV9VTlNFVD0wXT1cIlNFUlZJQ0VfVU5TRVRcIix0W3QuU0VSVklDRV9NRURJQUdXPTFdPVwiU0VSVklDRV9NRURJQUdXXCIsdFt0LlNFUlZJQ0VfTElWRVJPT009Ml09XCJTRVJWSUNFX0xJVkVST09NXCIsdFt0LlNFUlZJQ0VfTUlYPTNdPVwiU0VSVklDRV9NSVhcIix0W3QuU0VSVklDRV9aRVVTPTRdPVwiU0VSVklDRV9aRVVTXCIsdFt0LlNFUlZJQ0VfWlBVU0g9NV09XCJTRVJWSUNFX1pQVVNIXCIsdFt0LlNFUlZJQ0VfTDM9Nl09XCJTRVJWSUNFX0wzXCIsdFt0LlNFUlZJQ0VfVEFMS0xJTkU9N109XCJTRVJWSUNFX1RBTEtMSU5FXCIsdFt0LlNFUlZJQ0VfRURVU1VJVEU9OF09XCJTRVJWSUNFX0VEVVNVSVRFXCIsdFt0LlNFUlZJQ0VfWklNPTldPVwiU0VSVklDRV9aSU1cIix0W3QuU0VSVklDRV9DbE9VRF9TRVRUSU5HPTEwXT1cIlNFUlZJQ0VfQ2xPVURfU0VUVElOR1wiLHRbdC5TRVJWSUNFX1pFVVNIQj0xMV09XCJTRVJWSUNFX1pFVVNIQlwiLHRbdC5TRVJWSUNFX1VTRVJfTE9HSUM9MTJdPVwiU0VSVklDRV9VU0VSX0xPR0lDXCIsdFt0LlNFUlZJQ0VfVU5JRllESVNQQVRDSD0xM109XCJTRVJWSUNFX1VOSUZZRElTUEFUQ0hcIix0W3QuU0VSVklDRV9RVUFMSVRZPTE0XT1cIlNFUlZJQ0VfUVVBTElUWVwiLHRbdC5TRVJWSUNFX1NFQ1VSSVRZPTE1XT1cIlNFUlZJQ0VfU0VDVVJJVFlcIix0W3QuU0VSVklDRV9LVFZDUFI9MTZdPVwiU0VSVklDRV9LVFZDUFJcIix0W3QuU0VSVklDRV9TV0lUQ0g0TElWRVJPT009MTddPVwiU0VSVklDRV9TV0lUQ0g0TElWRVJPT01cIix0W3QuU0VSVklDRV9XRUJSVENfU0lHTkFMPTE4XT1cIlNFUlZJQ0VfV0VCUlRDX1NJR05BTFwiLHRbdC5TRVJWSUNFX0wzX1dFQlJUQ19TSUdOQUw9MTldPVwiU0VSVklDRV9MM19XRUJSVENfU0lHTkFMXCIsdFt0LlNFUlZJQ0VfVklERU9DUFI9MjBdPVwiU0VSVklDRV9WSURFT0NQUlwiLHRbdC5TRVJWSUNFX0NETj0yMV09XCJTRVJWSUNFX0NETlwiLHRbdC5TRVJWSUNFX0NMT1VEUkVDT1JEPTIyXT1cIlNFUlZJQ0VfQ0xPVURSRUNPUkRcIix0W3QuU0VSVklDRV9JTk5FUl9FQ0hPPTIzXT1cIlNFUlZJQ0VfSU5ORVJfRUNIT1wiLHRbdC5TRVJWSUNFX09VVEVSX0VDSE89MjRdPVwiU0VSVklDRV9PVVRFUl9FQ0hPXCIsdFt0LlNFUlZJQ0VfTE9DQUxIT1NUX0VDSE89MjVdPVwiU0VSVklDRV9MT0NBTEhPU1RfRUNIT1wiLHRbdC5TRVJWSUNFX0VDSE89MjZdPVwiU0VSVklDRV9FQ0hPXCIsdFt0LlNFUlZJQ0VfRE9DU0VSVklDRT0yN109XCJTRVJWSUNFX0RPQ1NFUlZJQ0VcIix0W3QuU0VSVklDRV9BVVRIU1ZSPTI4XT1cIlNFUlZJQ0VfQVVUSFNWUlwiLCh0PWs9a3x8e30pLkxvZ2luaW5nPVwiTE9HSU5JTkdcIix0LkxvZ2luZWQ9XCJMT0dJTkVEXCIsdC5Mb2dpbkZhaWxlZD1cIkxPR0lOX0ZBSUxFRFwiLHQuUmVjb25uZWN0aW5nPVwiUkVDT05ORUNUSU5HXCIsdC5SZWNvbm5lY3RlZD1cIlJFQ09OTkVDVEVEXCIsdC5SZWNvbm5lY3RGYWlsZWQ9XCJSRUNPTk5FQ1RfRkFJTEVEXCIsdC5LaWNrb3V0PVwiS0lDS09VVFwiLHQuTG9nb3V0PVwiTE9HT1VUXCIsdC5Mb2dvdXRGYWlsZWQ9XCJMT0dPVVRfRkFJTEVEXCI7dmFyIE09e1NFUlZFUjp7Y29kZTowLG1zZzpcImxpdmVyb29vbSBjbWQgZXJyb3JcIn0sU1VDQ0VTUzp7Y29kZTowLG1zZzpcInN1Y2Nlc3MuXCJ9LElOSVQ6e2NvZGU6MjAwMDAwMDAwMSxtc2c6XCJpbml0IHNkayB3cm9uZ1wifSxOT1RfTE9HSU46e2NvZGU6MTAwMDAwMixtc2c6XCJub3QgbG9naW5cIn0sQVBQSURfSU5WQUxJRDp7Y29kZToxMDAxMDA0LG1zZzpcImFwcGlkIGludmFsaWRcIn0sTkVUV09SS19CUk9LRU46e2NvZGU6MTAwMDAxNyxtc2c6XCJuZXR3b3JrIGlzIGJyb2tlblwifSxJTlBVVF9QQVJBTTp7Y29kZToxMTAwMDAxLG1zZzpcImlucHV0IHBhcm0gZXJyb3IuXCJ9LFRJTUVPVVQ6e2NvZGU6MTEwMDAwMixtc2c6XCJuZXR3b3JrIHRpbWVvdXQuXCJ9LFNPQ0tFVF9DTE9TRTp7Y29kZToxMTAwMDAzLG1zZzpcInNvY2tldCBjbG9zZVwifSxORVRfU09DS0VUX1RJTUVPVVQ6e2NvZGU6MTEwMDAwNCxtc2c6XCJuZXQgYWdlbnQgdGltZW91dFwifSxORVRfSEJfVElNRU9VVDp7Y29kZToxMTAwMDA1LG1zZzpcIm5ldCBoYiB0aW1lb3V0XCJ9LElOSVRfU0RLX1dST05HOntjb2RlOjExMDFlMyxtc2c6XCJpbml0IHNkayB3cm9uZ1wifSxST09NX0NPVU5UX0VYQ0VFRDp7Y29kZToxMDAyMDAxLG1zZzpcImxvZ2luIHJvb21zIGV4Y2VlZHMgdGhlIHVwcGVyIGxpbWl0XCJ9LFVTRVJfSURfTlVMTDp7Y29kZToxMDAyMDA1LG1zZzpcInVzZXIgSUQgaXMgZW1wdHlcIn0sVVNFUl9JRF9JTlZBTElEX0NIQVJBQ1RFUjp7Y29kZToxMDAyMDA2LG1zZzpcInVzZXIgSUQgY29udGFpbnMgaWxsZWdhbCBjaGFyYWN0ZXJzXCJ9LFVTRVJfSURfVE9PX0xPTkc6e2NvZGU6MTAwMjAwNyxtc2c6XCJ1c2VyIElEIGlzIHRvbyBsb25nXCJ9LFVTRVJfTkFNRV9OVUxMOntjb2RlOjEwMDIwMDgsbXNnOlwidXNlcm5hbWUgaXMgZW1wdHlcIn0sVVNFUl9OQU1FX1RPT19MT05HOntjb2RlOjEwMDIwMTAsbXNnOlwidXNlcm5hbWUgaXMgdG9vIGxvbmdcIn0sUk9PTV9JRF9OVUxMOntjb2RlOjEwMDIwMTEsbXNnOlwicm9vbSBJRCBpcyBlbXB0eVwifSxST09NX0lEX0lOVkFMSURfQ0hBUkFDVEVSOntjb2RlOjEwMDIwMTIsbXNnOlwicm9vbSBJRCBjb250YWlucyBpbGxlZ2FsIGNoYXJhY3RlcnNcIn0sUk9PTV9JRF9UT09fTE9ORzp7Y29kZToxMDAyMDEzLG1zZzpcInJvb20gSUQgaXMgdG9vIGxvbmdcIn0sUk9PTV9OT1RfRVhJU1Q6e2NvZGU6MTAwMjAxNCxtc2c6XCJyb29tIG5vdCBleGlzdFwifSxMT0dJTl9USU1FT1VUOntjb2RlOjEwMDIwMzEsbXNnOlwibG9naW4gdGltZW91dFwifSxST09NX01BWF9VU0VSX0NPVU5UOntjb2RlOjEwMDIwMzQsbXNnOlwidXNlcnMgbG9nZ2luZyBpbnRvIHRoZSByb29tIGV4Y2VlZHMgdGhlIG1heGltdW0gbnVtYmVyXCJ9LE1VTFRJX1JPT01fVU5BQkxFOntjb2RlOjEwMDIwMzYsbXNnOlwibXVsdGkgcm9vbSB1bmFibGVcIn0sTVVMVElQTEVfTE9HSU5fS0lDS09VVDp7Y29kZToxMDAyMDUwLG1zZzpcImtpY2tvdXQgbWF5IGJlIHRoZSBzYW1lIHVzZXIgSUQgbG9naW4gb3RoZXJcIn0sTkVUV09SS19SRUNPVkVSWTp7Y29kZToxMDAyMDUxLG1zZzpcIm5ldHdvcmsgcmVjb3ZlcnlcIn0sUk9PTV9SRVRSWV9USU1FT1VUOntjb2RlOjEwMDIwNTMsbXNnOlwibmV0d29yayBpcyBicm9rZW4gYW5kIGxvZ2luIGZhaWwuXCJ9LE1BTlVBTF9LSUNLT1VUOntjb2RlOjEwMDIwNTUsbXNnOlwic2VydmVyIGhhcyBzZW50IGEgc2lnbmFsIHRvIGtpY2sgb3V0XCJ9LFJFUEVBVEVETFlfTE9HSU46e2NvZGU6MTAwMjA1Nixtc2c6XCJ1c2VyIHJlcGVhdGVkbHkgbG9naW5cIn0sUkVQRUFURURMWV9FTlRFUl9ST09NOntjb2RlOjEwMDIwNTcsbXNnOlwidXNlciByZXBlYXRlZGx5IGVudGVyIHJvb21cIn0sQUxSRUFEWV9MT0dJTjp7Y29kZToxMDAyMDU4LG1zZzpcInVzZXIgYWxyZWFkeSBsb2dnZWQgaW5cIn0sUk9PTV9JTk5FUl9FUlJPUjp7Y29kZToxMDAyMDk5LG1zZzpcInJvb20gaW5uZXIgZXJyb3JcIn0sSEVBUlRCRUFUX1RJTUVPVVQ6e2NvZGU6MTEwMjAwMSxtc2c6XCJoZWFydGJlYXQgdGltZW91dC5cIn0sUEFSU0VfSlNPTl9FUlJPUjp7Y29kZToxMTAyMDExLG1zZzpcInBhcnNlIGpzb24gZXJyb3IuXCJ9LExPR0lOX1BST0NFU1NJTkc6e2NvZGU6MTEwMjAxMixtc2c6XCJsb2dpbiBpcyBwcm9jZXNzaW5nLlwifSxMSVZFUk9NTV9SRVFVRVNUX0VSUk9SOntjb2RlOjExMDIwMTMsbXNnOlwibGl2ZXJvb20gcmVxdWVzdCBlcnJvci5cIn0sWlBVU0hfUkVRVUVTVF9GQUlMOntjb2RlOjExMDIwMTQsbXNnOlwienB1c2ggcmVxdWVzdCBmYWlsLlwifSxMT0dJTl9TVEFURV9XUk9ORzp7Y29kZToxMTAyMDE1LG1zZzpcInVzZXIgbG9naW4gc3RhdGUgaXMgd3JvbmcuXCJ9LFRPS0VOX0VSUk9SOntjb2RlOjExMDIwMTYsbXNnOlwidG9rZW4gZXJyb3JcIn0sRElBUEFUQ0hfRVJST1I6e2NvZGU6MTEwMjAxNyxtc2c6XCJkaXNwYXRjaCBlcnJvclwifSxUT0tFTl9FWFBJUkVEOntjb2RlOjExMDIwMTgsbXNnOlwidG9rZW4gZXhwaXJlZFwifSxTVUJDTURfRVJST1I6e2NvZGU6MTEwMjAxOSxtc2c6XCJzdWJjbWQgZXJyb3IuXCJ9LFpFR09fQVVUSF9FUlJPUjp7Y29kZToxMTAyMDIwLG1zZzpcInplZ28gYXV0aCBlcnJvci5cIn0sQklaX0NIQU5ORUxfRVJST1I6e2NvZGU6MTEwMjAyMSxtc2c6XCJiaXogY2hhbm5lbCBlcnJvci5cIn19LEw9KFAuYmFzZTY0ZW5jb2RlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuLHIsbz1lLmxlbmd0aCxpPTAscz1cIlwiO2k8bzspe2lmKHQ9MjU1JmUuY2hhckNvZGVBdChpKyspLGk9PW8pe3M9KHMrPVAuYmFzZTY0RW5jb2RlQ2hhcnMuY2hhckF0KHQ+PjIpKStQLmJhc2U2NEVuY29kZUNoYXJzLmNoYXJBdCgoMyZ0KTw8NCkrXCI9PVwiO2JyZWFrfWlmKG49ZS5jaGFyQ29kZUF0KGkrKyksaT09byl7cz0ocz0ocys9UC5iYXNlNjRFbmNvZGVDaGFycy5jaGFyQXQodD4+MikpK1AuYmFzZTY0RW5jb2RlQ2hhcnMuY2hhckF0KCgzJnQpPDw0fCgyNDAmbik+PjQpKStQLmJhc2U2NEVuY29kZUNoYXJzLmNoYXJBdCgoMTUmbik8PDIpK1wiPVwiO2JyZWFrfXI9ZS5jaGFyQ29kZUF0KGkrKykscz0ocz0ocz0ocys9UC5iYXNlNjRFbmNvZGVDaGFycy5jaGFyQXQodD4+MikpK1AuYmFzZTY0RW5jb2RlQ2hhcnMuY2hhckF0KCgzJnQpPDw0fCgyNDAmbik+PjQpKStQLmJhc2U2NEVuY29kZUNoYXJzLmNoYXJBdCgoMTUmbik8PDJ8KDE5MiZyKT4+NikpK1AuYmFzZTY0RW5jb2RlQ2hhcnMuY2hhckF0KDYzJnIpfXJldHVybiBzfSxQLmJhc2U2NGRlY29kZT1mdW5jdGlvbihlKXtmb3IodmFyIHQsbixyLG8saT1lLmxlbmd0aCxzPTAsYT1cIlwiO3M8aTspe2Zvcig7dD1QLmJhc2U2NERlY29kZUNoYXJzWzI1NSZlLmNoYXJDb2RlQXQocysrKV0sczxpJiYtMT09dDspO2lmKC0xPT10KWJyZWFrO2Zvcig7bj1QLmJhc2U2NERlY29kZUNoYXJzWzI1NSZlLmNoYXJDb2RlQXQocysrKV0sczxpJiYtMT09bjspO2lmKC0xPT1uKWJyZWFrO2ErPVN0cmluZy5mcm9tQ2hhckNvZGUodDw8MnwoNDgmbik+PjQpO2Rve2lmKDYxPT0ocj0yNTUmZS5jaGFyQ29kZUF0KHMrKykpKXJldHVybiBhfXdoaWxlKHI9UC5iYXNlNjREZWNvZGVDaGFyc1tyXSxzPGkmJi0xPT1yKTtpZigtMT09cilicmVhazthKz1TdHJpbmcuZnJvbUNoYXJDb2RlKCgxNSZuKTw8NHwoNjAmcik+PjIpO2Rve2lmKDYxPT0obz0yNTUmZS5jaGFyQ29kZUF0KHMrKykpKXJldHVybiBhfXdoaWxlKG89UC5iYXNlNjREZWNvZGVDaGFyc1tvXSxzPGkmJi0xPT1vKTtpZigtMT09bylicmVhazthKz1TdHJpbmcuZnJvbUNoYXJDb2RlKCgzJnIpPDw2fG8pfXJldHVybiBhfSxQLnV0ZjE2dG84PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPVwiXCIscj1lLmxlbmd0aCxvPTA7bzxyO28rKykxPD0odD1lLmNoYXJDb2RlQXQobykpJiZ0PD0xMjc/bis9ZS5jaGFyQXQobyk6bj0yMDQ3PHQ/KG49KG4rPVN0cmluZy5mcm9tQ2hhckNvZGUoMjI0fHQ+PjEyJjE1KSkrU3RyaW5nLmZyb21DaGFyQ29kZSgxMjh8dD4+NiY2MykpK1N0cmluZy5mcm9tQ2hhckNvZGUoMTI4fHQ+PjAmNjMpOihuKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDE5Mnx0Pj42JjMxKSkrU3RyaW5nLmZyb21DaGFyQ29kZSgxMjh8dD4+MCY2Myk7cmV0dXJuIG59LFAudXRmOHRvMTY9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG4scixvPVwiXCIsaT1lLmxlbmd0aCxzPTA7czxpOylzd2l0Y2goKHQ9ZS5jaGFyQ29kZUF0KHMrKykpPj40KXtjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpjYXNlIDY6Y2FzZSA3Om8rPWUuY2hhckF0KHMtMSk7YnJlYWs7Y2FzZSAxMjpjYXNlIDEzOm49ZS5jaGFyQ29kZUF0KHMrKyksbys9U3RyaW5nLmZyb21DaGFyQ29kZSgoMzEmdCk8PDZ8NjMmbik7YnJlYWs7Y2FzZSAxNDpuPWUuY2hhckNvZGVBdChzKyspLHI9ZS5jaGFyQ29kZUF0KHMrKyksbys9U3RyaW5nLmZyb21DaGFyQ29kZSgoMTUmdCk8PDEyfCg2MyZuKTw8NnwoNjMmcik8PDApfXJldHVybiBvfSxQLmJhc2U2NEVuY29kZUNoYXJzPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiLFAuYmFzZTY0RGVjb2RlQ2hhcnM9Wy0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLDYyLC0xLC0xLC0xLDYzLDUyLDUzLDU0LDU1LDU2LDU3LDU4LDU5LDYwLDYxLC0xLC0xLC0xLC0xLC0xLC0xLC0xLDAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTksMjAsMjEsMjIsMjMsMjQsMjUsLTEsLTEsLTEsLTEsLTEsLTEsMjYsMjcsMjgsMjksMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNDYsNDcsNDgsNDksNTAsNTEsLTEsLTEsLTEsLTEsLTFdLFApO2Z1bmN0aW9uIFAoKXt9dD1uKDMpO3ZhciBBPW4ubih0KSxEPSh0PW4oNyksbi5uKHQpKSxIPWZ1bmN0aW9uKCl7cmV0dXJuKEg9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49MSxyPWFyZ3VtZW50cy5sZW5ndGg7bjxyO24rKylmb3IodmFyIG8gaW4gdD1hcmd1bWVudHNbbl0pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbykmJihlW29dPXRbb10pO3JldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxqPShxLmNoZWNrQ29uZmlnUGFyYW09ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBlJiZcIm51bWJlclwiPT10eXBlb2YgZSYmdGhpcy5jaGVja0ludGVnZXIoZSk/ISghdHx8XCJzdHJpbmdcIiE9dHlwZW9mIHQmJiFBcnJheS5pc0FycmF5KHQpfHxcIlwiPT10KXx8KG4uZXJyb3IoXCJjY3AuMCBzZXJ2ZXIgbXVzdCBiZSBzdHJpbmcgb3Igc3RyaW5nIGFycmF5IGFuZCBub3QgZW1wdHlcIiksITEpOihuLmVycm9yKFwiY2NwLjAgYXBwaWQgbXVzdCBiZSBwb3NpdGl2ZSBpbnRlZ2VyIG51bWJlciBhbmQgbm90IGVtcHR5XCIpLCExKX0scS5jaGVja1ByaUNvbmZpZ1BhcmFtPWZ1bmN0aW9uKGUsdCxuLHIsbyl7cmV0dXJuIGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlJiZ0aGlzLmNoZWNrSW50ZWdlcihlKT90JiZcInN0cmluZ1wiPT10eXBlb2YgdD9cIm9iamVjdFwiIT10eXBlb2Ygbnx8XCJzdHJpbmdcIiE9dHlwZW9mIG4uZGV2aWNlSUQ/KG8uZXJyb3IoXCJjY3AuMCBkZXZpY2VJRCBtdXN0IGJlIHN0cmluZyBhbmQgbm90IGVtcHR5XCIpLCExKToxPT09cnx8MD09PXJ8fChvLmVycm9yKFwiY2NwLjAgYW5UeXBlIG11c3QgYmUgMCBvciAxXCIpLCExKTooby5lcnJvcihcImNjcC4wIGRpc3BhdGNoU2VydmVyIG11c3QgYmUgc3RyaW5nIGFuZCBub3QgZW1wdHlcIiksITEpOihvLmVycm9yKFwiY2NwLjAgYXBwaWQgbXVzdCBiZSBwb3NpdGl2ZSBpbnRlZ2VyIG51bWJlciBhbmQgbm90IGVtcHR5XCIpLCExKX0scS5jaGVja0lsbGVnYWxDaGFyYWN0ZXJzPWZ1bmN0aW9uKGUpe3JldHVybi9eKFswLTlhLXpBLVojISQlJigpYCcrLTs8PS4+QF5ffixcXFxcKl0pKyQvLnRlc3QoZSkmJi9eW146L10qJC9nLnRlc3QoZSl9LHEuaXNVcmw9ZnVuY3Rpb24oZSl7cmV0dXJuISEoZS5zdGFydHNXaXRoKFwicnRtcDovL1wiKXx8ZS5zdGFydHNXaXRoKFwiaHR0cHM6Ly9cIikmJmUuZW5kc1dpdGgoXCIuZmx2XCIpfHxlLnN0YXJ0c1dpdGgoXCJodHRwczovL1wiKSYmZS5lbmRzV2l0aChcIi5tM3U4XCIpKX0scS5yZWdpc3RlckNhbGxiYWNrPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcjt0LnN1Y2Nlc3MmJihyPXQuc3VjY2VzcyxuW2UrXCJTdWNjZXNzQ2FsbGJhY2tcIl09ciksdC5lcnJvciYmKHI9dC5lcnJvcixuW2UrXCJFcnJvckNhbGxiYWNrXCJdPXIpfSxxLmFjdGlvbkVycm9yQ2FsbGJhY2s9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdFtlK1wiRXJyb3JDYWxsYmFja1wiXX0scS5hY3Rpb25TdWNjZXNzQ2FsbGJhY2s9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdFtlK1wiU3VjY2Vzc0NhbGxiYWNrXCJdfSxxLmxvZ1JlcG9ydENhbGxiYWNrPWZ1bmN0aW9uKGUsdCxuLHIpe3EucmVnaXN0ZXJDYWxsYmFjayhlLHtzdWNjZXNzOmZ1bmN0aW9uKGUscil7Zm9yKHZhciBvPVtdLGk9MjtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKW9baS0yXT1hcmd1bWVudHNbaV07cS5kYXRhUmVwb3J0RXZlbnQodCxuLGUscixvKX19LHIpfSxxLnByb3h5UmVzPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybntpbnRlclJlc29sdmU6ZnVuY3Rpb24ocil7ZS51cGxvYWRSZXBvcnQodCksbihyKX0saW50ZXJSZWplY3Q6ZnVuY3Rpb24obixvKXt2YXIgaTt2b2lkIDA9PT1vJiYobz1cIlwiKSwoaT1uLmNvZGU8MmU5JiYxZTk8bi5jb2RlP3EuZGVjb2RlU2VydmVyRXJyb3Iobi5jb2RlLG4ubXNnKTp7Y29kZTpuLmNvZGUsbWVzc2FnZTpuLm1zZ30pJiZlLmFkZE1zZ0luZm8odCx7ZXJyb3I6aS5jb2RlLG1lc3NhZ2U6aS5tZXNzYWdlK299KSxlLnVwbG9hZFJlcG9ydCh0KSxyKHtlcnJvckNvZGU6bi5jb2RlfHxuLmVycm9yQ29kZX0pfX19LHEuZ2V0U2VydmVyRXJyb3I9ZnVuY3Rpb24oZSl7dmFyIHQ9ezE6XCJwYXJzZSBqc29uIGVycm9yLlwiLDEwMDE6XCJsb2dpbiBpcyBwcm9jZXNzaW5nLlwiLDEwMDI6XCJsaXZlcm9vbSByZXF1ZXN0IGVycm9yLlwiLDEwMDM6XCJ6cHVzaCBjb25uZWN0IGZhaWwuXCIsMTAwNDpcInpwdXNoIGhhbmRzaGFrZSBmYWlsLlwiLDEwMDU6XCJ6cHVzaCBsb2dpbiBmYWlsLlwiLDEwMDY6XCJ1c2VyIGxvZ2luIHN0YXRlIGlzIHdyb25nLlwiLDEwMDc6XCJnb3Qgbm8genB1c2ggYWRkclwiLDEwMDg6XCJ0b2tlbiBlcnJvclwiLDEwMDk6XCJkaXNwYXRjaCBlcnJvclwiLDEwMTA6XCJ0b2tlbiBleHBpcmVkXCIsMTAxMTpcInRva2VuIGZvcm1hdCBlcnJvclwiLDIwMDI6XCJiaXogY2hhbm5lbCBlcnJvclwiLDFlOTpcImxpdmVyb29tIGNtZCBlcnJvciwgY29kZTpcIiwxMDAwMDAyMDAxOlwibmVlZCByZWxvZ2luXCIsMTAwMDAwMjAwMjpcInRoaXJkIHRva2VuIGF1dGggZXJyb3JcIiwxMDAwMDAyMDAzOlwidG9rZW4gbm9uY2UgdHlwZSBzaG91bGQgYmUgaW50NjRcIiwxMDAwMDAyMDA0OlwidG9rZW4gYXBwaWQgdHlwZSAgc2hvdWxkIGJlIHVpbnQzMlwiLDEwMDAwMDIwMDU6XCJ0b2tlbiB0aW1lb3V0IHR5cGUgc2hvdWxkIGJlIGludDY0XCIsMTAwMDAwMjAwNjpcInRva2VuIHVzZXJfaWQgdHlwZSBzaG91bGQgYmUgc3RyaW5nXCIsMTAwMDAwMjAwNzpcInRva2VuIHJvb21faWQgdHlwZSBzaG91bGQgYmUgc3RyaW5nXCIsMTAwMDAwMjAwODpcInRva2VuIGZvcm1hdCBlcnJvclwiLDEwMDAwMDIwMDk6XCJ0b2tlbiBwcml2aWxlZ2UgdHlwZSBzaG91bGQgYmUgbWFwXCIsMTAwMDAwMjAxMDpcInRva2VuIGV4cGlyZV90aW1lIHR5cGUgc2hvdWxkIGJlIGludDY0XCIsMTAwMDAwMjAxMTpcInRva2VuIHVzZXJfaWQgdHlwZSBzaG91bGQgYmUgc3RyaW5nXCIsMTAwMDAwMjAxMjpcInRva2VuIG5vdCBleGlzdFwiLDEwMDAwMDIwMTM6XCJ0b2tlbiB1cGRhdGUgZXJyb3JcIiwxMDAwMDAyMDE0OlwidG9rZW4gbm90IG5lZWQgdG8gY2hlY2tcIn07aWYoMD09PWUpcmV0dXJuIE0uU1VDQ0VTUzt2YXIgbixyPUgoe30sTS5ST09NX0lOTkVSX0VSUk9SKTtyZXR1cm4gci5jb2RlPWUsci5tc2c9MWU5PGU/KG49dFtlXSk/XCJsaXZlcm9vbSBjbWQgZXJyb3IsIGNvZGU6IFwiK2UrXCIsIG1lc3NhZ2U6IFwiK246dFsxZTldK2U6dFtlXT90W2VdK1wiIGNvZGU6XCIrZTpcInVua25vd24gZXJyb3IgY29kZTpcIitlLHJ9LHEudW5yZWdpc3RlckNhbGxiYWNrPWZ1bmN0aW9uKGUsdCl7ZGVsZXRlIHRbZStcIlN1Y2Nlc3NDYWxsYmFja1wiXSxkZWxldGUgdFtlK1wiRXJyb3JDYWxsYmFja1wiXX0scS5kZWNvZGVTZXJ2ZXJFcnJvcj1mdW5jdGlvbihlLHQpe3ZhciBuPXtjb2RlOi0xLG1lc3NhZ2U6XCJzZXJ2ZXIgZXJyb3JcIn07cmV0dXJuIG4uY29kZT0xZTk8ZT9lLTFlOSs1MmU2OmUrMjAwMmU2LHQmJihuLm1lc3NhZ2U9dCksbn0scS5nZXRMaXZlUm9vbUVycm9yPWZ1bmN0aW9uKGUsdCl7dmFyIG49ezEwMTY6XCJNVUxUSV9ST09NX1VOQUJMRVwiLDExMDU6XCJST09NX01BWF9VU0VSX0NPVU5UXCIsMTAxMjpcIlBVQkxJU0hFUl9FUlJPUl9SRVBFVElUSVZFX1BVQkxJU0hfU1RSRUFNXCIsMjAwMjpcIlRPS0VOX0VSUk9SXCIsMjAwMzpcIlJPT01fRVJST1JfTE9HSU5fVElNRU9VVFwiLDIwMTA6XCJUT0tFTl9FUlJPUlwiLDUwMjI6XCJST09NX0NPVU5UX0VYQ0VFRFwifTtyZXR1cm4gdD8yZTU8ZSYmZTwzZTU/bltlLTJlNV06ZTwyZTU/ezUwMTE2OlwiVE9LRU5fRVJST1JcIiw1MDExNzpcIlRPS0VOX0VYUElSRURcIiw1MDExODpcIlRPS0VOX0VSUk9SXCIsNTAxMTk6XCJUT0tFTl9FUlJPUlwiLDUwMTIwOlwiVE9LRU5fRVJST1JcIiw1MDEyMTpcIlRPS0VOX0VSUk9SXCIsNTAxMjI6XCJUT0tFTl9FUlJPUlwiLDUwMTIzOlwiVE9LRU5fRVhQSVJFRFwiLDUwMTI0OlwiVE9LRU5fRVJST1JcIiw1MDEyNTpcIlRPS0VOX0VSUk9SXCIsNTAxMjY6XCJUT0tFTl9FUlJPUlwiLDUwMTI3OlwiVE9LRU5fRVJST1JcIiw1MDEyODpcIlRPS0VOX0VSUk9SXCJ9W2VdfHxuW2VdfHxcIlJPT01fSU5ORVJfRVJST1JcIjpuW2VdfHxcIlJPT01fSU5ORVJfRVJST1JcIjoxZTk8ZT9uW2UtMWU5XXx8XCJcIjp7MTpcIlBBUlNFX0pTT05fRVJST1JcIiwxMDAxOlwiTE9HSU5fUFJPQ0VTU0lOR1wiLDEwMDI6XCJMSVZFUk9NTV9SRVFVRVNUX0VSUk9SXCIsMTAwMzpcIlpQVVNIX1JFUVVFU1RfRkFJTFwiLDEwMDQ6XCJaUFVTSF9SRVFVRVNUX0ZBSUxcIiwxMDA1OlwiWlBVU0hfUkVRVUVTVF9GQUlMXCIsMTAwNjpcIkxPR0lOX1NUQVRFX1dST05HXCIsMTAwNzpcIlpQVVNIX1JFUVVFU1RfRkFJTFwiLDEwMDg6XCJUT0tFTl9FUlJPUlwiLDEwMDk6XCJESUFQQVRDSF9FUlJPUlwiLDEwMTA6XCJUT0tFTl9FWFBJUkVEXCIsMTAxMTpcIlRPS0VOX0VSUk9SXCIsMTAxMjpcIlNVQkNNRF9FUlJPUlwiLDExMDE6XCJaRUdPX0FVVEhfRVJST1JcIiwyMDAxOlwiQklaX0NIQU5ORUxfRVJST1JcIiwyMDAyOlwiQklaX0NIQU5ORUxfRVJST1JcIn1bZV18fFwiUk9PTV9JTk5FUl9FUlJPUlwifSxxLmdldEtpY2tvdXRFcnJvcj1mdW5jdGlvbihlLHQpe3ZhciBuPXtjb2RlOmUsbWVzc2FnZTpcImtpY2tvdXQgcmVhc29uID0gXCIrZX07aWYodClzd2l0Y2goZSl7Y2FzZSAxOm4uY29kZT02MzAwMDAwMSxuLm1lc3NhZ2U9XCJ6cHVzaCBtdWx0aXBsZSBsb2dpbiBraWNrb3V0XCIsbi5uYW1lPVwiTVVMVElQTEVfTE9HSU5fS0lDS09VVFwiO2JyZWFrO2Nhc2UgMjpuLmNvZGU9NjMwMDAwMDIsbi5tZXNzYWdlPVwienB1c2ggbWFudWFsIGtpY2tvdXRcIixuLm5hbWU9XCJNQU5VQUxfS0lDS09VVFwiO2JyZWFrO2Nhc2UgNDpuLmNvZGU9NjMwMDAwMDUsbi5tZXNzYWdlPVwienB1c2ggdG9rZW4gZXhwaXJlZFwiLG4ubmFtZT1cIlRPS0VOX0VYUElSRURcIjticmVhaztkZWZhdWx0Om4uY29kZT1lLG4ubWVzc2FnZT1cImtpY2tvdXQgcmVhc29uID0gXCIrZX1lbHNlIHN3aXRjaChlKXtjYXNlIDE6bi5jb2RlPTYzMDAwMDAxLG4ubWVzc2FnZT1cInpwdXNoIG11bHRpcGxlIGxvZ2luIGtpY2tvdXRcIixuLm5hbWU9XCJNVUxUSVBMRV9MT0dJTl9LSUNLT1VUXCI7YnJlYWs7Y2FzZSAyOm4uY29kZT02MzAwMDAwMixuLm1lc3NhZ2U9XCJ6cHVzaCBtYW51YWwga2lja291dFwiLG4ubmFtZT1cIk1BTlVBTF9LSUNLT1VUXCI7YnJlYWs7Y2FzZSAzOm4uY29kZT02MzAwMDAwMyxuLm1lc3NhZ2U9XCJraWNrb3V0IHJlYXNvbiA9IFwiK2U7YnJlYWs7Y2FzZSA0Om4uY29kZT02MzAwMDAwNCxuLm1lc3NhZ2U9XCJ6cHVzaCBtdWx0aXBsZSBsb2dpbiBraWNrb3V0XCIsbi5uYW1lPVwiTVVMVElQTEVfTE9HSU5fS0lDS09VVFwiO2JyZWFrO2Nhc2UgNTpuLmNvZGU9NjMwMDAwMDUsbi5tZXNzYWdlPVwienB1c2ggdG9rZW4gZXhwaXJlZFwiLG4ubmFtZT1cIlRPS0VOX0VYUElSRURcIjticmVhaztkZWZhdWx0Om4uY29kZT1lLG4ubWVzc2FnZT1cImtpY2tvdXQgcmVhc29uID0gXCIrZX1yZXR1cm4gbn0scS5kYXRhUmVwb3J0RXZlbnQ9ZnVuY3Rpb24oZSx0LG4scixvKXtzd2l0Y2gobil7Y2FzZVwiZXZlbnRTdGFydFwiOmUuZXZlbnRTdGFydCh0LHIpO2JyZWFrO2Nhc2VcImV2ZW50RW5kV2l0aE1zZ0luZm9cIjplLmV2ZW50RW5kV2l0aE1zZ0luZm8odCxyLG9bMF0pO2JyZWFrO2Nhc2VcImFkZEV2ZW50TXNnXCI6ZS5hZGRFdmVudE1zZyh0LHIsb1swXSxvWzFdKTticmVhaztjYXNlXCJhZGRFdmVudFwiOmUuYWRkRXZlbnQodCxyKTticmVhaztjYXNlXCJldmVudEVuZFwiOmUuZXZlbnRFbmQodCxyKTticmVhaztjYXNlXCJhZGRNc2dJbmZvXCI6ZS5hZGRNc2dJbmZvKHQsb1swXSl9fSxxLmlzS2VlcFRyeUxvZ2luPWZ1bmN0aW9uKGUpe3N3aXRjaChlKXtjYXNlIDEwMDI6Y2FzZSAxMDAzOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fSxxLm1lcmdlVXNlckxpc3Q9ZnVuY3Rpb24oZSx0LG4scil7ZS5kZWJ1ZyhcIm1zbC4wIGNhbGxcIik7dmFyIG89W10saT1bXTtuPW58fFtdO2Zvcih2YXIgcz0wO3M8bi5sZW5ndGg7cysrKXtmb3IodmFyIGE9ITEsYz0wO2M8dC5sZW5ndGg7YysrKWlmKG5bc10udXNlcklEPT09dFtjXS51c2VySUQpe2E9ITA7YnJlYWt9YXx8by5wdXNoKG5bc10pfWZvcih2YXIgdT0wO3U8dC5sZW5ndGg7dSsrKXthPSExO2Zvcih2YXIgbD0wO2w8bi5sZW5ndGg7bCsrKWlmKHRbdV0udXNlcklEPT09bltsXS51c2VySUQpe2E9ITA7YnJlYWt9YXx8aS5wdXNoKHRbdV0pfWZvcih0LnNwbGljZSgwKSxzPTA7czxuLmxlbmd0aDtzKyspdC5wdXNoKHRbc10pO3IobyxpKSxlLmRlYnVnKFwibXNsLjAgY2FsbCBzdWNjZXNzXCIpfSxxLmNoZWNrSW50ZWdlcj1mdW5jdGlvbihlLHQpe3JldHVybiAwPT10P1wibnVtYmVyXCI9PXR5cGVvZiBlJiZlJTE9PTAmJjA8PWU6XCJudW1iZXJcIj09dHlwZW9mIGUmJmUlMT09MCYmMDxlfSxxLmNoZWNrVmFsaWROdW1iZXI9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0PXR8fDEsbj1ufHwxZTQsXCJudW1iZXJcIj09dHlwZW9mIGUmJmUlMT09MCYmdDw9ZSYmZTw9bn0scS5nZW5lcmF0ZVJhbmR1bU51bWJlcj1mdW5jdGlvbihlKXtyZXR1cm4gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSooZSsxKStcIlwiLDEwKX0scS51dWlkPWZ1bmN0aW9uKGUsdCl7dmFyIG4scixvPVwiMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIi5zcGxpdChcIlwiKSxpPVtdO2lmKHQ9dHx8by5sZW5ndGgsZSlmb3Iobj0wO248ZTtuKyspaVtuXT1vWzB8TWF0aC5yYW5kb20oKSp0XTtlbHNlIGZvcihpWzhdPWlbMTNdPWlbMThdPWlbMjNdPVwiLVwiLGlbMTRdPVwiNFwiLG49MDtuPDM2O24rKylpW25dfHwocj0wfDE2Kk1hdGgucmFuZG9tKCksaVtuXT1vWzE5PT1uPzMmcnw4OnJdKTtyZXR1cm4gaS5qb2luKFwiXCIpfSxxLmNvbXBhcmVWZXJzaW9uPWZ1bmN0aW9uKGUsdCl7ZT1lLnNwbGl0KFwiLlwiKSx0PXQuc3BsaXQoXCIuXCIpO2Zvcih2YXIgbj1NYXRoLm1heChlLmxlbmd0aCx0Lmxlbmd0aCk7ZS5sZW5ndGg8bjspZS5wdXNoKFwiMFwiKTtmb3IoO3QubGVuZ3RoPG47KXQucHVzaChcIjBcIik7Zm9yKHZhciByPTA7cjxuO3IrKyl7dmFyIG89cGFyc2VJbnQoZVtyXSksaT1wYXJzZUludCh0W3JdKTtpZihpPG8pcmV0dXJuIDE7aWYobzxpKXJldHVybi0xfXJldHVybiAwfSxxLmdldEJyb3dzZXI9ZnVuY3Rpb24oKXt2YXIgZT13aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCx0PW51bGwhPXdpbmRvdy5BY3RpdmVYT2JqZWN0JiYtMSE9ZS5pbmRleE9mKFwiTVNJRVwiKSxuPS0xIT1lLmluZGV4T2YoXCJGaXJlZm94XCIpLHI9bnVsbCE9d2luZG93Lm9wcixvPWUuaW5kZXhPZihcIkNocm9tZVwiKSYmd2luZG93LmNocm9tZTtlPS0xIT1lLmluZGV4T2YoXCJTYWZhcmlcIikmJi0xIT1lLmluZGV4T2YoXCJWZXJzaW9uXCIpO3JldHVybiB0P1wiSUVcIjpuP1wiRmlyZWZveFwiOnI/XCJPcGVyYVwiOm8/XCJDaHJvbWVcIjplP1wiU2FmYXJpXCI6XCJVbmtvd25cIn0scS5pc1Rlc3RFbnY9ZnVuY3Rpb24oZSl7cmV0dXJuLTEhPWUuaW5kZXhPZihcIndzczovL3dzc2xpdmVyb29tLXRlc3QuemVnby5pbS93c1wiKXx8LTEhPWUuaW5kZXhPZihcIndzczovL3Rlc3QyLXdzbGl2ZXJvb20tYXBpLnplZ28uaW0vd3NcIil8fC0xIT1lLmluZGV4T2YoXCJ3c3M6Ly93c2xpdmVyb29tLXRlc3QuemVnb2Nsb3VkLmNvbS93c1wiKXx8LTEhPWUuaW5kZXhPZihcIndzczovL3dzbGl2ZXJvb20tdGVzdC56ZWdvLmltL3dzXCIpfHwtMSE9ZS5pbmRleE9mKFwid3NzOi8vd2VibGl2ZXJvb20tdGVzdC56ZWdvLmltL3dzXCIpfHwtMSE9ZS5pbmRleE9mKFwid3NzOi8vd2VibGl2ZXJvb20tdGVzdC1iYWsuemVnby5pbS93c1wiKXx8LTEhPWUuaW5kZXhPZihcIndzczovL3dlYmxpdmVyb29tLWhrLXRlc3QuemVnb2Nsb3VkLmNvbS93c1wiKXx8LTEhPWUuaW5kZXhPZihcIndzczovL3dlYmxpdmVyb29tLWhrLXRlc3QtYmFrLnplZ29jbG91ZC5jb20vd3NcIil9LHEuZ2V0TG9nTGV2ZWw9ZnVuY3Rpb24oZSl7cmV0dXJuIHVbZV19LHEuZ2V0VWludDY0PWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uLmdldFVpbnQzMihlLHQpO249bi5nZXRVaW50MzIoZSs0LHQpLGU9dD9yK01hdGgucG93KDIsMzIpKm46TWF0aC5wb3coMiwzMikqcituO3JldHVybiBOdW1iZXIuaXNTYWZlSW50ZWdlcihlKXx8Y29uc29sZS53YXJuKGUsXCJleGNlZWRzIE1BWF9TQUZFX0lOVEVHRVIuIFByZWNpc2lvbiBtYXkgYmUgbG9zdFwiKSxlfSxxLmRlY29kZVRva2VuRXhwaXJlPWZ1bmN0aW9uKGUpe3RyeXt2YXIgdCxuPVVpbnQ4QXJyYXkuZnJvbShMLmJhc2U2NGRlY29kZShlKSwoZnVuY3Rpb24oZSl7cmV0dXJuIGUuY2hhckNvZGVBdCgwKX0pKSxyPW5ldyBEYXRhVmlldyhuLmJ1ZmZlcik7cmV0dXJuIDA8KHQ9XCJmdW5jdGlvblwiPT10eXBlb2Ygci5nZXRCaWdJbnQ2ND9yLmdldEJpZ1VpbnQ2NCgwKTpxLmdldFVpbnQ2NCgwLCExLHIpKT9OdW1iZXIodCk6TnVtYmVyKHIuZ2V0QmlnVWludDY0KDAsITApKX1jYXRjaChlKXtjb25zb2xlLmVycm9yKFwidG9rZW4gZXJyb3JcIil9cmV0dXJuLTF9LHEuYmluMmhleD1mdW5jdGlvbihlKXtmb3IodmFyIHQsbj1cIlwiLHI9MCxvPShlKz1cIlwiKS5sZW5ndGg7cjxvO3IrKyluKz0odD1lLmNoYXJDb2RlQXQocikudG9TdHJpbmcoMTYpKS5sZW5ndGg8Mj9cIjBcIit0OnQ7cmV0dXJuIG59LHEuZ2V0Q2FudmFzRmluZ2VycHJpbnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKSxuPSgobj10LmdldENvbnRleHQoXCIyZFwiKSkudGV4dEJhc2VsaW5lPVwidG9wXCIsbi5mb250PVwiMTRweCAnQXJpYWwnXCIsbi5maWxsU3R5bGU9XCIjZjYwXCIsbi5maWxsUmVjdCgxMjUsMSw2MiwyMCksbi5maWxsU3R5bGU9XCIjMDY5XCIsbi5maWxsVGV4dChlLDIsMTUpLG4uZmlsbFN0eWxlPVwicmdiYSgxMDIsIDIwNCwgMCwgMC43KVwiLG4uZmlsbFRleHQoZSw0LDE3KSx0LnRvRGF0YVVSTCgpLnJlcGxhY2UoXCJkYXRhOmltYWdlL3BuZztiYXNlNjQsXCIsXCJcIikpO2U9YXRvYihuKTtyZXR1cm4gdGhpcy5iaW4yaGV4KGUuc2xpY2UoLTE2LC0xMikpfSxxLmdlbmVyYXRlVVVJRD1mdW5jdGlvbihlKXt2YXIgdCxuO3JldHVybiAwPT09KGU9dm9pZCAwPT09ZT8wOmUpP249bG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ6X2RldmljZUlEXCIpOnd4LmdldFN0b3JhZ2VTeW5jKFwiel9kZXZpY2VJRFwiKSxufHwodD0obmV3IERhdGUpLmdldFRpbWUoKSxuPVwieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XCIucmVwbGFjZSgvW3h5XS9nLChmdW5jdGlvbihlKXt2YXIgbj0odCsxNipNYXRoLnJhbmRvbSgpKSUxNnwwO3JldHVybiB0PU1hdGguZmxvb3IodC8xNiksKFwieFwiPT1lP246MyZufDgpLnRvU3RyaW5nKDM2KX0pKSwwPT09ZT8oZT10aGlzLmdldENhbnZhc0ZpbmdlcnByaW50KFwiaGVsbG8sIHplZ29cIikrbi5zbGljZSg4KSxsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInpfZGV2aWNlSURcIixlKSk6d3guc2V0U3RvcmFnZVN5bmMoXCJ6X2RldmljZUlEXCIsbiksbil9LHEuZ2V0TmV0VHlwZT1mdW5jdGlvbigpe3ZhciBlPW5hdmlnYXRvci5jb25uZWN0aW9ufHxuYXZpZ2F0b3IubW96Q29ubmVjdGlvbnx8bmF2aWdhdG9yLndlYmtpdENvbm5lY3Rpb247cmV0dXJuKChudWxsPT1lP3ZvaWQgMDplLmVmZmVjdGl2ZVR5cGUpfHwobnVsbD09ZT92b2lkIDA6ZS50eXBlKXx8XCJ1bmtud29uXCIpLnRvVXBwZXJDYXNlKCl9LHEuZ2V0TmV0VHlwZU51bT1mdW5jdGlvbigpe3ZhciBlO3JldHVybiBlPS0xPChlPSgobnVsbD09KGU9bmF2aWdhdG9yLmNvbm5lY3Rpb258fG5hdmlnYXRvci5tb3pDb25uZWN0aW9ufHxuYXZpZ2F0b3Iud2Via2l0Q29ubmVjdGlvbik/dm9pZCAwOmUuZWZmZWN0aXZlVHlwZSl8fChudWxsPT1lP3ZvaWQgMDplLnR5cGUpfHxcInVua253b25cIikudG9VcHBlckNhc2UoKSkuaW5kZXhPZihcIjRHXCIpP3MuTlRfNEc6LTE8ZS5pbmRleE9mKFwiMkdcIik/cy5OVF8yRzotMTxlLmluZGV4T2YoXCIzR1wiKT9zLk5UXzNHOi0xPGUuaW5kZXhPZihcIldJRklcIik/cy5OVF9XSUZJOi0xPGUuaW5kZXhPZihcIkxJTkVcIik/cy5OVF9MSU5FOi0xPGUuaW5kZXhPZihcIk5PTkVcIik/cy5OVF9OT05FOnMuTlRfVU5LTk9XTn0scS5lbmNyeXB0U3RvcmVzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIEEuYS5lbmNyeXB0KGUsdCkudG9TdHJpbmcoKX0scS5kZWNyeXB0U3RvcmVzPWZ1bmN0aW9uKGUsdCl7dHJ5e3JldHVybiBBLmEuZGVjcnlwdChlLHQpLnRvU3RyaW5nKEQuYSl9Y2F0Y2goZSl7cmV0dXJuXCJcIn19LHEpO2Z1bmN0aW9uIHEoKXt9dmFyIFUsQj17cHJvZHVjdDpcIldlYl9TREtcIixVUkw6W1wiaHR0cHM6Ly9jbG91ZC1zZXR0aW5nLWFwaS56ZWdvLmltL2Nsb3VkLXNldHRpbmcvZ2V0XCIsXCJodHRwczovL2Nsb3VkLXNldHRpbmctYXBpLnplZ29jbG91ZC5jb20vY2xvdWQtc2V0dGluZy9nZXRcIl0sT05MSU5FOiExfSx4PVwiaW5pdFwiLEc9XCIwYzllNmUwZjhjMGE4ZjRlXCIsVj1cInpfbmV0X2FjY2Vzc19zZXJ2ZXJzXCIsej1cInpfYXBwY29uZmlnXCIsRj17ZG9tYWluczpbXCJhY2Nlc3NodWItd3NzLnplZ28uaW1cIixcImFjY2Vzc2h1Yi13c3MuY29vbHpjbG91ZC5jb21cIixcImFjY2Vzc2h1Yi13c3MuemVnb2Nsb3VkLmNvbVwiXSxwcmltYXJ5RG9tYWluczpbXCJ6ZWdvLmltXCIsXCJjb29semNsb3VkLmNvbVwiLFwiemVnb2Nsb3VkLmNvbVwiXSxtb2RlOlwib25saW5lXCIsbW9kZU5vOlQuTU9ERV9PTkxJTkUsc2RrVHlwZTozLGNvbm5lY3RWZXI6NCxwY0VzdGFibGlzaFRpbWVvdXQ6MTUsc2NoZW1lOlwid3NzXCIsbG9jYXRpb246XCJhY2Nlc3NodWJcIix3c3NNZXNzYWdlVHlwZToxfTtXLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKGUsdCxuLHIpe3RoaXMuaW52YWxpZCgpLHRoaXMuc3RvcE1heFRpbWUoKSx0aGlzLmlzT3ZlclRpbWU9ITEsXCJudW1iZXJcIj09dHlwZW9mIGUmJmU8MzYwMCYmKHRoaXMuUkVUUllfTUFYX1RJTUU9ZSksXCJudW1iZXJcIj09dHlwZW9mIHQmJih0aGlzLlJFVFJZX1NUQVJUX1RJTUVfSU5URVJWQUw9dCksXCJudW1iZXJcIj09dHlwZW9mIG4mJih0aGlzLlJFVFJZX0NPTlRJTlVFX0NPVU5UPW4pLFwibnVtYmVyXCI9PXR5cGVvZiByJiYodGhpcy5SRVRSWV9NQVhfVElNRV9JTlRFUlZBTD1yKX0sVy5wcm90b3R5cGUuaW52YWxpZD1mdW5jdGlvbigpe3RoaXMucmV0cnlUaW1lciYmY2xlYXJUaW1lb3V0KHRoaXMucmV0cnlUaW1lciksdGhpcy5yZXRyeVRpbWVyPW51bGwsdGhpcy5yZXRyeVN0YXJ0VGltZT0wLHRoaXMucmV0cnlBY3RpdmVDb3VudD0xfSx0PVc7ZnVuY3Rpb24gVyhlLHQpe3RoaXMubG9nZ2VyPWUsdGhpcy5zdGF0ZUNlbnRlcj10LHRoaXMuUkVUUllfTUFYX1RJTUU9MzAwLHRoaXMuUkVUUllfU1RBUlRfVElNRV9JTlRFUlZBTD00LHRoaXMuUkVUUllfQ09OVElOVUVfQ09VTlQ9Mix0aGlzLlJFVFJZX01BWF9USU1FX0lOVEVSVkFMPTMyLHRoaXMucmV0cnlUaW1lcj1udWxsLHRoaXMubWF4VGltZXI9bnVsbCx0aGlzLnJldHJ5U3RhcnRUaW1lPTAsdGhpcy5yZXRyeUFjdGl2ZUNvdW50PTEsdGhpcy5pc092ZXJUaW1lPSExfShUZT1VPVV8fHt9KS5SVE1fQ09OU1RSVUNUT1I9XCJ6bS4wXCIsVGUuUlRNX0JJTkRfV0lORE9XX0xJU1RFTkVSPVwiem0ud2xcIixUZS5SVE1fU0VUX0xPR19DT05GSUc9XCJ6bS5zbGZcIixUZS5SVE1fU0VUX0RFQlVHX1ZFUkJPU0U9XCJ6bS5zZHZcIixUZS5SVE1fTE9HSU5fUk9PTT1cInptLmxnXCIsVGUuUlRNX0xPR09VVF9ST09NPVwiem0ubG9cIixUZS5SVE1fR0VUX1NFVFRJTkdfVU5JRlk9XCJ6bS5nc3VcIixUZS5SVE1fRkVUQ0hfQVBQX0NPTkZJRz1cInptLmZhY1wiLFRlLlJUTV9TRVRfQUNDRVNTPVwiem0uc2FcIixUZS5SVE1fQ1JFQVRFTkVUQUdFTlQ9XCJ6bS5jbmFcIixUZS5SVE1fR0VUU1RPUkVBUFBDT05GSUc9XCJ6bS5nc2FjXCIsVGUuTElWRVJPT01NT0RVTEVTX0JJTkRST09NSEFORExFUj1cInptLmxybS5icmhcIixUZS5SVE1fU0VUX0NMT1VEX1NFVFRJTkdfVVJMUz1cInptLnNjc3VcIixUZS5SVE1fT049XCJ6bS5vblwiLFRlLlJUTV9PRkY9XCJ6bS5vZmZcIixUZS5SVE1fUkVORVdUT0tFTj1cInptLnJudGtcIixUZS5SVE1fUkVTRVRUT0tFTlRJTUVSPVwiem0ucnN0dFwiLFRlLlJUTV9FTkFCTEVfTVVMVElfUk9PTT1cInptLmVtclwiLFRlLlJUTV9TRU5EX1BCPVwiem0uc3BiXCIsVGUuUlRNX0dFVF9IRUFERVI9XCJ6bS5naFwiLFRlLlJPT01fTE9HSU5fUk9PTT1cInptLnJtLmxnXCIsVGUuUk9PTV9UUllfTE9HSU49XCJ6bS5ybS50bFwiLFRlLlJPT01fT1BFTl9IQU5ETEVSPVwiem0ucm0ub3BcIixUZS5ST09NX0hBTkRMRV9MT0dJTlJTUD1cInptLnJtLmxnclwiLFRlLlJPT01fQ0xPU0VIQU5ETEVSPVwiem0ucm0uY2xoXCIsVGUuUk9PTV9MT0dPVVQ9XCJ6bS5ybS5sb1wiLFRlLlJPT01fUkVTRVRfUk9PTT1cInptLnJtLnJyXCIsVGUuUk9PTV9ESVNDT05ORUNUPVwiem0ucm0uZGNuXCIsVGUuUk9PTV9LSUNLX09VVD1cInptLnJtLmtjb1wiLFRlLlJPT01fU1RBVFVTX0NBTExCQUNLPVwiem0ucm0uc2NiXCIsVGUuUk9PTV9SRVNFVFRPS0VOX1RJTUVSPVwiem0ucm0ucnN0XCIsVGUuUk9PTV9IQU5ETEVfSGJfTE9HT1VUPVwiem0uaGhsXCIsVGUuSEVBUlRCRUFUX1NUQVJUPVwiem0uaGIuc3RcIixUZS5IRUFSVEJFQVRfSEVBUlRCRUFUX1JTUD1cInptLmhiLnJzcFwiLFRlLkhFQVJUQkVBVF9SRVNFVD1cInptLmhiLnJzdFwiLFRlLlNFUlZJQ0VfU1RBUlRfQ0hFQ0s9XCJ6bS5zYy4wXCIsVGUuU0VSVklDRV9TVE9QX0NIRUNLPVwiem0uc2MuMVwiLFRlLlNFUlZJQ0VfUFVTSD1cInptLnN2LnBzXCIsVGUuU0VSVklDRV9TRU5EPVwiem0uc3Yuc2RcIixUZS5SRVRSWVJPT01IQU5ETEVSX0hBTkRMRV9MT0dJTl9GSU5JU0g9XCJ6bS5ycmguaGxmXCIsVGUuUkVUUllST09NSEFORExFUl9IQU5ETEVfRVJST1I9XCJ6bS5ycmguaGVcIixUZS5VU0VSX0xPR0lOX1JTUD1cInptLnVzLmxnclwiLFRlLlVTRVJfRkVUQ0hfVVNFUj1cInptLnVzLmZ0dVwiLFRlLlVTRVJfRkVUQ0hfVVNFUl9SU1A9XCJ6bS51cy51cnBcIixUZS5VU0VSX1VTRVJfUFVTSD1cInptLnVzLnVwaFwiLFRlLlVTRVJfTUVSR0VfU0VRPVwiem0udXMubWdcIixUZS5VU0VSX01FUkdFX1RJTUVPVVQ9XCJ6bS51cy5tdG9cIixUZS5VU0VSX01FUkdFPVwiem0udXMubWdcIixUZS5VU0VSX0hCX1BBVENIPVwiem0udXMucHRcIixUZS5TVEFURV9BQ1RJT049XCJ6bS5zdC5hdFwiLFRlLk9OX0xJU1RFTkVSPVwiT05fTElTVEVORVJcIixUZS5MSVZFUk9PTUhBTkRMRVJfU0VORE1FU1NBR0U9XCJ6bS5scmguc21cIixUZS5MSVZFUk9PTUhBTkRMRVJfSEFORExFUFVTSD1cInptLmxyaC5ocFwiLFRlLkxJVkVST09NSEFORExFUl9IQU5ETEVTV0lUQ0hQVVNIPVwiem0ubHJoLmhzcFwiLFRlLkxJVkVST09NSEFORExFUl9QVVNIVVNFUlVQREFURT1cInptLmxyaC5wdXVcIixUZS5MSVZFUk9PTUhBTkRMRVJfUFVTSEtJQ0tPVVQ9XCJ6bS5scmgucGtcIixUZS5MSVZFUk9PTUhBTkRMRVJfR0VUU1RSRUFNTElTVD1cInptLmxyaC5nc1wiLFRlLkxJVkVST09NSEFORExFUl9MT0dJTj1cInptLmxyaC5sZ2lcIixUZS5MSVZFUk9PTUhBTkRMRVJfRkVUQ0hfVVNFUl9MSVNUPVwiem0ubHJoLmZ1bFwiLFRlLkxJVkVST09NSEFORExFUl9MT0dPVVQ9XCJ6bS5scmgubGdvXCIsVGUuTElWRVJPT01IQU5ETEVSX1NFTkRTVFJFQU1VUERBVEU9XCJ6bS5scmguc3J1XCIsVGUuTElWRVJPT01IQU5ETEVSX1JFTkVXX1RPS0VOPVwiem0ubHJoLnJ0XCIsVGUuTElWRVJPT01IQU5ETEVSX1NFTkRTSUdOQUxDTUQ9XCJ6bS5scmguc3NjXCIsVGUuTElWRVJPT01IQU5ETEVSX1NFTkRCSUdST09NTUVTU0FHRT1cInptLmxyaC5zYnJtXCIsVGUuTElWRVJPT01IQU5ETEVSX1NFTkRDVVNUT01DT01NQU5EPVwiem0ubHJoLnNjY1wiLFRlLkxJVkVST09NSEFORExFUl9GRVRDSFJFTElBQkxFTUVTU0FHRT1cInptLmxyaC5mcm1cIixUZS5MSVZFUk9PTUhBTkRMRVJfU0VORFJFTElBQkxFTUVTU0FHRT1cInptLmxyaC5zcm0uMFwiLFRlLkxJVkVST09NSEFORExFUl9TRU5EUk9PTU1TRz1cInptLmxyaC5zcm0uMVwiLFRlLkxJVkVST09NSEFORExFUl9IQU5ETEVESVNDT05ORUNURUQ9XCJ6bS5scmguaGRcIixUZS5MSVZFUk9PTUhBTkRMRVJfSEFORExFQlJPS0VOPVwiem0ubHJoLmhiXCIsVGUuTElWRVJPT01IQU5ETEVSX0hBTkRMRUNPTk5FQ1RFRD1cInptLmxyaC5oY1wiLFRlLkxJVkVST09NSEFORExFUl9SRVNFVD1cInptLmxyaC5yLjBcIixaPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKFo9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuIGluIHQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbikmJihlW25dPXRbbl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIitTdHJpbmcodCkrXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtmdW5jdGlvbiBuKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfVooZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihuLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgbil9KEosWT10KSxKLnByb3RvdHlwZS5yZW5ld0xvY2FsVG9rZW49ZnVuY3Rpb24oZSx0KXt0aGlzLnRva2VuPWUsdGhpcy5yb29tLnRva2VuPXRoaXMudG9rZW47dmFyIG49KG5ldyBEYXRlKS5nZXRUaW1lKCkscj12b2lkIDA7dCYmXCJudW1iZXJcIj09dHlwZW9mIHQ/cj0xZTMqdDpbXCIwM1wiLFwiMDRcIl0uaW5jbHVkZXMoZS5zdWJzdHJpbmcoMCwyKSkmJihyPTFlMypqLmRlY29kZVRva2VuRXhwaXJlKGUuc3Vic3RyaW5nKDIpKS1uKSxyJiZ0aGlzLnJvb21IYW5kbGVyLnJlc2V0VG9rZW5UaW1lcihyLXRoaXMuc3RhdGVDZW50ZXIubG9jYWxfdGltZV9kZXZpYXRpb24pLHRoaXMuc3RhdGVDZW50ZXIuYWN0aW9uTGlzdGVuZXIoXCJfdG9rZW5SZW5ld2VkXCIsZSx0aGlzLnJvb20ucm9vbUlEKX0sSi5wcm90b3R5cGUuaW5pdFJvb209ZnVuY3Rpb24oZSx0LG4scixvLGkscyl7dGhpcy5yb29tSGFuZGxlcj1lLHRoaXMucm9vbUlEPXQsdGhpcy5yZW5ld0xvY2FsVG9rZW4obiksdGhpcy51c2VyPXIsdGhpcy5zZXJ2ZXI9byx0aGlzLnNlcnZlckJhaz1pfHxvLHRoaXMuY29uZmlnPXN9LEoucHJvdG90eXBlLmFjdGl2ZT1mdW5jdGlvbihlKXt2YXIgdCxuPXRoaXM7dGhpcy5sb2dnZXIuaW5mbyhVLlJPT01fTE9HSU5fUk9PTStcIiByZXRyeSBjYWxsXCIpLHRoaXMucm9vbUhhbmRsZXIuc2V0UnVuU3RhdGUoby50cnlsb2dpbiksdGhpcy5yb29tLmlzTXVsdGkmJihudWxsPT0odD10aGlzLnN0YXRlQ2VudGVyLnJvb21Nb2R1bGVzTGlzdC5maW5kKChmdW5jdGlvbihlKXtyZXR1cm4hZS5pc011bHRpfSkpKT92b2lkIDA6dC5ydW5TdGF0ZSkhPT1vLmxvZ2luP3RoaXMubG9nZ2VyLmluZm8oVS5ST09NX0xPR0lOX1JPT00rXCIgc2VydmljZSBpcyBkaXNjb25uZWN0ZWQsIG11bHRpIHJvb20gc3RvcCByZXRyeVwiKTp0aGlzLnN0YXRlQ2VudGVyLm5ldHdvcmtTdGF0ZT09aS5vZmZsaW5lP3RoaXMubG9nZ2VyLmluZm8oVS5ST09NX0xPR0lOX1JPT00rXCIgbmV0d29yayBpcyBicm9rZW4sIHN0b3AgcmV0cnlcIik6dGhpcy5yZXRyeVRpbWVyP3RoaXMubG9nZ2VyLmluZm8oVS5ST09NX0xPR0lOX1JPT00rXCIgaGFzIGFjdGl2ZWQsIGlnbm9yZVwiKTp0aGlzLmlzT3ZlclRpbWU/dGhpcy5sb2dnZXIuaW5mbyhVLlJPT01fTE9HSU5fUk9PTStcIiByZXRyeSBvdmVyIHRpbWUsIHN0b3AgcmV0cnlcIik6KDE9PXRoaXMucmV0cnlBY3RpdmVDb3VudD90aGlzLnJldHJ5QWN0aXZlSW50ZXJ2YWw9TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKigxLXRoaXMuUkVUUllfU1RBUlRfVElNRV9JTlRFUlZBTCkrdGhpcy5SRVRSWV9TVEFSVF9USU1FX0lOVEVSVkFMKToodD1NYXRoLnBvdygyLE1hdGgucm91bmQodGhpcy5yZXRyeUFjdGl2ZUNvdW50L3RoaXMuUkVUUllfQ09OVElOVUVfQ09VTlQrMSkpLHRoaXMucmV0cnlBY3RpdmVJbnRlcnZhbD10PnRoaXMuUkVUUllfTUFYX1RJTUVfSU5URVJWQUw/dGhpcy5SRVRSWV9NQVhfVElNRV9JTlRFUlZBTDp0KSx0aGlzLnJldHJ5VGltZXI9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtuLnJvb21IYW5kbGVyLmxvZ2luKG4ucmV0cnlBY3RpdmVDb3VudCUyPT0xP24uc2VydmVyOm4uc2VydmVyQmFrLG4ucm9vbUlELG4udG9rZW4sbi51c2VyLG4uY29uZmlnLChmdW5jdGlvbihlKXtuLmhhbmRsZUxvZ2luRmluaXNoKGUpfSksKGZ1bmN0aW9uKGUsdCl7bi5oYW5kbGVMb2dpbkZpbmlzaCghMSxlLHQpfSkpLG4ucmV0cnlUaW1lciYmY2xlYXJUaW1lb3V0KG4ucmV0cnlUaW1lciksbi5yZXRyeVRpbWVyPW51bGwsbi5yZXRyeUFjdGl2ZUNvdW50Kyt9KSxlPzA6MWUzKnRoaXMucmV0cnlBY3RpdmVJbnRlcnZhbCkpfSxKLnByb3RvdHlwZS5zdGFydE1heFRpbWU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMubWF4VGltZXJ8fCh0aGlzLm1heFRpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZS5sb2dnZXIuaW5mbyhVLlJPT01fTE9HSU5fUk9PTStcIiBvdmVyIG1heCB0aW1lIFwiLmNvbmNhdChlLlJFVFJZX01BWF9USU1FLFwicywgc3RvcCByZXRyeVwiKSksZS5pc092ZXJUaW1lPSEwLGUucm9vbUhhbmRsZXIucmVzZXRSb29tKCksZS5zdG9wTWF4VGltZSgpLGUuaW52YWxpZCgpLGUub25hY3RpdmUoITEsTS5MT0dJTl9USU1FT1VUKSxlLmxvZ2luUm9vbUNhbGxiYWNrLmZhaWwmJihlLmxvZ2luUm9vbUNhbGxiYWNrLmZhaWwoTS5MT0dJTl9USU1FT1VUKSxlLnJvb21IYW5kbGVyLmRpc2Nvbm5lY3RlZEhhbmRsZShNLkxPR0lOX1RJTUVPVVQpLGUucmVzZXRDYWxsQmFjaygpKX0pLDFlMyp0aGlzLlJFVFJZX01BWF9USU1FKSl9LEoucHJvdG90eXBlLnN0b3BNYXhUaW1lPWZ1bmN0aW9uKCl7dGhpcy5tYXhUaW1lciYmY2xlYXJUaW1lb3V0KHRoaXMubWF4VGltZXIpLHRoaXMubWF4VGltZXI9bnVsbH0sSi5wcm90b3R5cGUub25hY3RpdmU9ZnVuY3Rpb24oZSx0KXt9LEoucHJvdG90eXBlLmhhbmRsZUVycm9yPWZ1bmN0aW9uKGUsdCl7aWYodGhpcy5SRVRSWV9NQVhfVElNRTwzKXJldHVybiExO2lmKHQpe3Q9dm9pZCAwO3ZhciBuPXZvaWQgMCxyPXZvaWQgMCxpPSh0aGlzLnN0YXRlQ2VudGVyLnVzZU5ldEFnZW50Pyh0PVtcIjIwMjAwMlwiLFwiMjA1MDMwXCIsXCIyMDUwMzVcIixcIjUwMTE2XCIsXCI1MDExN1wiLFwiNTAxMThcIixcIjUwMTE5XCIsXCI1MDEyMFwiLFwiNTAxMjFcIixcIjUwMTIyXCIsXCI1MDEyM1wiLFwiNTAxMjRcIixcIjUwMTI1XCIsXCI1MDEyNlwiLFwiNTAxMjdcIixcIjUwMTI4XCJdLG49W1wiNDAwMDFcIixcIjQwMTAwXCJdLHI9W1wiMjAxMDAyXCIsXCIzMDAxOVwiXSk6KHQ9W1wiMTAwMDAwMjAwMlwiLFwiMTAwMDAwNTAzMFwiLFwiMTAwMDAwNTAzNVwiLFwiMTAxMFwiLFwiMTAxMVwiLFwiMTAxM1wiLFwiMTAxNFwiLFwiMTAxNVwiLFwiMTAxNlwiLFwiMTAxN1wiLFwiMTAxOFwiLFwiMTAxOVwiLFwiMTAyMFwiLFwiMTAyMVwiLFwiMTAyM1wiXSxuPVtcIjExMDAwNDAwMDFcIixcIjExMDAwNDAxMDBcIl0pLGUuY29kZStcIlwiKTtpZih0aGlzLnN0YXRlQ2VudGVyLnVzZU5ldEFnZW50KXtpZigxMDAxNT09PWUuY29kZSlyZXR1cm4gdGhpcy5yb29tLnJldHJ5Q29ubmVjdCgpLCEwO2lmKDQwMDAxPD1lLmNvZGUmJmUuY29kZTw9NDAxMDB8fDUwMjAwPD1lLmNvZGUmJmUuY29kZTw9NTAyOTl8fG51bGwhPXImJnIuaW5jbHVkZXMoaSkpcmV0dXJuIHRoaXMucm9vbS5yZXNldFNlc3Npb25JbmZvKCksITB9cmV0dXJuIXQuaW5jbHVkZXMoaSkmJighIW4uaW5jbHVkZXMoaSl8fHRoaXMucm9vbS5sYXN0UnVuU3RhdGU9PW8ubG9naW4mJih0aGlzLmxvZ2dlci53YXJuKFUuUkVUUllST09NSEFORExFUl9IQU5ETEVfRVJST1IrXCIgcmVzZXRcIiksdGhpcy5yb29tLnNlc3Npb25JRD1cIjBcIix0aGlzLmludmFsaWQoKSwhMCkpfXJldHVybiEwfSxKLnByb3RvdHlwZS5zZXRMb2dpblJvb21DYWxsYmFjaz1mdW5jdGlvbihlLHQpe3RoaXMubG9naW5Sb29tQ2FsbGJhY2suc3VjY2Vzcz1lLHRoaXMubG9naW5Sb29tQ2FsbGJhY2suZmFpbD10fSxKLnByb3RvdHlwZS5sb2dpbkZhaWw9ZnVuY3Rpb24oZSl7dGhpcy5yb29tSGFuZGxlci5yZXNldFJvb20oKSx0aGlzLnN0b3BNYXhUaW1lKCksdGhpcy5pbnZhbGlkKCksdGhpcy5vbmFjdGl2ZSghMSxlKSx0aGlzLmxvZ2luUm9vbUNhbGxiYWNrLmZhaWwmJih0aGlzLmxvZ2luUm9vbUNhbGxiYWNrLmZhaWwoZSksdGhpcy5yb29tSGFuZGxlci5kaXNjb25uZWN0ZWRIYW5kbGUoZSksdGhpcy5yZXNldENhbGxCYWNrKCkpfSxKLnByb3RvdHlwZS5oYW5kbGVMb2dpbkZpbmlzaD1mdW5jdGlvbihlLHQsbil7dGhpcy5sb2dnZXIuaW5mbyhVLlJFVFJZUk9PTUhBTkRMRVJfSEFORExFX0xPR0lOX0ZJTklTSCtcIiBcIitlK1wiIFwiK0pTT04uc3RyaW5naWZ5KHQpKSx0P3RoaXMuaGFuZGxlRXJyb3IodCxuKT8odGhpcy5tYXhUaW1lcnx8dGhpcy5zdGFydE1heFRpbWUoKSx0aGlzLmFjdGl2ZSgpKToodGhpcy5yb29tSGFuZGxlci5yZXNldFJvb20oKSx0aGlzLnN0b3BNYXhUaW1lKCksdGhpcy5pbnZhbGlkKCksdGhpcy5vbmFjdGl2ZShlLHQpLHRoaXMubG9naW5Sb29tQ2FsbGJhY2suZmFpbCYmKHRoaXMubG9naW5Sb29tQ2FsbGJhY2suZmFpbCh0KSx0aGlzLnJvb21IYW5kbGVyLmRpc2Nvbm5lY3RlZEhhbmRsZSh0KSx0aGlzLnJlc2V0Q2FsbEJhY2soKSkpOih0aGlzLnN0b3BNYXhUaW1lKCksdGhpcy5pbnZhbGlkKCksdGhpcy5vbmFjdGl2ZShlLHtjb2RlOjAsbXNnOlwiXCJ9KSx0aGlzLmxvZ2luUm9vbUNhbGxiYWNrLnN1Y2Nlc3MmJih0aGlzLmxvZ2luUm9vbUNhbGxiYWNrLnN1Y2Nlc3MoZSksdGhpcy5yZXNldENhbGxCYWNrKCkpKX0sSi5wcm90b3R5cGUucmVzZXRDYWxsQmFjaz1mdW5jdGlvbigpe3RoaXMubG9naW5Sb29tQ2FsbGJhY2suc3VjY2Vzcz12b2lkIDAsdGhpcy5sb2dpblJvb21DYWxsYmFjay5mYWlsPXZvaWQgMH07dmFyIFosWSxLLFg9SjtmdW5jdGlvbiBKKGUsdCxuKXt2YXIgcj1ZLmNhbGwodGhpcyxlLHQpfHx0aGlzO3JldHVybiByLmxvZ2dlcj1lLHIuc3RhdGVDZW50ZXI9dCxyLnJvb209bixyLmxvZ2luUm9vbUNhbGxiYWNrPXt9LHJ9KFRlPUs9S3x8e30pLk5PVF9FTVBUWT1cIk5PVF9FTVBUWVwiLFRlLklMTEVHQUxfQ0hBUkFDVEVSUz1cIklMTEVHQUxfQ0hBUkFDVEVSU1wiLFRlLlRZUEVfU1RSSU5HPVwiVFlQRV9TVFJJTkdcIixUZS5UWVBFX0lOVEVHRVI9XCJUWVBFX0lOVEVHRVJcIixUZS5UWVBFX09CSkVDVD1cIlRZUEVfT0JKRUNUXCIsVGUuTUFYX0xFTkdUSF8xMD1cIk1BWF9MRU5HVEhfMTBcIixUZS5NQVhfTEVOR1RIXzY0PVwiTUFYX0xFTkdUSF82NFwiLFRlLk1BWF9MRU5HVEhfMTAwPVwiTUFYX0xFTkdUSF8xMDBcIixUZS5NQVhfTEVOR1RIXzEyOD1cIk1BWF9MRU5HVEhfMTI4XCIsVGUuTUFYX0xFTkdUSF8yNTY9XCJNQVhfTEVOR1RIXzI1NlwiLFRlLk1BWF9MRU5HVEhfMTAyND1cIk1BWF9MRU5HVEhfMTAyNFwiO3ZhciBRPXtlcnJvcjp7Y29kZTowLG1zZzpcInN1Y1wifX0sJD17Tk9UX0VNUFRZOmZ1bmN0aW9uKGUsdCxuLHIsbyl7cmV0dXJuIHZvaWQgMD09PXR8fFwiXCI9PT10fHxudWxsPT09dD8oci5lcnJvcihcIlwiLmNvbmNhdChuLFwiIFwiKS5jb25jYXQoZSxcIiBpcyBlbXB0eVwiKSksbyk6UX0sSUxMRUdBTF9DSEFSQUNURVJTOmZ1bmN0aW9uKGUsdCxuLHIsbyl7cmV0dXJuIGouY2hlY2tJbGxlZ2FsQ2hhcmFjdGVycyh0KT9ROihyLmVycm9yKFwiXCIuY29uY2F0KG4sXCIgXCIpLmNvbmNhdChlLFwiIGNvbnRhaW5zIGlsbGVnYWwgY2hhcmFjdGVyc1wiKSksbyl9LFRZUEVfU1RSSU5HOmZ1bmN0aW9uKGUsdCxuLHIsbyl7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIHQ/KHIuZXJyb3IoXCJcIi5jb25jYXQobixcIiBcIikuY29uY2F0KGUsXCIgbXVzdCBiZSBzdHJpbmdcIikpLG8pOlF9LFRZUEVfSU5URUdFUjpmdW5jdGlvbihlLHQsbixyLG8pe3JldHVybiBqLmNoZWNrSW50ZWdlcih0LCExKT9ROihyLmVycm9yKFwiXCIuY29uY2F0KG4sXCIgXCIpLmNvbmNhdChlLFwiICBtdXN0IGJlIGludGVnZXIgbnVtYmVyXCIpKSxvKX0sVFlQRV9PQkpFQ1Q6ZnVuY3Rpb24oZSx0LG4scixvKXtyZXR1cm4gdCYmXCJvYmplY3RcIj09dHlwZW9mIHQ/UTooci5lcnJvcihcIlwiLmNvbmNhdChuLFwiIFwiKS5jb25jYXQoZSxcIiAgbXVzdCBiZSBvYmplY3RcIikpLG8pfSxNQVhfTEVOR1RIXzEwOmZ1bmN0aW9uKGUsdCxuLHIsbyl7cmV0dXJuIDEwPHQubGVuZ3RoPyhyLmVycm9yKFwiXCIuY29uY2F0KG4sXCIgXCIpLmNvbmNhdChlLFwiIGlzIHRvbyBsb25nXCIpKSxvKTpRfSxNQVhfTEVOR1RIXzY0OmZ1bmN0aW9uKGUsdCxuLHIsbyl7cmV0dXJuIDY0PHQubGVuZ3RoPyhyLmVycm9yKFwiXCIuY29uY2F0KG4sXCIgXCIpLmNvbmNhdChlLFwiIGlzIHRvbyBsb25nXCIpKSxvKTpRfSxNQVhfTEVOR1RIXzEwMDpmdW5jdGlvbihlLHQsbixyLG8pe3JldHVybiAxMDA8dC5sZW5ndGg/KHIuZXJyb3IoXCJcIi5jb25jYXQobixcIiBcIikuY29uY2F0KGUsXCIgaXMgdG9vIGxvbmdcIikpLG8pOlF9LE1BWF9MRU5HVEhfMTI4OmZ1bmN0aW9uKGUsdCxuLHIsbyl7cmV0dXJuIDEyODx0Lmxlbmd0aD8oci5lcnJvcihcIlwiLmNvbmNhdChuLFwiIFwiKS5jb25jYXQoZSxcIiBpcyB0b28gbG9uZ1wiKSksbyk6UX0sTUFYX0xFTkdUSF8yNTY6ZnVuY3Rpb24oZSx0LG4scixvKXtyZXR1cm4gMjU2PHQubGVuZ3RoPyhyLmVycm9yKFwiXCIuY29uY2F0KG4sXCIgXCIpLmNvbmNhdChlLFwiIGlzIHRvbyBsb25nXCIpKSxvKTpRfSxNQVhfTEVOR1RIXzEwMjQ6ZnVuY3Rpb24oZSx0LG4scixvKXtyZXR1cm4gMTAyNDx0Lmxlbmd0aD8oci5lcnJvcihcIlwiLmNvbmNhdChuLFwiIFwiKS5jb25jYXQoZSxcIiBpcyB0b28gbG9uZ1wiKSksbyk6UX19O2Z1bmN0aW9uIGVlKGUpe3JldHVybiBlfWZ1bmN0aW9uIHRlKGUpe3JldHVybiBlfXZhciBuZT17a1plZ29UYXNrSW5pdFNldHRpbmc6e2V2ZW50OlwiL3Nkay9pbml0XCIsZXJyb3I6e2tJbnZhbGlkUGFyYW1FcnJvcjpNLklOUFVUX1BBUkFNfSxzeXN0ZW1faW5mbzpuYXZpZ2F0b3I/bmF2aWdhdG9yLmFwcFZlcnNpb246XCJcIn0sa1plZ29UYXNrU2V0RGVidWc6e2V2ZW50OlwiL3Nkay9zZXRfZGVidWdcIixkZWJ1ZzplZX0sa1plZ29UYXNrU2V0TG9nOntldmVudDpcIi9zZGsvc2V0X2xvZ19jb25maWdcIixlcnJvcjp7a0ludmFsaWRQYXJhbUVycm9yOk0uSU5QVVRfUEFSQU19LGxvZ19sZXZlbDpmdW5jdGlvbihlKXtyZXR1cm4gZX0scmVtb3RlX2xvZ19sZXZlbDplZSxsb2dfdXJsOmVlfSxrWmVnb1Rhc2tMb2dpblJvb206e2V2ZW50OlwiL3Nkay9sb2dpblwiLHVzZXJfdXBkYXRlOmVlLG1heF9tZW1iZXJfY291bnQ6ZWUsbWVzc2FnZTplZSx0b2tlbjplZSx1c2VfbmE6ZWUsZXJyb3I6e1JPT01fSURfTlVMTDpNLlJPT01fSURfTlVMTCxJTlBVVF9QQVJBTTpNLklOUFVUX1BBUkFNLFJPT01fSURfVE9PX0xPTkc6TS5ST09NX0lEX1RPT19MT05HLFJPT01fSURfSU5WQUxJRF9DSEFSQUNURVI6TS5ST09NX0lEX0lOVkFMSURfQ0hBUkFDVEVSLFVTRVJfSURfTlVMTDpNLlVTRVJfSURfTlVMTCxVU0VSX0lEX1RPT19MT05HOk0uVVNFUl9JRF9UT09fTE9ORyxVU0VSX0lEX0lOVkFMSURfQ0hBUkFDVEVSOk0uVVNFUl9JRF9JTlZBTElEX0NIQVJBQ1RFUixVU0VSX05BTUVfTlVMTDpNLlVTRVJfTkFNRV9OVUxMLFVTRVJfTkFNRV9UT09fTE9ORzpNLlVTRVJfTkFNRV9UT09fTE9ORyxSRVBFQVRFRExZX0xPR0lOOk0uUkVQRUFURURMWV9MT0dJTixMT0dJTl9USU1FT1VUOk0uTE9HSU5fVElNRU9VVCxJTk5FUl9FUlJPUjpNLlJPT01fSU5ORVJfRVJST1IsTkVUV09SS19CUk9LRU46TS5ORVRXT1JLX0JST0tFTn0sc3ViRXZlbnQ6e2NyZWF0ZV9zb2NrZXQ6e2V2ZW50OlwiY3JlYXRlX3NvY2tldFwiLHNlcnZlcjplZSx0cnlfY250OmVlfSxsaXZlcm9vbV9sb2dpbjp7ZXZlbnQ6XCJsaXZlcm9vbV9sb2dpblwiLHNlcnZlcjplZSxyZXNwb25kX2luZm86ZWV9fX0sa1plZ29UYXNrUmVOZXdUb2tlbjp7ZXZlbnQ6XCIvc2RrL3JlTmV3VG9rZW5cIixlcnJvcjp7SU5QVVRfUEFSQU06TS5JTlBVVF9QQVJBTSxOT1RfTE9HSU46TS5OT1RfTE9HSU59fSxrWmVnb1Rhc2tMb2dvdXRSb29tOntldmVudDpcIi9zZGsvbG9nb3V0XCIsZXJyb3I6e0lOUFVUX1BBUkFNOk0uSU5QVVRfUEFSQU0sUk9PTV9OT1RfRVhJU1Q6TS5ST09NX05PVF9FWElTVH19LGtaZWdvVGFza1JlTG9naW5Sb29tOntldmVudDpcIi9zZGsvcmVsb2dpblwiLGVycm9yOntST09NX0lEX05VTEw6TS5ST09NX0lEX05VTEwsUk9PTV9ESVNDT05ORUNUOk0uTkVUV09SS19CUk9LRU59LHN1YkV2ZW50OntjcmVhdGVfc29ja2V0OntldmVudDpcImNyZWF0ZV9zb2NrZXRcIixzZXJ2ZXI6ZWUsdHJ5X2NudDplZX0sbGl2ZXJvb21fbG9naW46e2V2ZW50OlwibGl2ZXJvb21fbG9naW5cIixzZXJ2ZXI6ZWUscmVzcG9uZF9pbmZvOmVlfX19LGtaZWdvVGFza0tpY2tvdXQ6e2V2ZW50OlwiL3Nkay9raWNrb3V0XCIsdXNlcl9pZDplZSxlcnJvcjp7fX0sa1plZ29UYXNrUm9vbUtpY2tvdXQ6e2V2ZW50OlwiL3Nkay9yb29tX2tpY2tvdXRcIix1c2VyX2lkOmVlLHJvb21faWQ6ZWUsbWVzc2FnZTplZX0sa1plZ29UYXNrTGl2ZVJvb21IQjp7ZXZlbnQ6XCIvbGl2ZXJvb20vaGJcIixyb29tX3NpZDplZSxlcnJvcjp7Tk9UX0xPR0lOOk0uTk9UX0xPR0lOLEhCX1RJTUVPVVQ6TS5USU1FT1VUfX0sa1plZ29UYXNrTGl2ZVJvb21HZXRVc2VyVXBkYXRlSW5mbzp7ZXZlbnQ6XCIvbGl2ZXJvb20vZ2V0X3VzZXJfdXBkYXRlX2luZm9cIix1c2VyX3VwZGF0ZV90eXBlOmVlfSxrWmVnb0xpc3RlbmVyOntldmVudDpcIi9zZGsvbGlzdGVuZXJcIn0sa1plZ29FbmFibGVNdWx0aVJvb206e2V2ZW50Olwic2RrL2VuYWJsZV9tdWx0aV9yb29tXCIsZXJyb3I6e2tJbnZhbGlkUGFyYW1FcnJvcjpNLklOUFVUX1BBUkFNLGtBbHJlYWR5TG9naW5FcnJvcjpNLkFMUkVBRFlfTE9HSU59fSxrWmVnb1Rhc2tDbG91ZFNldHRpbmdDYWNoZTp7ZXZlbnQ6XCIvY2xvdWRfc2V0dGluZy9jYWNoZVwifSxrWmVnb1Rhc2tDbG91ZFNldHRpbmdSZWZyZXNoOntldmVudDpcIi9jbG91ZF9zZXR0aW5nL3JlZnJlc2hcIn0sa1plZ29UYXNrQ2xvdWRTZXR0aW5nUmVxdWVzdDp7ZXZlbnQ6XCIvY2xvdWRfc2V0dGluZy9yZXF1ZXN0XCJ9LGtaZWdvQ29ubkNvbm5lY3Q6e2V2ZW50OlwiL3plZ29jb25uL2Nvbm5lY3RcIixyZXF1ZXN0X2NvdW50OnRlLHN2cl9lbnY6ZWUsc2VydmVyX2xpc3Q6ZWV9LGtaZWdvQ29ubkRpc0Nvbm5lY3Q6e2V2ZW50OlwiL3plZ29jb25uL2Rpc2Nvbm5lY3RcIixzZXJ2ZXI6ZWV9LGtaZWdvQ29ubkRpc3BhdGNoOntldmVudDpcIi96ZWdvY29ubi9hdXRvX2Rpc3BhdGNoXCIsdHJpZ2dlcl9yZWFzb246ZWUsZG9tYWluX2xpc3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIGV9fSxrWmVnb1JlcXVlc3Q6e2V2ZW50OlwiL3plZ29jb25uL3JlcXVlc3RcIixuYV9yZXFfbG9jYXRpb246ZWV9LGtaZWdvU0RLQ29uZmlnSW5pdDp7ZXZlbnQ6XCIvc2RrX2NvbmZpZy9pbml0XCIsdHJpZ2dlcl9yZWFzb246ZWV9LGtaZWdvU0RLUHJveHlDb25uZWN0OntldmVudDpcIi96ZWdvY29ubi9wcm94eV9jb25uZWN0XCIscHJveHlfbGlua19zb3VyY2VzOnRlLHJlY3ZfdGltZTp0ZX19LHJlPShPYmplY3QuZGVmaW5lUHJvcGVydHkob2UucHJvdG90eXBlLFwiZGVidWdcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RlYnVnfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fZGVidWc9ZSxjLkxvZ2dlclN0YXRlQ2VudGVyLmdldEluc3RhbmNlKCkuZGVidWc9ZX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkob2UucHJvdG90eXBlLFwidGVzdEVudmlyb25tZW50XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90ZXN0RW52aXJvbm1lbnR9LHNldDpmdW5jdGlvbihlKXt0aGlzLl90ZXN0RW52aXJvbm1lbnQ9ZSxjLkxvZ2dlclN0YXRlQ2VudGVyLmdldEluc3RhbmNlKCkudGVzdEVudmlyb25tZW50PWV9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KG9lLnByb3RvdHlwZSxcIkVOVlwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZW52fSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fZW52PWUsYy5Mb2dnZXJTdGF0ZUNlbnRlci5nZXRJbnN0YW5jZSgpLkVOVj1lfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvZS5wcm90b3R5cGUsXCJyb29taWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucm9vbU1vZHVsZXNMaXN0WzBdP3RoaXMucm9vbU1vZHVsZXNMaXN0WzBdLnJvb21JRDpcIlwifSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvZS5wcm90b3R5cGUsXCJzZXJ2ZXJUaW1lT2Zmc2V0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnJvb21Nb2R1bGVzTGlzdFswXT90aGlzLnJvb21Nb2R1bGVzTGlzdFswXS5tZXNzYWdlSGFuZGxlci5zZXJ2ZXJUaW1lT2Zmc2V0OjB9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksb2UucHJvdG90eXBlLmdldFJlcXVlc3RJZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlkTmFtZStcIi1cIitmKCl9LG9lLnByb3RvdHlwZS5hY3Rpb25MaXN0ZW5lcj1mdW5jdGlvbihlKXtmb3IodmFyIHQsbj10aGlzLHI9W10sbz0xO288YXJndW1lbnRzLmxlbmd0aDtvKyspcltvLTFdPWFyZ3VtZW50c1tvXTt0aGlzLmxpc3RlbmVyTGlzdFtlXSYmKHQ9ZygpLHRoaXMuZGF0YVJlcG9ydC5uZXdSZXBvcnQodCxuZS5rWmVnb0xpc3RlbmVyLmV2ZW50KSx0aGlzLmRhdGFSZXBvcnQuYWRkTXNnSW5mbyh0LHtsaXN0ZW5lcjplLHBhcmFtczpyfSksdGhpcy5kYXRhUmVwb3J0LnVwbG9hZFJlcG9ydCh0KSksW1wicm9vbVN0YXRlQ2hhbmdlZFwiLFwidG9rZW5XaWxsRXhwaXJlXCJdLmluY2x1ZGVzKGUpJiZ0aGlzLmxvZ2dlci5pbmZvKFwiem0uYWwgXCIuY29uY2F0KGUsXCIgXCIpLmNvbmNhdChKU09OLnN0cmluZ2lmeShyKSkpLHRoaXMubGlzdGVuZXJMaXN0W2VdJiZ0aGlzLmxpc3RlbmVyTGlzdFtlXS5mb3JFYWNoKChmdW5jdGlvbih0KXt0cnl7dC5hcHBseSh2b2lkIDAscil9Y2F0Y2godCl7bi5sb2dnZXIuZXJyb3IoVS5TVEFURV9BQ1RJT04rXCIgXCIsZSxcIiBcIixKU09OLnN0cmluZ2lmeSh0KSl9fSkpfSxvZS5wcm90b3R5cGUub25MaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmxpc3RlbmVyTGlzdFtlXT9cImZ1bmN0aW9uXCIhPXR5cGVvZiB0Pyh0aGlzLmxvZ2dlci5lcnJvcihVLk9OX0xJU1RFTkVSK1wiIGxpc3RlbmVyIGNhbGxCYWNrIG11c3QgYmUgZnVuY2l0b25cIiksITEpOigtMT09dGhpcy5saXN0ZW5lckxpc3RbZV0uaW5kZXhPZih0KSYmdGhpcy5saXN0ZW5lckxpc3RbZV0ucHVzaCh0KSwhMCk6KHRoaXMubG9nZ2VyLmVycm9yKFUuT05fTElTVEVORVIrXCIgZXZlbnQgXCIrZStcIiBubyBmb3VuZFwiKSwhMSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvZS5wcm90b3R5cGUsXCJzZEtWZXJzaW9uXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zZGtWZXJzaW9ufSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fc2RrVmVyc2lvbj1lfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLG9lKTtmdW5jdGlvbiBvZShlLHQpe3RoaXMubG9nZ2VyPWUsdGhpcy5kYXRhUmVwb3J0PXQsdGhpcy5fZGVidWc9ITEsdGhpcy5hcHBDb25maWdGZXRjaGVkPSExLHRoaXMucmVxdWVzdExpc3Q9e30sdGhpcy5tb2RlPVQuTU9ERV9PTkxJTkUsdGhpcy5jb25uZWN0U3RhdGU9XCJjb25uZWN0ZWRcIix0aGlzLl90ZXN0RW52aXJvbm1lbnQ9ITEsdGhpcy5fZW52PTAsdGhpcy50eXBlPVwiUFVCTElDXCIsdGhpcy5kZWJ1Z0N1c3RvbT0hMSx0aGlzLmNvbmZpZ09LPSExLHRoaXMucm9sZT0yLHRoaXMucmVsYXRlU2VydmljZT1bXSx0aGlzLm1heE1lbWJlckNvdW50PTAsdGhpcy5yb29tQ3JlYXRlRmxhZz0xLHRoaXMubG9jYWxfdGltZV9kZXZpYXRpb249MCx0aGlzLmNhbGxiYWNrTGlzdD17fSx0aGlzLmxpc3RlbmVyTGlzdD17cm9vbVVzZXJVcGRhdGU6W10scm9vbU9ubGluZVVzZXJDb3VudFVwZGF0ZTpbXSxnZXRBbmNob3JJbmZvOltdLF9nZXRBbmNob3JJbmZvOltdLElNUmVjdkN1c3RvbUNvbW1hbmQ6W10sSU1SZWN2QnJvYWRjYXN0TWVzc2FnZTpbXSxyZWN2UmVsaWFibGVNZXNzYWdlOltdLHJvb21FeHRyYUluZm9VcGRhdGU6W10sSU1SZWN2QmFycmFnZU1lc3NhZ2U6W10scmVjdkpvaW5MaXZlUmVxdWVzdDpbXSxyZWN2SW52aXRlSm9pbkxpdmVSZXF1ZXN0OltdLHJlY3ZFbmRKb2luTGl2ZUNvbW1hbmQ6W10scm9vbUxvZ2luUmVzcG9uc2U6W10sX3Jvb21Mb2dpbjpbXSxfYXBwQ29uZmlnUnNwOltdLF9jb25uZWN0Q2hhbmdlZDpbXSxIQlJlc3BvbnNlOltdLHJvb21TdGF0ZVVwZGF0ZTpbXSxfcm9vbVN0YXRlVXBkYXRlOltdLF9nZXRUb3RhbFVzZXJMaXN0OltdLF91c2VyU3RhdGVVcGRhdGU6W10sX3JlY3ZCaWdSb29tTWVzc2FnZTpbXSxfcmVjdlJvb21Nc2c6W10sX2tpY2tvdXQ6W10sdG9rZW5XaWxsRXhwaXJlOltdLF90b2tlbkV4cGlyZWQ6W10scm9vbVN0YXRlQ2hhbmdlZDpbXSxoYWxsU3RhdGVVcGRhdGU6W10sX2hhbGxTdGF0ZVVwZGF0ZTpbXSxyb29tVG9rZW5XaWxsRXhwaXJlOltdLF90b2tlblJlbmV3ZWQ6W10sX3Byb3RvYnVmUmVzcG9uc2U6W10sX2Nsb3VkU2V0dGluZ05vdGlmeTpbXSxfc2V0dGluZ0NhbkZldGNoOltdfSx0aGlzLnJlcG9ydExpc3Q9e30sdGhpcy5yZXBvcnRTZXFMaXN0PXtsb2dpbjowLHJlbG9naW46MH0sdGhpcy5uZXR3b3JrU3RhdGU9aS5vZmZsaW5lLHRoaXMucm9vbVJldHJ5VGltZT0zMDAsdGhpcy5yb29tTW9kdWxlc0xpc3Q9W10sdGhpcy5pc011bHRpUm9vbT0hMSx0aGlzLnNldE11bHRpUm9vbT0hMSx0aGlzLnByb3RvRm9ybWF0PVwianNvblwiLHRoaXMuc2V0dGluZ0ZldGNoZWQ9ITEsdGhpcy51c2VOZXRBZ2VudD0hMCx0aGlzLm5ldEhhc1NldD0hMSx0aGlzLmNvbmZpZ1Jvb21BdXRoPSExLHRoaXMuY29uZmlnQ2hlY2tUb2tlbj0hMSx0aGlzLl9zZGtWZXJzaW9uPVwidW5rbm93blwiLHRoaXMubW9kZT1GLm1vZGVOb31zZS5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG49ZS5ib2R5LmhlYXJiZWF0X2ludGVydmFsPDNlMz8zZTM6ZS5ib2R5LmhlYXJiZWF0X2ludGVydmFsO3RoaXMudHJ5SGVhcnRiZWF0Q291bnQ9MCx0aGlzLmhlYXJ0YmVhdFRpbWVyJiZjbGVhclRpbWVvdXQodGhpcy5oZWFydGJlYXRUaW1lciksdGhpcy5sb2dpbkhlYXJ0YmVhdFRpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC5zdGFydChuKX0pLG4pLHRoaXMuaW5pdENvdW50Kyt9LHNlLnByb3RvdHlwZS5zdGFydD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG49KHRoaXMubG9nZ2VyLmluZm8oVS5IRUFSVEJFQVRfU1RBUlQrXCIgY2FsbFwiKSxnKCkpO2lmKHRoaXMuZGF0YVJlcG9ydC5uZXdSZXBvcnQobixuZS5rWmVnb1Rhc2tMaXZlUm9vbUhCLmV2ZW50KSx0aGlzLmRhdGFSZXBvcnQuYWRkTXNnSW5mbyhuLHtyb29tX3NpZDpuZS5rWmVnb1Rhc2tMaXZlUm9vbUhCLnJvb21fc2lkKHRoaXMucm9vbS5zZXNzaW9uSUQpfSksIXRoaXMucm9vbS5pc0xvZ2luKCkpcmV0dXJuIHRoaXMubG9nZ2VyLmVycm9yKFUuSEVBUlRCRUFUX1NUQVJUK1wiIHN0YXRlIGVycm9yXCIpLHRoaXMuZGF0YVJlcG9ydC5hZGRNc2dJbmZvKG4se2Vycm9yOm5lLmtaZWdvVGFza0xpdmVSb29tSEIuZXJyb3IuTk9UX0xPR0lOLmNvZGUsbWVzc2FnZTpuZS5rWmVnb1Rhc2tMaXZlUm9vbUhCLmVycm9yLk5PVF9MT0dJTi5tc2d9KSx2b2lkIHRoaXMuZGF0YVJlcG9ydC51cGxvYWRSZXBvcnQobik7aWYoMzwrK3RoaXMudHJ5SGVhcnRiZWF0Q291bnQpcmV0dXJuIHRoaXMubG9nZ2VyLmVycm9yKFUuSEVBUlRCRUFUX1NUQVJUK1wiIGNvbWUgdG8gdHJ5IGxpbWl0XCIpLHRoaXMuZGF0YVJlcG9ydC5hZGRNc2dJbmZvKG4se2Vycm9yOm5lLmtaZWdvVGFza0xpdmVSb29tSEIuZXJyb3IuSEJfVElNRU9VVC5jb2RlLG1lc3NhZ2U6bmUua1plZ29UYXNrTGl2ZVJvb21IQi5lcnJvci5IQl9USU1FT1VULm1zZ30pLHRoaXMuZGF0YVJlcG9ydC51cGxvYWRSZXBvcnQobiksdm9pZCB0aGlzLmhiTG9nb3V0KE0uSEVBUlRCRUFUX1RJTUVPVVQpO2Z1bmN0aW9uIHIoZSxyKXt2YXIgbz1lLmJvZHkmJmUuYm9keS5lcnJfY29kZTtlLmhlYWRlciYmZS5ib2R5PzAhPT1vJiYobz1qLmRlY29kZVNlcnZlckVycm9yKGUuYm9keS5lcnJfY29kZXx8ZS5ib2R5LmNvZGUsZS5ib2R5LmVycl9tZXNzYWdlfHxlLmJvZHkubWVzc2FnZSksdC5kYXRhUmVwb3J0LmFkZE1zZ0luZm8obix7ZXJyb3I6by5jb2RlLG1lc3NhZ2U6by5tZXNzYWdlK2UuYm9keS5lcnJfY29kZX0pKTp0LmRhdGFSZXBvcnQuYWRkTXNnSW5mbyhuLHtlcnJvcjooMDxlLmNvZGU/ZTpNLlJPT01fSU5ORVJfRVJST1IpLmNvZGUsbWVzc2FnZTplLm1zZ3x8TS5ST09NX0lOTkVSX0VSUk9SfSksdC5kYXRhUmVwb3J0LnVwbG9hZFJlcG9ydChuKSx0LmhhbmRsZUhlYXJ0YmVhdFJzcChlLHIpfSh0aGlzLnN0YXRlQ2VudGVyLnVzZU5ldEFnZW50P3RoaXMubGl2ZVJvb21IYW5kbGVyOnRoaXMuc2VydmljZSkuaGVhcnRCZWF0KHIscix0aGlzLnJvb20pLHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWw9ZSxlPXRoaXMuaGVhcnRiZWF0SW50ZXJ2YWwsMjw9dGhpcy5pbml0Q291bnQ/KGU9TWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKih0aGlzLmhlYXJ0YmVhdEludGVydmFsKzEpKSx0aGlzLmluaXRDb3VudD0xKTplPXRoaXMuaGVhcnRiZWF0SW50ZXJ2YWwsdGhpcy5oZWFydGJlYXRUaW1lcj1zZXRUaW1lb3V0KChmdW5jdGlvbigpe3Quc3RhcnQodC5oZWFydGJlYXRJbnRlcnZhbCl9KSxlKSx0aGlzLmxvZ2dlci5pbmZvKFUuSEVBUlRCRUFUX1NUQVJUK1wiIGNhbGwgc3VjY2Vzc1wiKX0sc2UucHJvdG90eXBlLmhhbmRsZUhlYXJ0YmVhdFJzcD1mdW5jdGlvbihlLHQpe3JldHVybiBlLmJvZHkmJmUuYm9keS5lcnJfY29kZSYmMCE9PWUuYm9keS5lcnJfY29kZT8odGhpcy5sb2dnZXIuZXJyb3IoVS5IRUFSVEJFQVRfSEVBUlRCRUFUX1JTUCtcIiBkaXNjb25uZWN0LCBzZXJ2ZXIgZXJyb3I9XCIsZS5ib2R5LmVycl9jb2RlKSwxMDAwMDAwMTUyPT1lLmJvZHkuZXJyX2NvZGU/dm9pZCB0aGlzLmhiTG9nb3V0KE0uSEVBUlRCRUFUX1RJTUVPVVQpOnZvaWQgdGhpcy5oYkxvZ291dChqLmdldFNlcnZlckVycm9yKGUuYm9keS5lcnJfY29kZSkpKTplLmhlYWRlciYmZS5ib2R5PygodGhpcy50cnlIZWFydGJlYXRDb3VudD0wKSE9PWUuYm9keS5oZWFyYmVhdF9pbnRlcnZhbCYmKHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWw9ZS5ib2R5LmhlYXJiZWF0X2ludGVydmFsLHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWw8M2UzJiYodGhpcy5oZWFydGJlYXRJbnRlcnZhbD0zZTMpKSx0aGlzLmhlYXJ0YmVhdFJzcE5vdGlGeShlKSx2b2lkIHRoaXMubG9nZ2VyLmluZm8oVS5IRUFSVEJFQVRfSEVBUlRCRUFUX1JTUCtcIiBjYWxsIHN1Y2Nlc3NcIikpOih0aGlzLmxvZ2dlci5lcnJvcihVLkhFQVJUQkVBVF9IRUFSVEJFQVRfUlNQK1wiIGRpc2Nvbm5lY3QsIGVycm9yPVwiLEpTT04uc3RyaW5naWZ5KGUpK1wiLCBzZXEgPSBcIit0KSx2b2lkIHRoaXMuaGJMb2dvdXQoZSkpfSxzZS5wcm90b3R5cGUuaGVhcnRiZWF0UnNwTm90aUZ5PWZ1bmN0aW9uKGUpe30sc2UucHJvdG90eXBlLmhiTG9nb3V0PWZ1bmN0aW9uKGUpe30sc2UucHJvdG90eXBlLnJlc2V0SGVhcnRiZWF0PWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHRoaXMuaGVhcnRiZWF0VGltZXIpLHRoaXMuaGVhcnRiZWF0VGltZXI9bnVsbCxjbGVhclRpbWVvdXQodGhpcy5sb2dpbkhlYXJ0YmVhdFRpbWVyKSx0aGlzLmxvZ2luSGVhcnRiZWF0VGltZXI9bnVsbCx0aGlzLnRyeUhlYXJ0YmVhdENvdW50PTAsdGhpcy5pbml0Q291bnQ9MCx0aGlzLmxvZ2dlci5pbmZvKFUuSEVBUlRCRUFUX1JFU0VUK1wiIGNhbGwgc3VjY2Vzc1wiKX07dmFyIGllPXNlO2Z1bmN0aW9uIHNlKGUsdCxuLHIsbyxpKXt0aGlzLmxvZ2dlcj1lLHRoaXMuc3RhdGVDZW50ZXI9dCx0aGlzLmRhdGFSZXBvcnQ9bix0aGlzLnNlcnZpY2U9cix0aGlzLmxpdmVSb29tSGFuZGxlcj1vLHRoaXMucm9vbT1pLHRoaXMudHJ5SGVhcnRiZWF0Q291bnQ9MCx0aGlzLmhlYXJ0YmVhdFRpbWVyPW51bGwsdGhpcy5sb2dpbkhlYXJ0YmVhdFRpbWVyPW51bGwsdGhpcy5pbml0Q291bnQ9MH1jZS5wcm90b3R5cGUucmVzZXRUb2tlblRpbWVyPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy5sb2dnZXIuaW5mbyhVLlJPT01fUkVTRVRUT0tFTl9USU1FUitcIiAgY2FsbDogXCIrKGU9MjE0NzQ4MzY0NzwoZT0oZS09M2U0KTwwPzA6ZSk/MjE0NzQ4MzY0NzplKSksdGhpcy50b2tlblRpbWVyJiZjbGVhclRpbWVvdXQodGhpcy50b2tlblRpbWVyKSx0aGlzLnRva2VuVGltZXI9c2V0VGltZW91dCgoZnVuY3Rpb24oKXt0LnN0YXRlQ2VudGVyLmFjdGlvbkxpc3RlbmVyKFwidG9rZW5XaWxsRXhwaXJlXCIsdC5yb29tLnJvb21JRCksdC5zdGF0ZUNlbnRlci5hY3Rpb25MaXN0ZW5lcihcInJvb21Ub2tlbldpbGxFeHBpcmVcIix0LnJvb20ucm9vbUlEKX0pLGUpfSxjZS5wcm90b3R5cGUuc3RvcFRva2VuVGltZXI9ZnVuY3Rpb24oKXt0aGlzLnRva2VuVGltZXImJmNsZWFyVGltZW91dCh0aGlzLnRva2VuVGltZXIpLHRoaXMudG9rZW5UaW1lcj1udWxsfSxjZS5wcm90b3R5cGUuc2V0UnVuU3RhdGU9ZnVuY3Rpb24oZSl7dGhpcy5yb29tLnJ1blN0YXRlIT09ZSYmKHRoaXMucm9vbS5sYXN0UnVuU3RhdGU9dGhpcy5yb29tLnJ1blN0YXRlLHRoaXMucm9vbS5ydW5TdGF0ZT1lKX0sY2UucHJvdG90eXBlLnJlc2V0VHJ5TG9naW49ZnVuY3Rpb24oKXt0aGlzLnRyeUxvZ2luVGltZXImJmNsZWFyVGltZW91dCh0aGlzLnRyeUxvZ2luVGltZXIpLHRoaXMudHJ5TG9naW5UaW1lcj1udWxsfSxjZS5wcm90b3R5cGUucmVzZXRSb29tPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7KGU9KHRoaXMubG9nZ2VyLmluZm8oVS5ST09NX1JFU0VUX1JPT00rXCIgY2FsbFwiKSwxPHRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0Lmxlbmd0aCYmIWUmJih0aGlzLnJvb20uaXNNdWx0aT0hMCksdGhpcy5yZXNldFRyeUxvZ2luKCksXCIwXCI9PT10aGlzLnJvb20uc2Vzc2lvbklEfHx0aGlzLnJvb20ucnVuU3RhdGU9PT1vLmxvZ291dHx8dGhpcy5yb29tLmlzRGlzQ29ubmVjdCgpfHwodGhpcy5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudD90aGlzLmxpdmVSb29tSGFuZGxlcjp0aGlzLnNlcnZpY2UpLmxvZ291dCh0aGlzLnJvb20sZT1mdW5jdGlvbihlKXt0LmhhbmRsZUxvZ291dFJzcChlLCF0LnJvb20uaXNNdWx0aSl9LGUpLHRoaXMuc2V0UnVuU3RhdGUoby5sb2dvdXQpLHRoaXMucm9vbS5zZXNzaW9uSUQ9XCIwXCIsdGhpcy5yb29tLnJvb21TZXNzaW9uSUQ9XCIwXCIsdGhpcy5yb29tLmlzTXVsdGl8fCh0aGlzLnN0YXRlQ2VudGVyLnVzZXJpZD1cIlwiLHRoaXMubG9nZ2VyLnNldFNlc3Npb25JbmZvKHRoaXMuc3RhdGVDZW50ZXIuYXBwaWQsdGhpcy5yb29tLnJvb21JRCx0aGlzLnJvb20uc2Vzc2lvbklELHRoaXMuc3RhdGVDZW50ZXIuaWROYW1lLHRoaXMuc3RhdGVDZW50ZXIubmlja05hbWUsdGhpcy5zdGF0ZUNlbnRlci5zZEtWZXJzaW9uKSx0aGlzLnN0YXRlQ2VudGVyLnVzZU5ldEFnZW50P251bGwhPShlPXRoaXMubGl2ZVJvb21IYW5kbGVyKSYmZS5yZXNldCgpOnRoaXMuc2VydmljZS5jbG9zZVNvY2tldCgpKSx0aGlzLnJlc2V0Um9vbUNhbGxCYWNrKCksdGhpcy5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3Q9dGhpcy5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3QuZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4gZSE9PXQucm9vbX0pKSx0aGlzLnN0YXRlQ2VudGVyLnJvb21Nb2R1bGVzTGlzdFswXSkpJiYoZS5pc011bHRpPSExLGUucnVuU3RhdGUhPT1vLmxvZ2luJiZlLnJvb21UcnlIYW5kbGVyJiYoZS5yb29tVHJ5SGFuZGxlci5zdGFydE1heFRpbWUoKSxlLnJvb21UcnlIYW5kbGVyLmFjdGl2ZSgpKSksdGhpcy5sb2dnZXIuaW5mbyhVLlJPT01fUkVTRVRfUk9PTStcIiBjYWxsIHN1Y2Nlc3NcIil9LGNlLnByb3RvdHlwZS5yZXNldFJvb21DYWxsQmFjaz1mdW5jdGlvbigpe30sY2UucHJvdG90eXBlLmxvZ2luU3VjY2Vzc0NhbGxCYWNrPWZ1bmN0aW9uKGUsdCl7fSxjZS5wcm90b3R5cGUuaGFuZGxlUHVzaEtpY2tvdXQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk9dGhpczt0aGlzLmxvZ2dlci5pbmZvKFUuUk9PTV9LSUNLX09VVCtcIiAgY2FsbCBcIitKU09OLnN0cmluZ2lmeShlKSksbnx8dGhpcy5yb29tLnNlc3Npb25JRD09PWUuaGVhZGVyLnNlc3Npb25faWR8fHRoaXMucm9vbS5zZXNzaW9uSUQ9PT1lLmJvZHkuc2Vzc2lvbl9pZD8obj1nKCksdGhpcy5kYXRhUmVwb3J0Lm5ld1JlcG9ydChuLG5lLmtaZWdvVGFza0tpY2tvdXQuZXZlbnQpLHRoaXMuZGF0YVJlcG9ydC5hZGRNc2dJbmZvKG4se3VzZXJfaWQ6bmUua1plZ29UYXNrS2lja291dC51c2VyX2lkKHRoaXMuc3RhdGVDZW50ZXIuaWROYW1lKX0pLHI9ai5nZXRLaWNrb3V0RXJyb3IoZS5ib2R5LnJlYXNvbnx8ZS5ib2R5LmtpY2tvdXRfcmVhc29uLHRoaXMuc3RhdGVDZW50ZXIudXNlTmV0QWdlbnQpLHRoaXMuZGF0YVJlcG9ydC5hZGRNc2dJbmZvKG4se2Vycm9yOnIuY29kZSxtZXNzYWdlOnIubWVzc2FnZX0pLHRoaXMuZGF0YVJlcG9ydC51cGxvYWRSZXBvcnQobiksKG49dGhpcy5yb29tLnJvb21UcnlIYW5kbGVyKT8obi5vbmFjdGl2ZT1mdW5jdGlvbihlLHQpe2kuZGlzY29ubmVjdGVkSGFuZGxlKHQpLGkuc3RhdGVDZW50ZXIuYWN0aW9uTGlzdGVuZXIoXCJfa2lja291dFwiLHQpfSxlLmJvZHkubmVlZF9yZWxvZ2luJiYxPT1lLmJvZHkubmVlZF9yZWxvZ2luPyh0aGlzLnJvb20uc2Vzc2lvbklEPVwiMFwiLG4uc3RhcnRNYXhUaW1lKCksbi5hY3RpdmUoKSk6KHRoaXMuc2V0UnVuU3RhdGUoby5sb2dvdXQpLHRoaXMucmVzZXRSb29tKHQpLG49e30sZSYmZS5ib2R5LmN1c3RvbV9yZWFzb24/bi5jdXN0b21fa2lja291dF9tZXNzYWdlPWUuYm9keS5jdXN0b21fcmVhc29uOnIubmFtZSYmTVtyLm5hbWVdJiYodD1lLmJvZHkucmVhc29ufHxlLmJvZHkua2lja291dF9yZWFzb24sbi5jdXN0b21fa2lja291dF9tZXNzYWdlPU1bci5uYW1lXS5tc2crXCI7IGtpY2tvdXQgcmVhc29uOiBcIit0KSxyLm5hbWUmJk1bci5uYW1lXT90aGlzLmRpc2Nvbm5lY3RlZEhhbmRsZShNW3IubmFtZV0se2V4dGVuZGVkRGF0YTpKU09OLnN0cmluZ2lmeShuKSxpc0tpY2tvdXQ6ITB9KTp0aGlzLmRpc2Nvbm5lY3RlZEhhbmRsZShNLlJPT01fSU5ORVJfRVJST1Ise2V4dGVuZGVkRGF0YTpKU09OLnN0cmluZ2lmeShuKSxpc0tpY2tvdXQ6ITB9KSx0aGlzLnN0YXRlQ2VudGVyLmFjdGlvbkxpc3RlbmVyKFwiX2tpY2tvdXRcIix7Y29kZTpNLk1BTlVBTF9LSUNLT1VULmNvZGUsbXNnOk0uTUFOVUFMX0tJQ0tPVVQubXNnK2UuYm9keS5yZWFzb258fGUuYm9keS5raWNrb3V0X3JlYXNvbn0pKSk6dGhpcy5sb2dnZXIuaW5mbyhVLlJPT01fS0lDS19PVVQrXCIgdHJ5IGhhbmRsZXIgbm8gZm91bmRcIikpOnRoaXMubG9nZ2VyLmluZm8oVS5ST09NX0tJQ0tfT1VUK1wiIHNlc3Npb24gaWQgd3JvbmcsIGlnbm9yZVwiKX0sY2UucHJvdG90eXBlLmhhbmRsZUhiTG9nb3V0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj10aGlzLnJvb20ucm9vbVRyeUhhbmRsZXI7biYmKG4ub25hY3RpdmU9ZnVuY3Rpb24oZSxuKXt0LmRpc2Nvbm5lY3RlZEhhbmRsZShuKX0sW00uSEVBUlRCRUFUX1RJTUVPVVQsTS5TT0NLRVRfQ0xPU0VdLmluY2x1ZGVzKGUpfHxbMTA1LDE1MiwyMDAxXS5pbmNsdWRlcyhudWxsPT1lP3ZvaWQgMDplLmNvZGUpfHxlLm1zZy5lbmRzV2l0aChcIjEwMDAwMDIwMDFcIil8fGUubXNnLmVuZHNXaXRoKFwiMTAwMDAwMDE1MlwiKXx8ZS5tc2cuZW5kc1dpdGgoXCIxMDAwMDAwMTA1XCIpPyhuLnN0YXJ0TWF4VGltZSgpLG4uYWN0aXZlKCkpOltNLlRJTUVPVVRdLmluY2x1ZGVzKGUpP3RoaXMubG9nZ2VyLndhcm4oVS5ST09NX0hBTkRMRV9IYl9MT0dPVVQrXCIgdGltZW91dFwiKToodGhpcy5sb2dnZXIud2FybihVLlJPT01fSEFORExFX0hiX0xPR09VVCtcIiB1bmV4cGVjdGVkIGVycm9yOiBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoZSkpKSxuLnN0b3BNYXhUaW1lKCksbi5pbnZhbGlkKCksdGhpcy5yZXNldFJvb20oKSx0aGlzLmRpc2Nvbm5lY3RlZEhhbmRsZShlKSkpfSxjZS5wcm90b3R5cGUub25EaXNjb25uZWN0PWZ1bmN0aW9uKGUpe3ZhciB0LG49dGhpczsoZT0odGhpcy5sb2dnZXIuZXJyb3IoVS5ST09NX0RJU0NPTk5FQ1QrXCIgXCIrZS5tc2cpLFwic3RyaW5nXCI9PXR5cGVvZiBlLmNvZGUmJlwiRXJyb3IuTmV0d29ya1wiPT09ZS5jb2RlP3RoaXMuZGF0YVJlcG9ydC5hZGRNc2dJbmZvKHRoaXMuc3RhdGVDZW50ZXIucmVwb3J0U2VxTGlzdC5yZWxvZ2luLHtlcnJvcjpuZS5rWmVnb1Rhc2tSZUxvZ2luUm9vbS5lcnJvci5ST09NX0RJU0NPTk5FQ1QuY29kZSxtZXNzYWdlOm5lLmtaZWdvVGFza1JlTG9naW5Sb29tLmVycm9yLlJPT01fRElTQ09OTkVDVC5tc2d9KTpcIm51bWJlclwiPT10eXBlb2YgZS5jb2RlJiYodm9pZCAwLCh0PWUuY29kZTwyZTkmJjFlOTxlLmNvZGV8fGUuY29kZTwxZTY/ai5kZWNvZGVTZXJ2ZXJFcnJvcihlLmNvZGUsZS5tc2cpOntjb2RlOmUuY29kZSxtZXNzYWdlOmUubXNnfSkmJnRoaXMuZGF0YVJlcG9ydC5hZGRNc2dJbmZvKHRoaXMuc3RhdGVDZW50ZXIucmVwb3J0U2VxTGlzdC5yZWxvZ2luLHtlcnJvcjp0LmNvZGUsbWVzc2FnZTp0Lm1lc3NhZ2V9KSksdGhpcy5kYXRhUmVwb3J0LnVwbG9hZFJlcG9ydCh0aGlzLnN0YXRlQ2VudGVyLnJlcG9ydFNlcUxpc3QucmVsb2dpbiksdGhpcy5zdGF0ZUNlbnRlci5yZXBvcnRTZXFMaXN0LnJlbG9naW49MCxqLnVucmVnaXN0ZXJDYWxsYmFjayhuZS5rWmVnb1Rhc2tSZUxvZ2luUm9vbS5ldmVudCx0aGlzLnN0YXRlQ2VudGVyLnJlcG9ydExpc3QpLHRoaXMucm9vbS5yb29tVHJ5SGFuZGxlcikpPyhlLm9uYWN0aXZlPWZ1bmN0aW9uKGUsdCl7dCYmMCE9PXQuY29kZT9uLnJvb21TdGF0ZUhhbmRsZShcIkRJU0NPTk5FQ1RFRFwiLGsuUmVjb25uZWN0RmFpbGVkLHQpOm4ucm9vbVN0YXRlSGFuZGxlKFwiQ09OTkVDVEVEXCIsay5SZWNvbm5lY3RlZCx0KX0sZS5zdGFydE1heFRpbWUoKSxlLmFjdGl2ZSgpKTp0aGlzLmxvZ2dlci5lcnJvcihVLlJPT01fRElTQ09OTkVDVCtcIiB0cnkgaGFuZGxlciBubyBmb3VuZFwiKX0sY2UucHJvdG90eXBlLm9uQ29ubmVjdGluZz1mdW5jdGlvbihlKXt0aGlzLnJvb21TdGF0ZUhhbmRsZShcIkNPTk5FQ1RJTkdcIixrLkxvZ2luaW5nLGUpfSxjZS5wcm90b3R5cGUuZGlzY29ubmVjdGVkSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dmFyIG47ZSYmMCE9PWUuY29kZT8odGhpcy5zdG9wVG9rZW5UaW1lcigpLG49bnVsbCE9dCYmdC5pc0tpY2tvdXQ/ay5LaWNrb3V0OmsuUmVjb25uZWN0RmFpbGVkLHRoaXMucm9vbVN0YXRlSGFuZGxlKFwiRElTQ09OTkVDVEVEXCIsbixlLG51bGw9PXQ/dm9pZCAwOnQuZXh0ZW5kZWREYXRhKSk6dGhpcy5yb29tU3RhdGVIYW5kbGUoXCJDT05ORUNURURcIixrLlJlY29ubmVjdGVkLGUsbnVsbD09dD92b2lkIDA6dC5leHRlbmRlZERhdGEpfSxjZS5wcm90b3R5cGUucm9vbVN0YXRlSGFuZGxlPWZ1bmN0aW9uKGUsdCxuLHIsbyl7dmFyIGk7dCYmdD09ay5SZWNvbm5lY3RpbmcmJjE9PSsrY2UucmVjb25lY3RUaW1lc3x8KHRoaXMubG9nZ2VyLmluZm8oVS5ST09NX1NUQVRVU19DQUxMQkFDSytcIiBcIitlK1wiIFwiK0pTT04uc3RyaW5naWZ5KG4pKSxbXCJDT05ORUNURURcIixcIkRJU0NPTk5FQ1RFRFwiXS5pbmNsdWRlcyhlKSYmKGNlLnJlY29uZWN0VGltZXM9MCksKHQ9KHQ9dCYmW2suTG9naW5GYWlsZWQsay5SZWNvbm5lY3RGYWlsZWRdLmluY2x1ZGVzKHQpP251bGwhPShpPXRoaXMucm9vbS5yb29tVHJ5SGFuZGxlcikmJmkubG9naW5Sb29tQ2FsbGJhY2suZmFpbD9rLkxvZ2luRmFpbGVkOmsuUmVjb25uZWN0RmFpbGVkOnQpJiZbay5Mb2dpbmVkLGsuUmVjb25uZWN0ZWRdLmluY2x1ZGVzKHQpP251bGwhPShpPXRoaXMucm9vbS5yb29tVHJ5SGFuZGxlcikmJmkubG9naW5Sb29tQ2FsbGJhY2suc3VjY2Vzcz9rLkxvZ2luZWQ6ay5SZWNvbm5lY3RlZDp0KSYmW2suTG9naW5pbmcsay5SZWNvbm5lY3RpbmddLmluY2x1ZGVzKHQpJiYodD1udWxsIT0oaT10aGlzLnJvb20ucm9vbVRyeUhhbmRsZXIpJiZpLmxvZ2luUm9vbUNhbGxiYWNrLnN1Y2Nlc3M/ay5Mb2dpbmluZzprLlJlY29ubmVjdGluZyksdGhpcy5yb29tLmxhc3RSb29tU3RhdGU9dGhpcy5yb29tLnJvb21TdGF0ZSx0aGlzLnJvb20ucm9vbVN0YXRlPWUsdGhpcy5yb29tLnJvb21TdGF0ZSE9PXRoaXMucm9vbS5sYXN0Um9vbVN0YXRlJiYodGhpcy5zdGF0ZUNlbnRlci5hY3Rpb25MaXN0ZW5lcihcIl9yb29tU3RhdGVVcGRhdGVcIix0aGlzLnJvb20ucm9vbUlELGUsbj9uLmNvZGU6MCxyLG8pLG98fCh0aGlzLnN0YXRlQ2VudGVyLmFjdGlvbkxpc3RlbmVyKFwicm9vbVN0YXRlVXBkYXRlXCIsdGhpcy5yb29tLnJvb21JRCxlLG4/bi5jb2RlOjAsciksdGhpcy5zdGF0ZUNlbnRlci5hY3Rpb25MaXN0ZW5lcihcInJvb21TdGF0ZUNoYW5nZWRcIix0aGlzLnJvb20ucm9vbUlELHQsbj9uLmNvZGU6MCxyKSkpKX0sY2UucHJvdG90eXBlLmxvZ2luPWZ1bmN0aW9uKGUsdCxuLHIsaSxzLGEpe2lmKHRoaXMubG9nZ2VyLmluZm8oVS5ST09NX0xPR0lOX1JPT00rXCIgY2FsbDpcIit0K1wiIFwiK24pLHRoaXMucm9vbS5pc011bHRpfHx0aGlzLmxvZ2dlci5zZXRTZXNzaW9uSW5mbyh0aGlzLnN0YXRlQ2VudGVyLmFwcGlkLHQsXCJcIixyLnVzZXJJRCxcIlwiLHRoaXMuc3RhdGVDZW50ZXIuc2RLVmVyc2lvbiksaSYmKGkudXNlclVwZGF0ZSYmXCJib29sZWFuXCI9PXR5cGVvZiBpLnVzZXJVcGRhdGUmJih0aGlzLnN0YXRlQ2VudGVyLnVzZXJTdGF0ZVVwZGF0ZT1pLnVzZXJVcGRhdGUpLGkubWF4TWVtYmVyQ291bnQmJlwibnVtYmVyXCI9PXR5cGVvZiBpLm1heE1lbWJlckNvdW50JiYodGhpcy5yb29tLm1heE1lbWJlckNvdW50PWkubWF4TWVtYmVyQ291bnQpKSwhdGhpcy5zdGF0ZUNlbnRlci5jb25maWdPSylyZXR1cm4gdGhpcy5sb2dnZXIuZXJyb3IoVS5ST09NX0xPR0lOX1JPT00rXCIgaW5pdCBzZGsgd3JvbmdcIiksdm9pZCBhKE0uSU5JVCk7dGhpcy5yb29tLnJ1blN0YXRlIT09by50cnlsb2dpbiYmdGhpcy5zZXRSdW5TdGF0ZShvLnRyeWxvZ2luKSx0aGlzLnJvb20ucm9vbUlEPXQsdGhpcy5yb29tLnRva2VuPW4sdGhpcy5yb29tLnRoaXJkVG9rZW49bix0aGlzLnN0YXRlQ2VudGVyLmlkTmFtZT1yLnVzZXJJRCx0aGlzLnN0YXRlQ2VudGVyLm5pY2tOYW1lPXIudXNlck5hbWV8fHIudXNlcklELHRoaXMubG9naW5DYWxsYmFjay5zdWNjZXNzPXMsdGhpcy5sb2dpbkNhbGxiYWNrLmZhaWw9YSwwPT09dGhpcy5zdGF0ZUNlbnRlci5yZXBvcnRTZXFMaXN0LmxvZ2luJiYoaT1nKCksdGhpcy5zdGF0ZUNlbnRlci5yZXBvcnRTZXFMaXN0LnJlbG9naW49aSx0aGlzLmRhdGFSZXBvcnQubmV3UmVwb3J0KGksbmUua1plZ29UYXNrUmVMb2dpblJvb20uZXZlbnQpLHRoaXMuZGF0YVJlcG9ydC5hZGRNc2dJbmZvKGkse3NlcnZlcjplfSksai5sb2dSZXBvcnRDYWxsYmFjayhuZS5rWmVnb1Rhc2tSZUxvZ2luUm9vbS5ldmVudCx0aGlzLmRhdGFSZXBvcnQsaSx0aGlzLnN0YXRlQ2VudGVyLnJlcG9ydExpc3QpKSx0aGlzLnJlc2V0VHJ5TG9naW4oKSx0aGlzLm9uQ29ubmVjdGluZyh7Y29kZTowLG1zZzpcIlwifSksdGhpcy50cnlMb2dpbihlKSx0aGlzLmxvZ2dlci5pbmZvKFUuUk9PTV9MT0dJTl9ST09NK1wiIGNhbGwgc3VjY2Vzc1wiKX0sY2UucHJvdG90eXBlLnRyeUxvZ2luPWZ1bmN0aW9uKGUpe3ZhciB0LG49dGhpcztpZih0aGlzLnJvb20ucnVuU3RhdGUhPT1vLnRyeWxvZ2luKXRoaXMubG9nZ2VyLmVycm9yKFwiemIucmgudGwgc3RhdGUgZXJyb3JcIik7ZWxzZXt2YXIgcj0oMCE9PXRoaXMuc3RhdGVDZW50ZXIucmVwb3J0U2VxTGlzdC5sb2dpbj9uZS5rWmVnb1Rhc2tMb2dpblJvb206bmUua1plZ29UYXNrUmVMb2dpblJvb20pLmV2ZW50O2lmKHRoaXMuc3RhdGVDZW50ZXIudXNlTmV0QWdlbnQpdGhpcy5yb29tLmlzTXVsdGkmJnRoaXMucm9vbS5pc0Rpc0Nvbm5lY3QoKT90aGlzLmxvZ2dlci53YXJuKFUuUk9PTV9UUllfTE9HSU4rXCIgbGl2ZXJvb20gaXMgbm90IGNvbm5lY3RlZFwiKTooaT1mdW5jdGlvbihlLHQpe24uaGFuZGxlTG9naW5Sc3AoZSx0KX0sbnVsbCE9KHQ9dGhpcy5saXZlUm9vbUhhbmRsZXIpJiZ0LmlzVWFDb25uZWN0KCk/dGhpcy5saXZlUm9vbUhhbmRsZXIubG9naW4odGhpcy5yb29tLGksaSk6KHRoaXMudHJ5TG9naW5UaW1lcj1zZXRUaW1lb3V0KChmdW5jdGlvbigpe24ubG9nZ2VyLmluZm8oVS5ST09NX1RSWV9MT0dJTitcIiBvdmVyIHRpbWUgbm8gcmVzcG9uc2UsIGxvZ2luIHRpbWVvdXRcIiksbi5sb2dpbkNhbGxiYWNrLmZhaWwmJm4ubG9naW5DYWxsYmFjay5mYWlsKG5lLmtaZWdvVGFza0xvZ2luUm9vbS5lcnJvci5MT0dJTl9USU1FT1VUKX0pLHRoaXMudHJ5TG9naW5JbnRlcnZhbCksdGhpcy5sb2dnZXIud2FybihVLlJPT01fVFJZX0xPR0lOK1wiIHVhIGlzIG5vdCBjb25uZWN0ZWRcIikpKTtlbHNle2lmKHRoaXMuc2VydmljZS5pc0Rpc0Nvbm5lY3QoKSl0cnl7dGhpcy5zZXJ2aWNlLmNsb3NlU29ja2V0KCksdGhpcy5sb2dnZXIuZGVidWcoVS5ST09NX1RSWV9MT0dJTitcIiBuZXcgd2Vic29ja2V0XCIpLGouYWN0aW9uU3VjY2Vzc0NhbGxiYWNrKHIsdGhpcy5zdGF0ZUNlbnRlci5yZXBvcnRMaXN0KSYmKDE8dGhpcy50cnlMb2dpbkNvdW50JiZqLmFjdGlvblN1Y2Nlc3NDYWxsYmFjayhyLHRoaXMuc3RhdGVDZW50ZXIucmVwb3J0TGlzdCkoXCJldmVudEVuZFwiLG5lLmtaZWdvVGFza0xvZ2luUm9vbS5zdWJFdmVudC5jcmVhdGVfc29ja2V0LmV2ZW50KSxqLmFjdGlvblN1Y2Nlc3NDYWxsYmFjayhyLHRoaXMuc3RhdGVDZW50ZXIucmVwb3J0TGlzdCkocCxuZS5rWmVnb1Rhc2tMb2dpblJvb20uc3ViRXZlbnQuY3JlYXRlX3NvY2tldC5ldmVudCksai5hY3Rpb25TdWNjZXNzQ2FsbGJhY2socix0aGlzLnN0YXRlQ2VudGVyLnJlcG9ydExpc3QpKF8sbmUua1plZ29UYXNrTG9naW5Sb29tLnN1YkV2ZW50LmNyZWF0ZV9zb2NrZXQuZXZlbnQsbmUua1plZ29UYXNrTG9naW5Sb29tLnN1YkV2ZW50LmNyZWF0ZV9zb2NrZXQuc2VydmVyKFwic2VydmVyXCIpLGUpKSx0aGlzLnNlcnZpY2UuY3JlYXRlU29ja2V0KGUpLHRoaXMuc2VydmljZS5vcGVuSGFuZGxlcigoZnVuY3Rpb24oKXtuLm9wZW5IYW5kbGVyKCl9KSksdGhpcy5zZXJ2aWNlLmNsb3NlSGFuZGxlcigoZnVuY3Rpb24oZSl7bi5sb2dnZXIuZXJyb3IoVS5ST09NX1RSWV9MT0dJTitcIiBjbG9zZSBcIitKU09OLnN0cmluZ2lmeShlLmNvZGV8fGUpKSxuLnNlcnZpY2UuY2xvc2VTb2NrZXQoKSxuLmNsb3NlSGFuZGxlcihlKX0pKSx0aGlzLnNlcnZpY2UuZXJyb3JIYW5kbGVyKChmdW5jdGlvbihlKXtuLmxvZ2dlci5lcnJvcihVLlJPT01fVFJZX0xPR0lOK1wiIGVycm9yIFwiK0pTT04uc3RyaW5naWZ5KGUuY29kZXx8ZSkpLG4uc2VydmljZS5jbG9zZVNvY2tldCgpLG4uY2xvc2VIYW5kbGVyKGUpfSkpfWNhdGNoKGUpe3RoaXMubG9nZ2VyLmVycm9yKFUuUk9PTV9UUllfTE9HSU4rXCIgIHdlYnNvY2tldCBlcnI6XCIrSlNPTi5zdHJpbmdpZnkoZSkpfWVsc2V7dGhpcy5sb2dnZXIuaW5mbyhVLlJPT01fVFJZX0xPR0lOK1wiIHVzZSBjdXJyZW50IHdlYnNvY2tldCBhbmQgc2VudCBsb2dpblwiKSxqLmFjdGlvblN1Y2Nlc3NDYWxsYmFjayhyLHRoaXMuc3RhdGVDZW50ZXIucmVwb3J0TGlzdCkmJmouYWN0aW9uU3VjY2Vzc0NhbGxiYWNrKHIsdGhpcy5zdGF0ZUNlbnRlci5yZXBvcnRMaXN0KShwLG5lLmtaZWdvVGFza0xvZ2luUm9vbS5zdWJFdmVudC5saXZlcm9vbV9sb2dpbi5ldmVudCk7dmFyIGk9ZnVuY3Rpb24oZSx0KXtuLmhhbmRsZUxvZ2luUnNwKGUsdCl9O3RoaXMuc2VydmljZS5sb2dpbih0aGlzLnJvb20saSxpKX10aGlzLnRyeUxvZ2luVGltZXI9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtuLmxvZ2dlci5pbmZvKFUuUk9PTV9UUllfTE9HSU4rXCIgb3ZlciB0aW1lIG5vIHJlc3BvbnNlLCBsb2dpbiB0aW1lb3V0XCIpLG4ubG9naW5DYWxsYmFjay5mYWlsJiZuLmxvZ2luQ2FsbGJhY2suZmFpbChuZS5rWmVnb1Rhc2tMb2dpblJvb20uZXJyb3IuTE9HSU5fVElNRU9VVCl9KSx0aGlzLnRyeUxvZ2luSW50ZXJ2YWwpLHRoaXMubG9nZ2VyLmluZm8oVS5ST09NX1RSWV9MT0dJTitcIiBjYWxsIHN1Y2Nlc3NcIil9fX0sY2UucHJvdG90eXBlLm9wZW5IYW5kbGVyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLG4pe3QuaGFuZGxlTG9naW5Sc3AoZSxuKX12YXIgdD10aGlzLG49KHRoaXMubG9nZ2VyLmluZm8oVS5ST09NX09QRU5fSEFORExFUitcIiB3ZWJzb2NrZXQub25wZW4gY2FsbFwiKSwoMCE9PXRoaXMuc3RhdGVDZW50ZXIucmVwb3J0U2VxTGlzdC5sb2dpbj9uZS5rWmVnb1Rhc2tMb2dpblJvb206bmUua1plZ29UYXNrUmVMb2dpblJvb20pLmV2ZW50KTtqLmFjdGlvblN1Y2Nlc3NDYWxsYmFjayhuLHRoaXMuc3RhdGVDZW50ZXIucmVwb3J0TGlzdCkmJmouYWN0aW9uU3VjY2Vzc0NhbGxiYWNrKG4sdGhpcy5zdGF0ZUNlbnRlci5yZXBvcnRMaXN0KShkLG5lLmtaZWdvVGFza0xvZ2luUm9vbS5zdWJFdmVudC5jcmVhdGVfc29ja2V0LmV2ZW50LHt0cnlfY250OnRoaXMudHJ5TG9naW5Db3VudH0pLHRoaXMuc2VydmljZS5vblB1c2goKSxqLmFjdGlvblN1Y2Nlc3NDYWxsYmFjayhuLHRoaXMuc3RhdGVDZW50ZXIucmVwb3J0TGlzdCkmJmouYWN0aW9uU3VjY2Vzc0NhbGxiYWNrKG4sdGhpcy5zdGF0ZUNlbnRlci5yZXBvcnRMaXN0KShwLG5lLmtaZWdvVGFza0xvZ2luUm9vbS5zdWJFdmVudC5saXZlcm9vbV9sb2dpbi5ldmVudCksdGhpcy5zZXJ2aWNlLmxvZ2luKHRoaXMucm9vbSxlLGUpfSxjZS5wcm90b3R5cGUuaGFuZGxlTG9naW5Sc3A9ZnVuY3Rpb24oZSx0KXt0aGlzLmxvZ2dlci5pbmZvKFUuUk9PTV9IQU5ETEVfTE9HSU5SU1ArXCIgc2VxOiBcIit0K1wiIFwiK0pTT04uc3RyaW5naWZ5KGUpKTt2YXIgbj0oMCE9PXRoaXMuc3RhdGVDZW50ZXIucmVwb3J0U2VxTGlzdC5sb2dpbj9uZS5rWmVnb1Rhc2tMb2dpblJvb206bmUua1plZ29UYXNrUmVMb2dpblJvb20pLmV2ZW50O2ouYWN0aW9uU3VjY2Vzc0NhbGxiYWNrKG4sdGhpcy5zdGF0ZUNlbnRlci5yZXBvcnRMaXN0KSYmai5hY3Rpb25TdWNjZXNzQ2FsbGJhY2sobix0aGlzLnN0YXRlQ2VudGVyLnJlcG9ydExpc3QpKGQsbmUua1plZ29UYXNrTG9naW5Sb29tLnN1YkV2ZW50LmxpdmVyb29tX2xvZ2luLmV2ZW50KSx0aGlzLnJvb20ucnVuU3RhdGUhPT1vLnRyeWxvZ2luP3RoaXMubG9nZ2VyLmVycm9yKFUuUk9PTV9IQU5ETEVfTE9HSU5SU1ArXCIgc3RhdGUgZXJyb3JcIik6ZS5oZWFkZXImJmUuYm9keT9lLmhlYWRlci5zZXEhPT10JiYwPT10aGlzLnJvb20uaXNNdWx0aT90aGlzLmxvZ2dlci5lcnJvcihVLlJPT01fSEFORExFX0xPR0lOUlNQK1wiIGluIHdyb25nIHNlcSwgbG9jYWw9XCIsdCtcIlwiLFwiLHJlY3Y9XCIsZS5oZWFkZXIuc2VxKTowIT09ZS5ib2R5LmVycl9jb2RlPyh0aGlzLmxvZ2dlci5lcnJvcihVLlJPT01fSEFORExFX0xPR0lOUlNQK1wiIHNlcnZlciBlcnJvcj1cIixlLmJvZHkuZXJyX2NvZGUpLHRoaXMuaGFuZGxlTG9naW5GYWlsKGUpKToodGhpcy5sb2dnZXIuaW5mbyhVLlJPT01fSEFORExFX0xPR0lOUlNQK1wiIGNhbGwgc3VjY2Vzcy5cIiksdGhpcy5oYW5kbGVMb2dpblN1Y2Nlc3MoZSkpOih0aGlzLmxvZ2dlci5lcnJvcihVLlJPT01fSEFORExFX0xPR0lOUlNQK1wiIFwiK0pTT04uc3RyaW5naWZ5KGUpKSx0aGlzLmhhbmRsZUxvZ2luRmFpbChlKSl9LGNlLnByb3RvdHlwZS5oYW5kbGVMb2dpbkZhaWw9ZnVuY3Rpb24oZSl7dGhpcy5yZXNldFRyeUxvZ2luKCk7dmFyIHQ9bmUua1plZ29UYXNrTG9naW5Sb29tLmVycm9yLklOTkVSX0VSUk9SO2UuaGVhZGVyJiZlLmJvZHk/dD1qLmdldFNlcnZlckVycm9yKGUuYm9keS5lcnJfY29kZSk6ZS5jb2RlJiZlLm1zZyYmKHQ9ZSksdGhpcy5sb2dpbkNhbGxiYWNrLmZhaWwmJnRoaXMubG9naW5DYWxsYmFjay5mYWlsKHQsITApfSxjZS5wcm90b3R5cGUuaGFuZGxlTG9naW5TdWNjZXNzPWZ1bmN0aW9uKGUpe3ZhciB0LG49e30scj10aGlzLnJvb20ubGFzdFJ1blN0YXRlLGk9KHRoaXMuc2V0UnVuU3RhdGUoby5sb2dpbiksdGhpcy5zdGF0ZUNlbnRlci51c2VyaWQ9ZS5ib2R5LnVzZXJfaWQsdGhpcy5yb29tLnNlc3Npb25JRD1lLmJvZHkuc2Vzc2lvbl9pZCx0aGlzLnJvb20ucm9vbVNlc3Npb25JRD1lLmJvZHkucm9vbV9zZXNzaW9uX2lkLHRoaXMucm9vbS5sdktleT1lLmJvZHkubHZfa2V5LG51bGw9PShpPW51bGw9PWU/dm9pZCAwOmUuYm9keSk/dm9pZCAwOmkudG9rZW5fcmVtYWluX3RpbWUpLHM9KHRoaXMuc3RhdGVDZW50ZXIuY29uZmlnUm9vbUF1dGg9MDxpLGUuYm9keS5yZXRfdGltZXN0YW1wJiZbXCIwM1wiLFwiMDRcIl0uaW5jbHVkZXModGhpcy5yb29tLnRva2VuLnN1YnN0cmluZygwLDIpKSYmKHQ9KHM9KG5ldyBEYXRlKS5nZXRUaW1lKCkpLWUuYm9keS5yZXRfdGltZXN0YW1wLHRoaXMuc3RhdGVDZW50ZXIubG9jYWxfdGltZV9kZXZpYXRpb249dDw1ZTM/MDp0LHQ9MDxpPzFlMyppOjFlMypqLmRlY29kZVRva2VuRXhwaXJlKHRoaXMucm9vbS50b2tlbi5zdWJzdHJpbmcoMikpLXMsdGhpcy5yZXNldFRva2VuVGltZXIodC10aGlzLnN0YXRlQ2VudGVyLmxvY2FsX3RpbWVfZGV2aWF0aW9uKSksdGhpcy5yb29tLmlzTXVsdGl8fHRoaXMubG9nZ2VyLnNldFNlc3Npb25JbmZvKHRoaXMuc3RhdGVDZW50ZXIuYXBwaWQsdGhpcy5yb29tLnJvb21JRCx0aGlzLnJvb20uc2Vzc2lvbklELHRoaXMuc3RhdGVDZW50ZXIuaWROYW1lLHRoaXMuc3RhdGVDZW50ZXIubmlja05hbWUsdGhpcy5zdGF0ZUNlbnRlci5zZEtWZXJzaW9uKSx0aGlzLnN0YXRlQ2VudGVyLnVzZU5ldEFnZW50fHwoZS5ib2R5LmNvbmZpZ19pbmZvJiYoaT10aGlzLnN0YXRlQ2VudGVyLnNldHRpbmdDb25maWcuZ2V0U2V0dGluZyhcInJlbW90ZV9sb2dfbGV2ZWxcIiwhMCl8fGUuYm9keS5jb25maWdfaW5mby5sb2dfbGV2ZWwsdGhpcy5sb2dnZXIuc2V0UmVtb3RlTG9nTGV2ZWwoaSksbi5sb2dfbGV2ZWw9aSxcIlwiPT1lLmJvZHkuY29uZmlnX2luZm8ubG9nX3VybHx8dGhpcy5sb2dnZXIudXJsfHwodGhpcy5sb2dnZXIuc2V0TG9nU2VydmVyKGUuYm9keS5jb25maWdfaW5mby5sb2dfdXJsKSxuLmxvZ191cmw9ZS5ib2R5LmNvbmZpZ19pbmZvLmxvZ191cmwpKSxlLmJvZHkuY2x1c3Rlcl9lbnYmJjE9PT1lLmJvZHkuY2x1c3Rlcl9lbnYmJih0aGlzLnN0YXRlQ2VudGVyLnRlc3RFbnZpcm9ubWVudD0hMCxuLnRlc3RfZW52aXJvbm1lbnQ9XCJ0cnVlXCIsdGhpcy5zdGF0ZUNlbnRlci5kZWJ1Z0N1c3RvbXx8KHRoaXMuc3RhdGVDZW50ZXIuZGVidWc9ITApKSksKDAhPT10aGlzLnN0YXRlQ2VudGVyLnJlcG9ydFNlcUxpc3QubG9naW4/bmUua1plZ29UYXNrTG9naW5Sb29tOm5lLmtaZWdvVGFza1JlTG9naW5Sb29tKS5ldmVudCk7ai5hY3Rpb25TdWNjZXNzQ2FsbGJhY2socyx0aGlzLnN0YXRlQ2VudGVyLnJlcG9ydExpc3QpJiZqLmFjdGlvblN1Y2Nlc3NDYWxsYmFjayhzLHRoaXMuc3RhdGVDZW50ZXIucmVwb3J0TGlzdCkoXyxuZS5rWmVnb1Rhc2tMb2dpblJvb20uc3ViRXZlbnQubGl2ZXJvb21fbG9naW4uZXZlbnQsbmUua1plZ29UYXNrTG9naW5Sb29tLnN1YkV2ZW50LmxpdmVyb29tX2xvZ2luLnJlc3BvbmRfaW5mbyhcInJlc3BvbmRfaW5mb1wiKSxuKSx0aGlzLnJlc2V0VHJ5TG9naW4oKSx0aGlzLmxvZ2luU3VjY2Vzc0NhbGxCYWNrKHIsZSksdGhpcy5yb29tU3RhdGVIYW5kbGUoXCJDT05ORUNURURcIixrLkxvZ2luZWQse2NvZGU6MCxtc2c6XCJcIn0pLHRoaXMubG9naW5DYWxsYmFjay5zdWNjZXNzJiZ0aGlzLmxvZ2luQ2FsbGJhY2suc3VjY2VzcyghMCl9LGNlLnByb3RvdHlwZS5jbG9zZUhhbmRsZXI9ZnVuY3Rpb24oZSl7dGhpcy5sb2dnZXIuZXJyb3IoVS5ST09NX0NMT1NFSEFORExFUitcIiByb29tIHdlYnNvY2tldCBjbG9zZSBcIitKU09OLnN0cmluZ2lmeShlLmNvZGV8fGUpKSx0aGlzLnJvb20ucnVuU3RhdGUhPT1vLmxvZ291dD90aGlzLnJvb20ucnVuU3RhdGU9PT1vLnRyeWxvZ2luPyh0aGlzLnJlc2V0VHJ5TG9naW4oKSx0aGlzLmxvZ2luQ2FsbGJhY2suZmFpbCYmdGhpcy5sb2dpbkNhbGxiYWNrLmZhaWwoMTAwNj09ZS5jb2RlP25lLmtaZWdvVGFza0xvZ2luUm9vbS5lcnJvci5MT0dJTl9USU1FT1VUOmUpKTp0aGlzLnJvb20ucnVuU3RhdGU9PT1vLmxvZ2luJiYodGhpcy5sb2dnZXIuaW5mbyhVLlJPT01fQ0xPU0VIQU5ETEVSK1wiIGlzIGNhbGxlZCBiZWNhdXNlIG9mIG5ldHdvcmsgYnJva2VuXCIpLHRoaXMucmVzZXRUcnlMb2dpbigpLHRoaXMub25EaXNjb25uZWN0KG5lLmtaZWdvVGFza0xvZ2luUm9vbS5lcnJvci5ORVRXT1JLX0JST0tFTikpOnRoaXMubG9nZ2VyLmluZm8oVS5ST09NX0NMT1NFSEFORExFUitcIiBvbmNsb3NlIGxvZ291dCBmbG93IGNhbGwgd2Vic29ja2V0LmNsb3NlXCIpfSxjZS5wcm90b3R5cGUubG9nb3V0PWZ1bmN0aW9uKGUsdCl7dGhpcy5sb2dnZXIuaW5mbyhVLlJPT01fTE9HT1VUK1wiIGNhbGxcIiksdGhpcy5yb29tLnJ1blN0YXRlPT09by5sb2dvdXQ/dGhpcy5sb2dnZXIud2FybihcInpiLnJoLmxvIGF0IGxvZ291dFwiKToodGhpcy5yZXNldFJvb20oZSksdGhpcy5yb29tU3RhdGVIYW5kbGUoXCJESVNDT05ORUNURURcIixrLkxvZ291dCx7Y29kZTowLG1zZzpcIlwifSx2b2lkIDAsdCksdGhpcy5zdG9wVG9rZW5UaW1lcigpLHRoaXMubG9nZ2VyLmluZm8oVS5ST09NX0xPR09VVCtcIiBjYWxsIHN1Y2Nlc3NcIikpfSxjZS5wcm90b3R5cGUuaGFuZGxlTG9nb3V0UnNwPWZ1bmN0aW9uKGUsdCl7dGhpcy5sb2dnZXIuaW5mbyhVLlJPT01fTE9HT1VUK1wiIHJlc3VsdD1cIixlLmJvZHkmJmUuYm9keS5lcnJfY29kZT9lLmJvZHkuZXJyX2NvZGU6XCItMVwiKSx0aGlzLnN0YXRlQ2VudGVyLnVzZU5ldEFnZW50JiZ0JiZudWxsIT0oZT10aGlzLmxpdmVSb29tSGFuZGxlcikmJmUuY2xvc2VSZXF1ZXN0KCl9LGNlLnJlY29uZWN0VGltZXM9MDt2YXIgYWU9Y2U7ZnVuY3Rpb24gY2UoZSx0LG4scixvLGkpe3RoaXMubG9nZ2VyPWUsdGhpcy5zdGF0ZUNlbnRlcj10LHRoaXMuZGF0YVJlcG9ydD1uLHRoaXMuc2VydmljZT1yLHRoaXMucm9vbT1vLHRoaXMubGl2ZVJvb21IYW5kbGVyPWksdGhpcy50cnlMb2dpblRpbWVyPW51bGwsdGhpcy50cnlMb2dpbkNvdW50PTAsdGhpcy50cnlMb2dpbkludGVydmFsPTFlNCx0aGlzLnRva2VuVGltZXI9bnVsbCx0aGlzLmJlZm9yZUV4cGlyZT0zMCx0aGlzLmxvZ2luQ2FsbGJhY2s9e319dmFyIHVlPWZ1bmN0aW9uKGUsdCxuKXtpZihufHwyPT09YXJndW1lbnRzLmxlbmd0aClmb3IodmFyIHIsbz0wLGk9dC5sZW5ndGg7bzxpO28rKykhciYmbyBpbiB0fHwoKHI9cnx8QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodCwwLG8pKVtvXT10W29dKTtyZXR1cm4gZS5jb25jYXQocnx8QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodCkpfSxsZT0oaGUucHJvdG90eXBlLmxvZ2luUnNwPWZ1bmN0aW9uKGUsdCl7dGhpcy5hbmNob3JfaW5mbz1lLmJvZHkuYW5jaG9yX2luZm98fHRoaXMuYW5jaG9yX2luZm8sdGhpcy51c2VyTGlzdEludGVydmFsPWUuYm9keS51c2VybGlzdF9pbnRlcnZhbHx8dGhpcy51c2VyTGlzdEludGVydmFsLHRoaXMudXNlckxpc3RNZXJnZUludGVydmFsPWUuYm9keS51c2VybGlzdF9tZXJnZV90aW1lb3V0fHx0aGlzLnVzZXJMaXN0TWVyZ2VJbnRlcnZhbCxlLmJvZHkuYW5jaG9yX2luZm8mJih0aGlzLnN0YXRlQ2VudGVyLmFjdGlvbkxpc3RlbmVyKFwiZ2V0QW5jaG9ySW5mb1wiLGUuYm9keS5hbmNob3JfaW5mby5hbmNob3JfaWRfbmFtZSxlLmJvZHkuYW5jaG9yX2luZm8uYW5jaG9yX25pY2tfbmFtZSksdGhpcy5zdGF0ZUNlbnRlci5hY3Rpb25MaXN0ZW5lcihcIl9nZXRBbmNob3JJbmZvXCIsZS5ib2R5LmFuY2hvcl9pbmZvLmFuY2hvcl9pZF9uYW1lLGUuYm9keS5hbmNob3JfaW5mby5hbmNob3Jfbmlja19uYW1lKSksZS5ib2R5Lm9ubGluZV9jb3VudCYmdGhpcy5zdGF0ZUNlbnRlci5hY3Rpb25MaXN0ZW5lcihcInJvb21PbmxpbmVVc2VyQ291bnRVcGRhdGVcIix0aGlzLnJvb20ucm9vbUlELGUuYm9keS5vbmxpbmVfY291bnQpLHRoaXMubG9nZ2VyLmluZm8oVS5VU0VSX0xPR0lOX1JTUCtcIiAgdXNlclN0YXRlVXBkYXRlIFwiK3RoaXMuc3RhdGVDZW50ZXIudXNlclN0YXRlVXBkYXRlKSx0aGlzLnN0YXRlQ2VudGVyLnVzZXJTdGF0ZVVwZGF0ZSYmdGhpcy5mZXRjaFVzZXJMaXN0KHQpfSxoZS5wcm90b3R5cGUucGF0Y2hVc2VyTGlzdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2UuYm9keS5zZXJ2ZXJfdXNlcl9zZXEhPT10aGlzLnVzZXJTZXEmJnRoaXMuc3RhdGVDZW50ZXIudXNlclN0YXRlVXBkYXRlJiYhdGhpcy51c2VyU2VxTWVyZ2VNYXAmJih0aGlzLmxvZ2dlci5pbmZvKFUuVVNFUl9IQl9QQVRDSCtcIiBjYWxsIHVwZGF0ZSB1c2VyIFwiK3RoaXMudXNlclNlcStcIiBzZXJ2ZXIgXCIrZS5ib2R5LnNlcnZlcl91c2VyX3NlcSksdGhpcy51c2VyU2VxTWVyZ2VNYXB8fCh0aGlzLnVzZXJTZXFNZXJnZU1hcD17fSksdGhpcy51c2VyU2VxTWVyZ2VUaW1lciYmY2xlYXJUaW1lb3V0KHRoaXMudXNlclNlcU1lcmdlVGltZXIpLHRoaXMudXNlclNlcU1lcmdlVGltZXI9c2V0VGltZW91dCgoZnVuY3Rpb24oKXt0LmhhbmRsZU1lcmdlVGltZW91dCgpfSksdGhpcy51c2VyTGlzdE1lcmdlSW50ZXJ2YWwpKSx0aGlzLm1pblVzZXJTZXE9ZS5ib2R5LnNlcnZlcl91c2VyX3NlcSxudWxsIT1lLmJvZHkub25saW5lX2NvdW50JiYwIT1lLmJvZHkub25saW5lX2NvdW50JiZ0aGlzLnN0YXRlQ2VudGVyLmFjdGlvbkxpc3RlbmVyKFwicm9vbU9ubGluZVVzZXJDb3VudFVwZGF0ZVwiLHRoaXMucm9vbS5yb29tSUQsZS5ib2R5Lm9ubGluZV9jb3VudCl9LGhlLnByb3RvdHlwZS5yZXNldFVzZXJIYW5kbGVyPWZ1bmN0aW9uKCl7dGhpcy51c2VyUXVlcnlpbmc9ITEsdGhpcy5sYXN0VXNlclF1ZXJ5VGltZT0wLHRoaXMudXNlclRlbXBMaXN0PVtdLHRoaXMudXNlclNlcT0wLHRoaXMubWluVXNlclNlcT0wLHRoaXMudXNlckxpc3Q9dm9pZCAwLHRoaXMudXNlclNlcU1lcmdlTWFwPXt9LHRoaXMudXNlclNlcU1lcmdlVGltZXI9dm9pZCAwLHRoaXMudXNlclF1ZXJ5VGltZXI9dm9pZCAwLHRoaXMudXNlckxpc3RJbnRlcnZhbD0zZTQsdGhpcy51c2VyTGlzdE1lcmdlSW50ZXJ2YWw9NWUzLHRoaXMuYW5jaG9yX2luZm89e2FuY2hvcl9pZDpcIlwiLGFuY2hvcl9pZF9uYW1lOlwiXCIsYW5jaG9yX25pY2tfbmFtZTpcIlwifX0saGUucHJvdG90eXBlLmZldGNoVXNlckxpc3Q9ZnVuY3Rpb24oZSl7dGhpcy51c2VyUXVlcnlpbmc/dGhpcy5sb2dnZXIud2FybihVLlVTRVJfRkVUQ0hfVVNFUitcIiBpcyBhbHJlYWR5IHF1ZXJ5aW5nXCIpOih0aGlzLnVzZXJRdWVyeWluZz0hMCx0aGlzLnVzZXJUZW1wTGlzdD1bXSx0aGlzLmZldGNoVXNlckxpc3RXaXRoUGFnZSgwLGV8fDApLHRoaXMubG9nZ2VyLmluZm8oVS5VU0VSX0ZFVENIX1VTRVIrXCIgdGhlIGZpcnN0IHRpbWUgY2FsbFwiKSl9LGhlLnByb3RvdHlwZS5mZXRjaFVzZXJMaXN0V2l0aFBhZ2U9ZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKGUpe3IuaGFuZGxlRmV0Y2hVc2VyTGlzdFJzcChlLHQpfXZhciByPXRoaXM7KHRoaXMuc3RhdGVDZW50ZXIudXNlTmV0QWdlbnQ/dGhpcy5saXZlUm9vbUhhbmRsZXI6dGhpcy5zZXJ2aWNlKS5mZXRjaFVzZXJMaXN0KHt1c2VyX2luZGV4OmUsc29ydF90eXBlOjB9LG4sbix0aGlzLnJvb20pfSxoZS5wcm90b3R5cGUuaGFuZGxlRmV0Y2hVc2VyTGlzdFJzcD1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7aWYoZS5ib2R5JiYwIT1lLmJvZHkuZXJyX2NvZGUpcmV0dXJuIHRoaXMudXNlclF1ZXJ5aW5nPSExLHRoaXMubGFzdFVzZXJRdWVyeVRpbWU9RGF0ZS5ub3coKSt0aGlzLnVzZXJMaXN0SW50ZXJ2YWwsdm9pZCB0aGlzLmxvZ2dlci5pbmZvKFUuVVNFUl9GRVRDSF9VU0VSX1JTUCtcIiBmZXRjaCBlcnJvciBcIitlLmJvZHkuZXJyX2NvZGUpO2lmKCFlLmhlYWRlcnx8IWUuYm9keSlyZXR1cm4gdGhpcy51c2VyUXVlcnlpbmc9ITEsdGhpcy5sYXN0VXNlclF1ZXJ5VGltZT1EYXRlLm5vdygpK3RoaXMudXNlckxpc3RJbnRlcnZhbCx2b2lkIHRoaXMubG9nZ2VyLmluZm8oVS5VU0VSX0ZFVENIX1VTRVJfUlNQK1wiIGZldGNoIGVycm9yIFwiK2UpO2lmKHRoaXMuc3RhdGVDZW50ZXIudXNlclN0YXRlVXBkYXRlKXt0aGlzLnVzZXJUZW1wTGlzdD11ZSh1ZShbXSx0aGlzLnVzZXJUZW1wTGlzdCwhMCksZS5ib2R5LnVzZXJfYmFzZWluZm9zLCEwKTt2YXIgcj1lLmJvZHkucmV0X3VzZXJfaW5kZXg7aWYociE9ZS5ib2R5LnNlcnZlcl91c2VyX2luZGV4KXJldHVybiB0aGlzLmxvZ2dlci5pbmZvKFUuVVNFUl9GRVRDSF9VU0VSX1JTUCtcIiBmZXRjaCBhbm90aGVyIHBhZ2VcIiksdm9pZCB0aGlzLmZldGNoVXNlckxpc3RXaXRoUGFnZShyKzEsdCk7dGhpcy51c2VyU2VxPWUuYm9keS5zZXJ2ZXJfdXNlcl9zZXE7Zm9yKHZhciBpPVtdLHM9W10sYT0wO2E8dGhpcy51c2VyVGVtcExpc3QubGVuZ3RoO2ErKyl7dmFyIGM9e3VzZXJJRDp0aGlzLnVzZXJUZW1wTGlzdFthXS5pZF9uYW1lLHVzZXJOYW1lOnRoaXMudXNlclRlbXBMaXN0W2FdLm5pY2tfbmFtZSxyb2xlOnRoaXMudXNlclRlbXBMaXN0W2FdLnJvbGV9O2kucHVzaChjKSxzLnB1c2goe2lkTmFtZTp0aGlzLnVzZXJUZW1wTGlzdFthXS5pZF9uYW1lLG5pY2tOYW1lOnRoaXMudXNlclRlbXBMaXN0W2FdLm5pY2tfbmFtZSxyb2xlOnRoaXMudXNlclRlbXBMaXN0W2FdLnJvbGV9KX10aGlzLnN0YXRlQ2VudGVyLmFjdGlvbkxpc3RlbmVyKFwiX2dldFRvdGFsVXNlckxpc3RcIix0aGlzLnJvb20ucm9vbUlELHMpLHQ9PW8ubG9naW4/KHRoaXMudXNlckxpc3QmJmoubWVyZ2VVc2VyTGlzdCh0aGlzLmxvZ2dlcix0aGlzLnVzZXJMaXN0LGksKGZ1bmN0aW9uKGUsdCl7MCE9PWUubGVuZ3RoJiZuLm9uVXNlclN0YXRlVXBkYXRlKG4ucm9vbS5yb29tSUQsXCJBRERcIixlKSwwIT09dC5sZW5ndGgmJm4ub25Vc2VyU3RhdGVVcGRhdGUobi5yb29tLnJvb21JRCxcIkRFTEVURVwiLHQpfSkpLHRoaXMudXNlckxpc3Q9aSk6MCE9PSh0aGlzLnVzZXJMaXN0PWkpLmxlbmd0aCYmdGhpcy5vblVzZXJTdGF0ZVVwZGF0ZSh0aGlzLnJvb20ucm9vbUlELFwiQUREXCIsaSksdGhpcy51c2VyUXVlcnlpbmc9ITEsdGhpcy5sYXN0VXNlclF1ZXJ5VGltZT1EYXRlLm5vdygpK3RoaXMudXNlckxpc3RJbnRlcnZhbCx0aGlzLnVzZXJUZW1wTGlzdD1bXSx0aGlzLmxvZ2dlci5pbmZvKFUuVVNFUl9GRVRDSF9VU0VSX1JTUCtcIiBjYWxsIHN1Y2Nlc3MgdXNlcl9saXN0IFwiK2krXCIgY291bnQgXCIraS5sZW5ndGgpfX0saGUucHJvdG90eXBlLmhhbmRsZVB1c2hVc2VyU3RhdGVVcGRhdGVNc2c9ZnVuY3Rpb24oZSl7aWYodGhpcy5sb2dnZXIuaW5mbyhVLlVTRVJfVVNFUl9QVVNIK1wiIGNhbGxcIiksdGhpcy5zdGF0ZUNlbnRlci51c2VyU3RhdGVVcGRhdGUpaWYodGhpcy51c2VyU2VxPT09ZS5ib2R5LnVzZXJfbGlzdF9zZXEpdGhpcy5sb2dnZXIud2FybihVLlVTRVJfVVNFUl9QVVNIK1wiIHVzZXJfbGlzdF9zZXEgaXMgdGhlIHNhbWUgd2l0aCBsb2NhbCBzZXFcIik7ZWxzZSBpZih0aGlzLnVzZXJTZXErZS5ib2R5LnVzZXJfYWN0aW9ucy5sZW5ndGghPT1lLmJvZHkudXNlcl9saXN0X3NlcSl0aGlzLm1lcmdlVXNlckJ5VXNlclNlcShlLmJvZHkudXNlcl9saXN0X3NlcSxlLmJvZHkudXNlcl9hY3Rpb25zKTtlbHNle3RoaXMudXNlclNlcT1lLmJvZHkudXNlcl9saXN0X3NlcTtmb3IodmFyIHQ9W10sbj0wO248ZS5ib2R5LnVzZXJfYWN0aW9ucy5sZW5ndGg7bisrKXt2YXIgcj17YWN0aW9uOmUuYm9keS51c2VyX2FjdGlvbnNbbl0uQWN0aW9uLGlkTmFtZTplLmJvZHkudXNlcl9hY3Rpb25zW25dLklkTmFtZSxuaWNrTmFtZTplLmJvZHkudXNlcl9hY3Rpb25zW25dLk5pY2tOYW1lLHJvbGU6ZS5ib2R5LnVzZXJfYWN0aW9uc1tuXS5Sb2xlLGxvZ2luVGltZTplLmJvZHkudXNlcl9hY3Rpb25zW25dLkxvZ2luVGltZX07dC5wdXNoKHIpfXRoaXMuc3RhdGVDZW50ZXIuYWN0aW9uTGlzdGVuZXIoXCJfdXNlclN0YXRlVXBkYXRlXCIsZS5ib2R5LnJvb21faWQsdCk7dmFyIG89W10saT1bXTt0LmZvckVhY2goKGZ1bmN0aW9uKGUpezE9PWUuYWN0aW9uP28ucHVzaCh7dXNlcklEOmUuaWROYW1lLHVzZXJOYW1lOmUubmlja05hbWUscm9sZTplLnJvbGV9KToyPT1lLmFjdGlvbiYmaS5wdXNoKHt1c2VySUQ6ZS5pZE5hbWUsdXNlck5hbWU6ZS5uaWNrTmFtZSxyb2xlOmUucm9sZX0pfSkpLHRoaXMudXNlckxpc3QmJih0aGlzLnVzZXJMaXN0PXRoaXMudXNlckxpc3QuY29uY2F0KG8pLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIWkuc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuIHQudXNlcklEPT1lLnVzZXJJRH0pKX0pKSksMCE9PW8ubGVuZ3RoJiZ0aGlzLm9uVXNlclN0YXRlVXBkYXRlKGUuYm9keS5yb29tX2lkfHxlLmJvZHkucm9vbV9wdXNoaGVhZGVyLnJvb21faWQsXCJBRERcIixvKSwwIT09aS5sZW5ndGgmJnRoaXMub25Vc2VyU3RhdGVVcGRhdGUoZS5ib2R5LnJvb21faWR8fGUuYm9keS5yb29tX3B1c2hoZWFkZXIucm9vbV9pZCxcIkRFTEVURVwiLGkpLHRoaXMubG9nZ2VyLmluZm8oVS5VU0VSX1VTRVJfUFVTSCtcIiBjYWxsIHN1Y2Nlc3NcIil9ZWxzZSB0aGlzLmxvZ2dlci5pbmZvKFUuVVNFUl9VU0VSX1BVU0grXCIgdXNlclN0YXRlVXBkYXRlIGlzIGZhbHNlXCIpfSxoZS5wcm90b3R5cGUub25Vc2VyU3RhdGVVcGRhdGU9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXMsbz1nKCk7dGhpcy5kYXRhUmVwb3J0Lm5ld1JlcG9ydChvLG5lLmtaZWdvVGFza0xpdmVSb29tR2V0VXNlclVwZGF0ZUluZm8uZXZlbnQpLG49bi5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnVzZXJJRCE9PXIuc3RhdGVDZW50ZXIuaWROYW1lfSkpOzAhPW4ubGVuZ3RoJiYobj1uLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJue3VzZXJJRDplLnVzZXJJRCx1c2VyTmFtZTplLnVzZXJOYW1lfX0pKSx0aGlzLnN0YXRlQ2VudGVyLmFjdGlvbkxpc3RlbmVyKFwicm9vbVVzZXJVcGRhdGVcIixlLHQsbiksdGhpcy5kYXRhUmVwb3J0LmFkZE1zZ0luZm8obyx7dXNlcl91cGRhdGVfdHlwZTpcIkFERFwiPT10P25lLmtaZWdvVGFza0xpdmVSb29tR2V0VXNlclVwZGF0ZUluZm8udXNlcl91cGRhdGVfdHlwZShcImFkZGVkXCIpOm5lLmtaZWdvVGFza0xpdmVSb29tR2V0VXNlclVwZGF0ZUluZm8udXNlcl91cGRhdGVfdHlwZShcImRlbGV0ZWRcIil9KSx0aGlzLmRhdGFSZXBvcnQudXBsb2FkUmVwb3J0KG8pKX0saGUucHJvdG90eXBlLm1lcmdlVXNlckJ5VXNlclNlcT1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7dGhpcy51c2VyU2VxTWVyZ2VNYXB8fCh0aGlzLmxvZ2dlci53YXJuKFUuVVNFUl9NRVJHRV9TRVErXCIgbmV3IG1lcmdlIHVzZXJsaXN0IFwiK3RoaXMudXNlclNlcStcIiBzZXJ2ZXIgXCIrZSksdGhpcy51c2VyU2VxTWVyZ2VNYXA9e30sdGhpcy51c2VyU2VxTWVyZ2VUaW1lciYmY2xlYXJUaW1lb3V0KHRoaXMudXNlclNlcU1lcmdlVGltZXIpLHRoaXMudXNlclNlcU1lcmdlVGltZXI9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtuLmhhbmRsZU1lcmdlVGltZW91dCgpfSksdGhpcy51c2VyTGlzdE1lcmdlSW50ZXJ2YWwpKSx0aGlzLnVzZXJTZXFNZXJnZU1hcFtlXT10LHRoaXMubG9nZ2VyLndhcm4oVS5VU0VSX01FUkdFX1NFUStcIiAgbWVyZ2UgdXNlcmxpc3QgXCIrdGhpcy51c2VyU2VxK1wiIHNlcnZlciBcIitlK1wiIHVzZXJsaXN0IFwiK3QubGVuZ3RoKX0saGUucHJvdG90eXBlLm1lcmdlVXNlcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG49KHRoaXMubG9nZ2VyLmluZm8oVS5VU0VSX01FUkdFK1wiIG1lcmdlIHVzZXJsaXN0IFwiK3RoaXMudXNlclNlcStcIiB1c2VyU2VxTGlzdCBcIitlLmpvaW4oXCIsXCIpKSx0aGlzLnVzZXJTZXE9ZVtlLmxlbmd0aC0xXSx0aGlzLmxhc3RVc2VyUXVlcnlUaW1lPURhdGUubm93KCkrdGhpcy51c2VyTGlzdEludGVydmFsLHt9KSxyPSgoZT0oZS5mb3JFYWNoKChmdW5jdGlvbihlKXt0LnVzZXJTZXFNZXJnZU1hcCYmdC51c2VyU2VxTWVyZ2VNYXBbZV0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7bltlLklkTmFtZV09ZX0pKX0pKSx0aGlzLnVzZXJTZXFNZXJnZU1hcD1udWxsLE9iamVjdC52YWx1ZXMobikubWFwKChmdW5jdGlvbihlKXtyZXR1cm57YWN0aW9uOmUuQWN0aW9uLGlkTmFtZTplLklkTmFtZSxuaWNrTmFtZTplLk5pY2tOYW1lLHJvbGU6ZS5Sb2xlLGxvZ2luVGltZTplLkxvZ2luVGltZT9TdHJpbmcoZS5Mb2dpblRpbWUpOlwiXCJ9fSkpKSkuc29ydCgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5sb2dpblRpbWUubG9jYWxlQ29tcGFyZSh0LmxvZ2luVGltZSl9KSksW10pLG89W107ZS5mb3JFYWNoKChmdW5jdGlvbihlKXsxPT1lLmFjdGlvbj9yLnB1c2goe3VzZXJJRDplLmlkTmFtZSx1c2VyTmFtZTplLm5pY2tOYW1lLHJvbGU6ZS5yb2xlfSk6Mj09ZS5hY3Rpb24mJm8ucHVzaCh7dXNlcklEOmUuaWROYW1lLHVzZXJOYW1lOmUubmlja05hbWUscm9sZTplLnJvbGV9KX0pKSx0aGlzLnVzZXJMaXN0PXRoaXMudXNlckxpc3QmJnRoaXMudXNlckxpc3QuY29uY2F0KHIpLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIW8uc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuIHQudXNlcklEPT1lLnVzZXJJRH0pKX0pKSwwIT09ci5sZW5ndGgmJnRoaXMub25Vc2VyU3RhdGVVcGRhdGUodGhpcy5yb29tLnJvb21JRCxcIkFERFwiLHIpLDAhPT1vLmxlbmd0aCYmdGhpcy5vblVzZXJTdGF0ZVVwZGF0ZSh0aGlzLnJvb20ucm9vbUlELFwiREVMRVRFXCIsbyksdGhpcy5zdGF0ZUNlbnRlci5hY3Rpb25MaXN0ZW5lcihcIl91c2VyU3RhdGVVcGRhdGVcIix0aGlzLnJvb20ucm9vbUlELGUpfSxoZS5wcm90b3R5cGUuaGFuZGxlTWVyZ2VUaW1lb3V0PWZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLG49T2JqZWN0LmtleXModGhpcy51c2VyU2VxTWVyZ2VNYXApLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuK2V9KSkuc29ydCgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS10fSkpO25bbi5sZW5ndGgtMV0tblswXSsxPT09bi5sZW5ndGh8fG5bbi5sZW5ndGgtMV0+PXRoaXMubWluVXNlclNlcT90aGlzLm1lcmdlVXNlcihuKToodGhpcy51c2VyU2VxTWVyZ2VNYXA9bnVsbCxlPXRoaXMubGFzdFVzZXJRdWVyeVRpbWUtRGF0ZS5ub3coKSx0aGlzLmxvZ2dlci5pbmZvKFUuVVNFUl9NRVJHRV9USU1FT1VUK1wiICBmZXRjaCBtZXJnZSB1c2VybGlzdCBcIit0aGlzLnVzZXJTZXErXCIgdXNlclNlcUxpc3QgXCIrbi5qb2luKFwiLFwiKStcIiB3YWl0IFwiK2UpLDA8ZT8odGhpcy51c2VyUXVlcnlUaW1lciYmY2xlYXJUaW1lb3V0KHRoaXMudXNlclF1ZXJ5VGltZXIpLHRoaXMudXNlclF1ZXJ5VGltZXI9c2V0VGltZW91dCgoZnVuY3Rpb24oKXt0LmZldGNoVXNlckxpc3QoKX0pLGUpKTp0aGlzLmZldGNoVXNlckxpc3QoKSl9LGhlLnByb3RvdHlwZS5sb2dpblByaXZhdGVSc3A9ZnVuY3Rpb24oZSl7dGhpcy5sb2dnZXIuaW5mbyhVLlVTRVJfRkVUQ0hfVVNFUixcIiB1c2VyU3RhdGVVcGRhdGUgXCIrdGhpcy5zdGF0ZUNlbnRlci51c2VyU3RhdGVVcGRhdGUpLHRoaXMuc3RhdGVDZW50ZXIudXNlclN0YXRlVXBkYXRlJiZ0aGlzLmZldGNoVXNlckxpc3QoKX0saGUpO2Z1bmN0aW9uIGhlKGUsdCxuLHIsbyxpKXt0aGlzLmxvZ2dlcj1lLHRoaXMuc3RhdGVDZW50ZXI9dCx0aGlzLmRhdGFSZXBvcnQ9bix0aGlzLnNlcnZpY2U9cix0aGlzLmxpdmVSb29tSGFuZGxlcj1vLHRoaXMucm9vbT1pLHRoaXMudXNlclF1ZXJ5aW5nPSExLHRoaXMudXNlclRlbXBMaXN0PVtdLHRoaXMudXNlclNlcT0wLHRoaXMubWluVXNlclNlcT0wLHRoaXMudXNlckxpc3Q9W10sdGhpcy51c2VyU2VxTWVyZ2VNYXA9bnVsbCx0aGlzLnVzZXJMaXN0SW50ZXJ2YWw9M2U0LHRoaXMudXNlckxpc3RNZXJnZUludGVydmFsPTVlMyx0aGlzLmFuY2hvcl9pbmZvPXthbmNob3JfaWQ6XCJcIixhbmNob3JfaWRfbmFtZTpcIlwiLGFuY2hvcl9uaWNrX25hbWU6XCJcIn19ZGUucHJvdG90eXBlLmluaXRNZXNzYWdlSGFuZGxlcj1mdW5jdGlvbigpe30sZGUucHJvdG90eXBlLmluaXRMaXZlSGFuZGxlcj1mdW5jdGlvbigpe30sZGUucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oKXt0aGlzLmJpbmRIZWF0QmVhdEhhbmRsZXIoKSx0aGlzLmJpbmRSb29tSGFuZGxlcigpLHRoaXMuYmluZE1lc3NhZ2VIYW5kbGVyKCksdGhpcy5iaW5kTGl2ZUhhbmRsZXIoKX0sZGUucHJvdG90eXBlLmJpbmRIZWF0QmVhdEhhbmRsZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuaGVhcnRCZWF0SGFuZGxlci5oYkxvZ291dD1mdW5jdGlvbih0KXtlLnJvb21IYW5kbGVyLmhhbmRsZUhiTG9nb3V0KHQpfSx0aGlzLmhlYXJ0QmVhdEhhbmRsZXIuaGVhcnRiZWF0UnNwTm90aUZ5PWZ1bmN0aW9uKHQpe2UubWVzc2FnZUhhbmRsZXImJmUubWVzc2FnZUhhbmRsZXIubG9naW5Sc3AodCksZS51c2VySGFuZGxlci5wYXRjaFVzZXJMaXN0KHQpLGUuSEJSZXNwb25zZSh0KX19LGRlLnByb3RvdHlwZS5iaW5kUm9vbUhhbmRsZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMucm9vbUhhbmRsZXIubG9naW5TdWNjZXNzQ2FsbEJhY2s9ZnVuY3Rpb24odCxuKXtlLmxvZ2dlci5pbmZvKFUuTElWRVJPT01NT0RVTEVTX0JJTkRST09NSEFORExFUitcIiBsb2dpbiBzdWMgXCIrdCksZS5oZWFydEJlYXRIYW5kbGVyLmluaXQobiksZS5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudD9lLmxpdmVSb29tSGFuZGxlci5zdGFydENoZWNrKCk6KGUuc2VydmljZS5zdG9wQ2hlY2soKSxlLnNlcnZpY2Uuc3RhcnRDaGVjaygpKSxlLnVzZXJIYW5kbGVyLmxvZ2luUnNwKG4sdCksZS5tZXNzYWdlSGFuZGxlciYmZS5tZXNzYWdlSGFuZGxlci5sb2dpblJzcChuKSxlLmlzTXVsdGl8fGUuaGFuZGxlTXVsdGlSb29tKCksZS5yb29tTG9naW5SZXNwb25zZShuKX0sdGhpcy5yb29tSGFuZGxlci5yZXNldFJvb21DYWxsQmFjaz1mdW5jdGlvbigpe2UuaGVhcnRCZWF0SGFuZGxlci5yZXNldEhlYXJ0YmVhdCgpLGUubGl2ZUhhbmRsZXImJmUubGl2ZUhhbmRsZXIucmVzZXRMaXZlSGFuZGxlcigpLGUubWVzc2FnZUhhbmRsZXImJmUubWVzc2FnZUhhbmRsZXIucmVzZXRNZXNzYWdlSW5mbygpLGUuc3RhdGVDZW50ZXIudXNlTmV0QWdlbnQmJmUubGl2ZVJvb21IYW5kbGVyJiZlLmxpdmVSb29tSGFuZGxlci5zdG9wQ2hlY2soKSxlLnVzZXJIYW5kbGVyLnJlc2V0VXNlckhhbmRsZXIoKSxlLnNlcnZpY2Uuc3RvcENoZWNrKCksZS5yb29tVHJ5SGFuZGxlciYmKGUucm9vbVRyeUhhbmRsZXIuaW52YWxpZCgpLGUucm9vbVRyeUhhbmRsZXIuc3RvcE1heFRpbWUoKSl9fSxkZS5wcm90b3R5cGUuYmluZFVzZXJIYW5kbGVyPWZ1bmN0aW9uKCl7fSxkZS5wcm90b3R5cGUuYmluZE1lc3NhZ2VIYW5kbGVyPWZ1bmN0aW9uKCl7fSxkZS5wcm90b3R5cGUuYmluZExpdmVIYW5kbGVyPWZ1bmN0aW9uKCl7fSxkZS5wcm90b3R5cGUuSEJSZXNwb25zZT1mdW5jdGlvbihlKXt0aGlzLnN0YXRlQ2VudGVyLmFjdGlvbkxpc3RlbmVyKFwiSEJSZXNwb25zZVwiLGUpfSxkZS5wcm90b3R5cGUucm9vbUxvZ2luUmVzcG9uc2U9ZnVuY3Rpb24oZSl7dGhpcy5zdGF0ZUNlbnRlci5hY3Rpb25MaXN0ZW5lcihcInJvb21Mb2dpblJlc3BvbnNlXCIsZSl9LGRlLnByb3RvdHlwZS5oYW5kbGVNdWx0aVJvb209ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0LmZvckVhY2goKGZ1bmN0aW9uKHQpe3QucnVuU3RhdGUhPT1vLmxvZ2luJiZ0LnJvb21UcnlIYW5kbGVyJiYxPT10LmlzTXVsdGkmJih0LnJvb21UcnlIYW5kbGVyLm9uYWN0aXZlPWZ1bmN0aW9uKG4scil7dmFyIG87ciYmMCE9PXIuY29kZT8oMCE9PXIuY29kZSYmKG89ai5nZXRMaXZlUm9vbUVycm9yKHIuY29kZSxlLnN0YXRlQ2VudGVyLnVzZU5ldEFnZW50KSkmJk1bb10mJihyPU1bb10pLHQucm9vbUhhbmRsZXIucm9vbVN0YXRlSGFuZGxlKFwiRElTQ09OTkVDVEVEXCIsay5SZWNvbm5lY3RGYWlsZWQscixyLm1zZykpOnQucm9vbUhhbmRsZXIucm9vbVN0YXRlSGFuZGxlKFwiQ09OTkVDVEVEXCIsay5SZWNvbm5lY3RlZCxyKX0sdC5yb29tVHJ5SGFuZGxlci5zdGFydE1heFRpbWUoKSx0LnJvb21UcnlIYW5kbGVyLmFjdGl2ZSgpKX0pKX0sZGUucHJvdG90eXBlLmlzTG9naW49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ydW5TdGF0ZT09PW8ubG9naW59LGRlLnByb3RvdHlwZS5pc0Rpc0Nvbm5lY3Q9ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudD90aGlzLmxpdmVSb29tSGFuZGxlcjp0aGlzLnNlcnZpY2UpLmlzRGlzQ29ubmVjdCgpfSxkZS5wcm90b3R5cGUucmV0cnlDb25uZWN0PWZ1bmN0aW9uKCl7dGhpcy5sb2dnZXIuaW5mbyhcInptLmxybS5yYyBjYWxsXCIpLHRoaXMuc3RhdGVDZW50ZXIudXNlTmV0QWdlbnQmJih0aGlzLnJlc2V0U2Vzc2lvbkluZm8oKSx0aGlzLmxpdmVSb29tSGFuZGxlci5jbG9zZVJlcXVlc3QoKSl9LGRlLnByb3RvdHlwZS5yZXRyeVJvb209ZnVuY3Rpb24oKXt0aGlzLmxvZ2dlci5pbmZvKFwiem0ubHJtLnJyLjAgY2FsbFwiKSx0aGlzLnJvb21UcnlIYW5kbGVyJiZ0aGlzLnJ0bS5uZXRBZ2VudC5pc0Nvbm5lY3QoKSYmKHRoaXMuc2Vzc2lvbklEPVwiMFwiLHRoaXMucm9vbVNlc3Npb25JRD1cIjBcIix0aGlzLnJvb21UcnlIYW5kbGVyLmFjdGl2ZSghMCkpfSxkZS5wcm90b3R5cGUucmVzZXRTZXNzaW9uSW5mbz1mdW5jdGlvbigpe3ZhciBlO3RoaXMubG9nZ2VyLmluZm8oXCJ6bS5scm0ucnNpIGNhbGxcIiksdGhpcy5zZXNzaW9uSUQ9XCIwXCIsdGhpcy5yb29tU2Vzc2lvbklEPVwiMFwiLG51bGwhPShlPXRoaXMubGl2ZVJvb21IYW5kbGVyKSYmZS5yZXNldCgpfTt2YXIgcGU9ZGU7ZnVuY3Rpb24gZGUoZSx0LG4scixpLHMsYSl7dGhpcy5yb29tSUQ9ZSx0aGlzLnN0YXRlQ2VudGVyPXQsdGhpcy5sb2dnZXI9bix0aGlzLmRhdGFSZXBvcnQ9cix0aGlzLnNlcnZpY2U9aSx0aGlzLnJ0bT1zLHRoaXMubGl2ZVJvb21IYW5kbGVyPWEsdGhpcy5ydW5TdGF0ZT1vLmxvZ291dCx0aGlzLmxhc3RSdW5TdGF0ZT1vLmxvZ291dCx0aGlzLmxhc3RSb29tU3RhdGU9XCJESVNDT05ORUNURURcIix0aGlzLnJvb21TdGF0ZT1cIkRJU0NPTk5FQ1RFRFwiLHRoaXMucm9vbVNlc3Npb25JRD1cIjBcIix0aGlzLnNlc3Npb25JRD1cIjBcIix0aGlzLmlzTXVsdGk9ITEsdGhpcy50b2tlbj1cIlwiLHRoaXMudGhpcmRUb2tlbj1cIlwiLHRoaXMubWF4TWVtYmVyQ291bnQ9MCx0aGlzLmx2S2V5PVwiXCIsdGhpcy5yb29tTmFtZT1cIlwiLHRoaXMucm9vbUhhbmRsZXI9bmV3IGFlKHRoaXMubG9nZ2VyLHRoaXMuc3RhdGVDZW50ZXIsdGhpcy5kYXRhUmVwb3J0LHRoaXMuc2VydmljZSx0aGlzLGEpLHRoaXMuaGVhcnRCZWF0SGFuZGxlcj1uZXcgaWUodGhpcy5sb2dnZXIsdGhpcy5zdGF0ZUNlbnRlcix0aGlzLmRhdGFSZXBvcnQsdGhpcy5zZXJ2aWNlLHRoaXMubGl2ZVJvb21IYW5kbGVyLHRoaXMpLHRoaXMudXNlckhhbmRsZXI9bmV3IGxlKHRoaXMubG9nZ2VyLHRoaXMuc3RhdGVDZW50ZXIsdGhpcy5kYXRhUmVwb3J0LHRoaXMuc2VydmljZSx0aGlzLmxpdmVSb29tSGFuZGxlcix0aGlzKSx0aGlzLmluaXRNZXNzYWdlSGFuZGxlcigpLHRoaXMuaW5pdExpdmVIYW5kbGVyKCksdGhpcy5pbml0KCl9ZmUucHJvdG90eXBlLmNyZWF0ZVNvY2tldD1mdW5jdGlvbihlKXt0aGlzLnNvY2tldD1PYmplY3QoYy5jcmVhdGVaZWdvV2ViU29ja2V0KShlLHRoaXMuRU5WJTIpfSxmZS5wcm90b3R5cGUuY2xvc2VTb2NrZXQ9ZnVuY3Rpb24oKXt0aGlzLnNvY2tldCYmKHRoaXMuc29ja2V0Lm9uY2xvc2U9bnVsbCx0aGlzLnNvY2tldC5vbmVycm9yPW51bGwsdGhpcy5zb2NrZXQuY2xvc2UoKSx0aGlzLnNvY2tldD1udWxsKX0sZmUucHJvdG90eXBlLmlzRGlzQ29ubmVjdD1mdW5jdGlvbigpe3JldHVybiF0aGlzLnNvY2tldHx8MSE9PXRoaXMuc29ja2V0LnJlYWR5U3RhdGV9LGZlLnByb3RvdHlwZS5zZW5kTWVzc2FnZT1mdW5jdGlvbihlLHQsbixyLG8pe3JldHVybiB2b2lkIDA9PT1uJiYobj1udWxsKSx2b2lkIDA9PT1yJiYocj1udWxsKSx2b2lkIDA9PT1vJiYobz17dGltZU91dDo2ZTN9KSxvPXtkYXRhOnQ9e2hlYWRlcjplLGJvZHk6dH0sc2VxOmUuc2VxLGRlbGV0ZWQ6ITEsc2VuZFRpbWU6RGF0ZS5wYXJzZShuZXcgRGF0ZStcIlwiKSx0aW1lT3V0Om8udGltZU91dCxzdWNjZXNzOm4sZXJyb3I6cn0sbj10aGlzLnNlbmRDb21tYW5kTGlzdC5wdXNoKG8pLHRoaXMuc2VuZENvbW1hbmRNYXBbby5zZXFdPW4sdGhpcy5zb2NrZXQmJnRoaXMuc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkodCkpLGUuc2VxfSxmZS5wcm90b3R5cGUuc2VuZFBCPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnNvY2tldCYmdGhpcy5zb2NrZXQuc2VuZChlKSwhMH0sZmUucHJvdG90eXBlLmNoZWNrU2VuZE1lc3NhZ2VMaXN0PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmdldEZpcnN0KCk7bnVsbCE9dDspIWZ1bmN0aW9uKCl7dmFyIG4scixvO2UucmVtb3ZlKHQpLHQmJnQuX2RhdGEmJihuPXQuX2RhdGEuZXJyb3Iscj10Ll9kYXRhLnNlcSxvPXQuX2RhdGEuZGF0YS5ib2R5LmN1c3RvbV9tc2csc2V0VGltZW91dCgoZnVuY3Rpb24oKXtuJiZuKE0uVElNRU9VVCxyLG8pfSksMCkpLHQ9ZS5nZXRGaXJzdCgpfSgpfSxmZS5wcm90b3R5cGUuY2hlY2tNZXNzYWdlTGlzdFRpbWVvdXQ9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49ZS5nZXRGaXJzdCgpLHI9RGF0ZS5wYXJzZShuZXcgRGF0ZStcIlwiKSxvPTAsaT10aGlzO251bGwhPW4mJlwiYnJlYWtcIiE9PWZ1bmN0aW9uKCl7cmV0dXJuIG4uX2RhdGEmJm4uX2RhdGEuc2VuZFRpbWUrbi5fZGF0YS50aW1lT3V0PnI/XCJicmVha1wiOihuLl9kYXRhJiZkZWxldGUgdFtuLl9kYXRhLmRhdGEuaGVhZGVyLnNlcV0sZS5yZW1vdmUobiksbi5fZGF0YSYmbnVsbD09bi5fZGF0YS5lcnJvcnx8bi5fZGF0YSYmbi5fZGF0YS5zZW5kVGltZStpLnNlbmREYXRhRHJvcFRpbWVvdXQ8cnx8biYmbi5fZGF0YSYmKHM9bi5fZGF0YS5lcnJvcixhPW4uX2RhdGEuc2VxLGM9bi5fZGF0YS5kYXRhLmJvZHkuY3VzdG9tX21zZyxzZXRUaW1lb3V0KChmdW5jdGlvbigpe3MmJnMoTS5USU1FT1VULGEsYyl9KSwwKSksKytvPj1pLnNlbmREYXRhQ2hlY2tPbmNlQ291bnQ/XCJicmVha1wiOnZvaWQobj1lLmdldEZpcnN0KCkpKTt2YXIgcyxhLGN9KCk7KTt9LGZlLnByb3RvdHlwZS5zdGFydENoZWNrPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLmNoZWNrTWVzc2FnZUxpc3RUaW1lb3V0KHRoaXMuc2VuZENvbW1hbmRMaXN0LHRoaXMuc2VuZENvbW1hbmRNYXApLHRoaXMuc2VuZERhdGFDaGVja1RpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZS5zdGFydENoZWNrKCl9KSx0aGlzLnNlbmREYXRhQ2hlY2tJbnRlcnZhbCl9LGZlLnByb3RvdHlwZS5zdG9wQ2hlY2s9ZnVuY3Rpb24oKXt0aGlzLmNoZWNrU2VuZE1lc3NhZ2VMaXN0KHRoaXMuc2VuZENvbW1hbmRMaXN0KSx0aGlzLnNlbmRDb21tYW5kTWFwPXt9LGNsZWFyVGltZW91dCh0aGlzLnNlbmREYXRhQ2hlY2tUaW1lcil9LGZlLnByb3RvdHlwZS5vcGVuSGFuZGxlcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMuc29ja2V0JiYodGhpcy5zb2NrZXQub25vcGVuPWZ1bmN0aW9uKG4pe3Quc29ja2V0LmJpbmFyeVR5cGU9XCJhcnJheWJ1ZmZlclwiLHQucmVzcG9uc2VIYW5kbGVyKCksZShuKX0pfSxmZS5wcm90b3R5cGUucmVzcG9uc2VIYW5kbGVyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLnNvY2tldCYmKHRoaXMuc29ja2V0Lm9ubWVzc2FnZT1mdW5jdGlvbih0KXt0PVwic3RyaW5nXCI9PXR5cGVvZiB0LmRhdGE/SlNPTi5wYXJzZSh0LmRhdGEpOnQuZGF0YSxlLm9uTWVzc2FnZSh0KX0pfSxmZS5wcm90b3R5cGUuY2xvc2VIYW5kbGVyPWZ1bmN0aW9uKGUpe3RoaXMuc29ja2V0JiYodGhpcy5zb2NrZXQub25jbG9zZT1mdW5jdGlvbih0KXtlKHQpfSl9LGZlLnByb3RvdHlwZS5lcnJvckhhbmRsZXI9ZnVuY3Rpb24oZSl7dGhpcy5zb2NrZXQmJih0aGlzLnNvY2tldC5vbmVycm9yPWUpfSxmZS5wcm90b3R5cGUub25NZXNzYWdlPWZ1bmN0aW9uKGUpe307dmFyIF9lPWZlO2Z1bmN0aW9uIGZlKGUpe3RoaXMuc29ja2V0PW51bGwsdGhpcy5zZW5kQ29tbWFuZExpc3Q9bmV3IHYsdGhpcy5zZW5kQ29tbWFuZE1hcD17fSx0aGlzLnNlbmREYXRhQ2hlY2tPbmNlQ291bnQ9MTAwLHRoaXMuc2VuZERhdGFEcm9wVGltZW91dD0xZTQsdGhpcy5zZW5kRGF0YUNoZWNrSW50ZXJ2YWw9MmUzLHRoaXMuRU5WPWV9dmFyIGdlPWZ1bmN0aW9uKCl7cmV0dXJuKGdlPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPTEscj1hcmd1bWVudHMubGVuZ3RoO248cjtuKyspZm9yKHZhciBvIGluIHQ9YXJndW1lbnRzW25dKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG8pJiYoZVtvXT10W29dKTtyZXR1cm4gZX0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sbWU9KHllLnByb3RvdHlwZS5jaGVja1Jlc3BvbnNlPWZ1bmN0aW9uKGUpe3JldHVybiAwIT10aGlzLnN0YXRlQ2VudGVyLnJvb21Nb2R1bGVzTGlzdC5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJ1blN0YXRlIT09by5sb2dvdXR9KSkubGVuZ3RoJiYoZS5oZWFkZXIuYXBwaWQhPT10aGlzLnN0YXRlQ2VudGVyLmFwcGlkfHxlLmhlYWRlci51c2VyX2lkIT09dGhpcy5zdGF0ZUNlbnRlci51c2VyaWQpfSx5ZS5wcm90b3R5cGUuaGFuZGxlU2VuZENvbW1hbmRNc2dSc3A9ZnVuY3Rpb24oZSl7dmFyIHQsbj10aGlzLHI9dGhpcy5zZXJ2aWNlLnNlbmRDb21tYW5kTWFwW2UuaGVhZGVyLnNlcV07bnVsbCE9ciYmKHQ9ci5fZGF0YSxkZWxldGUgdGhpcy5zZXJ2aWNlLnNlbmRDb21tYW5kTWFwW2UuaGVhZGVyLnNlcV0sdGhpcy5zZXJ2aWNlLnNlbmRDb21tYW5kTGlzdC5yZW1vdmUociksMD09PWUuYm9keS5lcnJfY29kZT9zZXRUaW1lb3V0KChmdW5jdGlvbigpe3QmJm51bGwhPXQuc3VjY2VzcyYmdC5zdWNjZXNzKGUsbi5jbWRTZXEpfSksMCk6c2V0VGltZW91dCgoZnVuY3Rpb24oKXt0JiZudWxsIT10LmVycm9yJiZ0LmVycm9yKGUsbi5jbWRTZXEpfSksMCkpfSx5ZS5wcm90b3R5cGUub25QdXNoPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLnNlcnZpY2Uub25NZXNzYWdlPWZ1bmN0aW9uKHQpe3QgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcj9lLnN0YXRlQ2VudGVyLmFjdGlvbkxpc3RlbmVyKFwiX3Byb3RvYnVmUmVzcG9uc2VcIix0KTp0LmhlYWRlcj8oMCE9PXQuYm9keS5lcnJfY29kZT90LmJvZHkuZXJyX21lc3NhZ2UmJmUubG9nZ2VyLmVycm9yKFwiXCIuY29uY2F0KFUuU0VSVklDRV9QVVNILFwiIGNtZD1cIikuY29uY2F0KHQuaGVhZGVyLmNtZCxcIiwgZXJyX2NvZGU9XCIpLmNvbmNhdCh0LmJvZHkuZXJyX2NvZGUsXCIsIGVycl9tZXNzYWdlPVwiKS5jb25jYXQodC5ib2R5LmVycl9tZXNzYWdlLFwiIFwiKSk6ZS5sb2dnZXIuaW5mbyhcIlwiLmNvbmNhdChVLlNFUlZJQ0VfUFVTSCxcIiBjbWQ9XCIpLmNvbmNhdCh0LmhlYWRlci5jbWQsXCIsIG1zZz1cIikuY29uY2F0KEpTT04uc3RyaW5naWZ5KHQpLFwiIFwiKSksLTE8W1wibG9naW5cIixcImxvZ291dFwiXS5pbmRleE9mKHQuaGVhZGVyLmNtZCk/ZS5oYW5kbGVTZW5kQ29tbWFuZE1zZ1JzcCh0KTplLmNoZWNrUmVzcG9uc2UodCk/ZS5sb2dnZXIuZXJyb3IoVS5TRVJWSUNFX1BVU0grXCIgIGNoZWNrIHNlc3Npb24gZmFpbC5cIik6KGUubG9nZ2VyLmluZm8oXCJcIi5jb25jYXQoVS5TRVJWSUNFX1BVU0gsXCIgY21kPVwiKS5jb25jYXQodC5oZWFkZXIuY21kLFwiLGZ1bmN0aW9uPVwiKS5jb25jYXQoISFlLnJlc3BvbnNlUm91dGVyc1t0LmhlYWRlci5jbWRdKSksZS5oYW5kbGVTZW5kQ29tbWFuZE1zZ1JzcCh0KSxlLnJlc3BvbnNlUm91dGVyc1t0LmhlYWRlci5jbWRdJiZlLnJlc3BvbnNlUm91dGVyc1t0LmhlYWRlci5jbWRdKHQsZS5jbWRTZXEpKSk6ZS5sb2dnZXIuZXJyb3IoXCJcIi5jb25jYXQoVS5TRVJWSUNFX1BVU0gsXCIgbXNnIHR5cGUgZXJyb3IgXCIpKX19LHllLnByb3RvdHlwZS5oYW5kbGVQdXNoS2lja291dD1mdW5jdGlvbihlKXt2YXIgdCxuO3ZvaWQgMD09PShudWxsPT0obj1udWxsPT1lP3ZvaWQgMDplLmJvZHkpP3ZvaWQgMDpuLnByb3RvY29sKXx8MT09PShudWxsPT0obj1udWxsPT1lP3ZvaWQgMDplLmJvZHkpP3ZvaWQgMDpuLnByb3RvY29sKT9mdW5jdGlvbihlLHQsbil7aWYobnx8Mj09PWFyZ3VtZW50cy5sZW5ndGgpZm9yKHZhciByLG89MCxpPXQubGVuZ3RoO288aTtvKyspIXImJm8gaW4gdHx8KChyPXJ8fEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHQsMCxvKSlbb109dFtvXSk7cmV0dXJuIGUuY29uY2F0KHJ8fEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHQpKX0oW10sdGhpcy5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3QsITApLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiB0LnJvb21IYW5kbGVyLmhhbmRsZVB1c2hLaWNrb3V0KGUsITApfSkpOih0PW51bGw9PShuPW51bGw9PWU/dm9pZCAwOmUuaGVhZGVyKT92b2lkIDA6bi5yb29tX2lkLChuPXRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0LmZpbmQoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJvb21JRD09dH0pKSk/bi5yb29tSGFuZGxlci5oYW5kbGVQdXNoS2lja291dChlKTp0aGlzLmxvZ2dlci5lcnJvcihVLlNFUlZJQ0VfUFVTSCtcIiByb29tIG5vIGZvdW5kIGlnbm9yZSBcIitKU09OLnN0cmluZ2lmeShudWxsPT0obj1lLmhlYWRlcik/dm9pZCAwOm4ucm9vbV9pZCkpKX0seWUucHJvdG90eXBlLmhhbmRsZVB1c2hDdXN0b21Nc2c9ZnVuY3Rpb24oZSl7fSx5ZS5wcm90b3R5cGUuaGFuZGxlUHVzaFJvb21Nc2c9ZnVuY3Rpb24oZSl7fSx5ZS5wcm90b3R5cGUuaGFuZGxlUHVzaFVzZXJTdGF0ZVVwZGF0ZU1zZz1mdW5jdGlvbihlKXt2YXIgdD1udWxsPT0obj1udWxsPT1lP3ZvaWQgMDplLmhlYWRlcik/dm9pZCAwOm4ucm9vbV9pZCxuPXRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0LmZpbmQoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJvb21JRD09dH0pKTtuP24udXNlckhhbmRsZXIuaGFuZGxlUHVzaFVzZXJTdGF0ZVVwZGF0ZU1zZyhlKTp0aGlzLmxvZ2dlci5lcnJvcihVLlNFUlZJQ0VfUFVTSCtcIiByb29tIG5vIGZvdW5kIGlnbm9yZSBcIitKU09OLnN0cmluZ2lmeShlKSl9LHllLnByb3RvdHlwZS5oYW5kbGVQdXNoTWVyZ2VNc2c9ZnVuY3Rpb24oZSl7fSx5ZS5wcm90b3R5cGUuaGFuZGxlUHVzaFRyYW5zTXNnPWZ1bmN0aW9uKGUpe30seWUucHJvdG90eXBlLmhhbmRsZUJpZ0ltTXNnUnNwPWZ1bmN0aW9uKGUpe30seWUucHJvdG90eXBlLmhhbmRsZVB1c2hTaWduYWxNc2c9ZnVuY3Rpb24oZSl7fSx5ZS5wcm90b3R5cGUuaGFuZGxlUHVzaFRva2VuRXhwaXJlPWZ1bmN0aW9uKGUpe3RoaXMuc3RhdGVDZW50ZXIuYWN0aW9uTGlzdGVuZXIoXCJfdG9rZW5FeHBpcmVkXCIsZSl9LHllLnByb3RvdHlwZS5jbG9zZUhhbmRsZXI9ZnVuY3Rpb24oZSl7dGhpcy5zZXJ2aWNlLmNsb3NlSGFuZGxlcihlKX0seWUucHJvdG90eXBlLm9wZW5IYW5kbGVyPWZ1bmN0aW9uKGUpe3RoaXMuc2VydmljZS5vcGVuSGFuZGxlcihlKX0seWUucHJvdG90eXBlLmVycm9ySGFuZGxlcj1mdW5jdGlvbihlKXt0aGlzLnNlcnZpY2UuZXJyb3JIYW5kbGVyKGUpfSx5ZS5wcm90b3R5cGUuZ2V0SGVhZGVyPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybntQcm90b2NvbDpcInJlcVwiLGNtZDplLGFwcGlkOnRoaXMuc3RhdGVDZW50ZXIuYXBwaWQsc2VxOisrdGhpcy5jbWRTZXEsdXNlcl9pZDp0aGlzLnN0YXRlQ2VudGVyLnVzZXJpZCxzZXNzaW9uX2lkOnR8fFwiXCIscm9vbV9pZDpufHxcIlwiLHJvb21fc2Vzc2lvbl9pZDpyfHxcIlwiLGJpel92ZXJzaW9uOnRoaXMuc3RhdGVDZW50ZXIuYml6VmVyc2lvbnx8XCJcIn19LHllLnByb3RvdHlwZS5zdGFydENoZWNrPWZ1bmN0aW9uKCl7dGhpcy5sb2dnZXIuaW5mbyhVLlNFUlZJQ0VfU1RBUlRfQ0hFQ0srXCIgc3RhcnRcIiksdGhpcy5zZXJ2aWNlLnN0YXJ0Q2hlY2soKX0seWUucHJvdG90eXBlLnN0b3BDaGVjaz1mdW5jdGlvbigpe3RoaXMubG9nZ2VyLmluZm8oVS5TRVJWSUNFX1NUT1BfQ0hFQ0srXCIgc3RvcFwiKSx0aGlzLnNlcnZpY2Uuc3RvcENoZWNrKCl9LHllLnByb3RvdHlwZS5pc0Rpc0Nvbm5lY3Q9ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5zZXJ2aWNlfHx0aGlzLnNlcnZpY2UuaXNEaXNDb25uZWN0KCl9LHllLnByb3RvdHlwZS5jcmVhdGVTb2NrZXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0aGlzLnNlcnZpY2UuY3JlYXRlU29ja2V0KGUpLHRoaXMucmVzcG9uc2VSb3V0ZXJzPWdlKGdlKHt9LHRoaXMucmVzcG9uc2VSb3V0ZXJzKSx7cHVzaF9raWNrb3V0OmZ1bmN0aW9uKGUpe3QuaGFuZGxlUHVzaEtpY2tvdXQoZSl9LHB1c2hfY3VzdG9tbXNnOmZ1bmN0aW9uKGUpe3QuaGFuZGxlUHVzaEN1c3RvbU1zZyhlKX0scHVzaF9pbV9jaGF0OmZ1bmN0aW9uKGUpe3QuaGFuZGxlUHVzaFJvb21Nc2coZSl9LHB1c2hfdXNlcmxpc3RfdXBkYXRlOmZ1bmN0aW9uKGUpe3QuaGFuZGxlUHVzaFVzZXJTdGF0ZVVwZGF0ZU1zZyhlKX0scHVzaF9tZXJnZV9tZXNzYWdlOmZ1bmN0aW9uKGUpe3QuaGFuZGxlUHVzaE1lcmdlTXNnKGUpfSxwdXNoX3RyYW5zOmZ1bmN0aW9uKGUpe3QuaGFuZGxlUHVzaFRyYW5zTXNnKGUpfSxwdXNoX3NpZ25hbDpmdW5jdGlvbihlKXt0LmhhbmRsZVB1c2hTaWduYWxNc2coZSl9LHB1c2hfdG9rZW5fZXhwaXJlOmZ1bmN0aW9uKGUpe3QuaGFuZGxlUHVzaFRva2VuRXhwaXJlKGUpfX0pfSx5ZS5wcm90b3R5cGUuY2xvc2VTb2NrZXQ9ZnVuY3Rpb24oKXt0aGlzLnNlcnZpY2UuY2xvc2VTb2NrZXQoKX0seWUucHJvdG90eXBlLnNlbmRNZXNzYWdlPWZ1bmN0aW9uKGUsdCxuLHIsbyxpKXt2YXIgcyxhO3JldHVybiB0aGlzLnNlcnZpY2UuaXNEaXNDb25uZWN0KCk/KHRoaXMubG9nZ2VyLmVycm9yKFUuU0VSVklDRV9TRU5EK1wiIHNvY2tldCBpcyBkaXNjb25uZWN0XCIpLHIoTS5TT0NLRVRfQ0xPU0UpLDApOihzPW51bGwhPWkmJmkucm9vbUlEP2kucm9vbUlEOm51bGw9PShzPXRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0WzBdKT92b2lkIDA6cy5yb29tSUQsYT1udWxsIT1pJiZpLnJvb21TZXNzaW9uSUQ/aS5yb29tU2Vzc2lvbklEOm51bGw9PShhPXRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0WzBdKT92b2lkIDA6YS5yb29tU2Vzc2lvbklELGk9bnVsbCE9aSYmaS5zZXNzaW9uSUQ/aS5zZXNzaW9uSUQ6bnVsbD09KGk9dGhpcy5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3RbMF0pP3ZvaWQgMDppLnNlc3Npb25JRCxvPW98fHRoaXMuZ2V0SGVhZGVyKGUsaSxzLGEpLHRoaXMubG9nZ2VyLmluZm8oVS5TRVJWSUNFX1NFTkQrXCIgc2VuZE1zZzpcIitKU09OLnN0cmluZ2lmeSh7aGVhZGVyOm8sYm9keTp0fSkpLHRoaXMuc2VydmljZS5zZW5kTWVzc2FnZShvLHQsbixyKSl9LHllLnByb3RvdHlwZS5vbj1mdW5jdGlvbihlLHQpe3RoaXMucmVzcG9uc2VSb3V0ZXJzW2VdPXR9LHllLnByb3RvdHlwZS5sb2dpbj1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcy5nZXRIZWFkZXIoZS5pc011bHRpP1wiZW50ZXJcIjpcImxvZ2luXCIsZS5zZXNzaW9uSUQsZS5yb29tSUQsZS5yb29tU2Vzc2lvbklEKTtlPXtpZF9uYW1lOnRoaXMuc3RhdGVDZW50ZXIuaWROYW1lLG5pY2tfbmFtZTp0aGlzLnN0YXRlQ2VudGVyLm5pY2tOYW1lLHJvbGU6dGhpcy5zdGF0ZUNlbnRlci5yb2xlLHRva2VuOmUudG9rZW4sdmVyc2lvbjp0aGlzLnN0YXRlQ2VudGVyLnNkS1ZlcnNpb24scm9vbV9uYW1lOmUucm9vbUlELHVzZXJfc3RhdGVfZmxhZzp0aGlzLnN0YXRlQ2VudGVyLnVzZXJTdGF0ZVVwZGF0ZT8xOjAscm9vbV9jcmVhdGVfZmxhZzp0aGlzLnN0YXRlQ2VudGVyLnJvb21DcmVhdGVGbGFnLGNsaWVudF90eXBlOjA9PT10aGlzLnN0YXRlQ2VudGVyLkVOVj9hLkNsaWVudFR5cGVfV2VicnRjOmEuQ2xpZW50VHlwZV9TbWFsbFByb2dyYW0sdGhpcmRfdG9rZW46ZS50aGlyZFRva2VuLHVzZXJfY291bnRfbGltaXQ6ZS5tYXhNZW1iZXJDb3VudCxyZWxhdGVfc2VydmljZTp0aGlzLnN0YXRlQ2VudGVyLnJlbGF0ZVNlcnZpY2Uuam9pbigpfHxcIlwiLGxvZ2luX2xvZ2ljOnRoaXMuc3RhdGVDZW50ZXIuaXNNdWx0aVJvb20/MzoxLHByb3RvX2Zvcm1hdDp0aGlzLnN0YXRlQ2VudGVyLnByb3RvRm9ybWF0fTtyZXR1cm4gdGhpcy5zZW5kTWVzc2FnZShcIlwiLGUsdCxuLHIpfSx5ZS5wcm90b3R5cGUubG9nb3V0PWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1lLmlzTXVsdGk/XCJxdWl0XCI6XCJsb2dvdXRcIixvPXtyZXNlcnZlOjB9O3JldHVyblwibG9nb3V0XCI9PXImJihvLmxvZ2luX2xvZ2ljPXRoaXMuc3RhdGVDZW50ZXIuaXNNdWx0aVJvb20/MzoxKSx0aGlzLnNlbmRNZXNzYWdlKHIsbyx0LG4sdm9pZCAwLHtzZXNzaW9uSUQ6ZS5zZXNzaW9uSUQscm9vbUlEOmUucm9vbUlELHJvb21TZXNzaW9uSUQ6ZS5yb29tU2Vzc2lvbklEfSl9LHllLnByb3RvdHlwZS5oZWFydEJlYXQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0aGlzLnNlbmRNZXNzYWdlKFwiaGJcIix7cmVzZXJ2ZTowfSxlLHQsdm9pZCAwLG4pfSx5ZS5wcm90b3R5cGUuZmV0Y2hVc2VyTGlzdD1mdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5zZW5kTWVzc2FnZShcInVzZXJfbGlzdFwiLGUsdCxuLHZvaWQgMCxyKX0seWUucHJvdG90eXBlLmZldGNoVXNlckxpc3RWMj1mdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5zZW5kTWVzc2FnZShcInVzZXJfbGlzdF92MlwiLGUsdCxuLHZvaWQgMCxyKX0seWUucHJvdG90eXBlLmZldGNoUmVsaWFibGVNZXNzYWdlPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiB0aGlzLnNlbmRNZXNzYWdlKFwidHJhbnNfZmV0Y2hcIixlLHQsbix2b2lkIDAscil9LHllLnByb3RvdHlwZS5zZW5kUmVsaWFibGVNZXNzYWdlPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiB0aGlzLnNlbmRNZXNzYWdlKFwidHJhbnNcIixlLHQsbix2b2lkIDAscil9LHllLnByb3RvdHlwZS5zZW5kUm9vbU1zZz1mdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5zZW5kTWVzc2FnZShcImltX2NoYXRcIixlLHQsbix2b2lkIDAscil9LHllLnByb3RvdHlwZS5zZW5kQ3VzdG9tQ29tbWFuZD1mdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5zZW5kTWVzc2FnZShcImN1c3RvbW1zZ1wiLGUsdCxuLHZvaWQgMCxyKX0seWUucHJvdG90eXBlLnNlbmRCaWdSb29tTWVzc2FnZT1mdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5zZW5kTWVzc2FnZShcImJpZ2ltX2NoYXRcIixlLHQsbix2b2lkIDAscil9LHllLnByb3RvdHlwZS5zZW5kUmVsYXlNZXNzYWdlPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiB0aGlzLnNlbmRNZXNzYWdlKFwicmVsYXlcIixlLHQsbix2b2lkIDAscil9LHllLnByb3RvdHlwZS5zZW5kU2lnbmFsQ21kPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiB0aGlzLnNlbmRNZXNzYWdlKFwic2lnbmFsXCIsZSx0LG4sdm9pZCAwLHIpfSx5ZS5wcm90b3R5cGUuc2VuZFBCPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnNlcnZpY2UuaXNEaXNDb25uZWN0KCl8fHRoaXMuc3RhdGVDZW50ZXIubmV0d29ya1N0YXRlPT1pLm9mZmxpbmU/KHRoaXMubG9nZ2VyLmVycm9yKFUuUlRNX1NFTkRfUEIrXCIgc29ja2V0IGlzIGRpc2Nvbm5lY3RlZFwiKSwhMSk6dGhpcy5zZXJ2aWNlLnNlbmRQQihlKX0seWUpO2Z1bmN0aW9uIHllKGUsdCxuKXt0aGlzLnN0YXRlQ2VudGVyPWUsdGhpcy5sb2dnZXI9dCx0aGlzLnJ0bT1uLHRoaXMuc2VydmljZT1uZXcgX2UodGhpcy5zdGF0ZUNlbnRlci5FTlYpLHRoaXMuY21kU2VxPTAsdGhpcy5yZXNwb25zZVJvdXRlcnM9e319YmUuZ2V0SW5zdGFuY2U9ZnVuY3Rpb24oKXtyZXR1cm4gYmUuaW5zdGFuY2U9YmUuaW5zdGFuY2U/YmUuaW5zdGFuY2U6bmV3IGJlfSxiZS5wcm90b3R5cGUuc2V0U2V0dGluZz1mdW5jdGlvbihlLHQpe3ZhciBuLHIsbz1BcnJheS5pc0FycmF5KHQpJiYwPHQubGVuZ3RoO2ZvcihuIGluIGUpaWYoXCJudW1iZXJcIj09dHlwZW9mIGVbbl0uY3RybG1vZGUmJlsxLDJdLmluY2x1ZGVzKGVbbl0uY3RybG1vZGUpKXRoaXMuc2V0dGluZ1tuXT1lW25dLHRoaXMuc2V0dGluZ1tuK1wiX2N0cmxtb2RlXCJdPWVbbl0uY3RybG1vZGU7ZWxzZSBmb3IodmFyIGkgaW4gZVtuXSlpLmVuZHNXaXRoKFwiX2N0cmxtb2RlXCIpfHxvJiYtMT09dC5pbmRleE9mKGkpfHwoMT09PShyPWVbbl1baStcIl9jdHJsbW9kZVwiXSl8fDI9PT1yP3RoaXMuc2V0dGluZ1tpXT1lW25dW2ldOnRoaXMuZGVmYXVsdFNldHRpbmdbaV0mJih0aGlzLnNldHRpbmdbaV09dGhpcy5kZWZhdWx0U2V0dGluZ1tpXSksXCJudW1iZXJcIj09dHlwZW9mIHImJih0aGlzLnNldHRpbmdbaStcIl9jdHJsbW9kZVwiXT1lW25dW2krXCJfY3RybG1vZGVcIl0pKX0sYmUucHJvdG90eXBlLmdldFNldHRpbmc9ZnVuY3Rpb24oZSx0KXtyZXR1cm4odD12b2lkIDAhPT10JiZ0KSYmMiE9dGhpcy5zZXR0aW5nW2UrXCJfY3RybG1vZGVcIl0/dm9pZCAwOnRoaXMuc2V0dGluZ1tlXX07dmFyIHZlPWJlO2Z1bmN0aW9uIGJlKCl7dGhpcy5kZWZhdWx0U2V0dGluZz17cmVtb3RlX2xvZ19sZXZlbDpcImluZm9cIn0sdGhpcy5yZXF1ZXN0TGlzdD17fSx0aGlzLnNldHRpbmc9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmRlZmF1bHRTZXR0aW5nKSl9dmFyIEVlPW4oMCksT2U9bi5uKEVlKSxUZT0odD1uKDYpLG4oOCkpLFNlPW4ubihUZSksUmU9KFRlPW4oOSksbi5uKFRlKSksa2U9KFRlPW4oMTQpLG4ubihUZSkpLENlPShUZT1uKDQpLG4ubihUZSkpLHdlPXtkOihlLHQpPT57Zm9yKHZhciBuIGluIHQpd2Uubyh0LG4pJiYhd2UubyhlLG4pJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLHtlbnVtZXJhYmxlOiEwLGdldDp0W25dfSl9LG86KGUsdCk9Pk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxOZT0oKChlLHQsbik9PntmdW5jdGlvbiByKGUpe3JldHVyblwiMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCIuY2hhckF0KGUpfWZ1bmN0aW9uIG8oZSx0KXtyZXR1cm4gZSZ0fWZ1bmN0aW9uIGkoZSx0KXtyZXR1cm4gZXx0fWZ1bmN0aW9uIHMoZSx0KXtyZXR1cm4gZV50fWZ1bmN0aW9uIGEoZSx0KXtyZXR1cm4gZSZ+dH1uLmQodCx7ZGVmYXVsdDooKT0+aWV9KTt2YXIgYyx1PVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO2Z1bmN0aW9uIGwoZSl7Zm9yKHZhciB0LG49XCJcIixyPTA7ciszPD1lLmxlbmd0aDtyKz0zKXQ9cGFyc2VJbnQoZS5zdWJzdHJpbmcocixyKzMpLDE2KSxuKz11LmNoYXJBdCh0Pj42KSt1LmNoYXJBdCg2MyZ0KTtmb3IocisxPT1lLmxlbmd0aD8odD1wYXJzZUludChlLnN1YnN0cmluZyhyLHIrMSksMTYpLG4rPXUuY2hhckF0KHQ8PDIpKTpyKzI9PWUubGVuZ3RoJiYodD1wYXJzZUludChlLnN1YnN0cmluZyhyLHIrMiksMTYpLG4rPXUuY2hhckF0KHQ+PjIpK3UuY2hhckF0KCgzJnQpPDw0KSk7MDwoMyZuLmxlbmd0aCk7KW4rPVwiPVwiO3JldHVybiBufWZ1bmN0aW9uIGgoZSl7Zm9yKHZhciB0PVwiXCIsbj0wLG89MCxpPTA7aTxlLmxlbmd0aCYmXCI9XCIhPWUuY2hhckF0KGkpOysraSl7dmFyIHM9dS5pbmRleE9mKGUuY2hhckF0KGkpKTtzPDB8fChuPTA9PW4/KHQrPXIocz4+Miksbz0zJnMsMSk6MT09bj8odCs9cihvPDwyfHM+PjQpLG89MTUmcywyKToyPT1uPyh0PSh0Kz1yKG8pKStyKHM+PjIpLG89MyZzLDMpOih0PSh0Kz1yKG88PDJ8cz4+NCkpK3IoMTUmcyksMCkpfXJldHVybiAxPT1uJiYodCs9cihvPDwyKSksdH12YXIgcCxkPXtkZWNvZGU6ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09cCl7dmFyIHQ9XCI9IFxcZlxcblxcclxcdMKgXFx1MjAyOFxcdTIwMjlcIjtmb3IocD1PYmplY3QuY3JlYXRlKG51bGwpLGk9MDtpPDY0OysraSlwW1wiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiLmNoYXJBdChpKV09aTtmb3IocFtcIi1cIl09NjIscC5fPTYzLGk9MDtpPHQubGVuZ3RoOysraSlwW3QuY2hhckF0KGkpXT0tMX1mb3IodmFyIG49W10scj0wLG89MCxpPTA7aTxlLmxlbmd0aDsrK2kpe3ZhciBzPWUuY2hhckF0KGkpO2lmKFwiPVwiPT1zKWJyZWFrO2lmKC0xIT0ocz1wW3NdKSl7aWYodm9pZCAwPT09cyl0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIGNoYXJhY3RlciBhdCBvZmZzZXQgXCIraSk7cnw9cyw0PD0rK28/KG5bbi5sZW5ndGhdPXI+PjE2LG5bbi5sZW5ndGhdPXI+PjgmMjU1LG5bbi5sZW5ndGhdPTI1NSZyLG89cj0wKTpyPDw9Nn19c3dpdGNoKG8pe2Nhc2UgMTp0aHJvdyBuZXcgRXJyb3IoXCJCYXNlNjQgZW5jb2RpbmcgaW5jb21wbGV0ZTogYXQgbGVhc3QgMiBiaXRzIG1pc3NpbmdcIik7Y2FzZSAyOm5bbi5sZW5ndGhdPXI+PjEwO2JyZWFrO2Nhc2UgMzpuW24ubGVuZ3RoXT1yPj4xNixuW24ubGVuZ3RoXT1yPj44JjI1NX1yZXR1cm4gbn0scmU6Ly0tLS0tQkVHSU4gW14tXSstLS0tLShbQS1aYS16MC05K1xcLz1cXHNdKyktLS0tLUVORCBbXi1dKy0tLS0tfGJlZ2luLWJhc2U2NFteXFxuXStcXG4oW0EtWmEtejAtOStcXC89XFxzXSspPT09PS8sdW5hcm1vcjpmdW5jdGlvbihlKXt2YXIgdD1kLnJlLmV4ZWMoZSk7aWYodClpZih0WzFdKWU9dFsxXTtlbHNle2lmKCF0WzJdKXRocm93IG5ldyBFcnJvcihcIlJlZ0V4cCBvdXQgb2Ygc3luY1wiKTtlPXRbMl19cmV0dXJuIGQuZGVjb2RlKGUpfX0sXz0obS5wcm90b3R5cGUubXVsQWRkPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuLHI9dGhpcy5idWYsbz1yLmxlbmd0aCxpPTA7aTxvOysraSkobj1yW2ldKmUrdCk8MWUxMz90PTA6bi09MWUxMyoodD0wfG4vMWUxMykscltpXT1uOzA8dCYmKHJbaV09dCl9LG0ucHJvdG90eXBlLnN1Yj1mdW5jdGlvbihlKXtmb3IodmFyIHQsbj10aGlzLmJ1ZixyPW4ubGVuZ3RoLG89MDtvPHI7KytvKWU9KHQ9bltvXS1lKTwwPyh0Kz0xZTEzLDEpOjAsbltvXT10O2Zvcig7MD09PW5bbi5sZW5ndGgtMV07KW4ucG9wKCl9LG0ucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKGUpe2lmKDEwIT0oZXx8MTApKXRocm93IG5ldyBFcnJvcihcIm9ubHkgYmFzZSAxMCBpcyBzdXBwb3J0ZWRcIik7Zm9yKHZhciB0PXRoaXMuYnVmLG49dFt0Lmxlbmd0aC0xXS50b1N0cmluZygpLHI9dC5sZW5ndGgtMjswPD1yOy0tciluKz0oMWUxMyt0W3JdKS50b1N0cmluZygpLnN1YnN0cmluZygxKTtyZXR1cm4gbn0sbS5wcm90b3R5cGUudmFsdWVPZj1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLmJ1Zix0PTAsbj1lLmxlbmd0aC0xOzA8PW47LS1uKXQ9MWUxMyp0K2Vbbl07cmV0dXJuIHR9LG0ucHJvdG90eXBlLnNpbXBsaWZ5PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5idWY7cmV0dXJuIDE9PWUubGVuZ3RoP2VbMF06dGhpc30sbSksZj0vXihcXGRcXGQpKDBbMS05XXwxWzAtMl0pKDBbMS05XXxbMTJdXFxkfDNbMDFdKShbMDFdXFxkfDJbMC0zXSkoPzooWzAtNV1cXGQpKD86KFswLTVdXFxkKSg/OlsuLF0oXFxkezEsM30pKT8pPyk/KFp8Wy0rXSg/OlswXVxcZHwxWzAtMl0pKFswLTVdXFxkKT8pPyQvLGc9L14oXFxkXFxkXFxkXFxkKSgwWzEtOV18MVswLTJdKSgwWzEtOV18WzEyXVxcZHwzWzAxXSkoWzAxXVxcZHwyWzAtM10pKD86KFswLTVdXFxkKSg/OihbMC01XVxcZCkoPzpbLixdKFxcZHsxLDN9KSk/KT8pPyhafFstK10oPzpbMF1cXGR8MVswLTJdKShbMC01XVxcZCk/KT8kLztmdW5jdGlvbiBtKGUpe3RoaXMuYnVmPVsrZXx8MF19ZnVuY3Rpb24geShlLHQpe3JldHVybiBlLmxlbmd0aD50P2Uuc3Vic3RyaW5nKDAsdCkrXCLigKZcIjplfUgucHJvdG90eXBlLmdldD1mdW5jdGlvbihlKXtpZigoZT12b2lkIDA9PT1lP3RoaXMucG9zKys6ZSk+PXRoaXMuZW5jLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJSZXF1ZXN0aW5nIGJ5dGUgb2Zmc2V0IFwiK2UrXCIgb24gYSBzdHJlYW0gb2YgbGVuZ3RoIFwiK3RoaXMuZW5jLmxlbmd0aCk7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHRoaXMuZW5jP3RoaXMuZW5jLmNoYXJDb2RlQXQoZSk6dGhpcy5lbmNbZV19LEgucHJvdG90eXBlLmhleEJ5dGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuaGV4RGlnaXRzLmNoYXJBdChlPj40JjE1KSt0aGlzLmhleERpZ2l0cy5jaGFyQXQoMTUmZSl9LEgucHJvdG90eXBlLmhleER1bXA9ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcj1cIlwiLG89ZTtvPHQ7KytvKWlmKHIrPXRoaXMuaGV4Qnl0ZSh0aGlzLmdldChvKSksITAhPT1uKXN3aXRjaCgxNSZvKXtjYXNlIDc6cis9XCIgIFwiO2JyZWFrO2Nhc2UgMTU6cis9XCJcXG5cIjticmVhaztkZWZhdWx0OnIrPVwiIFwifXJldHVybiByfSxILnByb3RvdHlwZS5pc0FTQ0lJPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPWU7bjx0Oysrbil7dmFyIHI9dGhpcy5nZXQobik7aWYocjwzMnx8MTc2PHIpcmV0dXJuITF9cmV0dXJuITB9LEgucHJvdG90eXBlLnBhcnNlU3RyaW5nSVNPPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVwiXCIscj1lO3I8dDsrK3Ipbis9U3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLmdldChyKSk7cmV0dXJuIG59LEgucHJvdG90eXBlLnBhcnNlU3RyaW5nVVRGPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVwiXCIscj1lO3I8dDspe3ZhciBvPXRoaXMuZ2V0KHIrKyk7bis9bzwxMjg/U3RyaW5nLmZyb21DaGFyQ29kZShvKToxOTE8byYmbzwyMjQ/U3RyaW5nLmZyb21DaGFyQ29kZSgoMzEmbyk8PDZ8NjMmdGhpcy5nZXQocisrKSk6U3RyaW5nLmZyb21DaGFyQ29kZSgoMTUmbyk8PDEyfCg2MyZ0aGlzLmdldChyKyspKTw8Nnw2MyZ0aGlzLmdldChyKyspKX1yZXR1cm4gbn0sSC5wcm90b3R5cGUucGFyc2VTdHJpbmdCTVA9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4scixvPVwiXCIsaT1lO2k8dDspbj10aGlzLmdldChpKyspLHI9dGhpcy5nZXQoaSsrKSxvKz1TdHJpbmcuZnJvbUNoYXJDb2RlKG48PDh8cik7cmV0dXJuIG99LEgucHJvdG90eXBlLnBhcnNlVGltZT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGU9dGhpcy5wYXJzZVN0cmluZ0lTTyhlLHQpLCh0PShuP2Y6ZykuZXhlYyhlKSk/KG4mJih0WzFdPSt0WzFdLHRbMV0rPSt0WzFdPDcwPzJlMzoxOTAwKSxlPXRbMV0rXCItXCIrdFsyXStcIi1cIit0WzNdK1wiIFwiK3RbNF0sdFs1XSYmKGUrPVwiOlwiK3RbNV0sdFs2XSYmKGUrPVwiOlwiK3RbNl0sdFs3XSYmKGUrPVwiLlwiK3RbN10pKSksdFs4XSYmKGUrPVwiIFVUQ1wiLFwiWlwiIT10WzhdJiYoZSs9dFs4XSx0WzldJiYoZSs9XCI6XCIrdFs5XSkpKSxlKTpcIlVucmVjb2duaXplZCB0aW1lOiBcIitlfSxILnByb3RvdHlwZS5wYXJzZUludGVnZXI9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4scj10aGlzLmdldChlKSxvPTEyNzxyLGk9bz8yNTU6MCxzPVwiXCI7cj09aSYmKytlPHQ7KXI9dGhpcy5nZXQoZSk7aWYoMD09KG49dC1lKSlyZXR1cm4gbz8tMTowO2lmKDQ8bil7Zm9yKHM9cixuPDw9MzswPT0oMTI4Jigrc15pKSk7KXM9K3M8PDEsLS1uO3M9XCIoXCIrbitcIiBiaXQpXFxuXCJ9byYmKHItPTI1Nik7Zm9yKHZhciBhPW5ldyBfKHIpLGM9ZSsxO2M8dDsrK2MpYS5tdWxBZGQoMjU2LHRoaXMuZ2V0KGMpKTtyZXR1cm4gcythLnRvU3RyaW5nKCl9LEgucHJvdG90eXBlLnBhcnNlQml0U3RyaW5nPWZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9dGhpcy5nZXQoZSksbz1cIihcIisoKHQtZS0xPDwzKS1yKStcIiBiaXQpXFxuXCIsaT1cIlwiLHM9ZSsxO3M8dDsrK3Mpe2Zvcih2YXIgYT10aGlzLmdldChzKSxjPXM9PXQtMT9yOjAsdT03O2M8PXU7LS11KWkrPWE+PnUmMT9cIjFcIjpcIjBcIjtpZihpLmxlbmd0aD5uKXJldHVybiBvK3koaSxuKX1yZXR1cm4gbytpfSxILnByb3RvdHlwZS5wYXJzZU9jdGV0U3RyaW5nPWZ1bmN0aW9uKGUsdCxuKXtpZih0aGlzLmlzQVNDSUkoZSx0KSlyZXR1cm4geSh0aGlzLnBhcnNlU3RyaW5nSVNPKGUsdCksbik7dmFyIHI9dC1lLG89XCIoXCIrcitcIiBieXRlKVxcblwiO3I+KG4vPTIpJiYodD1lK24pO2Zvcih2YXIgaT1lO2k8dDsrK2kpbys9dGhpcy5oZXhCeXRlKHRoaXMuZ2V0KGkpKTtyZXR1cm4gbjxyJiYobys9XCLigKZcIiksb30sSC5wcm90b3R5cGUucGFyc2VPSUQ9ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcj1cIlwiLG89bmV3IF8saT0wLHM9ZTtzPHQ7KytzKXt2YXIgYT10aGlzLmdldChzKTtpZihvLm11bEFkZCgxMjgsMTI3JmEpLGkrPTcsISgxMjgmYSkpe2lmKFwiXCI9PT1yP3I9KG89by5zaW1wbGlmeSgpKWluc3RhbmNlb2YgXz8oby5zdWIoODApLFwiMi5cIitvLnRvU3RyaW5nKCkpOihhPW88ODA/bzw0MD8wOjE6MikrXCIuXCIrKG8tNDAqYSk6cis9XCIuXCIrby50b1N0cmluZygpLHIubGVuZ3RoPm4pcmV0dXJuIHkocixuKTtvPW5ldyBfLGk9MH19cmV0dXJuIDA8aSYmKHIrPVwiLmluY29tcGxldGVcIikscn07dmFyIHY9SCxiPShELnByb3RvdHlwZS50eXBlTmFtZT1mdW5jdGlvbigpe3N3aXRjaCh0aGlzLnRhZy50YWdDbGFzcyl7Y2FzZSAwOnN3aXRjaCh0aGlzLnRhZy50YWdOdW1iZXIpe2Nhc2UgMDpyZXR1cm5cIkVPQ1wiO2Nhc2UgMTpyZXR1cm5cIkJPT0xFQU5cIjtjYXNlIDI6cmV0dXJuXCJJTlRFR0VSXCI7Y2FzZSAzOnJldHVyblwiQklUX1NUUklOR1wiO2Nhc2UgNDpyZXR1cm5cIk9DVEVUX1NUUklOR1wiO2Nhc2UgNTpyZXR1cm5cIk5VTExcIjtjYXNlIDY6cmV0dXJuXCJPQkpFQ1RfSURFTlRJRklFUlwiO2Nhc2UgNzpyZXR1cm5cIk9iamVjdERlc2NyaXB0b3JcIjtjYXNlIDg6cmV0dXJuXCJFWFRFUk5BTFwiO2Nhc2UgOTpyZXR1cm5cIlJFQUxcIjtjYXNlIDEwOnJldHVyblwiRU5VTUVSQVRFRFwiO2Nhc2UgMTE6cmV0dXJuXCJFTUJFRERFRF9QRFZcIjtjYXNlIDEyOnJldHVyblwiVVRGOFN0cmluZ1wiO2Nhc2UgMTY6cmV0dXJuXCJTRVFVRU5DRVwiO2Nhc2UgMTc6cmV0dXJuXCJTRVRcIjtjYXNlIDE4OnJldHVyblwiTnVtZXJpY1N0cmluZ1wiO2Nhc2UgMTk6cmV0dXJuXCJQcmludGFibGVTdHJpbmdcIjtjYXNlIDIwOnJldHVyblwiVGVsZXRleFN0cmluZ1wiO2Nhc2UgMjE6cmV0dXJuXCJWaWRlb3RleFN0cmluZ1wiO2Nhc2UgMjI6cmV0dXJuXCJJQTVTdHJpbmdcIjtjYXNlIDIzOnJldHVyblwiVVRDVGltZVwiO2Nhc2UgMjQ6cmV0dXJuXCJHZW5lcmFsaXplZFRpbWVcIjtjYXNlIDI1OnJldHVyblwiR3JhcGhpY1N0cmluZ1wiO2Nhc2UgMjY6cmV0dXJuXCJWaXNpYmxlU3RyaW5nXCI7Y2FzZSAyNzpyZXR1cm5cIkdlbmVyYWxTdHJpbmdcIjtjYXNlIDI4OnJldHVyblwiVW5pdmVyc2FsU3RyaW5nXCI7Y2FzZSAzMDpyZXR1cm5cIkJNUFN0cmluZ1wifXJldHVyblwiVW5pdmVyc2FsX1wiK3RoaXMudGFnLnRhZ051bWJlci50b1N0cmluZygpO2Nhc2UgMTpyZXR1cm5cIkFwcGxpY2F0aW9uX1wiK3RoaXMudGFnLnRhZ051bWJlci50b1N0cmluZygpO2Nhc2UgMjpyZXR1cm5cIltcIit0aGlzLnRhZy50YWdOdW1iZXIudG9TdHJpbmcoKStcIl1cIjtjYXNlIDM6cmV0dXJuXCJQcml2YXRlX1wiK3RoaXMudGFnLnRhZ051bWJlci50b1N0cmluZygpfX0sRC5wcm90b3R5cGUuY29udGVudD1mdW5jdGlvbihlKXtpZih2b2lkIDAhPT10aGlzLnRhZyl7dm9pZCAwPT09ZSYmKGU9MS8wKTt2YXIgdD10aGlzLnBvc0NvbnRlbnQoKSxuPU1hdGguYWJzKHRoaXMubGVuZ3RoKTtpZighdGhpcy50YWcuaXNVbml2ZXJzYWwoKSlyZXR1cm4gbnVsbCE9PXRoaXMuc3ViP1wiKFwiK3RoaXMuc3ViLmxlbmd0aCtcIiBlbGVtKVwiOnRoaXMuc3RyZWFtLnBhcnNlT2N0ZXRTdHJpbmcodCx0K24sZSk7c3dpdGNoKHRoaXMudGFnLnRhZ051bWJlcil7Y2FzZSAxOnJldHVybiAwPT09dGhpcy5zdHJlYW0uZ2V0KHQpP1wiZmFsc2VcIjpcInRydWVcIjtjYXNlIDI6cmV0dXJuIHRoaXMuc3RyZWFtLnBhcnNlSW50ZWdlcih0LHQrbik7Y2FzZSAzOnJldHVybiB0aGlzLnN1Yj9cIihcIit0aGlzLnN1Yi5sZW5ndGgrXCIgZWxlbSlcIjp0aGlzLnN0cmVhbS5wYXJzZUJpdFN0cmluZyh0LHQrbixlKTtjYXNlIDQ6cmV0dXJuIHRoaXMuc3ViP1wiKFwiK3RoaXMuc3ViLmxlbmd0aCtcIiBlbGVtKVwiOnRoaXMuc3RyZWFtLnBhcnNlT2N0ZXRTdHJpbmcodCx0K24sZSk7Y2FzZSA2OnJldHVybiB0aGlzLnN0cmVhbS5wYXJzZU9JRCh0LHQrbixlKTtjYXNlIDE2OmNhc2UgMTc6cmV0dXJuIG51bGwhPT10aGlzLnN1Yj9cIihcIit0aGlzLnN1Yi5sZW5ndGgrXCIgZWxlbSlcIjpcIihubyBlbGVtKVwiO2Nhc2UgMTI6cmV0dXJuIHkodGhpcy5zdHJlYW0ucGFyc2VTdHJpbmdVVEYodCx0K24pLGUpO2Nhc2UgMTg6Y2FzZSAxOTpjYXNlIDIwOmNhc2UgMjE6Y2FzZSAyMjpjYXNlIDI2OnJldHVybiB5KHRoaXMuc3RyZWFtLnBhcnNlU3RyaW5nSVNPKHQsdCtuKSxlKTtjYXNlIDMwOnJldHVybiB5KHRoaXMuc3RyZWFtLnBhcnNlU3RyaW5nQk1QKHQsdCtuKSxlKTtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIHRoaXMuc3RyZWFtLnBhcnNlVGltZSh0LHQrbiwyMz09dGhpcy50YWcudGFnTnVtYmVyKX19cmV0dXJuIG51bGx9LEQucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudHlwZU5hbWUoKStcIkBcIit0aGlzLnN0cmVhbS5wb3MrXCJbaGVhZGVyOlwiK3RoaXMuaGVhZGVyK1wiLGxlbmd0aDpcIit0aGlzLmxlbmd0aCtcIixzdWI6XCIrKG51bGw9PT10aGlzLnN1Yj9cIm51bGxcIjp0aGlzLnN1Yi5sZW5ndGgpK1wiXVwifSxELnByb3RvdHlwZS50b1ByZXR0eVN0cmluZz1mdW5jdGlvbihlKXt2YXIgdD0oZT12b2lkIDA9PT1lP1wiXCI6ZSkrdGhpcy50eXBlTmFtZSgpK1wiIEBcIit0aGlzLnN0cmVhbS5wb3M7aWYoMDw9dGhpcy5sZW5ndGgmJih0Kz1cIitcIiksdCs9dGhpcy5sZW5ndGgsdGhpcy50YWcudGFnQ29uc3RydWN0ZWQ/dCs9XCIgKGNvbnN0cnVjdGVkKVwiOiF0aGlzLnRhZy5pc1VuaXZlcnNhbCgpfHwzIT10aGlzLnRhZy50YWdOdW1iZXImJjQhPXRoaXMudGFnLnRhZ051bWJlcnx8bnVsbD09PXRoaXMuc3VifHwodCs9XCIgKGVuY2Fwc3VsYXRlcylcIiksdCs9XCJcXG5cIixudWxsIT09dGhpcy5zdWIpe2UrPVwiICBcIjtmb3IodmFyIG49MCxyPXRoaXMuc3ViLmxlbmd0aDtuPHI7KytuKXQrPXRoaXMuc3ViW25dLnRvUHJldHR5U3RyaW5nKGUpfXJldHVybiB0fSxELnByb3RvdHlwZS5wb3NTdGFydD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN0cmVhbS5wb3N9LEQucHJvdG90eXBlLnBvc0NvbnRlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdHJlYW0ucG9zK3RoaXMuaGVhZGVyfSxELnByb3RvdHlwZS5wb3NFbmQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdHJlYW0ucG9zK3RoaXMuaGVhZGVyK01hdGguYWJzKHRoaXMubGVuZ3RoKX0sRC5wcm90b3R5cGUudG9IZXhTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdHJlYW0uaGV4RHVtcCh0aGlzLnBvc1N0YXJ0KCksdGhpcy5wb3NFbmQoKSwhMCl9LEQuZGVjb2RlTGVuZ3RoPWZ1bmN0aW9uKGUpe3ZhciB0PTEyNyYobj1lLmdldCgpKTtpZih0PT1uKXJldHVybiB0O2lmKDY8dCl0aHJvdyBuZXcgRXJyb3IoXCJMZW5ndGggb3ZlciA0OCBiaXRzIG5vdCBzdXBwb3J0ZWQgYXQgcG9zaXRpb24gXCIrKGUucG9zLTEpKTtpZigwPT10KXJldHVybiBudWxsO2Zvcih2YXIgbj0wLHI9MDtyPHQ7KytyKW49MjU2Km4rZS5nZXQoKTtyZXR1cm4gbn0sRC5wcm90b3R5cGUuZ2V0SGV4U3RyaW5nVmFsdWU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnRvSGV4U3RyaW5nKCksdD0yKnRoaXMuaGVhZGVyLG49Mip0aGlzLmxlbmd0aDtyZXR1cm4gZS5zdWJzdHIodCxuKX0sRC5kZWNvZGU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3ZhciBlPVtdO2lmKG51bGwhPT1vKXtmb3IodmFyIHQ9aStvO24ucG9zPHQ7KWVbZS5sZW5ndGhdPUQuZGVjb2RlKG4pO2lmKG4ucG9zIT10KXRocm93IG5ldyBFcnJvcihcIkNvbnRlbnQgc2l6ZSBpcyBub3QgY29ycmVjdCBmb3IgY29udGFpbmVyIHN0YXJ0aW5nIGF0IG9mZnNldCBcIitpKX1lbHNlIHRyeXtmb3IoOzspe3ZhciByPUQuZGVjb2RlKG4pO2lmKHIudGFnLmlzRU9DKCkpYnJlYWs7ZVtlLmxlbmd0aF09cn1vPWktbi5wb3N9Y2F0Y2goZSl7dGhyb3cgbmV3IEVycm9yKFwiRXhjZXB0aW9uIHdoaWxlIGRlY29kaW5nIHVuZGVmaW5lZCBsZW5ndGggY29udGVudDogXCIrZSl9cmV0dXJuIGV9dmFyIG49ZSBpbnN0YW5jZW9mIHY/ZTpuZXcgdihlLDApLHI9KGU9bmV3IHYobiksbmV3IEUobikpLG89RC5kZWNvZGVMZW5ndGgobiksaT1uLnBvcyxzPWktZS5wb3MsYT1udWxsO2lmKHIudGFnQ29uc3RydWN0ZWQpYT10KCk7ZWxzZSBpZihyLmlzVW5pdmVyc2FsKCkmJigzPT1yLnRhZ051bWJlcnx8ND09ci50YWdOdW1iZXIpKXRyeXtpZigzPT1yLnRhZ051bWJlciYmMCE9bi5nZXQoKSl0aHJvdyBuZXcgRXJyb3IoXCJCSVQgU1RSSU5HcyB3aXRoIHVudXNlZCBiaXRzIGNhbm5vdCBlbmNhcHN1bGF0ZS5cIik7YT10KCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDsrK2MpaWYoYVtjXS50YWcuaXNFT0MoKSl0aHJvdyBuZXcgRXJyb3IoXCJFT0MgaXMgbm90IHN1cHBvc2VkIHRvIGJlIGFjdHVhbCBjb250ZW50LlwiKX1jYXRjaChlKXthPW51bGx9aWYobnVsbD09PWEpe2lmKG51bGw9PT1vKXRocm93IG5ldyBFcnJvcihcIldlIGNhbid0IHNraXAgb3ZlciBhbiBpbnZhbGlkIHRhZyB3aXRoIHVuZGVmaW5lZCBsZW5ndGggYXQgb2Zmc2V0IFwiK2kpO24ucG9zPWkrTWF0aC5hYnMobyl9cmV0dXJuIG5ldyBEKGUscyxvLHIsYSl9LEQpLEU9KEEucHJvdG90eXBlLmlzVW5pdmVyc2FsPWZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLnRhZ0NsYXNzfSxBLnByb3RvdHlwZS5pc0VPQz1mdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy50YWdDbGFzcyYmMD09PXRoaXMudGFnTnVtYmVyfSxBKSxPPVsyLDMsNSw3LDExLDEzLDE3LDE5LDIzLDI5LDMxLDM3LDQxLDQzLDQ3LDUzLDU5LDYxLDY3LDcxLDczLDc5LDgzLDg5LDk3LDEwMSwxMDMsMTA3LDEwOSwxMTMsMTI3LDEzMSwxMzcsMTM5LDE0OSwxNTEsMTU3LDE2MywxNjcsMTczLDE3OSwxODEsMTkxLDE5MywxOTcsMTk5LDIxMSwyMjMsMjI3LDIyOSwyMzMsMjM5LDI0MSwyNTEsMjU3LDI2MywyNjksMjcxLDI3NywyODEsMjgzLDI5MywzMDcsMzExLDMxMywzMTcsMzMxLDMzNywzNDcsMzQ5LDM1MywzNTksMzY3LDM3MywzNzksMzgzLDM4OSwzOTcsNDAxLDQwOSw0MTksNDIxLDQzMSw0MzMsNDM5LDQ0Myw0NDksNDU3LDQ2MSw0NjMsNDY3LDQ3OSw0ODcsNDkxLDQ5OSw1MDMsNTA5LDUyMSw1MjMsNTQxLDU0Nyw1NTcsNTYzLDU2OSw1NzEsNTc3LDU4Nyw1OTMsNTk5LDYwMSw2MDcsNjEzLDYxNyw2MTksNjMxLDY0MSw2NDMsNjQ3LDY1Myw2NTksNjYxLDY3Myw2NzcsNjgzLDY5MSw3MDEsNzA5LDcxOSw3MjcsNzMzLDczOSw3NDMsNzUxLDc1Nyw3NjEsNzY5LDc3Myw3ODcsNzk3LDgwOSw4MTEsODIxLDgyMyw4MjcsODI5LDgzOSw4NTMsODU3LDg1OSw4NjMsODc3LDg4MSw4ODMsODg3LDkwNyw5MTEsOTE5LDkyOSw5MzcsOTQxLDk0Nyw5NTMsOTY3LDk3MSw5NzcsOTgzLDk5MSw5OTddLFQ9KDE8PDI2KS9PW08ubGVuZ3RoLTFdLFM9KFAucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKGUpe2lmKHRoaXMuczwwKXJldHVyblwiLVwiK3RoaXMubmVnYXRlKCkudG9TdHJpbmcoZSk7dmFyIHQ7aWYoMTY9PWUpdD00O2Vsc2UgaWYoOD09ZSl0PTM7ZWxzZSBpZigyPT1lKXQ9MTtlbHNlIGlmKDMyPT1lKXQ9NTtlbHNle2lmKDQhPWUpcmV0dXJuIHRoaXMudG9SYWRpeChlKTt0PTJ9dmFyIG4sbz0oMTw8dCktMSxpPSExLHM9XCJcIixhPXRoaXMudCxjPXRoaXMuREItYSp0aGlzLkRCJXQ7aWYoMDxhLS0pZm9yKGM8dGhpcy5EQiYmMDwobj10aGlzW2FdPj5jKSYmKGk9ITAscz1yKG4pKTswPD1hOyljPHQ/KG49KHRoaXNbYV0mKDE8PGMpLTEpPDx0LWMsbnw9dGhpc1stLWFdPj4oYys9dGhpcy5EQi10KSk6KG49dGhpc1thXT4+KGMtPXQpJm8sYzw9MCYmKGMrPXRoaXMuREIsLS1hKSksKGk9MDxufHxpKSYmKHMrPXIobikpO3JldHVybiBpP3M6XCIwXCJ9LFAucHJvdG90eXBlLm5lZ2F0ZT1mdW5jdGlvbigpe3ZhciBlPWooKTtyZXR1cm4gUC5aRVJPLnN1YlRvKHRoaXMsZSksZX0sUC5wcm90b3R5cGUuYWJzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuczwwP3RoaXMubmVnYXRlKCk6dGhpc30sUC5wcm90b3R5cGUuY29tcGFyZVRvPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMucy1lLnM7aWYoMCE9dClyZXR1cm4gdDt2YXIgbj10aGlzLnQ7aWYoMCE9KHQ9bi1lLnQpKXJldHVybiB0aGlzLnM8MD8tdDp0O2Zvcig7MDw9LS1uOylpZigwIT0odD10aGlzW25dLWVbbl0pKXJldHVybiB0O3JldHVybiAwfSxQLnByb3RvdHlwZS5iaXRMZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50PD0wPzA6dGhpcy5EQioodGhpcy50LTEpK3oodGhpc1t0aGlzLnQtMV1edGhpcy5zJnRoaXMuRE0pfSxQLnByb3RvdHlwZS5tb2Q9ZnVuY3Rpb24oZSl7dmFyIHQ9aigpO3JldHVybiB0aGlzLmFicygpLmRpdlJlbVRvKGUsbnVsbCx0KSx0aGlzLnM8MCYmMDx0LmNvbXBhcmVUbyhQLlpFUk8pJiZlLnN1YlRvKHQsdCksdH0sUC5wcm90b3R5cGUubW9kUG93SW50PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9bmV3KGU8MjU2fHx0LmlzRXZlbigpP2s6QykodCksdGhpcy5leHAoZSx0KX0sUC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgZT1qKCk7cmV0dXJuIHRoaXMuY29weVRvKGUpLGV9LFAucHJvdG90eXBlLmludFZhbHVlPWZ1bmN0aW9uKCl7aWYodGhpcy5zPDApe2lmKDE9PXRoaXMudClyZXR1cm4gdGhpc1swXS10aGlzLkRWO2lmKDA9PXRoaXMudClyZXR1cm4tMX1lbHNle2lmKDE9PXRoaXMudClyZXR1cm4gdGhpc1swXTtpZigwPT10aGlzLnQpcmV0dXJuIDB9cmV0dXJuKHRoaXNbMV0mKDE8PDMyLXRoaXMuREIpLTEpPDx0aGlzLkRCfHRoaXNbMF19LFAucHJvdG90eXBlLmJ5dGVWYWx1ZT1mdW5jdGlvbigpe3JldHVybiAwPT10aGlzLnQ/dGhpcy5zOnRoaXNbMF08PDI0Pj4yNH0sUC5wcm90b3R5cGUuc2hvcnRWYWx1ZT1mdW5jdGlvbigpe3JldHVybiAwPT10aGlzLnQ/dGhpcy5zOnRoaXNbMF08PDE2Pj4xNn0sUC5wcm90b3R5cGUuc2lnbnVtPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuczwwPy0xOnRoaXMudDw9MHx8MT09dGhpcy50JiZ0aGlzWzBdPD0wPzA6MX0sUC5wcm90b3R5cGUudG9CeXRlQXJyYXk9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnQsdD1bXTt0WzBdPXRoaXMuczt2YXIgbixyPXRoaXMuREItZSp0aGlzLkRCJTgsbz0wO2lmKDA8ZS0tKWZvcihyPHRoaXMuREImJihuPXRoaXNbZV0+PnIpIT0odGhpcy5zJnRoaXMuRE0pPj5yJiYodFtvKytdPW58dGhpcy5zPDx0aGlzLkRCLXIpOzA8PWU7KXI8OD8obj0odGhpc1tlXSYoMTw8ciktMSk8PDgtcixufD10aGlzWy0tZV0+PihyKz10aGlzLkRCLTgpKToobj10aGlzW2VdPj4oci09OCkmMjU1LHI8PTAmJihyKz10aGlzLkRCLC0tZSkpLDAhPSgxMjgmbikmJihufD0tMjU2KSwwPT1vJiYoMTI4JnRoaXMucykhPSgxMjgmbikmJisrbywoMDxvfHxuIT10aGlzLnMpJiYodFtvKytdPW4pO3JldHVybiB0fSxQLnByb3RvdHlwZS5lcXVhbHM9ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PXRoaXMuY29tcGFyZVRvKGUpfSxQLnByb3RvdHlwZS5taW49ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuY29tcGFyZVRvKGUpPDA/dGhpczplfSxQLnByb3RvdHlwZS5tYXg9ZnVuY3Rpb24oZSl7cmV0dXJuIDA8dGhpcy5jb21wYXJlVG8oZSk/dGhpczplfSxQLnByb3RvdHlwZS5hbmQ9ZnVuY3Rpb24oZSl7dmFyIHQ9aigpO3JldHVybiB0aGlzLmJpdHdpc2VUbyhlLG8sdCksdH0sUC5wcm90b3R5cGUub3I9ZnVuY3Rpb24oZSl7dmFyIHQ9aigpO3JldHVybiB0aGlzLmJpdHdpc2VUbyhlLGksdCksdH0sUC5wcm90b3R5cGUueG9yPWZ1bmN0aW9uKGUpe3ZhciB0PWooKTtyZXR1cm4gdGhpcy5iaXR3aXNlVG8oZSxzLHQpLHR9LFAucHJvdG90eXBlLmFuZE5vdD1mdW5jdGlvbihlKXt2YXIgdD1qKCk7cmV0dXJuIHRoaXMuYml0d2lzZVRvKGUsYSx0KSx0fSxQLnByb3RvdHlwZS5ub3Q9ZnVuY3Rpb24oKXtmb3IodmFyIGU9aigpLHQ9MDt0PHRoaXMudDsrK3QpZVt0XT10aGlzLkRNJn50aGlzW3RdO3JldHVybiBlLnQ9dGhpcy50LGUucz1+dGhpcy5zLGV9LFAucHJvdG90eXBlLnNoaWZ0TGVmdD1mdW5jdGlvbihlKXt2YXIgdD1qKCk7cmV0dXJuIGU8MD90aGlzLnJTaGlmdFRvKC1lLHQpOnRoaXMubFNoaWZ0VG8oZSx0KSx0fSxQLnByb3RvdHlwZS5zaGlmdFJpZ2h0PWZ1bmN0aW9uKGUpe3ZhciB0PWooKTtyZXR1cm4gZTwwP3RoaXMubFNoaWZ0VG8oLWUsdCk6dGhpcy5yU2hpZnRUbyhlLHQpLHR9LFAucHJvdG90eXBlLmdldExvd2VzdFNldEJpdD1mdW5jdGlvbigpe2Zvcih2YXIgZT0wO2U8dGhpcy50OysrZSlpZigwIT10aGlzW2VdKXJldHVybiBlKnRoaXMuREIrZnVuY3Rpb24oZSl7aWYoMD09ZSlyZXR1cm4tMTt2YXIgdD0wO3JldHVybiAwPT0oNjU1MzUmZSkmJihlPj49MTYsdCs9MTYpLDA9PSgyNTUmZSkmJihlPj49OCx0Kz04KSwwPT0oMTUmZSkmJihlPj49NCx0Kz00KSwwPT0oMyZlKSYmKGU+Pj0yLHQrPTIpLDA9PSgxJmUpJiYrK3QsdH0odGhpc1tlXSk7cmV0dXJuIHRoaXMuczwwP3RoaXMudCp0aGlzLkRCOi0xfSxQLnByb3RvdHlwZS5iaXRDb3VudD1mdW5jdGlvbigpe2Zvcih2YXIgZT0wLHQ9dGhpcy5zJnRoaXMuRE0sbj0wO248dGhpcy50OysrbillKz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MDswIT1lOyllJj1lLTEsKyt0O3JldHVybiB0fSh0aGlzW25dXnQpO3JldHVybiBlfSxQLnByb3RvdHlwZS50ZXN0Qml0PWZ1bmN0aW9uKGUpe3ZhciB0PU1hdGguZmxvb3IoZS90aGlzLkRCKTtyZXR1cm4gdD49dGhpcy50PzAhPXRoaXMuczowIT0odGhpc1t0XSYxPDxlJXRoaXMuREIpfSxQLnByb3RvdHlwZS5zZXRCaXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuY2hhbmdlQml0KGUsaSl9LFAucHJvdG90eXBlLmNsZWFyQml0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNoYW5nZUJpdChlLGEpfSxQLnByb3RvdHlwZS5mbGlwQml0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNoYW5nZUJpdChlLHMpfSxQLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oZSl7dmFyIHQ9aigpO3JldHVybiB0aGlzLmFkZFRvKGUsdCksdH0sUC5wcm90b3R5cGUuc3VidHJhY3Q9ZnVuY3Rpb24oZSl7dmFyIHQ9aigpO3JldHVybiB0aGlzLnN1YlRvKGUsdCksdH0sUC5wcm90b3R5cGUubXVsdGlwbHk9ZnVuY3Rpb24oZSl7dmFyIHQ9aigpO3JldHVybiB0aGlzLm11bHRpcGx5VG8oZSx0KSx0fSxQLnByb3RvdHlwZS5kaXZpZGU9ZnVuY3Rpb24oZSl7dmFyIHQ9aigpO3JldHVybiB0aGlzLmRpdlJlbVRvKGUsdCxudWxsKSx0fSxQLnByb3RvdHlwZS5yZW1haW5kZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9aigpO3JldHVybiB0aGlzLmRpdlJlbVRvKGUsbnVsbCx0KSx0fSxQLnByb3RvdHlwZS5kaXZpZGVBbmRSZW1haW5kZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9aigpLG49aigpO3JldHVybiB0aGlzLmRpdlJlbVRvKGUsdCxuKSxbdCxuXX0sUC5wcm90b3R5cGUubW9kUG93PWZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5iaXRMZW5ndGgoKSxyPVYoMSk7aWYobjw9MClyZXR1cm4gcjt2YXIgbz1uPDE4PzE6bjw0OD8zOm48MTQ0PzQ6bjw3Njg/NTo2LGk9bmV3KG48OD9rOnQuaXNFdmVuKCk/dzpDKSh0KSxzPVtdLGE9MyxjPW8tMSx1PSgxPDxvKS0xO2lmKHNbMV09aS5jb252ZXJ0KHRoaXMpLDE8byl7dmFyIGw9aigpO2ZvcihpLnNxclRvKHNbMV0sbCk7YTw9dTspc1thXT1qKCksaS5tdWxUbyhsLHNbYS0yXSxzW2FdKSxhKz0yfXZhciBoLHAsZD1lLnQtMSxfPSEwLGY9aigpO2ZvcihuPXooZVtkXSktMTswPD1kOyl7Zm9yKGM8PW4/aD1lW2RdPj5uLWMmdTooaD0oZVtkXSYoMTw8bisxKS0xKTw8Yy1uLDA8ZCYmKGh8PWVbZC0xXT4+dGhpcy5EQituLWMpKSxhPW87MD09KDEmaCk7KWg+Pj0xLC0tYTtpZigobi09YSk8MCYmKG4rPXRoaXMuREIsLS1kKSxfKXNbaF0uY29weVRvKHIpLF89ITE7ZWxzZXtmb3IoOzE8YTspaS5zcXJUbyhyLGYpLGkuc3FyVG8oZixyKSxhLT0yOzA8YT9pLnNxclRvKHIsZik6KHA9cixyPWYsZj1wKSxpLm11bFRvKGYsc1toXSxyKX1mb3IoOzA8PWQmJjA9PShlW2RdJjE8PG4pOylpLnNxclRvKHIsZikscD1yLHI9ZixmPXAsLS1uPDAmJihuPXRoaXMuREItMSwtLWQpfXJldHVybiBpLnJldmVydChyKX0sUC5wcm90b3R5cGUubW9kSW52ZXJzZT1mdW5jdGlvbihlKXt2YXIgdD1lLmlzRXZlbigpO2lmKHRoaXMuaXNFdmVuKCkmJnR8fDA9PWUuc2lnbnVtKCkpcmV0dXJuIFAuWkVSTztmb3IodmFyIG49ZS5jbG9uZSgpLHI9dGhpcy5jbG9uZSgpLG89VigxKSxpPVYoMCkscz1WKDApLGE9VigxKTswIT1uLnNpZ251bSgpOyl7Zm9yKDtuLmlzRXZlbigpOyluLnJTaGlmdFRvKDEsbiksdD8oby5pc0V2ZW4oKSYmaS5pc0V2ZW4oKXx8KG8uYWRkVG8odGhpcyxvKSxpLnN1YlRvKGUsaSkpLG8uclNoaWZ0VG8oMSxvKSk6aS5pc0V2ZW4oKXx8aS5zdWJUbyhlLGkpLGkuclNoaWZ0VG8oMSxpKTtmb3IoO3IuaXNFdmVuKCk7KXIuclNoaWZ0VG8oMSxyKSx0PyhzLmlzRXZlbigpJiZhLmlzRXZlbigpfHwocy5hZGRUbyh0aGlzLHMpLGEuc3ViVG8oZSxhKSkscy5yU2hpZnRUbygxLHMpKTphLmlzRXZlbigpfHxhLnN1YlRvKGUsYSksYS5yU2hpZnRUbygxLGEpOzA8PW4uY29tcGFyZVRvKHIpPyhuLnN1YlRvKHIsbiksdCYmby5zdWJUbyhzLG8pLGkuc3ViVG8oYSxpKSk6KHIuc3ViVG8obixyKSx0JiZzLnN1YlRvKG8scyksYS5zdWJUbyhpLGEpKX1yZXR1cm4gMCE9ci5jb21wYXJlVG8oUC5PTkUpP1AuWkVSTzowPD1hLmNvbXBhcmVUbyhlKT9hLnN1YnRyYWN0KGUpOmEuc2lnbnVtKCk8MD8oYS5hZGRUbyhlLGEpLGEuc2lnbnVtKCk8MD9hLmFkZChlKTphKTphfSxQLnByb3RvdHlwZS5wb3c9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZXhwKGUsbmV3IFIpfSxQLnByb3RvdHlwZS5nY2Q9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5zPDA/dGhpcy5uZWdhdGUoKTp0aGlzLmNsb25lKCksbj1lLnM8MD9lLm5lZ2F0ZSgpOmUuY2xvbmUoKSxyPSh0LmNvbXBhcmVUbyhuKTwwJiYoZT10LHQ9bixuPWUpLHQuZ2V0TG93ZXN0U2V0Qml0KCkpO2lmKChlPW4uZ2V0TG93ZXN0U2V0Qml0KCkpPDApcmV0dXJuIHQ7Zm9yKDA8KGU9cjxlP3I6ZSkmJih0LnJTaGlmdFRvKGUsdCksbi5yU2hpZnRUbyhlLG4pKTswPHQuc2lnbnVtKCk7KTA8KHI9dC5nZXRMb3dlc3RTZXRCaXQoKSkmJnQuclNoaWZ0VG8ocix0KSwwPChyPW4uZ2V0TG93ZXN0U2V0Qml0KCkpJiZuLnJTaGlmdFRvKHIsbiksMDw9dC5jb21wYXJlVG8obik/KHQuc3ViVG8obix0KSx0LnJTaGlmdFRvKDEsdCkpOihuLnN1YlRvKHQsbiksbi5yU2hpZnRUbygxLG4pKTtyZXR1cm4gMDxlJiZuLmxTaGlmdFRvKGUsbiksbn0sUC5wcm90b3R5cGUuaXNQcm9iYWJsZVByaW1lPWZ1bmN0aW9uKGUpe3ZhciB0LG49dGhpcy5hYnMoKTtpZigxPT1uLnQmJm5bMF08PU9bTy5sZW5ndGgtMV0pe2Zvcih0PTA7dDxPLmxlbmd0aDsrK3QpaWYoblswXT09T1t0XSlyZXR1cm4hMDtyZXR1cm4hMX1pZihuLmlzRXZlbigpKXJldHVybiExO2Zvcih0PTE7dDxPLmxlbmd0aDspe2Zvcih2YXIgcj1PW3RdLG89dCsxO288Ty5sZW5ndGgmJnI8VDspcio9T1tvKytdO2ZvcihyPW4ubW9kSW50KHIpO3Q8bzspaWYociVPW3QrK109PTApcmV0dXJuITF9cmV0dXJuIG4ubWlsbGVyUmFiaW4oZSl9LFAucHJvdG90eXBlLmNvcHlUbz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy50LTE7MDw9dDstLXQpZVt0XT10aGlzW3RdO2UudD10aGlzLnQsZS5zPXRoaXMuc30sUC5wcm90b3R5cGUuZnJvbUludD1mdW5jdGlvbihlKXt0aGlzLnQ9MSx0aGlzLnM9ZTwwPy0xOjAsMDxlP3RoaXNbMF09ZTplPC0xP3RoaXNbMF09ZSt0aGlzLkRWOnRoaXMudD0wfSxQLnByb3RvdHlwZS5mcm9tU3RyaW5nPWZ1bmN0aW9uKGUsdCl7dmFyIG47aWYoMTY9PXQpbj00O2Vsc2UgaWYoOD09dCluPTM7ZWxzZSBpZigyNTY9PXQpbj04O2Vsc2UgaWYoMj09dCluPTE7ZWxzZSBpZigzMj09dCluPTU7ZWxzZXtpZig0IT10KXJldHVybiB2b2lkIHRoaXMuZnJvbVJhZGl4KGUsdCk7bj0yfXRoaXMudD0wLHRoaXMucz0wO2Zvcih2YXIgcj1lLmxlbmd0aCxvPSExLGk9MDswPD0tLXI7KXt2YXIgcz04PT1uPzI1NSYrZVtyXTpHKGUscik7czwwP1wiLVwiPT1lLmNoYXJBdChyKSYmKG89ITApOihvPSExLDA9PWk/dGhpc1t0aGlzLnQrK109czppK24+dGhpcy5EQj8odGhpc1t0aGlzLnQtMV18PShzJigxPDx0aGlzLkRCLWkpLTEpPDxpLHRoaXNbdGhpcy50KytdPXM+PnRoaXMuREItaSk6dGhpc1t0aGlzLnQtMV18PXM8PGksKGkrPW4pPj10aGlzLkRCJiYoaS09dGhpcy5EQikpfTg9PW4mJjAhPSgxMjgmK2VbMF0pJiYodGhpcy5zPS0xLDA8aSYmKHRoaXNbdGhpcy50LTFdfD0oMTw8dGhpcy5EQi1pKS0xPDxpKSksdGhpcy5jbGFtcCgpLG8mJlAuWkVSTy5zdWJUbyh0aGlzLHRoaXMpfSxQLnByb3RvdHlwZS5jbGFtcD1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLnMmdGhpcy5ETTswPHRoaXMudCYmdGhpc1t0aGlzLnQtMV09PWU7KS0tdGhpcy50fSxQLnByb3RvdHlwZS5kbFNoaWZ0VG89ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49dGhpcy50LTE7MDw9bjstLW4pdFtuK2VdPXRoaXNbbl07Zm9yKG49ZS0xOzA8PW47LS1uKXRbbl09MDt0LnQ9dGhpcy50K2UsdC5zPXRoaXMuc30sUC5wcm90b3R5cGUuZHJTaGlmdFRvPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPWU7bjx0aGlzLnQ7KytuKXRbbi1lXT10aGlzW25dO3QudD1NYXRoLm1heCh0aGlzLnQtZSwwKSx0LnM9dGhpcy5zfSxQLnByb3RvdHlwZS5sU2hpZnRUbz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1lJXRoaXMuREIscj10aGlzLkRCLW4sbz0oMTw8ciktMSxpPU1hdGguZmxvb3IoZS90aGlzLkRCKSxzPXRoaXMuczw8biZ0aGlzLkRNLGE9dGhpcy50LTE7MDw9YTstLWEpdFthK2krMV09dGhpc1thXT4+cnxzLHM9KHRoaXNbYV0mbyk8PG47Zm9yKGE9aS0xOzA8PWE7LS1hKXRbYV09MDt0W2ldPXMsdC50PXRoaXMudCtpKzEsdC5zPXRoaXMucyx0LmNsYW1wKCl9LFAucHJvdG90eXBlLnJTaGlmdFRvPWZ1bmN0aW9uKGUsdCl7dC5zPXRoaXMuczt2YXIgbj1NYXRoLmZsb29yKGUvdGhpcy5EQik7aWYobj49dGhpcy50KXQudD0wO2Vsc2V7dmFyIHI9ZSV0aGlzLkRCLG89dGhpcy5EQi1yLGk9KDE8PHIpLTE7dFswXT10aGlzW25dPj5yO2Zvcih2YXIgcz1uKzE7czx0aGlzLnQ7KytzKXRbcy1uLTFdfD0odGhpc1tzXSZpKTw8byx0W3Mtbl09dGhpc1tzXT4+cjswPHImJih0W3RoaXMudC1uLTFdfD0odGhpcy5zJmkpPDxvKSx0LnQ9dGhpcy50LW4sdC5jbGFtcCgpfX0sUC5wcm90b3R5cGUuc3ViVG89ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MCxyPTAsbz1NYXRoLm1pbihlLnQsdGhpcy50KTtuPG87KXIrPXRoaXNbbl0tZVtuXSx0W24rK109ciZ0aGlzLkRNLHI+Pj10aGlzLkRCO2lmKGUudDx0aGlzLnQpe2ZvcihyLT1lLnM7bjx0aGlzLnQ7KXIrPXRoaXNbbl0sdFtuKytdPXImdGhpcy5ETSxyPj49dGhpcy5EQjtyKz10aGlzLnN9ZWxzZXtmb3Iocis9dGhpcy5zO248ZS50OylyLT1lW25dLHRbbisrXT1yJnRoaXMuRE0scj4+PXRoaXMuREI7ci09ZS5zfXQucz1yPDA/LTE6MCxyPC0xP3RbbisrXT10aGlzLkRWK3I6MDxyJiYodFtuKytdPXIpLHQudD1uLHQuY2xhbXAoKX0sUC5wcm90b3R5cGUubXVsdGlwbHlUbz1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuYWJzKCkscj1lLmFicygpLG89bi50O2Zvcih0LnQ9bytyLnQ7MDw9LS1vOyl0W29dPTA7Zm9yKG89MDtvPHIudDsrK28pdFtvK24udF09bi5hbSgwLHJbb10sdCxvLDAsbi50KTt0LnM9MCx0LmNsYW1wKCksdGhpcy5zIT1lLnMmJlAuWkVSTy5zdWJUbyh0LHQpfSxQLnByb3RvdHlwZS5zcXVhcmVUbz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy5hYnMoKSxuPWUudD0yKnQudDswPD0tLW47KWVbbl09MDtmb3Iobj0wO248dC50LTE7KytuKXt2YXIgcj10LmFtKG4sdFtuXSxlLDIqbiwwLDEpOyhlW24rdC50XSs9dC5hbShuKzEsMip0W25dLGUsMipuKzEscix0LnQtbi0xKSk+PXQuRFYmJihlW24rdC50XS09dC5EVixlW24rdC50KzFdPTEpfTA8ZS50JiYoZVtlLnQtMV0rPXQuYW0obix0W25dLGUsMipuLDAsMSkpLGUucz0wLGUuY2xhbXAoKX0sUC5wcm90b3R5cGUuZGl2UmVtVG89ZnVuY3Rpb24oZSx0LG4pe2lmKCEoKHU9ZS5hYnMoKSkudDw9MCkpe3ZhciByPXRoaXMuYWJzKCk7aWYoci50PHUudClyZXR1cm4gbnVsbCE9dCYmdC5mcm9tSW50KDApLHZvaWQobnVsbCE9biYmdGhpcy5jb3B5VG8obikpO251bGw9PW4mJihuPWooKSk7dmFyIG89aigpLGk9dGhpcy5zLHM9KGU9ZS5zLHRoaXMuREIteih1W3UudC0xXSkpLGE9KDA8cz8odS5sU2hpZnRUbyhzLG8pLHIubFNoaWZ0VG8ocyxuKSk6KHUuY29weVRvKG8pLHIuY29weVRvKG4pKSxvLnQpLGM9b1thLTFdO2lmKDAhPWMpe3ZhciB1PWMqKDE8PHRoaXMuRjEpKygxPGE/b1thLTJdPj50aGlzLkYyOjApLGw9dGhpcy5GVi91LGg9KDE8PHRoaXMuRjEpL3UscD0xPDx0aGlzLkYyLGQ9bi50LF89ZC1hLGY9bnVsbD09dD9qKCk6dDtmb3Ioby5kbFNoaWZ0VG8oXyxmKSwwPD1uLmNvbXBhcmVUbyhmKSYmKG5bbi50KytdPTEsbi5zdWJUbyhmLG4pKSxQLk9ORS5kbFNoaWZ0VG8oYSxmKSxmLnN1YlRvKG8sbyk7by50PGE7KW9bby50KytdPTA7Zm9yKDswPD0tLV87KXt2YXIgZz1uWy0tZF09PWM/dGhpcy5ETTpNYXRoLmZsb29yKG5bZF0qbCsobltkLTFdK3ApKmgpO2lmKChuW2RdKz1vLmFtKDAsZyxuLF8sMCxhKSk8Zylmb3Ioby5kbFNoaWZ0VG8oXyxmKSxuLnN1YlRvKGYsbik7bltkXTwtLWc7KW4uc3ViVG8oZixuKX1udWxsIT10JiYobi5kclNoaWZ0VG8oYSx0KSxpIT1lJiZQLlpFUk8uc3ViVG8odCx0KSksbi50PWEsbi5jbGFtcCgpLDA8cyYmbi5yU2hpZnRUbyhzLG4pLGk8MCYmUC5aRVJPLnN1YlRvKG4sbil9fX0sUC5wcm90b3R5cGUuaW52RGlnaXQ9ZnVuY3Rpb24oKXtpZih0aGlzLnQ8MSlyZXR1cm4gMDt2YXIgZT10aGlzWzBdO2lmKDA9PSgxJmUpKXJldHVybiAwO3ZhciB0PTMmZTtyZXR1cm4gMDwodD0odD0odD0odD10KigyLSgxNSZlKSp0KSYxNSkqKDItKDI1NSZlKSp0KSYyNTUpKigyLSgoNjU1MzUmZSkqdCY2NTUzNSkpJjY1NTM1KSooMi1lKnQldGhpcy5EVikldGhpcy5EVik/dGhpcy5EVi10Oi10fSxQLnByb3RvdHlwZS5pc0V2ZW49ZnVuY3Rpb24oKXtyZXR1cm4gMD09KDA8dGhpcy50PzEmdGhpc1swXTp0aGlzLnMpfSxQLnByb3RvdHlwZS5leHA9ZnVuY3Rpb24oZSx0KXtpZig0Mjk0OTY3Mjk1PGV8fGU8MSlyZXR1cm4gUC5PTkU7dmFyIG4scj1qKCksbz1qKCksaT10LmNvbnZlcnQodGhpcykscz16KGUpLTE7Zm9yKGkuY29weVRvKHIpOzA8PS0tczspdC5zcXJUbyhyLG8pLDA8KGUmMTw8cyk/dC5tdWxUbyhvLGkscik6KG49cixyPW8sbz1uKTtyZXR1cm4gdC5yZXZlcnQocil9LFAucHJvdG90eXBlLmNodW5rU2l6ZT1mdW5jdGlvbihlKXtyZXR1cm4gTWF0aC5mbG9vcihNYXRoLkxOMip0aGlzLkRCL01hdGgubG9nKGUpKX0sUC5wcm90b3R5cGUudG9SYWRpeD1mdW5jdGlvbihlKXtpZihudWxsPT1lJiYoZT0xMCksMD09dGhpcy5zaWdudW0oKXx8ZTwyfHwzNjxlKXJldHVyblwiMFwiO3ZhciB0PXRoaXMuY2h1bmtTaXplKGUpLG49TWF0aC5wb3coZSx0KSxyPVYobiksbz1qKCksaT1qKCkscz1cIlwiO2Zvcih0aGlzLmRpdlJlbVRvKHIsbyxpKTswPG8uc2lnbnVtKCk7KXM9KG4raS5pbnRWYWx1ZSgpKS50b1N0cmluZyhlKS5zdWJzdHIoMSkrcyxvLmRpdlJlbVRvKHIsbyxpKTtyZXR1cm4gaS5pbnRWYWx1ZSgpLnRvU3RyaW5nKGUpK3N9LFAucHJvdG90eXBlLmZyb21SYWRpeD1mdW5jdGlvbihlLHQpe3RoaXMuZnJvbUludCgwKTtmb3IodmFyIG49dGhpcy5jaHVua1NpemUodD1udWxsPT10PzEwOnQpLHI9TWF0aC5wb3codCxuKSxvPSExLGk9MCxzPTAsYT0wO2E8ZS5sZW5ndGg7KythKXt2YXIgYz1HKGUsYSk7YzwwP1wiLVwiPT1lLmNoYXJBdChhKSYmMD09dGhpcy5zaWdudW0oKSYmKG89ITApOihzPXQqcytjLCsraT49biYmKHRoaXMuZE11bHRpcGx5KHIpLHRoaXMuZEFkZE9mZnNldChzLDApLHM9aT0wKSl9MDxpJiYodGhpcy5kTXVsdGlwbHkoTWF0aC5wb3codCxpKSksdGhpcy5kQWRkT2Zmc2V0KHMsMCkpLG8mJlAuWkVSTy5zdWJUbyh0aGlzLHRoaXMpfSxQLnByb3RvdHlwZS5mcm9tTnVtYmVyPWZ1bmN0aW9uKGUsdCxuKXtpZihcIm51bWJlclwiPT10eXBlb2YgdClpZihlPDIpdGhpcy5mcm9tSW50KDEpO2Vsc2UgZm9yKHRoaXMuZnJvbU51bWJlcihlLG4pLHRoaXMudGVzdEJpdChlLTEpfHx0aGlzLmJpdHdpc2VUbyhQLk9ORS5zaGlmdExlZnQoZS0xKSxpLHRoaXMpLHRoaXMuaXNFdmVuKCkmJnRoaXMuZEFkZE9mZnNldCgxLDApOyF0aGlzLmlzUHJvYmFibGVQcmltZSh0KTspdGhpcy5kQWRkT2Zmc2V0KDIsMCksdGhpcy5iaXRMZW5ndGgoKT5lJiZ0aGlzLnN1YlRvKFAuT05FLnNoaWZ0TGVmdChlLTEpLHRoaXMpO2Vsc2V7dmFyIHI9NyZlOyhuPVtdKS5sZW5ndGg9MSsoZT4+MyksdC5uZXh0Qnl0ZXMobiksMDxyP25bMF0mPSgxPDxyKS0xOm5bMF09MCx0aGlzLmZyb21TdHJpbmcobiwyNTYpfX0sUC5wcm90b3R5cGUuYml0d2lzZVRvPWZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHIsbz1NYXRoLm1pbihlLnQsdGhpcy50KSxpPTA7aTxvOysraSluW2ldPXQodGhpc1tpXSxlW2ldKTtpZihlLnQ8dGhpcy50KXtmb3Iocj1lLnMmdGhpcy5ETSxpPW87aTx0aGlzLnQ7KytpKW5baV09dCh0aGlzW2ldLHIpO24udD10aGlzLnR9ZWxzZXtmb3Iocj10aGlzLnMmdGhpcy5ETSxpPW87aTxlLnQ7KytpKW5baV09dChyLGVbaV0pO24udD1lLnR9bi5zPXQodGhpcy5zLGUucyksbi5jbGFtcCgpfSxQLnByb3RvdHlwZS5jaGFuZ2VCaXQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1QLk9ORS5zaGlmdExlZnQoZSksdGhpcy5iaXR3aXNlVG8oZSx0LGUpLGV9LFAucHJvdG90eXBlLmFkZFRvPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTAscj0wLG89TWF0aC5taW4oZS50LHRoaXMudCk7bjxvOylyKz10aGlzW25dK2Vbbl0sdFtuKytdPXImdGhpcy5ETSxyPj49dGhpcy5EQjtpZihlLnQ8dGhpcy50KXtmb3Iocis9ZS5zO248dGhpcy50OylyKz10aGlzW25dLHRbbisrXT1yJnRoaXMuRE0scj4+PXRoaXMuREI7cis9dGhpcy5zfWVsc2V7Zm9yKHIrPXRoaXMucztuPGUudDspcis9ZVtuXSx0W24rK109ciZ0aGlzLkRNLHI+Pj10aGlzLkRCO3IrPWUuc310LnM9cjwwPy0xOjAsMDxyP3RbbisrXT1yOnI8LTEmJih0W24rK109dGhpcy5EVityKSx0LnQ9bix0LmNsYW1wKCl9LFAucHJvdG90eXBlLmRNdWx0aXBseT1mdW5jdGlvbihlKXt0aGlzW3RoaXMudF09dGhpcy5hbSgwLGUtMSx0aGlzLDAsMCx0aGlzLnQpLCsrdGhpcy50LHRoaXMuY2xhbXAoKX0sUC5wcm90b3R5cGUuZEFkZE9mZnNldD1mdW5jdGlvbihlLHQpe2lmKDAhPWUpe2Zvcig7dGhpcy50PD10Oyl0aGlzW3RoaXMudCsrXT0wO2Zvcih0aGlzW3RdKz1lO3RoaXNbdF0+PXRoaXMuRFY7KXRoaXNbdF0tPXRoaXMuRFYsKyt0Pj10aGlzLnQmJih0aGlzW3RoaXMudCsrXT0wKSwrK3RoaXNbdF19fSxQLnByb3RvdHlwZS5tdWx0aXBseUxvd2VyVG89ZnVuY3Rpb24oZSx0LG4pe3ZhciByPU1hdGgubWluKHRoaXMudCtlLnQsdCk7Zm9yKG4ucz0wLG4udD1yOzA8cjspblstLXJdPTA7Zm9yKHZhciBvPW4udC10aGlzLnQ7cjxvOysrciluW3IrdGhpcy50XT10aGlzLmFtKDAsZVtyXSxuLHIsMCx0aGlzLnQpO2ZvcihvPU1hdGgubWluKGUudCx0KTtyPG87KytyKXRoaXMuYW0oMCxlW3JdLG4sciwwLHQtcik7bi5jbGFtcCgpfSxQLnByb3RvdHlwZS5tdWx0aXBseVVwcGVyVG89ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4udD10aGlzLnQrZS50LSAtLXQ7Zm9yKG4ucz0wOzA8PS0tcjspbltyXT0wO2ZvcihyPU1hdGgubWF4KHQtdGhpcy50LDApO3I8ZS50OysrciluW3RoaXMudCtyLXRdPXRoaXMuYW0odC1yLGVbcl0sbiwwLDAsdGhpcy50K3ItdCk7bi5jbGFtcCgpLG4uZHJTaGlmdFRvKDEsbil9LFAucHJvdG90eXBlLm1vZEludD1mdW5jdGlvbihlKXtpZihlPD0wKXJldHVybiAwO3ZhciB0PXRoaXMuRFYlZSxuPXRoaXMuczwwP2UtMTowO2lmKDA8dGhpcy50KWlmKDA9PXQpbj10aGlzWzBdJWU7ZWxzZSBmb3IodmFyIHI9dGhpcy50LTE7MDw9cjstLXIpbj0odCpuK3RoaXNbcl0pJWU7cmV0dXJuIG59LFAucHJvdG90eXBlLm1pbGxlclJhYmluPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuc3VidHJhY3QoUC5PTkUpLG49dC5nZXRMb3dlc3RTZXRCaXQoKTtpZihuPD0wKXJldHVybiExO3ZhciByPXQuc2hpZnRSaWdodChuKTsoZT1lKzE+PjEpPk8ubGVuZ3RoJiYoZT1PLmxlbmd0aCk7Zm9yKHZhciBvPWooKSxpPTA7aTxlOysraSl7by5mcm9tSW50KE9bTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKk8ubGVuZ3RoKV0pO3ZhciBzPW8ubW9kUG93KHIsdGhpcyk7aWYoMCE9cy5jb21wYXJlVG8oUC5PTkUpJiYwIT1zLmNvbXBhcmVUbyh0KSl7Zm9yKHZhciBhPTE7YSsrPG4mJjAhPXMuY29tcGFyZVRvKHQpOylpZigwPT0ocz1zLm1vZFBvd0ludCgyLHRoaXMpKS5jb21wYXJlVG8oUC5PTkUpKXJldHVybiExO2lmKDAhPXMuY29tcGFyZVRvKHQpKXJldHVybiExfX1yZXR1cm4hMH0sUC5wcm90b3R5cGUuc3F1YXJlPWZ1bmN0aW9uKCl7dmFyIGU9aigpO3JldHVybiB0aGlzLnNxdWFyZVRvKGUpLGV9LFAucHJvdG90eXBlLmdjZGE9ZnVuY3Rpb24oZSx0KXt2YXIgbixyPXRoaXMuczwwP3RoaXMubmVnYXRlKCk6dGhpcy5jbG9uZSgpLG89ZS5zPDA/ZS5uZWdhdGUoKTplLmNsb25lKCksaT0oci5jb21wYXJlVG8obyk8MCYmKGU9cixyPW8sbz1lKSxyLmdldExvd2VzdFNldEJpdCgpKSxzPW8uZ2V0TG93ZXN0U2V0Qml0KCk7czwwP3Qocik6KDA8KHM9aTxzP2k6cykmJihyLnJTaGlmdFRvKHMsciksby5yU2hpZnRUbyhzLG8pKSxuPWZ1bmN0aW9uKCl7MDwoaT1yLmdldExvd2VzdFNldEJpdCgpKSYmci5yU2hpZnRUbyhpLHIpLDA8KGk9by5nZXRMb3dlc3RTZXRCaXQoKSkmJm8uclNoaWZ0VG8oaSxvKSwwPD1yLmNvbXBhcmVUbyhvKT8oci5zdWJUbyhvLHIpLHIuclNoaWZ0VG8oMSxyKSk6KG8uc3ViVG8ocixvKSxvLnJTaGlmdFRvKDEsbykpLDA8ci5zaWdudW0oKT9zZXRUaW1lb3V0KG4sMCk6KDA8cyYmby5sU2hpZnRUbyhzLG8pLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dChvKX0pLDApKX0sc2V0VGltZW91dChuLDEwKSl9LFAucHJvdG90eXBlLmZyb21OdW1iZXJBc3luYz1mdW5jdGlvbihlLHQsbixyKXt2YXIgbyxzLGE7XCJudW1iZXJcIj09dHlwZW9mIHQ/ZTwyP3RoaXMuZnJvbUludCgxKToodGhpcy5mcm9tTnVtYmVyKGUsbiksdGhpcy50ZXN0Qml0KGUtMSl8fHRoaXMuYml0d2lzZVRvKFAuT05FLnNoaWZ0TGVmdChlLTEpLGksdGhpcyksdGhpcy5pc0V2ZW4oKSYmdGhpcy5kQWRkT2Zmc2V0KDEsMCksbz10aGlzLHM9ZnVuY3Rpb24oKXtvLmRBZGRPZmZzZXQoMiwwKSxvLmJpdExlbmd0aCgpPmUmJm8uc3ViVG8oUC5PTkUuc2hpZnRMZWZ0KGUtMSksbyksby5pc1Byb2JhYmxlUHJpbWUodCk/c2V0VGltZW91dCgoZnVuY3Rpb24oKXtyKCl9KSwwKTpzZXRUaW1lb3V0KHMsMCl9LHNldFRpbWVvdXQocywwKSk6KG49NyZlLChhPVtdKS5sZW5ndGg9MSsoZT4+MyksdC5uZXh0Qnl0ZXMoYSksMDxuP2FbMF0mPSgxPDxuKS0xOmFbMF09MCx0aGlzLmZyb21TdHJpbmcoYSwyNTYpKX0sUCksUj0oTC5wcm90b3R5cGUuY29udmVydD1mdW5jdGlvbihlKXtyZXR1cm4gZX0sTC5wcm90b3R5cGUucmV2ZXJ0PWZ1bmN0aW9uKGUpe3JldHVybiBlfSxMLnByb3RvdHlwZS5tdWxUbz1mdW5jdGlvbihlLHQsbil7ZS5tdWx0aXBseVRvKHQsbil9LEwucHJvdG90eXBlLnNxclRvPWZ1bmN0aW9uKGUsdCl7ZS5zcXVhcmVUbyh0KX0sTCksaz0oTS5wcm90b3R5cGUuY29udmVydD1mdW5jdGlvbihlKXtyZXR1cm4gZS5zPDB8fDA8PWUuY29tcGFyZVRvKHRoaXMubSk/ZS5tb2QodGhpcy5tKTplfSxNLnByb3RvdHlwZS5yZXZlcnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LE0ucHJvdG90eXBlLnJlZHVjZT1mdW5jdGlvbihlKXtlLmRpdlJlbVRvKHRoaXMubSxudWxsLGUpfSxNLnByb3RvdHlwZS5tdWxUbz1mdW5jdGlvbihlLHQsbil7ZS5tdWx0aXBseVRvKHQsbiksdGhpcy5yZWR1Y2Uobil9LE0ucHJvdG90eXBlLnNxclRvPWZ1bmN0aW9uKGUsdCl7ZS5zcXVhcmVUbyh0KSx0aGlzLnJlZHVjZSh0KX0sTSksQz0oSS5wcm90b3R5cGUuY29udmVydD1mdW5jdGlvbihlKXt2YXIgdD1qKCk7cmV0dXJuIGUuYWJzKCkuZGxTaGlmdFRvKHRoaXMubS50LHQpLHQuZGl2UmVtVG8odGhpcy5tLG51bGwsdCksZS5zPDAmJjA8dC5jb21wYXJlVG8oUy5aRVJPKSYmdGhpcy5tLnN1YlRvKHQsdCksdH0sSS5wcm90b3R5cGUucmV2ZXJ0PWZ1bmN0aW9uKGUpe3ZhciB0PWooKTtyZXR1cm4gZS5jb3B5VG8odCksdGhpcy5yZWR1Y2UodCksdH0sSS5wcm90b3R5cGUucmVkdWNlPWZ1bmN0aW9uKGUpe2Zvcig7ZS50PD10aGlzLm10MjspZVtlLnQrK109MDtmb3IodmFyIHQ9MDt0PHRoaXMubS50OysrdCl7dmFyIG49MzI3NjcmZVt0XSxyPW4qdGhpcy5tcGwrKChuKnRoaXMubXBoKyhlW3RdPj4xNSkqdGhpcy5tcGwmdGhpcy51bSk8PDE1KSZlLkRNO2ZvcihlW249dCt0aGlzLm0udF0rPXRoaXMubS5hbSgwLHIsZSx0LDAsdGhpcy5tLnQpO2Vbbl0+PWUuRFY7KWVbbl0tPWUuRFYsZVsrK25dKyt9ZS5jbGFtcCgpLGUuZHJTaGlmdFRvKHRoaXMubS50LGUpLDA8PWUuY29tcGFyZVRvKHRoaXMubSkmJmUuc3ViVG8odGhpcy5tLGUpfSxJLnByb3RvdHlwZS5tdWxUbz1mdW5jdGlvbihlLHQsbil7ZS5tdWx0aXBseVRvKHQsbiksdGhpcy5yZWR1Y2Uobil9LEkucHJvdG90eXBlLnNxclRvPWZ1bmN0aW9uKGUsdCl7ZS5zcXVhcmVUbyh0KSx0aGlzLnJlZHVjZSh0KX0sSSksdz0oTi5wcm90b3R5cGUuY29udmVydD1mdW5jdGlvbihlKXtpZihlLnM8MHx8ZS50PjIqdGhpcy5tLnQpcmV0dXJuIGUubW9kKHRoaXMubSk7aWYoZS5jb21wYXJlVG8odGhpcy5tKTwwKXJldHVybiBlO3ZhciB0PWooKTtyZXR1cm4gZS5jb3B5VG8odCksdGhpcy5yZWR1Y2UodCksdH0sTi5wcm90b3R5cGUucmV2ZXJ0PWZ1bmN0aW9uKGUpe3JldHVybiBlfSxOLnByb3RvdHlwZS5yZWR1Y2U9ZnVuY3Rpb24oZSl7Zm9yKGUuZHJTaGlmdFRvKHRoaXMubS50LTEsdGhpcy5yMiksZS50PnRoaXMubS50KzEmJihlLnQ9dGhpcy5tLnQrMSxlLmNsYW1wKCkpLHRoaXMubXUubXVsdGlwbHlVcHBlclRvKHRoaXMucjIsdGhpcy5tLnQrMSx0aGlzLnEzKSx0aGlzLm0ubXVsdGlwbHlMb3dlclRvKHRoaXMucTMsdGhpcy5tLnQrMSx0aGlzLnIyKTtlLmNvbXBhcmVUbyh0aGlzLnIyKTwwOyllLmRBZGRPZmZzZXQoMSx0aGlzLm0udCsxKTtmb3IoZS5zdWJUbyh0aGlzLnIyLGUpOzA8PWUuY29tcGFyZVRvKHRoaXMubSk7KWUuc3ViVG8odGhpcy5tLGUpfSxOLnByb3RvdHlwZS5tdWxUbz1mdW5jdGlvbihlLHQsbil7ZS5tdWx0aXBseVRvKHQsbiksdGhpcy5yZWR1Y2Uobil9LE4ucHJvdG90eXBlLnNxclRvPWZ1bmN0aW9uKGUsdCl7ZS5zcXVhcmVUbyh0KSx0aGlzLnJlZHVjZSh0KX0sTik7ZnVuY3Rpb24gTihlKXt0aGlzLm09ZSx0aGlzLnIyPWooKSx0aGlzLnEzPWooKSxTLk9ORS5kbFNoaWZ0VG8oMiplLnQsdGhpcy5yMiksdGhpcy5tdT10aGlzLnIyLmRpdmlkZShlKX1mdW5jdGlvbiBJKGUpe3RoaXMubT1lLHRoaXMubXA9ZS5pbnZEaWdpdCgpLHRoaXMubXBsPTMyNzY3JnRoaXMubXAsdGhpcy5tcGg9dGhpcy5tcD4+MTUsdGhpcy51bT0oMTw8ZS5EQi0xNSktMSx0aGlzLm10Mj0yKmUudH1mdW5jdGlvbiBNKGUpe3RoaXMubT1lfWZ1bmN0aW9uIEwoKXt9ZnVuY3Rpb24gUChlLHQsbil7bnVsbCE9ZSYmKFwibnVtYmVyXCI9PXR5cGVvZiBlP3RoaXMuZnJvbU51bWJlcihlLHQsbik6bnVsbD09dCYmXCJzdHJpbmdcIiE9dHlwZW9mIGU/dGhpcy5mcm9tU3RyaW5nKGUsMjU2KTp0aGlzLmZyb21TdHJpbmcoZSx0KSl9ZnVuY3Rpb24gQShlKXt2YXIgdD1lLmdldCgpO2lmKHRoaXMudGFnQ2xhc3M9dD4+Nix0aGlzLnRhZ0NvbnN0cnVjdGVkPTAhPSgzMiZ0KSx0aGlzLnRhZ051bWJlcj0zMSZ0LDMxPT10aGlzLnRhZ051bWJlcil7Zm9yKHZhciBuPW5ldyBfO3Q9ZS5nZXQoKSxuLm11bEFkZCgxMjgsMTI3JnQpLDEyOCZ0Oyk7dGhpcy50YWdOdW1iZXI9bi5zaW1wbGlmeSgpfX1mdW5jdGlvbiBEKGUsdCxuLHIsbyl7aWYoIShyIGluc3RhbmNlb2YgRSkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB0YWcgdmFsdWUuXCIpO3RoaXMuc3RyZWFtPWUsdGhpcy5oZWFkZXI9dCx0aGlzLmxlbmd0aD1uLHRoaXMudGFnPXIsdGhpcy5zdWI9b31mdW5jdGlvbiBIKGUsdCl7dGhpcy5oZXhEaWdpdHM9XCIwMTIzNDU2Nzg5QUJDREVGXCIsZSBpbnN0YW5jZW9mIEg/KHRoaXMuZW5jPWUuZW5jLHRoaXMucG9zPWUucG9zKToodGhpcy5lbmM9ZSx0aGlzLnBvcz10KX1mdW5jdGlvbiBqKCl7cmV0dXJuIG5ldyBTKG51bGwpfWZ1bmN0aW9uIHEoZSx0KXtyZXR1cm4gbmV3IFMoZSx0KX10PShuPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3IpJiZcIk1pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlclwiPT1uYXZpZ2F0b3IuYXBwTmFtZT8oUy5wcm90b3R5cGUuYW09ZnVuY3Rpb24oZSx0LG4scixvLGkpe2Zvcih2YXIgcz0zMjc2NyZ0LGE9dD4+MTU7MDw9LS1pOyl7dmFyIGM9MzI3NjcmdGhpc1tlXSx1PXRoaXNbZSsrXT4+MTUsbD1hKmMrdSpzO289KChjPXMqYysoKDMyNzY3JmwpPDwxNSkrbltyXSsoMTA3Mzc0MTgyMyZvKSk+Pj4zMCkrKGw+Pj4xNSkrYSp1KyhvPj4+MzApLG5bcisrXT0xMDczNzQxODIzJmN9cmV0dXJuIG99LDMwKTpuJiZcIk5ldHNjYXBlXCIhPW5hdmlnYXRvci5hcHBOYW1lPyhTLnByb3RvdHlwZS5hbT1mdW5jdGlvbihlLHQsbixyLG8saSl7Zm9yKDswPD0tLWk7KXt2YXIgcz10KnRoaXNbZSsrXStuW3JdK287bz1NYXRoLmZsb29yKHMvNjcxMDg4NjQpLG5bcisrXT02NzEwODg2MyZzfXJldHVybiBvfSwyNik6KFMucHJvdG90eXBlLmFtPWZ1bmN0aW9uKGUsdCxuLHIsbyxpKXtmb3IodmFyIHM9MTYzODMmdCxhPXQ+PjE0OzA8PS0taTspe3ZhciBjPTE2MzgzJnRoaXNbZV0sdT10aGlzW2UrK10+PjE0LGw9YSpjK3UqcztvPSgoYz1zKmMrKCgxNjM4MyZsKTw8MTQpK25bcl0rbyk+PjI4KSsobD4+MTQpK2EqdSxuW3IrK109MjY4NDM1NDU1JmN9cmV0dXJuIG99LDI4KSxTLnByb3RvdHlwZS5EQj10LFMucHJvdG90eXBlLkRNPSgxPDx0KS0xLFMucHJvdG90eXBlLkRWPTE8PHQsUy5wcm90b3R5cGUuRlY9TWF0aC5wb3coMiw1MiksUy5wcm90b3R5cGUuRjE9NTItdCxTLnByb3RvdHlwZS5GMj0yKnQtNTI7Zm9yKHZhciBVPVtdLEI9XCIwXCIuY2hhckNvZGVBdCgwKSx4PTA7eDw9OTsrK3gpVVtCKytdPXg7Zm9yKEI9XCJhXCIuY2hhckNvZGVBdCgwKSx4PTEwO3g8MzY7Kyt4KVVbQisrXT14O2ZvcihCPVwiQVwiLmNoYXJDb2RlQXQoMCkseD0xMDt4PDM2OysreClVW0IrK109eDtmdW5jdGlvbiBHKGUsdCl7cmV0dXJuIG51bGw9PShlPVVbZS5jaGFyQ29kZUF0KHQpXSk/LTE6ZX1mdW5jdGlvbiBWKGUpe3ZhciB0PWooKTtyZXR1cm4gdC5mcm9tSW50KGUpLHR9ZnVuY3Rpb24geihlKXt2YXIgdCxuPTE7cmV0dXJuIDAhPSh0PWU+Pj4xNikmJihlPXQsbis9MTYpLDAhPSh0PWU+PjgpJiYoZT10LG4rPTgpLDAhPSh0PWU+PjQpJiYoZT10LG4rPTQpLDAhPSh0PWU+PjIpJiYoZT10LG4rPTIpLDAhPSh0PWU+PjEpJiYoZT10LG4rPTEpLG59Uy5aRVJPPVYoMCksUy5PTkU9VigxKSxZLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuLHI9MDtyPDI1NjsrK3IpdGhpcy5TW3JdPXI7Zm9yKHI9dD0wO3I8MjU2Oysrcil0PXQrdGhpcy5TW3JdK2VbciVlLmxlbmd0aF0mMjU1LG49dGhpcy5TW3JdLHRoaXMuU1tyXT10aGlzLlNbdF0sdGhpcy5TW3RdPW47dGhpcy5pPTAsdGhpcy5qPTB9LFkucHJvdG90eXBlLm5leHQ9ZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4gdGhpcy5pPXRoaXMuaSsxJjI1NSx0aGlzLmo9dGhpcy5qK3RoaXMuU1t0aGlzLmldJjI1NSxlPXRoaXMuU1t0aGlzLmldLHRoaXMuU1t0aGlzLmldPXRoaXMuU1t0aGlzLmpdLHRoaXMuU1t0aGlzLmpdPWUsdGhpcy5TW2UrdGhpcy5TW3RoaXMuaV0mMjU1XX07dmFyIEYsVz1ZLFo9bnVsbDtmdW5jdGlvbiBZKCl7dGhpcy5pPTAsdGhpcy5qPTAsdGhpcy5TPVtdfVo9W107dmFyIEs9MCxYPXZvaWQgMDtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuY3J5cHRvJiZ3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyl7dmFyIEo9bmV3IFVpbnQzMkFycmF5KDI1Nik7Zm9yKHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKEopLFg9MDtYPEoubGVuZ3RoOysrWClaW0srK109MjU1JkpbWF19dGUucHJvdG90eXBlLm5leHRCeXRlcz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoOysrdCllW3RdPWZ1bmN0aW9uKCl7aWYobnVsbD09Ril7Zm9yKEY9bmV3IFc7SzwyNTY7KXt2YXIgZT1NYXRoLmZsb29yKDY1NTM2Kk1hdGgucmFuZG9tKCkpO1pbSysrXT0yNTUmZX1mb3IoRi5pbml0KFopLEs9MDtLPFoubGVuZ3RoOysrSylaW0tdPTA7Sz0wfXJldHVybiBGLm5leHQoKX0oKX07dmFyIFE9dGUsJD0obj0oZWUucHJvdG90eXBlLmRvUHVibGljPWZ1bmN0aW9uKGUpe3JldHVybiBlLm1vZFBvd0ludCh0aGlzLmUsdGhpcy5uKX0sZWUucHJvdG90eXBlLmRvUHJpdmF0ZT1mdW5jdGlvbihlKXtpZihudWxsPT10aGlzLnB8fG51bGw9PXRoaXMucSlyZXR1cm4gZS5tb2RQb3codGhpcy5kLHRoaXMubik7Zm9yKHZhciB0PWUubW9kKHRoaXMucCkubW9kUG93KHRoaXMuZG1wMSx0aGlzLnApLG49ZS5tb2QodGhpcy5xKS5tb2RQb3codGhpcy5kbXExLHRoaXMucSk7dC5jb21wYXJlVG8obik8MDspdD10LmFkZCh0aGlzLnApO3JldHVybiB0LnN1YnRyYWN0KG4pLm11bHRpcGx5KHRoaXMuY29lZmYpLm1vZCh0aGlzLnApLm11bHRpcGx5KHRoaXMucSkuYWRkKG4pfSxlZS5wcm90b3R5cGUuc2V0UHVibGljPWZ1bmN0aW9uKGUsdCl7bnVsbCE9ZSYmbnVsbCE9dCYmMDxlLmxlbmd0aCYmMDx0Lmxlbmd0aD8odGhpcy5uPXEoZSwxNiksdGhpcy5lPXBhcnNlSW50KHQsMTYpKTpjb25zb2xlLmVycm9yKFwiSW52YWxpZCBSU0EgcHVibGljIGtleVwiKX0sZWUucHJvdG90eXBlLmVuY3J5cHQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5uLmJpdExlbmd0aCgpKzc+PjM7ZT1mdW5jdGlvbihlLHQpe2lmKHQ8ZS5sZW5ndGgrMTEpcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJNZXNzYWdlIHRvbyBsb25nIGZvciBSU0FcIiksbnVsbDtmb3IodmFyIG49W10scj1lLmxlbmd0aC0xOzA8PXImJjA8dDspe3ZhciBvPWUuY2hhckNvZGVBdChyLS0pO288MTI4P25bLS10XT1vOjEyNzxvJiZvPDIwNDg/KG5bLS10XT02MyZvfDEyOCxuWy0tdF09bz4+NnwxOTIpOihuWy0tdF09NjMmb3wxMjgsblstLXRdPW8+PjYmNjN8MTI4LG5bLS10XT1vPj4xMnwyMjQpfW5bLS10XT0wO2Zvcih2YXIgaT1uZXcgUSxzPVtdOzI8dDspe2ZvcihzWzBdPTA7MD09c1swXTspaS5uZXh0Qnl0ZXMocyk7blstLXRdPXNbMF19cmV0dXJuIG5bLS10XT0yLG5bLS10XT0wLG5ldyBTKG4pfShlLHQpO2lmKG51bGw9PWUpcmV0dXJuIG51bGw7aWYobnVsbD09KGU9dGhpcy5kb1B1YmxpYyhlKSkpcmV0dXJuIG51bGw7Zm9yKHZhciBuPWUudG9TdHJpbmcoMTYpLHI9bi5sZW5ndGgsbz0wO288Mip0LXI7bysrKW49XCIwXCIrbjtyZXR1cm4gbn0sZWUucHJvdG90eXBlLnNldFByaXZhdGU9ZnVuY3Rpb24oZSx0LG4pe251bGwhPWUmJm51bGwhPXQmJjA8ZS5sZW5ndGgmJjA8dC5sZW5ndGg/KHRoaXMubj1xKGUsMTYpLHRoaXMuZT1wYXJzZUludCh0LDE2KSx0aGlzLmQ9cShuLDE2KSk6Y29uc29sZS5lcnJvcihcIkludmFsaWQgUlNBIHByaXZhdGUga2V5XCIpfSxlZS5wcm90b3R5cGUuc2V0UHJpdmF0ZUV4PWZ1bmN0aW9uKGUsdCxuLHIsbyxpLHMsYSl7bnVsbCE9ZSYmbnVsbCE9dCYmMDxlLmxlbmd0aCYmMDx0Lmxlbmd0aD8odGhpcy5uPXEoZSwxNiksdGhpcy5lPXBhcnNlSW50KHQsMTYpLHRoaXMuZD1xKG4sMTYpLHRoaXMucD1xKHIsMTYpLHRoaXMucT1xKG8sMTYpLHRoaXMuZG1wMT1xKGksMTYpLHRoaXMuZG1xMT1xKHMsMTYpLHRoaXMuY29lZmY9cShhLDE2KSk6Y29uc29sZS5lcnJvcihcIkludmFsaWQgUlNBIHByaXZhdGUga2V5XCIpfSxlZS5wcm90b3R5cGUuZ2VuZXJhdGU9ZnVuY3Rpb24oZSx0KXt2YXIgbj1uZXcgUSxyPWU+PjE7dGhpcy5lPXBhcnNlSW50KHQsMTYpO2Zvcih2YXIgbz1uZXcgUyh0LDE2KTs7KXtmb3IoO3RoaXMucD1uZXcgUyhlLXIsMSxuKSwwIT10aGlzLnAuc3VidHJhY3QoUy5PTkUpLmdjZChvKS5jb21wYXJlVG8oUy5PTkUpfHwhdGhpcy5wLmlzUHJvYmFibGVQcmltZSgxMCk7KTtmb3IoO3RoaXMucT1uZXcgUyhyLDEsbiksMCE9dGhpcy5xLnN1YnRyYWN0KFMuT05FKS5nY2QobykuY29tcGFyZVRvKFMuT05FKXx8IXRoaXMucS5pc1Byb2JhYmxlUHJpbWUoMTApOyk7dGhpcy5wLmNvbXBhcmVUbyh0aGlzLnEpPD0wJiYoaT10aGlzLnAsdGhpcy5wPXRoaXMucSx0aGlzLnE9aSk7dmFyIGk9dGhpcy5wLnN1YnRyYWN0KFMuT05FKSxzPXRoaXMucS5zdWJ0cmFjdChTLk9ORSksYT1pLm11bHRpcGx5KHMpO2lmKDA9PWEuZ2NkKG8pLmNvbXBhcmVUbyhTLk9ORSkpe3RoaXMubj10aGlzLnAubXVsdGlwbHkodGhpcy5xKSx0aGlzLmQ9by5tb2RJbnZlcnNlKGEpLHRoaXMuZG1wMT10aGlzLmQubW9kKGkpLHRoaXMuZG1xMT10aGlzLmQubW9kKHMpLHRoaXMuY29lZmY9dGhpcy5xLm1vZEludmVyc2UodGhpcy5wKTticmVha319fSxlZS5wcm90b3R5cGUuZGVjcnlwdD1mdW5jdGlvbihlKXtpZihlPXEoZSwxNiksbnVsbD09KGU9dGhpcy5kb1ByaXZhdGUoZSkpKXJldHVybiBudWxsO2Zvcih2YXIgdD10aGlzLm4uYml0TGVuZ3RoKCkrNz4+MyxuPWUudG9CeXRlQXJyYXkoKSxyPTA7cjxuLmxlbmd0aCYmMD09bltyXTspKytyO2lmKG4ubGVuZ3RoLXIhPXQtMXx8MiE9bltyXSlyZXR1cm4gbnVsbDtmb3IoKytyOzAhPW5bcl07KWlmKCsrcj49bi5sZW5ndGgpcmV0dXJuIG51bGw7Zm9yKHZhciBvPVwiXCI7KytyPG4ubGVuZ3RoOyl7dmFyIGk9MjU1Jm5bcl07aTwxMjg/bys9U3RyaW5nLmZyb21DaGFyQ29kZShpKToxOTE8aSYmaTwyMjQ/KG8rPVN0cmluZy5mcm9tQ2hhckNvZGUoKDMxJmkpPDw2fDYzJm5bcisxXSksKytyKToobys9U3RyaW5nLmZyb21DaGFyQ29kZSgoMTUmaSk8PDEyfCg2MyZuW3IrMV0pPDw2fDYzJm5bcisyXSkscis9Mil9cmV0dXJuIG99LGVlLnByb3RvdHlwZS5nZW5lcmF0ZUFzeW5jPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uZXcgUSxvPWU+PjEsaT0odGhpcy5lPXBhcnNlSW50KHQsMTYpLG5ldyBTKHQsMTYpKSxzPXRoaXMsYT1mdW5jdGlvbigpe3ZhciB0PWZ1bmN0aW9uKCl7cy5wLmNvbXBhcmVUbyhzLnEpPD0wJiYoZT1zLnAscy5wPXMucSxzLnE9ZSk7dmFyIGU9cy5wLnN1YnRyYWN0KFMuT05FKSx0PXMucS5zdWJ0cmFjdChTLk9ORSkscj1lLm11bHRpcGx5KHQpOzA9PXIuZ2NkKGkpLmNvbXBhcmVUbyhTLk9ORSk/KHMubj1zLnAubXVsdGlwbHkocy5xKSxzLmQ9aS5tb2RJbnZlcnNlKHIpLHMuZG1wMT1zLmQubW9kKGUpLHMuZG1xMT1zLmQubW9kKHQpLHMuY29lZmY9cy5xLm1vZEludmVyc2Uocy5wKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe24oKX0pLDApKTpzZXRUaW1lb3V0KGEsMCl9LGM9ZnVuY3Rpb24oKXtzLnE9aigpLHMucS5mcm9tTnVtYmVyQXN5bmMobywxLHIsKGZ1bmN0aW9uKCl7cy5xLnN1YnRyYWN0KFMuT05FKS5nY2RhKGksKGZ1bmN0aW9uKGUpezA9PWUuY29tcGFyZVRvKFMuT05FKSYmcy5xLmlzUHJvYmFibGVQcmltZSgxMCk/c2V0VGltZW91dCh0LDApOnNldFRpbWVvdXQoYywwKX0pKX0pKX07c2V0VGltZW91dCgoZnVuY3Rpb24gdCgpe3MucD1qKCkscy5wLmZyb21OdW1iZXJBc3luYyhlLW8sMSxyLChmdW5jdGlvbigpe3MucC5zdWJ0cmFjdChTLk9ORSkuZ2NkYShpLChmdW5jdGlvbihlKXswPT1lLmNvbXBhcmVUbyhTLk9ORSkmJnMucC5pc1Byb2JhYmxlUHJpbWUoMTApP3NldFRpbWVvdXQoYywwKTpzZXRUaW1lb3V0KHQsMCl9KSl9KSl9KSwwKX07c2V0VGltZW91dChhLDApfSxlZS5wcm90b3R5cGUuc2lnbj1mdW5jdGlvbihlLHQsbil7cmV0dXJuIG49ZnVuY3Rpb24oZSx0KXtpZih0PGUubGVuZ3RoKzIyKXJldHVybiBjb25zb2xlLmVycm9yKFwiTWVzc2FnZSB0b28gbG9uZyBmb3IgUlNBXCIpLG51bGw7Zm9yKHZhciBuPXQtZS5sZW5ndGgtNixyPVwiXCIsbz0wO288bjtvKz0yKXIrPVwiZmZcIjtyZXR1cm4gcShcIjAwMDFcIityK1wiMDBcIitlLDE2KX0oKCRbbl18fFwiXCIpK3QoZSkudG9TdHJpbmcoKSx0aGlzLm4uYml0TGVuZ3RoKCkvNCksbnVsbD09bnx8bnVsbD09KHQ9dGhpcy5kb1ByaXZhdGUobikpP251bGw6MD09KDEmKGU9dC50b1N0cmluZygxNikpLmxlbmd0aCk/ZTpcIjBcIitlfSxlZS5wcm90b3R5cGUudmVyaWZ5PWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdD1xKHQsMTYpLG51bGw9PSh0PXRoaXMuZG9QdWJsaWModCkpP251bGw6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0IGluICQpaWYoJC5oYXNPd25Qcm9wZXJ0eSh0KSl7dmFyIG49KHQ9JFt0XSkubGVuZ3RoO2lmKGUuc3Vic3RyKDAsbik9PXQpcmV0dXJuIGUuc3Vic3RyKG4pfXJldHVybiBlfSh0LnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eMWYrMDAvLFwiXCIpKT09bihlKS50b1N0cmluZygpfSxlZSkse21kMjpcIjMwMjAzMDBjMDYwODJhODY0ODg2ZjcwZDAyMDIwNTAwMDQxMFwiLG1kNTpcIjMwMjAzMDBjMDYwODJhODY0ODg2ZjcwZDAyMDUwNTAwMDQxMFwiLHNoYTE6XCIzMDIxMzAwOTA2MDUyYjBlMDMwMjFhMDUwMDA0MTRcIixzaGEyMjQ6XCIzMDJkMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDQwNTAwMDQxY1wiLHNoYTI1NjpcIjMwMzEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMTA1MDAwNDIwXCIsc2hhMzg0OlwiMzA0MTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAyMDUwMDA0MzBcIixzaGE1MTI6XCIzMDUxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDMwNTAwMDQ0MFwiLHJpcGVtZDE2MDpcIjMwMjEzMDA5MDYwNTJiMjQwMzAyMDEwNTAwMDQxNFwifSk7ZnVuY3Rpb24gZWUoKXt0aGlzLm49bnVsbCx0aGlzLmU9MCx0aGlzLmQ9bnVsbCx0aGlzLnA9bnVsbCx0aGlzLnE9bnVsbCx0aGlzLmRtcDE9bnVsbCx0aGlzLmRtcTE9bnVsbCx0aGlzLmNvZWZmPW51bGx9ZnVuY3Rpb24gdGUoKXt9KHQ9e30pLmxhbmc9e2V4dGVuZDpmdW5jdGlvbihlLHQsbil7aWYoIXR8fCFlKXRocm93IG5ldyBFcnJvcihcIllBSE9PLmxhbmcuZXh0ZW5kIGZhaWxlZCwgcGxlYXNlIGNoZWNrIHRoYXQgYWxsIGRlcGVuZGVuY2llcyBhcmUgaW5jbHVkZWQuXCIpO2Z1bmN0aW9uIHIoKXt9aWYoci5wcm90b3R5cGU9dC5wcm90b3R5cGUsZS5wcm90b3R5cGU9bmV3IHIsKGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUpLnN1cGVyY2xhc3M9dC5wcm90b3R5cGUsdC5wcm90b3R5cGUuY29uc3RydWN0b3I9PU9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3ImJih0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj10KSxuKXtmb3IodmFyIG8gaW4gbillLnByb3RvdHlwZVtvXT1uW29dO3Q9ZnVuY3Rpb24oKXt9O3ZhciBpPVtcInRvU3RyaW5nXCIsXCJ2YWx1ZU9mXCJdO3RyeXtcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiYvTVNJRS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmKHQ9ZnVuY3Rpb24oZSx0KXtmb3Iobz0wO288aS5sZW5ndGg7bys9MSl7dmFyIG49aVtvXSxyPXRbbl07XCJmdW5jdGlvblwiPT10eXBlb2YgciYmciE9T2JqZWN0LnByb3RvdHlwZVtuXSYmKGVbbl09cil9fSl9Y2F0Y2goZSl7fXQoZS5wcm90b3R5cGUsbil9fX07dmFyIG5lPXt9O3ZvaWQgMCE9PW5lLmFzbjEmJm5lLmFzbjF8fChuZS5hc24xPXt9KSxuZS5hc24xLkFTTjFVdGlsPW5ldyBmdW5jdGlvbigpe3RoaXMuaW50ZWdlclRvQnl0ZUhleD1mdW5jdGlvbihlKXtyZXR1cm4oZT1lLnRvU3RyaW5nKDE2KSkubGVuZ3RoJTI9PTE/XCIwXCIrZTplfSx0aGlzLmJpZ0ludFRvTWluVHdvc0NvbXBsZW1lbnRzSGV4PWZ1bmN0aW9uKGUpe3ZhciB0PWUudG9TdHJpbmcoMTYpO2lmKFwiLVwiIT10LnN1YnN0cigwLDEpKXQubGVuZ3RoJTI9PTE/dD1cIjBcIit0OnQubWF0Y2goL15bMC03XS8pfHwodD1cIjAwXCIrdCk7ZWxzZXt2YXIgbj10LnN1YnN0cigxKS5sZW5ndGg7biUyPT0xP24rPTE6dC5tYXRjaCgvXlswLTddLyl8fChuKz0yKTtmb3IodmFyIHI9XCJcIixvPTA7bzxuO28rKylyKz1cImZcIjt0PW5ldyBTKHIsMTYpLnhvcihlKS5hZGQoUy5PTkUpLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eLS8sXCJcIil9cmV0dXJuIHR9LHRoaXMuZ2V0UEVNU3RyaW5nRnJvbUhleD1mdW5jdGlvbihlLHQpe3JldHVybiBoZXh0b3BlbShlLHQpfSx0aGlzLm5ld09iamVjdD1mdW5jdGlvbihlKXt2YXIgdCxuPSh0PW5lLmFzbjEpLkRFUkJvb2xlYW4scj10LkRFUkludGVnZXIsbz10LkRFUkJpdFN0cmluZyxpPXQuREVST2N0ZXRTdHJpbmcscz10LkRFUk51bGwsYT10LkRFUk9iamVjdElkZW50aWZpZXIsYz10LkRFUkVudW1lcmF0ZWQsdT10LkRFUlVURjhTdHJpbmcsbD10LkRFUk51bWVyaWNTdHJpbmcsaD10LkRFUlByaW50YWJsZVN0cmluZyxwPXQuREVSVGVsZXRleFN0cmluZyxkPXQuREVSSUE1U3RyaW5nLF89dC5ERVJVVENUaW1lLGY9dC5ERVJHZW5lcmFsaXplZFRpbWUsZz10LkRFUlNlcXVlbmNlLG09dC5ERVJTZXQseT10LkRFUlRhZ2dlZE9iamVjdCx2PXQuQVNOMVV0aWwubmV3T2JqZWN0O2lmKDEhPSh0PU9iamVjdC5rZXlzKGUpKS5sZW5ndGgpdGhyb3dcImtleSBvZiBwYXJhbSBzaGFsbCBiZSBvbmx5IG9uZS5cIjtpZih0PXRbMF0sLTE9PVwiOmJvb2w6aW50OmJpdHN0cjpvY3RzdHI6bnVsbDpvaWQ6ZW51bTp1dGY4c3RyOm51bXN0cjpwcm5zdHI6dGVsc3RyOmlhNXN0cjp1dGN0aW1lOmdlbnRpbWU6c2VxOnNldDp0YWc6XCIuaW5kZXhPZihcIjpcIit0K1wiOlwiKSl0aHJvd1widW5kZWZpbmVkIGtleTogXCIrdDtpZihcImJvb2xcIj09dClyZXR1cm4gbmV3IG4oZVt0XSk7aWYoXCJpbnRcIj09dClyZXR1cm4gbmV3IHIoZVt0XSk7aWYoXCJiaXRzdHJcIj09dClyZXR1cm4gbmV3IG8oZVt0XSk7aWYoXCJvY3RzdHJcIj09dClyZXR1cm4gbmV3IGkoZVt0XSk7aWYoXCJudWxsXCI9PXQpcmV0dXJuIG5ldyBzKGVbdF0pO2lmKFwib2lkXCI9PXQpcmV0dXJuIG5ldyBhKGVbdF0pO2lmKFwiZW51bVwiPT10KXJldHVybiBuZXcgYyhlW3RdKTtpZihcInV0ZjhzdHJcIj09dClyZXR1cm4gbmV3IHUoZVt0XSk7aWYoXCJudW1zdHJcIj09dClyZXR1cm4gbmV3IGwoZVt0XSk7aWYoXCJwcm5zdHJcIj09dClyZXR1cm4gbmV3IGgoZVt0XSk7aWYoXCJ0ZWxzdHJcIj09dClyZXR1cm4gbmV3IHAoZVt0XSk7aWYoXCJpYTVzdHJcIj09dClyZXR1cm4gbmV3IGQoZVt0XSk7aWYoXCJ1dGN0aW1lXCI9PXQpcmV0dXJuIG5ldyBfKGVbdF0pO2lmKFwiZ2VudGltZVwiPT10KXJldHVybiBuZXcgZihlW3RdKTtpZihcInNlcVwiPT10KXtmb3IodmFyIGI9ZVt0XSxFPVtdLE89MDtPPGIubGVuZ3RoO08rKyl7dmFyIFQ9dihiW09dKTtFLnB1c2goVCl9cmV0dXJuIG5ldyBnKHthcnJheTpFfSl9aWYoXCJzZXRcIj09dCl7Zm9yKGI9ZVt0XSxFPVtdLE89MDtPPGIubGVuZ3RoO08rKylUPXYoYltPXSksRS5wdXNoKFQpO3JldHVybiBuZXcgbSh7YXJyYXk6RX0pfWlmKFwidGFnXCI9PXQpe2lmKG49ZVt0XSxcIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobikmJjM9PW4ubGVuZ3RoKXJldHVybiByPXYoblsyXSksbmV3IHkoe3RhZzpuWzBdLGV4cGxpY2l0Om5bMV0sb2JqOnJ9KTtpZihvPXt9LHZvaWQgMCE9PW4uZXhwbGljaXQmJihvLmV4cGxpY2l0PW4uZXhwbGljaXQpLHZvaWQgMCE9PW4udGFnJiYoby50YWc9bi50YWcpLHZvaWQgMD09PW4ub2JqKXRocm93XCJvYmogc2hhbGwgYmUgc3BlY2lmaWVkIGZvciAndGFnJy5cIjtyZXR1cm4gby5vYmo9dihuLm9iaiksbmV3IHkobyl9fSx0aGlzLmpzb25Ub0FTTjFIRVg9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMubmV3T2JqZWN0KGUpLmdldEVuY29kZWRIZXgoKX19LG5lLmFzbjEuQVNOMVV0aWwub2lkSGV4VG9JbnQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVwiXCIsbj1wYXJzZUludChlLnN1YnN0cigwLDIpLDE2KSxyPSh0PU1hdGguZmxvb3Iobi80MCkrXCIuXCIrbiU0MCxcIlwiKSxvPTI7bzxlLmxlbmd0aDtvKz0yKXt2YXIgaT0oXCIwMDAwMDAwMFwiK3BhcnNlSW50KGUuc3Vic3RyKG8sMiksMTYpLnRvU3RyaW5nKDIpKS5zbGljZSgtOCk7cis9aS5zdWJzdHIoMSw3KSxcIjBcIj09aS5zdWJzdHIoMCwxKSYmKHQ9dCtcIi5cIituZXcgUyhyLDIpLnRvU3RyaW5nKDEwKSxyPVwiXCIpfXJldHVybiB0fSxuZS5hc24xLkFTTjFVdGlsLm9pZEludFRvSGV4PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSl7cmV0dXJuIDE9PShlPWUudG9TdHJpbmcoMTYpKS5sZW5ndGg/XCIwXCIrZTplfWlmKCFlLm1hdGNoKC9eWzAtOS5dKyQvKSl0aHJvd1wibWFsZm9ybWVkIG9pZCBzdHJpbmc6IFwiK2U7dmFyIG49XCJcIixyPWUuc3BsaXQoXCIuXCIpO24rPXQoZT00MCpwYXJzZUludChyWzBdKStwYXJzZUludChyWzFdKSksci5zcGxpY2UoMCwyKTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKyluKz1mdW5jdGlvbihlKXt2YXIgbj1cIlwiLHI9bmV3IFMoZSwxMCkudG9TdHJpbmcoMiksbz03LXIubGVuZ3RoJTc7Nz09byYmKG89MCk7Zm9yKHZhciBpPVwiXCIscz0wO3M8bztzKyspaSs9XCIwXCI7Zm9yKHI9aStyLHM9MDtzPHIubGVuZ3RoLTE7cys9Nyl7dmFyIGE9ci5zdWJzdHIocyw3KTtzIT1yLmxlbmd0aC03JiYoYT1cIjFcIithKSxuKz10KHBhcnNlSW50KGEsMikpfXJldHVybiBufShyW29dKTtyZXR1cm4gbn0sbmUuYXNuMS5BU04xT2JqZWN0PWZ1bmN0aW9uKCl7dGhpcy5nZXRMZW5ndGhIZXhGcm9tVmFsdWU9ZnVuY3Rpb24oKXtpZih2b2lkIDA9PT10aGlzLmhWfHxudWxsPT10aGlzLmhWKXRocm93XCJ0aGlzLmhWIGlzIG51bGwgb3IgdW5kZWZpbmVkLlwiO2lmKHRoaXMuaFYubGVuZ3RoJTI9PTEpdGhyb3dcInZhbHVlIGhleCBtdXN0IGJlIGV2ZW4gbGVuZ3RoOiBuPVwiK1wiXCIubGVuZ3RoK1wiLHY9XCIrdGhpcy5oVjt2YXIgZT10aGlzLmhWLmxlbmd0aC8yLHQ9ZS50b1N0cmluZygxNik7aWYodC5sZW5ndGglMj09MSYmKHQ9XCIwXCIrdCksZTwxMjgpcmV0dXJuIHQ7dmFyIG49dC5sZW5ndGgvMjtpZigxNTxuKXRocm93XCJBU04uMSBsZW5ndGggdG9vIGxvbmcgdG8gcmVwcmVzZW50IGJ5IDh4OiBuID0gXCIrZS50b1N0cmluZygxNik7cmV0dXJuKDEyOCtuKS50b1N0cmluZygxNikrdH0sdGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXRoaXMuaFRMViYmIXRoaXMuaXNNb2RpZmllZHx8KHRoaXMuaFY9dGhpcy5nZXRGcmVzaFZhbHVlSGV4KCksdGhpcy5oTD10aGlzLmdldExlbmd0aEhleEZyb21WYWx1ZSgpLHRoaXMuaFRMVj10aGlzLmhUK3RoaXMuaEwrdGhpcy5oVix0aGlzLmlzTW9kaWZpZWQ9ITEpLHRoaXMuaFRMVn0sdGhpcy5nZXRWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldEVuY29kZWRIZXgoKSx0aGlzLmhWfSx0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm5cIlwifX0sbmUuYXNuMS5ERVJBYnN0cmFjdFN0cmluZz1mdW5jdGlvbihlKXtuZS5hc24xLkRFUkFic3RyYWN0U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKSx0aGlzLmdldFN0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN9LHRoaXMuc2V0U3RyaW5nPWZ1bmN0aW9uKGUpe3RoaXMuaFRMVj1udWxsLHRoaXMuaXNNb2RpZmllZD0hMCx0aGlzLnM9ZSx0aGlzLmhWPXN0b2hleCh0aGlzLnMpfSx0aGlzLnNldFN0cmluZ0hleD1mdW5jdGlvbihlKXt0aGlzLmhUTFY9bnVsbCx0aGlzLmlzTW9kaWZpZWQ9ITAsdGhpcy5zPW51bGwsdGhpcy5oVj1lfSx0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn0sdm9pZCAwIT09ZSYmKFwic3RyaW5nXCI9PXR5cGVvZiBlP3RoaXMuc2V0U3RyaW5nKGUpOnZvaWQgMCE9PWUuc3RyP3RoaXMuc2V0U3RyaW5nKGUuc3RyKTp2b2lkIDAhPT1lLmhleCYmdGhpcy5zZXRTdHJpbmdIZXgoZS5oZXgpKX0sdC5sYW5nLmV4dGVuZChuZS5hc24xLkRFUkFic3RyYWN0U3RyaW5nLG5lLmFzbjEuQVNOMU9iamVjdCksbmUuYXNuMS5ERVJBYnN0cmFjdFRpbWU9ZnVuY3Rpb24oZSl7bmUuYXNuMS5ERVJBYnN0cmFjdFRpbWUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpLHRoaXMubG9jYWxEYXRlVG9VVEM9ZnVuY3Rpb24oZSl7cmV0dXJuIHV0Yz1lLmdldFRpbWUoKSs2ZTQqZS5nZXRUaW1lem9uZU9mZnNldCgpLG5ldyBEYXRlKHV0Yyl9LHRoaXMuZm9ybWF0RGF0ZT1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcy56ZXJvUGFkZGluZyxvPShlPXRoaXMubG9jYWxEYXRlVG9VVEMoZSksU3RyaW5nKGUuZ2V0RnVsbFllYXIoKSkpO3Q9KG89XCJ1dGNcIj09dD9vLnN1YnN0cigyLDIpOm8pK3IoU3RyaW5nKGUuZ2V0TW9udGgoKSsxKSwyKStyKFN0cmluZyhlLmdldERhdGUoKSksMikrcihTdHJpbmcoZS5nZXRIb3VycygpKSwyKStyKFN0cmluZyhlLmdldE1pbnV0ZXMoKSksMikrcihTdHJpbmcoZS5nZXRTZWNvbmRzKCkpLDIpO3JldHVybih0PSEwPT09biYmMCE9KG89ZS5nZXRNaWxsaXNlY29uZHMoKSk/dCtcIi5cIityKFN0cmluZyhvKSwzKS5yZXBsYWNlKC9bMF0rJC8sXCJcIik6dCkrXCJaXCJ9LHRoaXMuemVyb1BhZGRpbmc9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5sZW5ndGg+PXQ/ZTpuZXcgQXJyYXkodC1lLmxlbmd0aCsxKS5qb2luKFwiMFwiKStlfSx0aGlzLmdldFN0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN9LHRoaXMuc2V0U3RyaW5nPWZ1bmN0aW9uKGUpe3RoaXMuaFRMVj1udWxsLHRoaXMuaXNNb2RpZmllZD0hMCx0aGlzLnM9ZSx0aGlzLmhWPXN0b2hleChlKX0sdGhpcy5zZXRCeURhdGVWYWx1ZT1mdW5jdGlvbihlLHQsbixyLG8saSl7ZT1uZXcgRGF0ZShEYXRlLlVUQyhlLHQtMSxuLHIsbyxpLDApKSx0aGlzLnNldEJ5RGF0ZShlKX0sdGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaFZ9fSx0LmxhbmcuZXh0ZW5kKG5lLmFzbjEuREVSQWJzdHJhY3RUaW1lLG5lLmFzbjEuQVNOMU9iamVjdCksbmUuYXNuMS5ERVJBYnN0cmFjdFN0cnVjdHVyZWQ9ZnVuY3Rpb24oZSl7bmUuYXNuMS5ERVJBYnN0cmFjdFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyksdGhpcy5zZXRCeUFTTjFPYmplY3RBcnJheT1mdW5jdGlvbihlKXt0aGlzLmhUTFY9bnVsbCx0aGlzLmlzTW9kaWZpZWQ9ITAsdGhpcy5hc24xQXJyYXk9ZX0sdGhpcy5hcHBlbmRBU04xT2JqZWN0PWZ1bmN0aW9uKGUpe3RoaXMuaFRMVj1udWxsLHRoaXMuaXNNb2RpZmllZD0hMCx0aGlzLmFzbjFBcnJheS5wdXNoKGUpfSx0aGlzLmFzbjFBcnJheT1uZXcgQXJyYXksdm9pZCAwIT09ZSYmdm9pZCAwIT09ZS5hcnJheSYmKHRoaXMuYXNuMUFycmF5PWUuYXJyYXkpfSx0LmxhbmcuZXh0ZW5kKG5lLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkLG5lLmFzbjEuQVNOMU9iamVjdCksbmUuYXNuMS5ERVJCb29sZWFuPWZ1bmN0aW9uKCl7bmUuYXNuMS5ERVJCb29sZWFuLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKSx0aGlzLmhUPVwiMDFcIix0aGlzLmhUTFY9XCIwMTAxZmZcIn0sdC5sYW5nLmV4dGVuZChuZS5hc24xLkRFUkJvb2xlYW4sbmUuYXNuMS5BU04xT2JqZWN0KSxuZS5hc24xLkRFUkludGVnZXI9ZnVuY3Rpb24oZSl7bmUuYXNuMS5ERVJJbnRlZ2VyLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKSx0aGlzLmhUPVwiMDJcIix0aGlzLnNldEJ5QmlnSW50ZWdlcj1mdW5jdGlvbihlKXt0aGlzLmhUTFY9bnVsbCx0aGlzLmlzTW9kaWZpZWQ9ITAsdGhpcy5oVj1uZS5hc24xLkFTTjFVdGlsLmJpZ0ludFRvTWluVHdvc0NvbXBsZW1lbnRzSGV4KGUpfSx0aGlzLnNldEJ5SW50ZWdlcj1mdW5jdGlvbihlKXtlPW5ldyBTKFN0cmluZyhlKSwxMCksdGhpcy5zZXRCeUJpZ0ludGVnZXIoZSl9LHRoaXMuc2V0VmFsdWVIZXg9ZnVuY3Rpb24oZSl7dGhpcy5oVj1lfSx0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn0sdm9pZCAwIT09ZSYmKHZvaWQgMCE9PWUuYmlnaW50P3RoaXMuc2V0QnlCaWdJbnRlZ2VyKGUuYmlnaW50KTp2b2lkIDAhPT1lLmludD90aGlzLnNldEJ5SW50ZWdlcihlLmludCk6XCJudW1iZXJcIj09dHlwZW9mIGU/dGhpcy5zZXRCeUludGVnZXIoZSk6dm9pZCAwIT09ZS5oZXgmJnRoaXMuc2V0VmFsdWVIZXgoZS5oZXgpKX0sdC5sYW5nLmV4dGVuZChuZS5hc24xLkRFUkludGVnZXIsbmUuYXNuMS5BU04xT2JqZWN0KSxuZS5hc24xLkRFUkJpdFN0cmluZz1mdW5jdGlvbihlKXt2YXIgdDt2b2lkIDAhPT1lJiZ2b2lkIDAhPT1lLm9iaiYmKHQ9bmUuYXNuMS5BU04xVXRpbC5uZXdPYmplY3QoZS5vYmopLGUuaGV4PVwiMDBcIit0LmdldEVuY29kZWRIZXgoKSksbmUuYXNuMS5ERVJCaXRTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpLHRoaXMuaFQ9XCIwM1wiLHRoaXMuc2V0SGV4VmFsdWVJbmNsdWRpbmdVbnVzZWRCaXRzPWZ1bmN0aW9uKGUpe3RoaXMuaFRMVj1udWxsLHRoaXMuaXNNb2RpZmllZD0hMCx0aGlzLmhWPWV9LHRoaXMuc2V0VW51c2VkQml0c0FuZEhleFZhbHVlPWZ1bmN0aW9uKGUsdCl7aWYoZTwwfHw3PGUpdGhyb3dcInVudXNlZCBiaXRzIHNoYWxsIGJlIGZyb20gMCB0byA3OiB1ID0gXCIrZTtlPVwiMFwiK2UsdGhpcy5oVExWPW51bGwsdGhpcy5pc01vZGlmaWVkPSEwLHRoaXMuaFY9ZSt0fSx0aGlzLnNldEJ5QmluYXJ5U3RyaW5nPWZ1bmN0aW9uKGUpe3ZhciB0PTgtKGU9ZS5yZXBsYWNlKC8wKyQvLFwiXCIpKS5sZW5ndGglODs4PT10JiYodD0wKTtmb3IodmFyIG49MDtuPD10O24rKyllKz1cIjBcIjt2YXIgcj1cIlwiO2ZvcihuPTA7bjxlLmxlbmd0aC0xO24rPTgpe3ZhciBvPWUuc3Vic3RyKG4sOCk7cis9bz0xPT0obz1wYXJzZUludChvLDIpLnRvU3RyaW5nKDE2KSkubGVuZ3RoP1wiMFwiK286b310aGlzLmhUTFY9bnVsbCx0aGlzLmlzTW9kaWZpZWQ9ITAsdGhpcy5oVj1cIjBcIit0K3J9LHRoaXMuc2V0QnlCb29sZWFuQXJyYXk9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVwiXCIsbj0wO248ZS5sZW5ndGg7bisrKTE9PWVbbl0/dCs9XCIxXCI6dCs9XCIwXCI7dGhpcy5zZXRCeUJpbmFyeVN0cmluZyh0KX0sdGhpcy5uZXdGYWxzZUFycmF5PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1uZXcgQXJyYXkoZSksbj0wO248ZTtuKyspdFtuXT0hMTtyZXR1cm4gdH0sdGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaFZ9LHZvaWQgMCE9PWUmJihcInN0cmluZ1wiPT10eXBlb2YgZSYmZS50b0xvd2VyQ2FzZSgpLm1hdGNoKC9eWzAtOWEtZl0rJC8pP3RoaXMuc2V0SGV4VmFsdWVJbmNsdWRpbmdVbnVzZWRCaXRzKGUpOnZvaWQgMCE9PWUuaGV4P3RoaXMuc2V0SGV4VmFsdWVJbmNsdWRpbmdVbnVzZWRCaXRzKGUuaGV4KTp2b2lkIDAhPT1lLmJpbj90aGlzLnNldEJ5QmluYXJ5U3RyaW5nKGUuYmluKTp2b2lkIDAhPT1lLmFycmF5JiZ0aGlzLnNldEJ5Qm9vbGVhbkFycmF5KGUuYXJyYXkpKX0sdC5sYW5nLmV4dGVuZChuZS5hc24xLkRFUkJpdFN0cmluZyxuZS5hc24xLkFTTjFPYmplY3QpLG5lLmFzbjEuREVST2N0ZXRTdHJpbmc9ZnVuY3Rpb24oZSl7dmFyIHQ7dm9pZCAwIT09ZSYmdm9pZCAwIT09ZS5vYmomJih0PW5lLmFzbjEuQVNOMVV0aWwubmV3T2JqZWN0KGUub2JqKSxlLmhleD10LmdldEVuY29kZWRIZXgoKSksbmUuYXNuMS5ERVJPY3RldFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxlKSx0aGlzLmhUPVwiMDRcIn0sdC5sYW5nLmV4dGVuZChuZS5hc24xLkRFUk9jdGV0U3RyaW5nLG5lLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpLG5lLmFzbjEuREVSTnVsbD1mdW5jdGlvbigpe25lLmFzbjEuREVSTnVsbC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyksdGhpcy5oVD1cIjA1XCIsdGhpcy5oVExWPVwiMDUwMFwifSx0LmxhbmcuZXh0ZW5kKG5lLmFzbjEuREVSTnVsbCxuZS5hc24xLkFTTjFPYmplY3QpLG5lLmFzbjEuREVST2JqZWN0SWRlbnRpZmllcj1mdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbihlKXtyZXR1cm4gMT09KGU9ZS50b1N0cmluZygxNikpLmxlbmd0aD9cIjBcIitlOmV9O25lLmFzbjEuREVST2JqZWN0SWRlbnRpZmllci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyksdGhpcy5oVD1cIjA2XCIsdGhpcy5zZXRWYWx1ZUhleD1mdW5jdGlvbihlKXt0aGlzLmhUTFY9bnVsbCx0aGlzLmlzTW9kaWZpZWQ9ITAsdGhpcy5zPW51bGwsdGhpcy5oVj1lfSx0aGlzLnNldFZhbHVlT2lkU3RyaW5nPWZ1bmN0aW9uKGUpe2lmKCFlLm1hdGNoKC9eWzAtOS5dKyQvKSl0aHJvd1wibWFsZm9ybWVkIG9pZCBzdHJpbmc6IFwiK2U7dmFyIG49XCJcIixyPWUuc3BsaXQoXCIuXCIpO2U9NDAqcGFyc2VJbnQoclswXSkrcGFyc2VJbnQoclsxXSk7bis9dChlKSxyLnNwbGljZSgwLDIpO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKW4rPWZ1bmN0aW9uKGUpe3ZhciBuPVwiXCIscj1uZXcgUyhlLDEwKS50b1N0cmluZygyKSxvPTctci5sZW5ndGglNzs3PT1vJiYobz0wKTtmb3IodmFyIGk9XCJcIixzPTA7czxvO3MrKylpKz1cIjBcIjtmb3Iocj1pK3Iscz0wO3M8ci5sZW5ndGgtMTtzKz03KXt2YXIgYT1yLnN1YnN0cihzLDcpO3MhPXIubGVuZ3RoLTcmJihhPVwiMVwiK2EpLG4rPXQocGFyc2VJbnQoYSwyKSl9cmV0dXJuIG59KHJbb10pO3RoaXMuaFRMVj1udWxsLHRoaXMuaXNNb2RpZmllZD0hMCx0aGlzLnM9bnVsbCx0aGlzLmhWPW59LHRoaXMuc2V0VmFsdWVOYW1lPWZ1bmN0aW9uKGUpe3ZhciB0PW5lLmFzbjEueDUwOS5PSUQubmFtZTJvaWQoZSk7aWYoXCJcIj09PXQpdGhyb3dcIkRFUk9iamVjdElkZW50aWZpZXIgb2lkTmFtZSB1bmRlZmluZWQ6IFwiK2U7dGhpcy5zZXRWYWx1ZU9pZFN0cmluZyh0KX0sdGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaFZ9LHZvaWQgMCE9PWUmJihcInN0cmluZ1wiPT10eXBlb2YgZT9lLm1hdGNoKC9eWzAtMl0uWzAtOS5dKyQvKT90aGlzLnNldFZhbHVlT2lkU3RyaW5nKGUpOnRoaXMuc2V0VmFsdWVOYW1lKGUpOnZvaWQgMCE9PWUub2lkP3RoaXMuc2V0VmFsdWVPaWRTdHJpbmcoZS5vaWQpOnZvaWQgMCE9PWUuaGV4P3RoaXMuc2V0VmFsdWVIZXgoZS5oZXgpOnZvaWQgMCE9PWUubmFtZSYmdGhpcy5zZXRWYWx1ZU5hbWUoZS5uYW1lKSl9LHQubGFuZy5leHRlbmQobmUuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyLG5lLmFzbjEuQVNOMU9iamVjdCksbmUuYXNuMS5ERVJFbnVtZXJhdGVkPWZ1bmN0aW9uKGUpe25lLmFzbjEuREVSRW51bWVyYXRlZC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyksdGhpcy5oVD1cIjBhXCIsdGhpcy5zZXRCeUJpZ0ludGVnZXI9ZnVuY3Rpb24oZSl7dGhpcy5oVExWPW51bGwsdGhpcy5pc01vZGlmaWVkPSEwLHRoaXMuaFY9bmUuYXNuMS5BU04xVXRpbC5iaWdJbnRUb01pblR3b3NDb21wbGVtZW50c0hleChlKX0sdGhpcy5zZXRCeUludGVnZXI9ZnVuY3Rpb24oZSl7ZT1uZXcgUyhTdHJpbmcoZSksMTApLHRoaXMuc2V0QnlCaWdJbnRlZ2VyKGUpfSx0aGlzLnNldFZhbHVlSGV4PWZ1bmN0aW9uKGUpe3RoaXMuaFY9ZX0sdGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaFZ9LHZvaWQgMCE9PWUmJih2b2lkIDAhPT1lLmludD90aGlzLnNldEJ5SW50ZWdlcihlLmludCk6XCJudW1iZXJcIj09dHlwZW9mIGU/dGhpcy5zZXRCeUludGVnZXIoZSk6dm9pZCAwIT09ZS5oZXgmJnRoaXMuc2V0VmFsdWVIZXgoZS5oZXgpKX0sdC5sYW5nLmV4dGVuZChuZS5hc24xLkRFUkVudW1lcmF0ZWQsbmUuYXNuMS5BU04xT2JqZWN0KSxuZS5hc24xLkRFUlVURjhTdHJpbmc9ZnVuY3Rpb24oZSl7bmUuYXNuMS5ERVJVVEY4U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGUpLHRoaXMuaFQ9XCIwY1wifSx0LmxhbmcuZXh0ZW5kKG5lLmFzbjEuREVSVVRGOFN0cmluZyxuZS5hc24xLkRFUkFic3RyYWN0U3RyaW5nKSxuZS5hc24xLkRFUk51bWVyaWNTdHJpbmc9ZnVuY3Rpb24oZSl7bmUuYXNuMS5ERVJOdW1lcmljU3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGUpLHRoaXMuaFQ9XCIxMlwifSx0LmxhbmcuZXh0ZW5kKG5lLmFzbjEuREVSTnVtZXJpY1N0cmluZyxuZS5hc24xLkRFUkFic3RyYWN0U3RyaW5nKSxuZS5hc24xLkRFUlByaW50YWJsZVN0cmluZz1mdW5jdGlvbihlKXtuZS5hc24xLkRFUlByaW50YWJsZVN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxlKSx0aGlzLmhUPVwiMTNcIn0sdC5sYW5nLmV4dGVuZChuZS5hc24xLkRFUlByaW50YWJsZVN0cmluZyxuZS5hc24xLkRFUkFic3RyYWN0U3RyaW5nKSxuZS5hc24xLkRFUlRlbGV0ZXhTdHJpbmc9ZnVuY3Rpb24oZSl7bmUuYXNuMS5ERVJUZWxldGV4U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGUpLHRoaXMuaFQ9XCIxNFwifSx0LmxhbmcuZXh0ZW5kKG5lLmFzbjEuREVSVGVsZXRleFN0cmluZyxuZS5hc24xLkRFUkFic3RyYWN0U3RyaW5nKSxuZS5hc24xLkRFUklBNVN0cmluZz1mdW5jdGlvbihlKXtuZS5hc24xLkRFUklBNVN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxlKSx0aGlzLmhUPVwiMTZcIn0sdC5sYW5nLmV4dGVuZChuZS5hc24xLkRFUklBNVN0cmluZyxuZS5hc24xLkRFUkFic3RyYWN0U3RyaW5nKSxuZS5hc24xLkRFUlVUQ1RpbWU9ZnVuY3Rpb24oZSl7bmUuYXNuMS5ERVJVVENUaW1lLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGUpLHRoaXMuaFQ9XCIxN1wiLHRoaXMuc2V0QnlEYXRlPWZ1bmN0aW9uKGUpe3RoaXMuaFRMVj1udWxsLHRoaXMuaXNNb2RpZmllZD0hMCx0aGlzLmRhdGU9ZSx0aGlzLnM9dGhpcy5mb3JtYXREYXRlKHRoaXMuZGF0ZSxcInV0Y1wiKSx0aGlzLmhWPXN0b2hleCh0aGlzLnMpfSx0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09dGhpcy5kYXRlJiZ2b2lkIDA9PT10aGlzLnMmJih0aGlzLmRhdGU9bmV3IERhdGUsdGhpcy5zPXRoaXMuZm9ybWF0RGF0ZSh0aGlzLmRhdGUsXCJ1dGNcIiksdGhpcy5oVj1zdG9oZXgodGhpcy5zKSksdGhpcy5oVn0sdm9pZCAwIT09ZSYmKHZvaWQgMCE9PWUuc3RyP3RoaXMuc2V0U3RyaW5nKGUuc3RyKTpcInN0cmluZ1wiPT10eXBlb2YgZSYmZS5tYXRjaCgvXlswLTldezEyfVokLyk/dGhpcy5zZXRTdHJpbmcoZSk6dm9pZCAwIT09ZS5oZXg/dGhpcy5zZXRTdHJpbmdIZXgoZS5oZXgpOnZvaWQgMCE9PWUuZGF0ZSYmdGhpcy5zZXRCeURhdGUoZS5kYXRlKSl9LHQubGFuZy5leHRlbmQobmUuYXNuMS5ERVJVVENUaW1lLG5lLmFzbjEuREVSQWJzdHJhY3RUaW1lKSxuZS5hc24xLkRFUkdlbmVyYWxpemVkVGltZT1mdW5jdGlvbihlKXtuZS5hc24xLkRFUkdlbmVyYWxpemVkVGltZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxlKSx0aGlzLmhUPVwiMThcIix0aGlzLndpdGhNaWxsaXM9ITEsdGhpcy5zZXRCeURhdGU9ZnVuY3Rpb24oZSl7dGhpcy5oVExWPW51bGwsdGhpcy5pc01vZGlmaWVkPSEwLHRoaXMuZGF0ZT1lLHRoaXMucz10aGlzLmZvcm1hdERhdGUodGhpcy5kYXRlLFwiZ2VuXCIsdGhpcy53aXRoTWlsbGlzKSx0aGlzLmhWPXN0b2hleCh0aGlzLnMpfSx0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09dGhpcy5kYXRlJiZ2b2lkIDA9PT10aGlzLnMmJih0aGlzLmRhdGU9bmV3IERhdGUsdGhpcy5zPXRoaXMuZm9ybWF0RGF0ZSh0aGlzLmRhdGUsXCJnZW5cIix0aGlzLndpdGhNaWxsaXMpLHRoaXMuaFY9c3RvaGV4KHRoaXMucykpLHRoaXMuaFZ9LHZvaWQgMCE9PWUmJih2b2lkIDAhPT1lLnN0cj90aGlzLnNldFN0cmluZyhlLnN0cik6XCJzdHJpbmdcIj09dHlwZW9mIGUmJmUubWF0Y2goL15bMC05XXsxNH1aJC8pP3RoaXMuc2V0U3RyaW5nKGUpOnZvaWQgMCE9PWUuaGV4P3RoaXMuc2V0U3RyaW5nSGV4KGUuaGV4KTp2b2lkIDAhPT1lLmRhdGUmJnRoaXMuc2V0QnlEYXRlKGUuZGF0ZSksITA9PT1lLm1pbGxpcyYmKHRoaXMud2l0aE1pbGxpcz0hMCkpfSx0LmxhbmcuZXh0ZW5kKG5lLmFzbjEuREVSR2VuZXJhbGl6ZWRUaW1lLG5lLmFzbjEuREVSQWJzdHJhY3RUaW1lKSxuZS5hc24xLkRFUlNlcXVlbmNlPWZ1bmN0aW9uKGUpe25lLmFzbjEuREVSU2VxdWVuY2Uuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsZSksdGhpcy5oVD1cIjMwXCIsdGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVwiXCIsdD0wO3Q8dGhpcy5hc24xQXJyYXkubGVuZ3RoO3QrKyllKz10aGlzLmFzbjFBcnJheVt0XS5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFY9ZSx0aGlzLmhWfX0sdC5sYW5nLmV4dGVuZChuZS5hc24xLkRFUlNlcXVlbmNlLG5lLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkKSxuZS5hc24xLkRFUlNldD1mdW5jdGlvbihlKXtuZS5hc24xLkRFUlNldC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxlKSx0aGlzLmhUPVwiMzFcIix0aGlzLnNvcnRGbGFnPSEwLHRoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe2Zvcih2YXIgZT1uZXcgQXJyYXksdD0wO3Q8dGhpcy5hc24xQXJyYXkubGVuZ3RoO3QrKyl7dmFyIG49dGhpcy5hc24xQXJyYXlbdF07ZS5wdXNoKG4uZ2V0RW5jb2RlZEhleCgpKX1yZXR1cm4gMT09dGhpcy5zb3J0RmxhZyYmZS5zb3J0KCksdGhpcy5oVj1lLmpvaW4oXCJcIiksdGhpcy5oVn0sdm9pZCAwIT09ZSYmdm9pZCAwIT09ZS5zb3J0ZmxhZyYmMD09ZS5zb3J0ZmxhZyYmKHRoaXMuc29ydEZsYWc9ITEpfSx0LmxhbmcuZXh0ZW5kKG5lLmFzbjEuREVSU2V0LG5lLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkKSxuZS5hc24xLkRFUlRhZ2dlZE9iamVjdD1mdW5jdGlvbihlKXtuZS5hc24xLkRFUlRhZ2dlZE9iamVjdC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyksdGhpcy5oVD1cImEwXCIsdGhpcy5oVj1cIlwiLHRoaXMuaXNFeHBsaWNpdD0hMCx0aGlzLmFzbjFPYmplY3Q9bnVsbCx0aGlzLnNldEFTTjFPYmplY3Q9ZnVuY3Rpb24oZSx0LG4pe3RoaXMuaFQ9dCx0aGlzLmlzRXhwbGljaXQ9ZSx0aGlzLmFzbjFPYmplY3Q9bix0aGlzLmlzRXhwbGljaXQ/KHRoaXMuaFY9dGhpcy5hc24xT2JqZWN0LmdldEVuY29kZWRIZXgoKSx0aGlzLmhUTFY9bnVsbCx0aGlzLmlzTW9kaWZpZWQ9ITApOih0aGlzLmhWPW51bGwsdGhpcy5oVExWPW4uZ2V0RW5jb2RlZEhleCgpLHRoaXMuaFRMVj10aGlzLmhUTFYucmVwbGFjZSgvXi4uLyx0KSx0aGlzLmlzTW9kaWZpZWQ9ITEpfSx0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn0sdm9pZCAwIT09ZSYmKHZvaWQgMCE9PWUudGFnJiYodGhpcy5oVD1lLnRhZyksdm9pZCAwIT09ZS5leHBsaWNpdCYmKHRoaXMuaXNFeHBsaWNpdD1lLmV4cGxpY2l0KSx2b2lkIDAhPT1lLm9iaiYmKHRoaXMuYXNuMU9iamVjdD1lLm9iaix0aGlzLnNldEFTTjFPYmplY3QodGhpcy5pc0V4cGxpY2l0LHRoaXMuaFQsdGhpcy5hc24xT2JqZWN0KSkpfSx0LmxhbmcuZXh0ZW5kKG5lLmFzbjEuREVSVGFnZ2VkT2JqZWN0LG5lLmFzbjEuQVNOMU9iamVjdCkscmU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4ocmU9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuIGluIHQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbikmJihlW25dPXRbbl0pfSkoZSx0KX07dmFyIHJlLG9lPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQobil7dmFyIHI9ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBuJiYoXCJzdHJpbmdcIj09dHlwZW9mIG4/ci5wYXJzZUtleShuKToodC5oYXNQcml2YXRlS2V5UHJvcGVydHkobil8fHQuaGFzUHVibGljS2V5UHJvcGVydHkobikpJiZyLnBhcnNlUHJvcGVydGllc0Zyb20obikpLHJ9dmFyIG49dCxyPWU7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgciYmbnVsbCE9PXIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIrU3RyaW5nKHIpK1wiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7ZnVuY3Rpb24gbygpe3RoaXMuY29uc3RydWN0b3I9bn1yZXR1cm4gcmUobixyKSxuLnByb3RvdHlwZT1udWxsPT09cj9PYmplY3QuY3JlYXRlKHIpOihvLnByb3RvdHlwZT1yLnByb3RvdHlwZSxuZXcgbyksdC5wcm90b3R5cGUucGFyc2VLZXk9ZnVuY3Rpb24oZSl7dHJ5e3ZhciB0PTAsbj0wLHI9L15cXHMqKD86WzAtOUEtRmEtZl1bMC05QS1GYS1mXVxccyopKyQvLnRlc3QoZSk/ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09Yyl7dmFyIHQ9XCIwMTIzNDU2Nzg5QUJDREVGXCIsbj1cIiBcXGZcXG5cXHJcXHTCoFxcdTIwMjhcXHUyMDI5XCI7Zm9yKGM9e30scz0wO3M8MTY7KytzKWNbdC5jaGFyQXQocyldPXM7Zm9yKHQ9dC50b0xvd2VyQ2FzZSgpLHM9MTA7czwxNjsrK3MpY1t0LmNoYXJBdChzKV09cztmb3Iocz0wO3M8bi5sZW5ndGg7KytzKWNbbi5jaGFyQXQocyldPS0xfWZvcih2YXIgcj1bXSxvPTAsaT0wLHM9MDtzPGUubGVuZ3RoOysrcyl7dmFyIGE9ZS5jaGFyQXQocyk7aWYoXCI9XCI9PWEpYnJlYWs7aWYoLTEhPShhPWNbYV0pKXtpZih2b2lkIDA9PT1hKXRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgY2hhcmFjdGVyIGF0IG9mZnNldCBcIitzKTtvfD1hLDI8PSsraT8ocltyLmxlbmd0aF09byxpPW89MCk6bzw8PTR9fWlmKGkpdGhyb3cgbmV3IEVycm9yKFwiSGV4IGVuY29kaW5nIGluY29tcGxldGU6IDQgYml0cyBtaXNzaW5nXCIpO3JldHVybiByfShlKTpkLnVuYXJtb3IoZSksbz1iLmRlY29kZShyKTtpZig5PT09KG89Mz09PW8uc3ViLmxlbmd0aD9vLnN1YlsyXS5zdWJbMF06bykuc3ViLmxlbmd0aCl7dD1vLnN1YlsxXS5nZXRIZXhTdHJpbmdWYWx1ZSgpLHRoaXMubj1xKHQsMTYpLG49by5zdWJbMl0uZ2V0SGV4U3RyaW5nVmFsdWUoKSx0aGlzLmU9cGFyc2VJbnQobiwxNik7dmFyIGk9by5zdWJbM10uZ2V0SGV4U3RyaW5nVmFsdWUoKSxzPSh0aGlzLmQ9cShpLDE2KSxvLnN1Yls0XS5nZXRIZXhTdHJpbmdWYWx1ZSgpKSxhPSh0aGlzLnA9cShzLDE2KSxvLnN1Yls1XS5nZXRIZXhTdHJpbmdWYWx1ZSgpKSx1PSh0aGlzLnE9cShhLDE2KSxvLnN1Yls2XS5nZXRIZXhTdHJpbmdWYWx1ZSgpKSxsPSh0aGlzLmRtcDE9cSh1LDE2KSxvLnN1Yls3XS5nZXRIZXhTdHJpbmdWYWx1ZSgpKSxoPSh0aGlzLmRtcTE9cShsLDE2KSxvLnN1Yls4XS5nZXRIZXhTdHJpbmdWYWx1ZSgpKTt0aGlzLmNvZWZmPXEoaCwxNil9ZWxzZXtpZigyIT09by5zdWIubGVuZ3RoKXJldHVybiExO3ZhciBwPW8uc3ViWzFdLnN1YlswXTt0PXAuc3ViWzBdLmdldEhleFN0cmluZ1ZhbHVlKCk7dGhpcy5uPXEodCwxNiksbj1wLnN1YlsxXS5nZXRIZXhTdHJpbmdWYWx1ZSgpLHRoaXMuZT1wYXJzZUludChuLDE2KX1yZXR1cm4hMH1jYXRjaChlKXtyZXR1cm4hMX19LHQucHJvdG90eXBlLmdldFByaXZhdGVCYXNlS2V5PWZ1bmN0aW9uKCl7dmFyIGU9e2FycmF5OltuZXcgbmUuYXNuMS5ERVJJbnRlZ2VyKHtpbnQ6MH0pLG5ldyBuZS5hc24xLkRFUkludGVnZXIoe2JpZ2ludDp0aGlzLm59KSxuZXcgbmUuYXNuMS5ERVJJbnRlZ2VyKHtpbnQ6dGhpcy5lfSksbmV3IG5lLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OnRoaXMuZH0pLG5ldyBuZS5hc24xLkRFUkludGVnZXIoe2JpZ2ludDp0aGlzLnB9KSxuZXcgbmUuYXNuMS5ERVJJbnRlZ2VyKHtiaWdpbnQ6dGhpcy5xfSksbmV3IG5lLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OnRoaXMuZG1wMX0pLG5ldyBuZS5hc24xLkRFUkludGVnZXIoe2JpZ2ludDp0aGlzLmRtcTF9KSxuZXcgbmUuYXNuMS5ERVJJbnRlZ2VyKHtiaWdpbnQ6dGhpcy5jb2VmZn0pXX07cmV0dXJuIG5ldyBuZS5hc24xLkRFUlNlcXVlbmNlKGUpLmdldEVuY29kZWRIZXgoKX0sdC5wcm90b3R5cGUuZ2V0UHJpdmF0ZUJhc2VLZXlCNjQ9ZnVuY3Rpb24oKXtyZXR1cm4gbCh0aGlzLmdldFByaXZhdGVCYXNlS2V5KCkpfSx0LnByb3RvdHlwZS5nZXRQdWJsaWNCYXNlS2V5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG5lLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5OltuZXcgbmUuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyKHtvaWQ6XCIxLjIuODQwLjExMzU0OS4xLjEuMVwifSksbmV3IG5lLmFzbjEuREVSTnVsbF19KSx0PW5ldyBuZS5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpbbmV3IG5lLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OnRoaXMubn0pLG5ldyBuZS5hc24xLkRFUkludGVnZXIoe2ludDp0aGlzLmV9KV19KTt0PW5ldyBuZS5hc24xLkRFUkJpdFN0cmluZyh7aGV4OlwiMDBcIit0LmdldEVuY29kZWRIZXgoKX0pO3JldHVybiBuZXcgbmUuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6W2UsdF19KS5nZXRFbmNvZGVkSGV4KCl9LHQucHJvdG90eXBlLmdldFB1YmxpY0Jhc2VLZXlCNjQ9ZnVuY3Rpb24oKXtyZXR1cm4gbCh0aGlzLmdldFB1YmxpY0Jhc2VLZXkoKSl9LHQud29yZHdyYXA9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT8odD1cIiguezEsXCIrKHQ9dHx8NjQpK1wifSkoICt8JFxcbj8pfCguezEsXCIrdCtcIn0pXCIsZS5tYXRjaChSZWdFeHAodCxcImdcIikpLmpvaW4oXCJcXG5cIikpOmV9LHQucHJvdG90eXBlLmdldFByaXZhdGVLZXk9ZnVuY3Rpb24oKXtyZXR1cm5cIi0tLS0tQkVHSU4gUlNBIFBSSVZBVEUgS0VZLS0tLS1cXG5cIit0LndvcmR3cmFwKHRoaXMuZ2V0UHJpdmF0ZUJhc2VLZXlCNjQoKSkrXCJcXG4tLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLVwifSx0LnByb3RvdHlwZS5nZXRQdWJsaWNLZXk9ZnVuY3Rpb24oKXtyZXR1cm5cIi0tLS0tQkVHSU4gUFVCTElDIEtFWS0tLS0tXFxuXCIrdC53b3Jkd3JhcCh0aGlzLmdldFB1YmxpY0Jhc2VLZXlCNjQoKSkrXCJcXG4tLS0tLUVORCBQVUJMSUMgS0VZLS0tLS1cIn0sdC5oYXNQdWJsaWNLZXlQcm9wZXJ0eT1mdW5jdGlvbihlKXtyZXR1cm4oZT1lfHx7fSkuaGFzT3duUHJvcGVydHkoXCJuXCIpJiZlLmhhc093blByb3BlcnR5KFwiZVwiKX0sdC5oYXNQcml2YXRlS2V5UHJvcGVydHk9ZnVuY3Rpb24oZSl7cmV0dXJuKGU9ZXx8e30pLmhhc093blByb3BlcnR5KFwiblwiKSYmZS5oYXNPd25Qcm9wZXJ0eShcImVcIikmJmUuaGFzT3duUHJvcGVydHkoXCJkXCIpJiZlLmhhc093blByb3BlcnR5KFwicFwiKSYmZS5oYXNPd25Qcm9wZXJ0eShcInFcIikmJmUuaGFzT3duUHJvcGVydHkoXCJkbXAxXCIpJiZlLmhhc093blByb3BlcnR5KFwiZG1xMVwiKSYmZS5oYXNPd25Qcm9wZXJ0eShcImNvZWZmXCIpfSx0LnByb3RvdHlwZS5wYXJzZVByb3BlcnRpZXNGcm9tPWZ1bmN0aW9uKGUpe3RoaXMubj1lLm4sdGhpcy5lPWUuZSxlLmhhc093blByb3BlcnR5KFwiZFwiKSYmKHRoaXMuZD1lLmQsdGhpcy5wPWUucCx0aGlzLnE9ZS5xLHRoaXMuZG1wMT1lLmRtcDEsdGhpcy5kbXExPWUuZG1xMSx0aGlzLmNvZWZmPWUuY29lZmYpfSx0fShuKTtzZS5wcm90b3R5cGUuc2V0S2V5PWZ1bmN0aW9uKGUpe3RoaXMubG9nJiZ0aGlzLmtleSYmY29uc29sZS53YXJuKFwiQSBrZXkgd2FzIGFscmVhZHkgc2V0LCBvdmVycmlkaW5nIGV4aXN0aW5nLlwiKSx0aGlzLmtleT1uZXcgb2UoZSl9LHNlLnByb3RvdHlwZS5zZXRQcml2YXRlS2V5PWZ1bmN0aW9uKGUpe3RoaXMuc2V0S2V5KGUpfSxzZS5wcm90b3R5cGUuc2V0UHVibGljS2V5PWZ1bmN0aW9uKGUpe3RoaXMuc2V0S2V5KGUpfSxzZS5wcm90b3R5cGUuZGVjcnlwdD1mdW5jdGlvbihlKXt0cnl7cmV0dXJuIHRoaXMuZ2V0S2V5KCkuZGVjcnlwdChoKGUpKX1jYXRjaChlKXtyZXR1cm4hMX19LHNlLnByb3RvdHlwZS5lbmNyeXB0PWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gbCh0aGlzLmdldEtleSgpLmVuY3J5cHQoZSkpfWNhdGNoKGUpe3JldHVybiExfX0sc2UucHJvdG90eXBlLnNpZ249ZnVuY3Rpb24oZSx0LG4pe3RyeXtyZXR1cm4gbCh0aGlzLmdldEtleSgpLnNpZ24oZSx0LG4pKX1jYXRjaChlKXtyZXR1cm4hMX19LHNlLnByb3RvdHlwZS52ZXJpZnk9ZnVuY3Rpb24oZSx0LG4pe3RyeXtyZXR1cm4gdGhpcy5nZXRLZXkoKS52ZXJpZnkoZSxoKHQpLG4pfWNhdGNoKGUpe3JldHVybiExfX0sc2UucHJvdG90eXBlLmdldEtleT1mdW5jdGlvbihlKXtpZighdGhpcy5rZXkpe2lmKHRoaXMua2V5PW5ldyBvZSxlJiZcIltvYmplY3QgRnVuY3Rpb25dXCI9PT17fS50b1N0cmluZy5jYWxsKGUpKXJldHVybiB2b2lkIHRoaXMua2V5LmdlbmVyYXRlQXN5bmModGhpcy5kZWZhdWx0X2tleV9zaXplLHRoaXMuZGVmYXVsdF9wdWJsaWNfZXhwb25lbnQsZSk7dGhpcy5rZXkuZ2VuZXJhdGUodGhpcy5kZWZhdWx0X2tleV9zaXplLHRoaXMuZGVmYXVsdF9wdWJsaWNfZXhwb25lbnQpfXJldHVybiB0aGlzLmtleX0sc2UucHJvdG90eXBlLmdldFByaXZhdGVLZXk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRLZXkoKS5nZXRQcml2YXRlS2V5KCl9LHNlLnByb3RvdHlwZS5nZXRQcml2YXRlS2V5QjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0S2V5KCkuZ2V0UHJpdmF0ZUJhc2VLZXlCNjQoKX0sc2UucHJvdG90eXBlLmdldFB1YmxpY0tleT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldEtleSgpLmdldFB1YmxpY0tleSgpfSxzZS5wcm90b3R5cGUuZ2V0UHVibGljS2V5QjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0S2V5KCkuZ2V0UHVibGljQmFzZUtleUI2NCgpfSxzZS52ZXJzaW9uPVwiMy4yLjFcIjtjb25zdCBpZT1zZTtmdW5jdGlvbiBzZShlKXt0aGlzLmRlZmF1bHRfa2V5X3NpemU9KGU9KGU9dm9pZCAwPT09ZT97fTplKXx8e30pLmRlZmF1bHRfa2V5X3NpemU/cGFyc2VJbnQoZS5kZWZhdWx0X2tleV9zaXplLDEwKToxMDI0LHRoaXMuZGVmYXVsdF9wdWJsaWNfZXhwb25lbnQ9ZS5kZWZhdWx0X3B1YmxpY19leHBvbmVudHx8XCIwMTAwMDFcIix0aGlzLmxvZz1lLmxvZ3x8ITEsdGhpcy5rZXk9bnVsbH19KSgwLFRlPXt9LHdlKSxUZS5kZWZhdWx0KSxJZT0oT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lLnByb3RvdHlwZSxcInB1YmxpY0tleVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIi0tLS0tQkVHSU4gUFVCTElDIEtFWS0tLS0tXFxuICAgICAgICBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXh0RU01MXNrZitCZzI5TWRiK1dOXFxuICAgICAgICBJa2diR0RaL3dPUDRNVG50bHV0NjVXcFBwWE9rZzJtOUVLc2NtemZFNmtVTkxZbllWNzdmWkdGU2pyK1drbW96XFxuICAgICAgICBWSzFsSjNzZXN3Qk55UDZYNUxVc3prZjFXb2VFeUJiZmVnVGYzWGtIRWVXSjVCbEQ5c3l1cmxBMkZoK2NUYU5PXFxuICAgICAgICBSTmxBR0JaTzdTZGdUSFBZQWNIdTBmQW5KWndDWjkrWlprVm5qeVRCcVFja292TXR0S3F2dG9VS2NwN05nR3ZlXFxuICAgICAgICB3ME9KeEZLd0lJVHUxa2VHZForeU45d0J1bDRxSmZUeThvdE9jd0dMNGJub0FCTWhDTnZKYzN4QTcwQnVhYUYwXFxuICAgICAgICBmdmh4QThkaVYvMlcrcWcrTEF6ZHFhakxhTmNpdURISVk1WSt6NWtaSTFlQmEzSjNhcVVBU3NlNFl6elRZdjQ4XFxuICAgICAgICA3d0lEQVFBQlxcbiAgICAgICAgLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tXCJ9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksTWUucHJvdG90eXBlLmVuY3J5cHQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGU9QS5hLmVuY3J5cHQodGhpcy51aW50OEFycmF5MldvcmRBcnJheShlKSx0aGlzLmtleTIse2l2OnRoaXMuaXYyfSkudG9TdHJpbmcoKSxTZS5hLnRvQnl0ZUFycmF5KGUpfSxNZS5wcm90b3R5cGUuZGVjcnlwdD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy53b3JkQXJyYXkyVWludDhBcnJheShBLmEuZGVjcnlwdChTZS5hLmZyb21CeXRlQXJyYXkoZSksdGhpcy5rZXkyLHtpdjp0aGlzLml2Mn0pKX0sTWUucHJvdG90eXBlLmdlbmVyYXRlSzFTaWduPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5nZW5lcmF0ZU5vbmNlKCksdD0oKHQ9KHRoaXMua2V5MT1ELmEucGFyc2UoZSksdGhpcy5pdjE9UmUuYS5wYXJzZShDZSgpKGUpLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSksbmV3IE5lKSkuc2V0UHVibGljS2V5KHRoaXMucHVibGljS2V5KSx0LmdldEtleSgpLmVuY3J5cHQoZSkpO3JldHVybiB0aGlzLndvcmRBcnJheTJVaW50OEFycmF5KFJlLmEucGFyc2UodCkpfSxNZS5wcm90b3R5cGUuZGVjcnlwdEsyU2lnbj1mdW5jdGlvbihlKXt0cnl7dGhpcy5rZXkyPUEuYS5kZWNyeXB0KFNlLmEuZnJvbUJ5dGVBcnJheShlKSx0aGlzLmtleTEse2l2OnRoaXMuaXYxfSksdGhpcy5pdjI9Q2UoKSh0aGlzLmtleTIpfWNhdGNoKGUpe319LE1lLnByb3RvdHlwZS5nZW5lcmF0ZU5vbmNlPWZ1bmN0aW9uKCl7dmFyIGU9TWF0aC5yYW5kb20oKS50b1N0cmluZygpLnN1YnN0cigyLDE2KTtyZXR1cm4gZS5sZW5ndGg8MTYmJihlKz1lLnN1YnN0cigwLDE2LWUubGVuZ3RoKSksZX0sTWUucHJvdG90eXBlLm1kNT1mdW5jdGlvbihlKXtyZXR1cm4gQ2UoKShlKS50b1N0cmluZygpfSxNZS5wcm90b3R5cGUubWQ1Qnl0ZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMud29yZEFycmF5MlVpbnQ4QXJyYXkoQ2UoKSh0aGlzLnVpbnQ4QXJyYXkyV29yZEFycmF5KGUpKSl9LE1lLnByb3RvdHlwZS53b3JkQXJyYXkyVWludDhBcnJheT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS53b3JkcyxuPWUuc2lnQnl0ZXMscj1uZXcgVWludDhBcnJheShuKSxvPTA7bzxuO28rKyl7dmFyIGk9dFtvPj4+Ml0+Pj4yNC1vJTQqOCYyNTU7cltvXT1pfXJldHVybiByfSxNZS5wcm90b3R5cGUudWludDhBcnJheTJXb3JkQXJyYXk9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUubGVuZ3RoLG49W10scj0wO3I8dDtyKyspbltyPj4+Ml18PSgyNTUmZVtyXSk8PDI0LXIlNCo4O3JldHVybiBrZS5hLmNyZWF0ZShuLHQpfSxNZSk7ZnVuY3Rpb24gTWUoKXt9ZnVuY3Rpb24gTGUoZSl7cmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShBcnJheS5mcm9tKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChlKSkpLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUuY2hhckNvZGVBdCgwKX0pKSl9ZnVuY3Rpb24gUGUoZSl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsQXJyYXkuZnJvbShlKSkpKX12YXIgQWU9e1wiL2xyL2xvZ2luX3Jvb21fcnNwXCI6XCJMb2dpblJvb21Sc3BcIixcIi9sci9sb2dvdXRfcm9vbV9yc3BcIjpcIkxvZ291dFJvb21Sc3BcIixcIi9zdy9wdXNoX2tpY2tvdXRcIjpcIlB1c2hLaWNrb3V0XCIsXCIvc3cvcHVzaFwiOlwiUHVzaFJlcVwiLFwiL3N3L21lcmdlX3B1c2hcIjpcIkNtZE1lcmdlUHVzaFJlcVwiLFwiL2xyL3Jvb20vaGJfcnNwXCI6XCJIYlJzcFwiLFwiL2xyL3VzZXJsaXN0L3VzZXJsaXN0X3JzcFwiOlwiVXNlcmxpc3RSc3BcIixcIi9sci9zdHJlYW0vYWRkX3JzcFwiOlwiU3RyZWFtQWRkUnNwXCIsXCIvbHIvc3RyZWFtL2RlbGV0ZV9yc3BcIjpcIlN0cmVhbURlbGV0ZVJzcFwiLFwiL2xyL3N0cmVhbS91cGRhdGVfcnNwXCI6XCJTdHJlYW1VcGRhdGVSc3BcIixcIi9sci9zdHJlYW0vbGlzdF9yc3BcIjpcIlN0cmVhbUxpc3RSc3BcIixcIi9sci9wdXNoL3N0cmVhbV9hZGRcIjpcIlB1c2hTdHJlYW1cIixcIi9sci9wdXNoL3N0cmVhbV9kZWxldGVcIjpcIlB1c2hTdHJlYW1cIixcIi9sci9wdXNoL3N0cmVhbV91cGRhdGVcIjpcIlB1c2hTdHJlYW1cIixcIi9sci9zaWduYWwvbGl2ZXJlcXVlc3RfcnNwXCI6XCJTaWduYWxMaXZlUnNwXCIsXCIvbHIvc2lnbmFsL2xpdmVycmVzdWx0X3JzcFwiOlwiU2lnbmFsTGl2ZVJlc3VsUnNwXCIsXCIvbHIvc2lnbmFsL2xpdmVpbnZpdGVfcnNwXCI6XCJTaWduYWxMaXZlSW52aXRlUnNwXCIsXCIvbHIvc2lnbmFsL2xpdmVzdG9wX3JzcFwiOlwiU2lnbmFsTGl2ZVN0b3BSc3BcIixcIi9sci9zaWduYWwvbGl2ZXNjdXN0b21fcnNwXCI6XCJTaWduYWxMaXZlQ3VzdG9tUnNwXCIsXCIvbHIvaW0vY2hhdF9yc3BcIjpcIkltQ2hhdFJzcFwiLFwiL2xyL3Jvb20vZW50ZXJfcnNwXCI6XCJFbnRlclJzcFwiLFwiL2xyL3Jvb20vcXVpdF9yc3BcIjpcIlF1aXRSc3BcIixcIi9sci90cmFucy90cmFuc19yc3BcIjpcIlRyYW5zUnNwXCIsXCIvbHIvdHJhbnMvdHJhbnNmZXRjaF9yc3BcIjpcIlRyYW5zRmV0Y2hSc3BcIixcIi9sci9iaWdpbS9jaGF0X3JzcFwiOlwiQmlnaW1DaGF0UnNwXCIsXCIvbHIvcmVsYXlfcnNwXCI6XCJSZWxheVJzcFwiLFwiL2xyL3Rva2VuL3JlbmV3X3Rva2VuX3JzcFwiOlwiUmVuZXdUb2tlblJzcFwiLFwiL2xyL3B1c2gvdXNlcl91cGRhdGVkXCI6XCJQdXNoVXNlckluZm9VcGRhdGVkXCIsXCIvbHIvcHVzaC91c2VyX3Rva2VuX2V4cGlyZVwiOlwiUHVzaFVzZXJUb2tlbkV4cGlyZVwiLFwiL2xyL3B1c2gvaW1fY2hhdFwiOlwiUHVzaEltQ2hhdFwiLFwiL2xyL3B1c2gvYmlnaW1fY2hhdFwiOlwiUHVzaEJpZ0ltQ2hhdFwiLFwiL2xyL3B1c2gvdHJhbnNcIjpcIlB1c2hUcmFuc1wiLFwiL2xyL3B1c2gvdXNlcl9raWNrb3V0XCI6XCJQdXNoVXNlcktpY2tvdXRcIixcIi9sci9wdXNoL3VzZXJfbG9ncmVwb3J0XCI6XCJQdXNoVXNlckxvZ1JlcG9ydFwiLFwiL2xyL3B1c2gvdXNlcnRyYW5zXCI6XCJQdXNoVXNlclRyYW5zXCJ9LERlPShUZT1uKDEpLG4ubihUZSkpLEhlPWZ1bmN0aW9uKCl7cmV0dXJuKEhlPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPTEscj1hcmd1bWVudHMubGVuZ3RoO248cjtuKyspZm9yKHZhciBvIGluIHQ9YXJndW1lbnRzW25dKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG8pJiYoZVtvXT10W29dKTtyZXR1cm4gZX0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07dC51dGlsLkxvbmc9RGUuYSx0LmNvbmZpZ3VyZSgpO3ZhciBqZSxxZT0oKFRlPWplPWplfHx7fSlbVGUuZGlzY29ubmVjdGVkPTBdPVwiZGlzY29ubmVjdGVkXCIsVGVbVGUuYnJva2VuPTFdPVwiYnJva2VuXCIsVGVbVGUuY29ubmVjdGVkPTJdPVwiY29ubmVjdGVkXCIsT2JqZWN0LmRlZmluZVByb3BlcnR5KFVlLnByb3RvdHlwZSxcIm5pY2tOYW1lXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBMZSh0aGlzLnN0YXRlQ2VudGVyLm5pY2tOYW1lKX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxVZS5wcm90b3R5cGUuaXNEaXNDb25uZWN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhdGUhPT1qZS5jb25uZWN0ZWR9LFVlLnByb3RvdHlwZS5nZXRIZWFkZXI9ZnVuY3Rpb24oZSl7ZT17Y21kOmUsc2VxOisrdGhpcy5zZXEsdGltZXN0YW1wOihuZXcgRGF0ZSkuZ2V0VGltZSgpLHNlc3Npb25faWQ6dGhpcy5zd2l0Y2hTZXNzaW9uSUQsY29udHJvbHM6dGhpcy5jb250cm9scyxmbGFnczp0aGlzLmZsYWdzfTt2YXIgdD1FZS5wcm90b19zd2l0Y2guSGVhZGVyLmNyZWF0ZShlKTt0PUVlLnByb3RvX3N3aXRjaC5IZWFkZXIuZW5jb2RlKHQpLmZpbmlzaCgpO3JldHVybltlLnNlcSx0XX0sVWUucHJvdG90eXBlLmlzVWFDb25uZWN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudWEuaXNDb25uZWN0KCl9LFVlLnByb3RvdHlwZS5zZW5kTWVzc2FnZT1mdW5jdGlvbihlLHQsbixyLG8saSxzKXt2YXIgYT10aGlzO2lmKHZvaWQgMD09PW8mJihvPXt0aW1lb3V0OjZlM30pLHZvaWQgMD09PWkmJihpPSEwKSx0aGlzLmxvZ2dlci5pbmZvKFUuTElWRVJPT01IQU5ETEVSX1NFTkRNRVNTQUdFK1wiIGNhbGxcIiksXCIvbHIvbG9naW5fcm9vbVwiIT09ZSYmdGhpcy5zdGF0ZSE9PWplLmNvbm5lY3RlZClyZXR1cm4gdGhpcy5sb2dnZXIud2FybihVLkxJVkVST09NSEFORExFUl9TRU5ETUVTU0FHRStcIiBzdGF0ZSBcIit0aGlzLnN0YXRlKSwtMTt2YXIgYz10aGlzLmdldEhlYWRlcihlKSx1PWNbMV0sbD10OyF0aGlzLnVuRW5jcnlwdENtZExpc3QuaW5jbHVkZXMoZSkmJnRoaXMuaXNFbmNyeXB0JiYobD10aGlzLmNyeXB0by5lbmNyeXB0KHQpKSx0PXRoaXMuZ2V0SGVhZCh1Lmxlbmd0aCxsLmxlbmd0aCksdD1uZXcgVWludDhBcnJheShBcnJheS5mcm9tKHQpLmNvbmNhdChBcnJheS5mcm9tKHUpKS5jb25jYXQoQXJyYXkuZnJvbShsKSkpLGkmJih1PXtzZXE6dGhpcy5zZXEsZGVsZXRlZDohMSxzZW5kVGltZTpEYXRlLnBhcnNlKG5ldyBEYXRlK1wiXCIpLHRpbWVvdXQ6by50aW1lb3V0LHN1Y2Nlc3M6bixlcnJvcjpmdW5jdGlvbihlLHQsbil7dmFyIG87aWYoYS5sb2dnZXIuaW5mbyhVLkxJVkVST09NSEFORExFUl9TRU5ETUVTU0FHRStcIiBzZXE6IFwiK3QrXCIgXCIrSlNPTi5zdHJpbmdpZnkoZSkrXCIgXCIrSlNPTi5zdHJpbmdpZnkobikpLFwiL2xyL2xvZ2luX3Jvb21fcnNwXCIhPT0obnVsbD09KG89bnVsbD09ZT92b2lkIDA6ZS5oZWFkZXIpP3ZvaWQgMDpvLmNtZCkmJi0xPFsxMDAyLDEwNV0uaW5kZXhPZihudWxsPT0obz1udWxsPT1lP3ZvaWQgMDplLmJvZHkpP3ZvaWQgMDpvLmVycl9jb2RlKSlyZXR1cm4gbnVsbCE9biYmbi5yb29tSUQ/KG89YS5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3QuZmluZCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUucm9vbUlEPT1uLnJvb21JRH0pKSk/dm9pZCBvLnJldHJ5Um9vbSgpOnZvaWQgYS5sb2dnZXIuZXJyb3IoVS5MSVZFUk9PTUhBTkRMRVJfU0VORE1FU1NBR0UrXCIgcm9vbSBubyBmb3VuZCBpZ25vcmUgXCIpOnZvaWQgYS5ydG0ucmV0cnlSb29tKCk7WzIwNywyMDhdLmluZGV4T2YobnVsbD09KG89bnVsbD09ZT92b2lkIDA6ZS5ib2R5KT92b2lkIDA6by5lcnJfY29kZSksciYmcihlLHQpfSxwYXJhbXM6c30sbD10aGlzLnNlbmRDb21tYW5kTGlzdC5wdXNoKHUpLHRoaXMuc2VuZENvbW1hbmRNYXBbdS5zZXFdPWwpLHRoaXMubG9nZ2VyLmluZm8oVS5MSVZFUk9PTUhBTkRMRVJfU0VORE1FU1NBR0UrXCIgc2VxOiBcIitjWzBdK1wiIGNtZDogXCIrZSksaT1cIi9sci9sb2dpbl9yb29tXCI9PT1lO3JldHVybiBudWxsIT0obz10aGlzLmxpdmVyb29tUmVxdWVzdCkmJm8uc2VuZFJlcXVlc3Qoe3BheWxvYWQ6dCxhY2s6aX0sKGZ1bmN0aW9uKGUpe2EubG9nZ2VyLmluZm8oVS5MSVZFUk9PTUhBTkRMRVJfU0VORE1FU1NBR0UrXCIgZmFpbFwiKX0pLChmdW5jdGlvbigpe2EubG9nZ2VyLmluZm8oVS5MSVZFUk9PTUhBTkRMRVJfU0VORE1FU1NBR0UrXCIgYWNrXCIpfSkpLGNbMF19LFVlLnByb3RvdHlwZS5nZXRIZWFkPWZ1bmN0aW9uKGUsdCl7dmFyIG49bmV3IFVpbnQ4QXJyYXkoNyk7cmV0dXJuIG5bMF09MzMsblsxXT1lPj44LG5bMl09ZS0oblsxXTw8OCksbi5zZXQobmV3IFVpbnQ4QXJyYXkoSW50MzJBcnJheS5mcm9tKFt0XSkuYnVmZmVyKS5yZXZlcnNlKCksMyksbn0sVWUucHJvdG90eXBlLmhhbmRsZVB1c2g9ZnVuY3Rpb24oZSx0KXtpZih2b2lkIDA9PT10JiYodD0hMSksMzM9PT0obj1lWzBdKSl7dmFyIG49KGVbMV08PDgpK2VbMl0scj1FZS5wcm90b19zd2l0Y2guSGVhZGVyLmRlY29kZShlLnNsaWNlKDcsNytuKSksbz1uPWUuc2xpY2UoNytuKTtpZighdGhpcy51bkVuY3J5cHRDbWRMaXN0LmluY2x1ZGVzKHIuY21kKSYmdGhpcy5pc0VuY3J5cHQpe2lmKCF0aGlzLmhhc0NyeXB0U2lnbilyZXR1cm4gdGhpcy5sb2dnZXIud2FybihVLkxJVkVST09NSEFORExFUl9IQU5ETEVQVVNIK1wiIGRlY3J5cHQgZWFybHkgXCIrci5jbWQpLHZvaWQgdGhpcy53YWl0RGVjcnlwdENtZExpc3QucHVzaChlKTt0cnl7bz10aGlzLmNyeXB0by5kZWNyeXB0KG4pfWNhdGNoKGUpe3RoaXMubG9nZ2VyLndhcm4oVS5MSVZFUk9PTUhBTkRMRVJfSEFORExFUFVTSCtcIiBkZWNyeXB0IGZhaWwgXCIrci5jbWQpfX1pZighQWVbci5jbWRdKXJldHVybiB0aGlzLmxvZ2dlci5pbmZvKFUuTElWRVJPT01IQU5ETEVSX0hBTkRMRVBVU0grXCIgY21kIGlzIG5vdCBydGNcIiksdm9pZCB0aGlzLm9uU3dpdGNoTWVzc2FnZShyLG8pO2lmKGU9dGhpcy5kZWNvZGVSZXNwb25zZUJvZHkocixvKSx0aGlzLnN3UHVzaENtZExpc3QuaW5jbHVkZXMoci5jbWQpKXJldHVybiB0JiZcIi9sci9wdXNoL3VzZXJfdXBkYXRlZFwiPT09KG51bGw9PShuPW51bGw9PWU/dm9pZCAwOmUuaGVhZCk/dm9pZCAwOm4uc3ViX2NtZCk/dm9pZCB0aGlzLmxvZ2dlci5pbmZvKFUuTElWRVJPT01IQU5ETEVSX0hBTkRMRVBVU0grXCIgaWdub3JlIHVzZXIgdXBkYXRlZFwiKTp2b2lkIHRoaXMuaGFuZGxlU3dpdGNoUHVzaChyLGUpO3RoaXMubG9nZ2VyLmluZm8oVS5MSVZFUk9PTUhBTkRMRVJfSEFORExFUFVTSCtcIiBkb3duIFwiK3IuY21kK1wiIFwiK0pTT04uc3RyaW5naWZ5KHRoaXMudHJhbnNCdWYoZSkpKSxvPXtoZWFkZXI6dGhpcy50cmFuc0hlYWRlcihyKSxib2R5OnRoaXMudHJhbnNSc3AoZSl9LHRoaXMuaGFuZGxlU2VuZENvbW1hbmRNc2dSc3Aobyl9fSxVZS5wcm90b3R5cGUuaGFuZGxlU3dpdGNoUHVzaD1mdW5jdGlvbihlLHQpe2lmKFwiL3N3L3B1c2hcIj09PWUuY21kKXt2YXIgbj0oYT10aGlzLnRyYW5zUnNwKHQuaGVhZCkpLnJvb21faWQ7aWYodGhpcy5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3QuZmluZCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUucm9vbUlEPT1ufSkpKXt2YXIgcj12b2lkIDAsbz17aGVhZGVyOmEsYm9keTpyPXRoaXMudW5TdHJ1Y3RDbWRMaXN0LmluY2x1ZGVzKHQuaGVhZC5zdWJfY21kKT97c2lnbmFsX21zZzpQZSh0Lm1zZ19ib2R5KSxzdWJfY21kOnRoaXMuam9pbkxpdmVNYXBbdC5oZWFkLnN1Yl9jbWRdfTpcIi9sci9wdXNoL3NpZ25hbF9jdXN0b21cIj09PXQuaGVhZC5zdWJfY21kP3tjdXN0b21tc2c6UGUodC5tc2dfYm9keSl9OkFlW3QuaGVhZC5zdWJfY21kXT90aGlzLnRyYW5zUnNwKHRoaXMuZGVjb2RlKEVlLmxpdmVyb29tX2NzW0FlW3QuaGVhZC5zdWJfY21kXV0sdC5tc2dfYm9keSkpOnt9fTtpZih0aGlzLmxvZ2dlci5pbmZvKFUuTElWRVJPT01IQU5ETEVSX0hBTkRMRVNXSVRDSFBVU0grXCIgcHVzaCBcIitKU09OLnN0cmluZ2lmeSh0aGlzLnRyYW5zQnVmKG8pKSksdGhpcy53aGl0ZWJvYXJkUHVzaENtZExpc3QuaW5jbHVkZXModC5oZWFkLnN1Yl9jbWQpKXRoaXMubG9nZ2VyLmluZm8oVS5MSVZFUk9PTUhBTkRMRVJfSEFORExFU1dJVENIUFVTSCtcIiB3aGl0ZSBcIiksdGhpcy5vblN3aXRjaE1lc3NhZ2UoZSx0KTtlbHNlIHN3aXRjaCh0LmhlYWQuc3ViX2NtZCl7Y2FzZVwiL2xyL3B1c2gvdXNlcl91cGRhdGVkXCI6dGhpcy5oYW5kbGVQdXNoVXNlclN0YXRlVXBkYXRlTXNnKG8pO2JyZWFrO2Nhc2VcIi9sci9wdXNoL3VzZXJfa2lja291dFwiOnRoaXMuaGFuZGxlUHVzaEtpY2tvdXQobywhMSk7YnJlYWs7Y2FzZVwiL2xyL3B1c2gvdHJhbnNcIjp0aGlzLmhhbmRsZVB1c2hUcmFuc01zZyhvKTticmVhaztjYXNlXCIvbHIvcHVzaC9pbV9jaGF0XCI6dGhpcy5oYW5kbGVQdXNoUm9vbU1zZyhvKTticmVhaztjYXNlXCIvbHIvcHVzaC9zaWduYWxfY3VzdG9tXCI6dGhpcy5oYW5kbGVQdXNoQ3VzdG9tTXNnKG8pO2JyZWFrO2Nhc2VcIi9sci9wdXNoL3N0cmVhbV9hZGRcIjpjYXNlXCIvbHIvcHVzaC9zdHJlYW1fZGVsZXRlXCI6Y2FzZVwiL2xyL3B1c2gvc3RyZWFtX3VwZGF0ZVwiOnRoaXMuaGFuZGxlUHVzaFN0cmVhbU1zZyhvKTticmVhaztjYXNlXCIvbHIvcHVzaC9qb2lubGl2ZV9yZXF1ZXN0XCI6Y2FzZVwiL2xyL3B1c2gvam9pbmxpdmVfcmVzdWx0XCI6Y2FzZVwiL2xyL3B1c2gvam9pbmxpdmVfaW52aXRlXCI6Y2FzZVwiL2xyL3B1c2gvam9pbmxpdmVfc3RvcFwiOnRoaXMuaGFuZGxlUHVzaFNpZ25hbE1zZyhvKTticmVhaztjYXNlXCIvbHIvcHVzaC91c2VyX3Rva2VuX2V4cGlyZVwiOnRoaXMuaGFuZGxlUHVzaFRva2VuRXhwaXJlKG8pfTE9PXQuaGVhZC5xb3NfZmxhZyYmKGM9e2NvZGU6MCxtZXNzYWdlOlwiXCIsc3ViX2NtZDp0LmhlYWQuc3ViX2NtZCxtc2dfaWQ6dC5oZWFkLm1zZ19pZCxzZXJ2ZXJfc2VuZF90aW1lOnQuaGVhZC5zZW5kX3RpbWV9LHU9RWUucHJvdG9fc3dpdGNoLlB1c2hSc3AuY3JlYXRlKGMpLGw9RWUucHJvdG9fc3dpdGNoLlB1c2hSc3AuZW5jb2RlKHUpLmZpbmlzaCgpLHRoaXMuc2VuZE1lc3NhZ2UoXCIvc3cvcHVzaF9yc3BcIixsLHZvaWQgMCx2b2lkIDApKX1lbHNlIHRoaXMubG9nZ2VyLndhcm4oVS5MSVZFUk9PTUhBTkRMRVJfSEFORExFU1dJVENIUFVTSCtcIiByb29tIG5vIGZvdW5kIGlnbm9yZSBcIil9ZWxzZXt2YXIgaSxzLGEsYyx1LGw7XCIvc3cvbWVyZ2VfcHVzaFwiPT09ZS5jbWQ/KGk9KGE9dGhpcy50cmFuc1JzcCh0LmhlYWQpKS5yb29tX2lkLHRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0LmZpbmQoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJvb21JRD09aX0pKT8ocz1bXSx0Lm1lc3NhZ2VzLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciB0O3MucHVzaCh7c3ViX2NtZDplLnN1Yl9jbWQsc3ViX3NlcTplLnN1Yl9zZXEsbXNnX2lkOmUubXNnX2lkfSksXCIvbHIvcHVzaC9iaWdpbV9jaGF0XCI9PT1lLnN1Yl9jbWQmJih0PUVlLmxpdmVyb29tX2NzLlB1c2hCaWdJbUNoYXQuZGVjb2RlKGUubXNnX2JvZHkpLGUubXNnX2JvZHk9dCl9KSksZGVsZXRlKGE9e2hlYWRlcjoocj10aGlzLnRyYW5zUnNwKHQpKS5oZWFkLGJvZHk6cn0pLmJvZHkuaGVhZCx0aGlzLmhhbmRsZVB1c2hNZXJnZU1zZyhhKSwxPT10LmhlYWQucW9zX2ZsYWcmJih1PUVlLnByb3RvX3N3aXRjaC5DbWRNZXJnZVB1c2hSc3AuY3JlYXRlKGM9e21lc3NhZ2VzOnN9KSxsPUVlLnByb3RvX3N3aXRjaC5DbWRNZXJnZVB1c2hSc3AuZW5jb2RlKHUpLmZpbmlzaCgpLHRoaXMuc2VuZE1lc3NhZ2UoXCIvc3cvbWVyZ2VfcHVzaF9yc3BcIixsLHZvaWQgMCx2b2lkIDApKSk6dGhpcy5sb2dnZXIud2FybihVLkxJVkVST09NSEFORExFUl9IQU5ETEVTV0lUQ0hQVVNIK1wiIHJvb20gbm8gZm91bmQgaWdub3JlIFwiKSk6XCIvc3cvcHVzaF9raWNrb3V0XCI9PT1lLmNtZCYmKHI9e3JlYXNvbjo5MDA8dC5yZWFzb24/dC5yZWFzb24tOTAwOnQucmVhc29uLG1zZzp0Lm1lc3NhZ2UsbmVlZF9yZWxvZ2luOnZvaWQgMCE9PXQubmVlZF9yZWxvZ2luP3QubmVlZF9yZWxvZ2luOjB9LHRoaXMuaGFuZGxlUHVzaEtpY2tvdXQoe2hlYWRlcjplLGJvZHk6cn0sITApKX19LFVlLnByb3RvdHlwZS5oYW5kbGVQdXNoVG9rZW5FeHBpcmU9ZnVuY3Rpb24oZSl7fSxVZS5wcm90b3R5cGUuaGFuZGxlUHVzaEtpY2tvdXQ9ZnVuY3Rpb24oZSx0KXt9LFVlLnByb3RvdHlwZS5oYW5kbGVQdXNoU3RyZWFtTXNnPWZ1bmN0aW9uKGUpe30sVWUucHJvdG90eXBlLmhhbmRsZVB1c2hTaWduYWxNc2c9ZnVuY3Rpb24oZSl7fSxVZS5wcm90b3R5cGUuaGFuZGxlUHVzaE1lcmdlTXNnPWZ1bmN0aW9uKGUpe30sVWUucHJvdG90eXBlLmhhbmRsZVB1c2hDdXN0b21Nc2c9ZnVuY3Rpb24oZSl7fSxVZS5wcm90b3R5cGUuaGFuZGxlUHVzaFJvb21Nc2c9ZnVuY3Rpb24oZSl7fSxVZS5wcm90b3R5cGUuaGFuZGxlUHVzaFRyYW5zTXNnPWZ1bmN0aW9uKGUpe30sVWUucHJvdG90eXBlLm9uU3dpdGNoTWVzc2FnZT1mdW5jdGlvbihlLHQpe30sVWUucHJvdG90eXBlLmRlY29kZVJlc3BvbnNlQm9keT1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMub25Td2l0Y2hDbWRMaXN0LmluY2x1ZGVzKGUuY21kKT9cInByb3RvX3N3aXRjaFwiOlwibGl2ZXJvb21fY3NcIjtyZXR1cm4gdGhpcy5kZWNvZGUodGhpcy5wcm90b0luc3RhbmNlW25dW0FlW2UuY21kXV0sdCl9LFVlLnByb3RvdHlwZS5oYW5kbGVXYWl0RGVjcnlwdENtZExpc3Q9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMud2FpdERlY3J5cHRDbWRMaXN0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2UuaGFuZGxlUHVzaCh0LCEwKX0pKSx0aGlzLndhaXREZWNyeXB0Q21kTGlzdD1bXX0sVWUucHJvdG90eXBlLmhhbmRsZVB1c2hVc2VyU3RhdGVVcGRhdGVNc2c9ZnVuY3Rpb24oZSl7fSxVZS5wcm90b3R5cGUubG9naW49ZnVuY3Rpb24oZSx0LG4pe3ZhciBvLGkscyxhLGM9dGhpcyx1PSh0aGlzLnN0YXRlPT1qZS5kaXNjb25uZWN0ZWQmJih0aGlzLmxvZ2dlci5pbmZvKFUuTElWRVJPT01IQU5ETEVSX0xPR0lOK1wiIHN0YXRlIGRpc2Nvbm5lY3RcIiksdGhpcy5jbG9zZVJlcXVlc3QoKSksKG5ldyBEYXRlKS5nZXRUaW1lKCkrXCJcIik7ZS5pc011bHRpPyhzPXtyZXFfaGVhZDp0aGlzLmdldFJlcUhlYWQoZSksc3dpdGNoX3Nlc3Npb25faWQ6dGhpcy5zd2l0Y2hTZXNzaW9uSUQsbmlja19uYW1lOnRoaXMubmlja05hbWUscm9sZTp0aGlzLnN0YXRlQ2VudGVyLnJvbGUsbmV0X3R5cGU6ai5nZXROZXRUeXBlTnVtKCksY29uZmlnOntyb29tX2NyZWF0ZV9mbGFnOnRoaXMuc3RhdGVDZW50ZXIucm9vbUNyZWF0ZUZsYWcsdXNlcl9zdGF0ZV9mbGFnOnRoaXMuc3RhdGVDZW50ZXIudXNlclN0YXRlVXBkYXRlPzE6MH0sbHZfa2V5OmUubHZLZXksdGhpcmRfdG9rZW46TGUoZS50b2tlbiksdXNlcl9jb3VudF9saW1pdDplLm1heE1lbWJlckNvdW50LHJlbGF0ZV9zZXJ2aWNlOnRoaXMuc3RhdGVDZW50ZXIucmVsYXRlU2VydmljZS5qb2luKCl8fFwiXCIsY29ubl90eXBlOjIscm9vbV9uYW1lOkxlKGUucm9vbU5hbWUpfSxpPUhlKEhlKHt9LHMpLHtyb29tX25hbWU6ZS5yb29tTmFtZSx0aGlyZF90b2tlbjplLnRva2VufSksdGhpcy5sb2dnZXIuaW5mbyhVLkxJVkVST09NSEFORExFUl9MT0dJTitcIiBlbnRlciBcIitKU09OLnN0cmluZ2lmeShpKSkscz1FZS5saXZlcm9vbV9jcy5FbnRlclJlcS5jcmVhdGUocyksYT1FZS5saXZlcm9vbV9jcy5FbnRlclJlcS5lbmNvZGUocykuZmluaXNoKCksdGhpcy5zZW5kTWVzc2FnZShcIi9sci9yb29tL2VudGVyXCIsYSwoZnVuY3Rpb24oZSxuKXtjLmxvbmdUb1N0cmluZ051bWJlcihlLmJvZHksW1widXNlcl9zZXNzaW9uX2lkXCIsXCJyb29tX3Nlc3Npb25faWRcIixcInJldF90aW1lc3RhbXBcIl0sXCJ0b1N0cmluZ1wiKSxjLnRyYW5zS2V5c05hbWUoZS5ib2R5LFtbXCJ1c2VyX3Nlc3Npb25faWRcIixcInNlc3Npb25faWRcIl0sW1wiaGJfaW50ZXJ2YWxcIixcImhlYXJiZWF0X2ludGVydmFsXCJdXSksYy5rZXlzRXhpc3QoZS5ib2R5LFtcInRva2VuX3JlbWFpbl90aW1lXCIsXCJzdHJlYW1fc2VxXCJdKSx0JiZ0KGUsbil9KSwoZnVuY3Rpb24oZSx0KXtuJiZuKGUsdCl9KSx2b2lkIDAsdm9pZCAwLHtyb29tSUQ6ZS5yb29tSUR9KSk6KG89e2FwcF9pZDp0aGlzLnN0YXRlQ2VudGVyLmFwcGlkLGlkX25hbWU6TGUodGhpcy5zdGF0ZUNlbnRlci5pZE5hbWUpLGRldmljZV9pZDp0aGlzLnN0YXRlQ2VudGVyLmRldmljZUlELHRlcm1fdHlwZTp0aGlzLnN0YXRlQ2VudGVyLkVOViUyPT0wP3IuVFRfV0VCOnIuVFRfTUlOSVBST0dSQU0sbmV0X3R5cGU6ai5nZXROZXRUeXBlTnVtKCksc2RrX3ZlcjpwYXJzZUludCh0aGlzLnJ0bS52ZXJzaW9uLnJlcGxhY2UoL1xcLi9nLFwiXCIpKSxwcm90b192ZXI6MTMxMDcyLG5pY2tfbmFtZTp0aGlzLm5pY2tOYW1lLGNsaWVudF9zdGFtcDpMZSh1KSxjcnlwdF92ZXJzaW9uOjEsazFfc2lnbjp0aGlzLmNyeXB0by5nZW5lcmF0ZUsxU2lnbigpLHJlbG9naW5fdG9rZW46dGhpcy5zd2l0Y2hTZXNzaW9uSUQubm90RXF1YWxzKERlLmEuZnJvbUludCgwKSk/TGUodGhpcy5yZWxvZ2luVG9rZW4pOlwiXCIscm9sZTp0aGlzLnN0YXRlQ2VudGVyLnJvbGUsbGl2ZXJvb21fc2Vzc2lvbl9pZDpEZS5hLmZyb21TdHJpbmcoZS5zZXNzaW9uSUQpLHJvb21faWQ6TGUoZS5yb29tSUQpLHJvb21fbmFtZTpMZShlLnJvb21OYW1lKSxiaXpfdHlwZTowLHJvb21fY3JlYXRlX2ZsYWc6dGhpcy5zdGF0ZUNlbnRlci5yb29tQ3JlYXRlRmxhZyx1c2VyX3N0YXRlX2ZsYWc6dGhpcy5zdGF0ZUNlbnRlci51c2VyU3RhdGVVcGRhdGU/MTowLGx2X2tleTplLmx2S2V5LHRoaXJkX3Rva2VuOkxlKGUudG9rZW4pLHVzZXJfY291bnRfbGltaXQ6ZS5tYXhNZW1iZXJDb3VudCxyZWxhdGVfc2VydmljZTp0aGlzLnN0YXRlQ2VudGVyLnJlbGF0ZVNlcnZpY2Uuam9pbigpfHxcIlwiLGJpel92ZXJzaW9uOnRoaXMuc3RhdGVDZW50ZXIuYml6VmVyc2lvbnx8XCJcIixsb2dpbl9sb2dpYzp0aGlzLnN0YXRlQ2VudGVyLmlzTXVsdGlSb29tPzM6MSxzZGtfY29ubl90eXBlOjJ9LGk9SGUoSGUoe30sbykse2lkX25hbWU6dGhpcy5zdGF0ZUNlbnRlci5pZE5hbWUsbmlja19uYW1lOnRoaXMuc3RhdGVDZW50ZXIubmlja05hbWUsY2xpZW50X3N0YW1wOnUsazFfc2lnbjp2b2lkIDAscmVsb2dpbl90b2tlbjp0aGlzLnJlbG9naW5Ub2tlbixsaXZlcm9vbV9zZXNzaW9uX2lkOmUuc2Vzc2lvbklELHJvb21faWQ6ZS5yb29tSUQscm9vbV9uYW1lOmUucm9vbU5hbWUsdGhpcmRfdG9rZW46ZS50b2tlbn0pLHRoaXMubG9nZ2VyLmluZm8oVS5MSVZFUk9PTUhBTkRMRVJfTE9HSU4rXCIgbG9naW4gXCIrSlNPTi5zdHJpbmdpZnkoaSkpLHRoaXMuazFTaWduTG9nb3V0QnVmZmVyPXRoaXMuY3J5cHRvLm1kNUJ5dGVzKG8uazFfc2lnbikscz1FZS5wcm90b19zd2l0Y2guTG9naW5Sb29tUmVxLmNyZWF0ZShvKSxhPUVlLnByb3RvX3N3aXRjaC5Mb2dpblJvb21SZXEuZW5jb2RlKHMpLmZpbmlzaCgpLHRoaXMuc2VuZE1lc3NhZ2UoXCIvbHIvbG9naW5fcm9vbVwiLGEsKGZ1bmN0aW9uKGUsbil7Yy5zd2l0Y2hTZXNzaW9uSUQ9ZS5oZWFkZXIuc2Vzc2lvbl9pZCxjLnJlbG9naW5Ub2tlbj1lLmJvZHkucmVsb2dpbl90b2tlbixjLmxvZ2dlci5pbmZvKFUuTElWRVJPT01IQU5ETEVSX0xPR0lOK1wiIGxvZ2luIHJzcFwiKSxjLmNyeXB0by5kZWNyeXB0SzJTaWduKGUuYm9keS5rMl9zaWduKSwxPT09ZS5ib2R5LmNyeXB0X29wdGlvbj9jLmlzRW5jcnlwdD0hMTp2b2lkIDA9PT1lLmJvZHkuY3J5cHRfb3B0aW9uJiYoYy5pc0VuY3J5cHQ9ITApLGMuaGFzQ3J5cHRTaWduPSEwLGMud2FpdERlY3J5cHRUaW1lcj1zZXRUaW1lb3V0KChmdW5jdGlvbigpe2MuaGFuZGxlV2FpdERlY3J5cHRDbWRMaXN0KCl9KSwwKSxjLmxvbmdUb1N0cmluZ051bWJlcihlLmJvZHksW1wibGl2ZXJvb21fc2Vzc2lvbl9pZFwiLFwicm9vbV9zZXNzaW9uX2lkXCIsXCJyZXRfdGltZXN0YW1wXCJdLFwidG9TdHJpbmdcIiksZGVsZXRlIGUuYm9keS5oZWFydGJlYXRfaW50ZXJ2YWwsZGVsZXRlIGUuYm9keS5oZWFydGJlYXRfdGltZW91dCxjLnRyYW5zS2V5c05hbWUoZS5ib2R5LFtbXCJsaXZlcm9vbV9zZXNzaW9uX2lkXCIsXCJzZXNzaW9uX2lkXCJdLFtcImxpdmVyb29tX2hiX2ludGVydmFsXCIsXCJoZWFyYmVhdF9pbnRlcnZhbFwiXV0pLGMua2V5c0V4aXN0KGUuYm9keSxbXCJ0b2tlbl9yZW1haW5fdGltZVwiLFwic3RyZWFtX3NlcVwiXSksdCYmdChlLG4pfSksKGZ1bmN0aW9uKGUsdCl7biYmbihlLHQpfSkpKX0sVWUucHJvdG90eXBlLnRyYW5zS2V5c05hbWU9ZnVuY3Rpb24oZSx0KXt0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2VbdFsxXV09ZVt0WzBdXSxkZWxldGUgZVt0WzBdXX0pKX0sVWUucHJvdG90eXBlLmtleXNFeGlzdD1mdW5jdGlvbihlLHQpe3QuZm9yRWFjaCgoZnVuY3Rpb24odCl7dm9pZCAwPT09ZVt0XSYmKGVbdF09MCl9KSl9LFVlLnByb3RvdHlwZS5sb25nVG9TdHJpbmdOdW1iZXI9ZnVuY3Rpb24oZSx0LG4pe3QuZm9yRWFjaCgoZnVuY3Rpb24odCl7RGUuYS5pc0xvbmcoZVt0XSkmJihlW3RdPWVbdF1bbl0oKSl9KSl9LFVlLnByb3RvdHlwZS5sb2dvdXQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLG8saSxzO3JldHVybiBlLmlzTXVsdGk/KHI9e3JlcV9oZWFkOnRoaXMuZ2V0UmVxSGVhZChlKSxzd2l0Y2hfc2Vzc2lvbl9pZDp0aGlzLnN3aXRjaFNlc3Npb25JRCxuaWNrX25hbWU6dGhpcy5uaWNrTmFtZSxyb2xlOnRoaXMuc3RhdGVDZW50ZXIucm9sZSxjb25maWdfbGlzdDp7cm9vbV9jcmVhdGVfZmxhZzp0aGlzLnN0YXRlQ2VudGVyLnJvb21DcmVhdGVGbGFnLHVzZXJfc3RhdGVfZmxhZzp0aGlzLnN0YXRlQ2VudGVyLnVzZXJTdGF0ZVVwZGF0ZT8xOjB9fSxvPXRoaXMudHJhbnNCdWYociksdGhpcy5sb2dnZXIuaW5mbyhVLkxJVkVST09NSEFORExFUl9MT0dPVVQrXCIgcXVpdCBcIitKU09OLnN0cmluZ2lmeShvKSksaT1FZS5saXZlcm9vbV9jcy5RdWl0UmVxLmNyZWF0ZShyKSxzPUVlLmxpdmVyb29tX2NzLlF1aXRSZXEuZW5jb2RlKGkpLmZpbmlzaCgpLHRoaXMuc2VuZE1lc3NhZ2UoXCIvbHIvcm9vbS9xdWl0XCIscyx0LG4pKToocj17bG9nb3V0X2NvZGU6MCxsb2dvdXRfY2hlY2s6dGhpcy5jcnlwdG8ubWQ1Qnl0ZXMoTGUoZS50b2tlbikpLGxpdmVyb29tX3Nlc3Npb25faWQ6RGUuYS5mcm9tU3RyaW5nKGUuc2Vzc2lvbklEKSxyb29tX2lkOkxlKGUucm9vbUlEKSxyb2xlOnRoaXMuc3RhdGVDZW50ZXIucm9sZSxuaWNrbmFtZTp0aGlzLm5pY2tOYW1lLGxvZ291dF9sb2dpYzp0aGlzLnN0YXRlQ2VudGVyLmlzTXVsdGlSb29tPzM6MX0sbz10aGlzLnRyYW5zQnVmKHIpLHRoaXMubG9nZ2VyLmluZm8oVS5MSVZFUk9PTUhBTkRMRVJfTE9HT1VUK1wiIGxvZ291dCBcIitKU09OLnN0cmluZ2lmeShvKSksaT1FZS5wcm90b19zd2l0Y2guTG9nb3V0Um9vbVJlcS5jcmVhdGUocikscz1FZS5wcm90b19zd2l0Y2guTG9nb3V0Um9vbVJlcS5lbmNvZGUoaSkuZmluaXNoKCksdGhpcy5zZW5kTWVzc2FnZShcIi9sci9sb2dvdXRfcm9vbVwiLHMsdCxuKSl9LFVlLnByb3RvdHlwZS5jaGVja1NlbmRNZXNzYWdlTGlzdD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5nZXRGaXJzdCgpO251bGwhPXQ7KWUucmVtb3ZlKHQpLHQuX2RhdGEmJnQuX2RhdGEuZXJyb3ImJnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dCYmdC5fZGF0YSYmdC5fZGF0YS5lcnJvciYmdC5fZGF0YS5lcnJvcihNLlRJTUVPVVQsdC5fZGF0YS5zZXEpfSksMCksdD1lLmdldEZpcnN0KCl9LFVlLnByb3RvdHlwZS5jaGVja01lc3NhZ2VMaXN0VGltZW91dD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1lLmdldEZpcnN0KCkscj1EYXRlLnBhcnNlKG5ldyBEYXRlK1wiXCIpLG89MCxpPXRoaXM7bnVsbCE9biYmXCJicmVha1wiIT09ZnVuY3Rpb24oKXtyZXR1cm4gbi5fZGF0YSYmbi5fZGF0YS5zZW5kVGltZStuLl9kYXRhLnRpbWVvdXQ+cj9cImJyZWFrXCI6KG4uX2RhdGEmJmRlbGV0ZSB0W24uX2RhdGEuc2VxXSxlLnJlbW92ZShuKSxuLl9kYXRhJiZudWxsPT1uLl9kYXRhLmVycm9yfHxuLl9kYXRhJiZuLl9kYXRhLnNlbmRUaW1lK2kuc2VuZERhdGFEcm9wVGltZW91dDxyfHwocz1uJiZuLl9kYXRhJiZuLl9kYXRhLmVycm9yLGE9biYmbi5fZGF0YSYmbi5fZGF0YS5zZXEsc2V0VGltZW91dCgoZnVuY3Rpb24oKXtzJiZzKE0uVElNRU9VVCxhKX0pLDApKSwrK28+PWkuc2VuZERhdGFDaGVja09uY2VDb3VudD9cImJyZWFrXCI6dm9pZChuPWUuZ2V0Rmlyc3QoKSkpO3ZhciBzLGF9KCk7KTt9LFVlLnByb3RvdHlwZS5zdGFydENoZWNrPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLmNoZWNrTWVzc2FnZUxpc3RUaW1lb3V0KHRoaXMuc2VuZENvbW1hbmRMaXN0LHRoaXMuc2VuZENvbW1hbmRNYXApLHRoaXMuc2VuZERhdGFDaGVja1RpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZS5zdGFydENoZWNrKCl9KSx0aGlzLnNlbmREYXRhQ2hlY2tJbnRlcnZhbCl9LFVlLnByb3RvdHlwZS5zdG9wQ2hlY2s9ZnVuY3Rpb24oKXt0aGlzLmNoZWNrU2VuZE1lc3NhZ2VMaXN0KHRoaXMuc2VuZENvbW1hbmRMaXN0KSxjbGVhclRpbWVvdXQodGhpcy5zZW5kRGF0YUNoZWNrVGltZXIpfSxVZS5wcm90b3R5cGUuaGFuZGxlU2VuZENvbW1hbmRNc2dSc3A9ZnVuY3Rpb24oZSl7dmFyIHQsbixyPXRoaXMsbz10aGlzLnNlbmRDb21tYW5kTWFwW2UuaGVhZGVyLnNlcV07bnVsbCE9byYmKHQ9by5fZGF0YSxuPW51bGw9PXQ/dm9pZCAwOnQucGFyYW1zLGRlbGV0ZSB0aGlzLnNlbmRDb21tYW5kTWFwW2UuaGVhZGVyLnNlcV0sdGhpcy5zZW5kQ29tbWFuZExpc3QucmVtb3ZlKG8pLDA9PT1lLmJvZHkuZXJyX2NvZGU/c2V0VGltZW91dCgoZnVuY3Rpb24oKXt0JiZudWxsIT10LnN1Y2Nlc3MmJnQuc3VjY2VzcyhlLHIuc2VxKX0pLDApOnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dCYmbnVsbCE9dC5lcnJvciYmdC5lcnJvcihlLHIuc2VxLG4pfSksMCkpfSxVZS5wcm90b3R5cGUuZ2V0UmVxSGVhZD1mdW5jdGlvbihlKXtyZXR1cm57cm9vbV9pZDplLnJvb21JRCx1c2VyX3Nlc3Npb25faWQ6RGUuYS5mcm9tU3RyaW5nKGUuc2Vzc2lvbklEKSxyb29tX3Nlc3Npb25faWQ6RGUuYS5mcm9tU3RyaW5nKGUucm9vbVNlc3Npb25JRCl9fSxVZS5wcm90b3R5cGUuaGVhcnRCZWF0PWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzO249e3JlcV9oZWFkOnRoaXMuZ2V0UmVxSGVhZChuKSxyb2xlOnRoaXMuc3RhdGVDZW50ZXIucm9sZSxsdl9rZXk6bi5sdktleX0sbj1FZS5saXZlcm9vbV9jcy5IYlJlcS5jcmVhdGUobiksbj1FZS5saXZlcm9vbV9jcy5IYlJlcS5lbmNvZGUobikuZmluaXNoKCk7dGhpcy5zZW5kTWVzc2FnZShcIi9sci9yb29tL2hiXCIsbiwoZnVuY3Rpb24odCl7ci50cmFuc0tleXNOYW1lKHQuYm9keSxbW1wiaGJfaW50ZXJ2YWxcIixcImhlYXJiZWF0X2ludGVydmFsXCJdLFtcImhiX3RpbWVvdXRcIixcImhlYXJiZWF0X3RpbWVvdXRcIl1dKSx0LmJvZHkuc2VydmVyX3VzZXJfc2VxPXQuYm9keS51c2VyX3NlcS50b051bWJlcigpLHIubG9uZ1RvU3RyaW5nTnVtYmVyKHQuYm9keSxbXCJkYXRpX3RpbWVfd2luZG93XCJdLFwidG9OdW1iZXJcIiksZSYmZSh0KX0pLHQpfSxVZS5wcm90b3R5cGUuZmV0Y2hVc2VyTGlzdD1mdW5jdGlvbihlLHQsbixyKXt2YXIgbz10aGlzO3I9dGhpcy5nZXRSZXFIZWFkKHIpLHI9SGUoe3JlcV9oZWFkOnJ9LGUpLGU9dGhpcy50cmFuc0J1ZihyKSx0aGlzLmxvZ2dlci5pbmZvKFUuTElWRVJPT01IQU5ETEVSX0ZFVENIX1VTRVJfTElTVCtcIiBcIitKU09OLnN0cmluZ2lmeShlKSksZT1FZS5saXZlcm9vbV9jcy5Vc2VybGlzdFJlcS5jcmVhdGUocikscj1FZS5saXZlcm9vbV9jcy5Vc2VybGlzdFJlcS5lbmNvZGUoZSkuZmluaXNoKCk7cmV0dXJuIHRoaXMuc2VuZE1lc3NhZ2UoXCIvbHIvdXNlcmxpc3QvdXNlcmxpc3RcIixyLChmdW5jdGlvbihlLG4pe28ubG9nZ2VyLmluZm8oVS5MSVZFUk9PTUhBTkRMRVJfRkVUQ0hfVVNFUl9MSVNUK1wiIHN1YyBcIituKSxvLnRyYW5zS2V5c05hbWUoZS5ib2R5LFtbXCJ1c2VyX2Jhc2ljX2xpc3RcIixcInVzZXJfYmFzZWluZm9zXCJdXSksby5sb25nVG9TdHJpbmdOdW1iZXIoZS5ib2R5LFtcInNlcnZlcl91c2VyX3NlcVwiLFwic2VydmVyX3VzZXJfaW5kZXhcIixcInJldF91c2VyX2luZGV4XCJdLFwidG9OdW1iZXJcIiksdCYmdChlLG4pfSksbil9LFVlLnByb3RvdHlwZS5zZW5kUm9vbU1zZz1mdW5jdGlvbihlLHQsbixyKXt2YXIgbz10aGlzO3I9e3JlcV9oZWFkOnRoaXMuZ2V0UmVxSGVhZChyKSxtc2dfY2F0ZWdvcnk6ZS5tc2dfY2F0ZWdvcnksbXNnX3ByaW9yaXR5OmUubXNnX3ByaW9yaXR5LG1zZ190eXBlOmUubXNnX3R5cGUsbXNnX2NvbnRlbnQ6TGUoZS5tc2dfY29udGVudCl9LGU9dGhpcy50cmFuc0J1ZihyKSx0aGlzLmxvZ2dlci5pbmZvKFUuTElWRVJPT01IQU5ETEVSX1NFTkRST09NTVNHK1wiIFwiK0pTT04uc3RyaW5naWZ5KGUpKSxlPUVlLmxpdmVyb29tX2NzLkltQ2hhdFJlcS5jcmVhdGUocikscj1FZS5saXZlcm9vbV9jcy5JbUNoYXRSZXEuZW5jb2RlKGUpLmZpbmlzaCgpO3JldHVybiB0aGlzLnNlbmRNZXNzYWdlKFwiL2xyL2ltL2NoYXRcIixyLChmdW5jdGlvbihlKXtvLmxvbmdUb1N0cmluZ051bWJlcihlLmJvZHksW1wibXNnX2lkXCJdLFwidG9OdW1iZXJcIiksdCYmdChlKX0pLG4pfSxVZS5wcm90b3R5cGUuc2VuZFJlbGlhYmxlTWVzc2FnZT1mdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gcj17cmVxX2hlYWQ6dGhpcy5nZXRSZXFIZWFkKHIpLHJvbGU6dGhpcy5zdGF0ZUNlbnRlci5yb2xlLG5pY2tfbmFtZTp0aGlzLm5pY2tOYW1lLHRyYW5zX3R5cGU6TGUoZS50cmFuc190eXBlKSx0cmFuc19kYXRhOkxlKGUudHJhbnNfZGF0YSksdHJhbnNfbG9jYWxfc2VxOmUudHJhbnNfbG9jYWxfc2VxLHRyYW5zX2NoYW5uZWw6TGUoZS50cmFuc19jaGFubmVsKX0sZT10aGlzLnRyYW5zQnVmKHIpLHRoaXMubG9nZ2VyLmluZm8oVS5MSVZFUk9PTUhBTkRMRVJfU0VORFJFTElBQkxFTUVTU0FHRStcIiBcIitKU09OLnN0cmluZ2lmeShlKSksZT1FZS5saXZlcm9vbV9jcy5UcmFuc1JlcS5jcmVhdGUocikscj1FZS5saXZlcm9vbV9jcy5UcmFuc1JlcS5lbmNvZGUoZSkuZmluaXNoKCksdGhpcy5zZW5kTWVzc2FnZShcIi9sci90cmFucy90cmFuc1wiLHIsdCxuKX0sVWUucHJvdG90eXBlLmZldGNoUmVsaWFibGVNZXNzYWdlPWZ1bmN0aW9uKGUsdCxuLHIpe3I9dGhpcy5nZXRSZXFIZWFkKHIpO3ZhciBvPWUuZmV0Y2hfYXJyYXkubWFwKChmdW5jdGlvbihlKXtyZXR1cm57dHJhbnNfdHlwZTpMZShlLnRyYW5zX3R5cGUpLHRyYW5zX2xvY2FsX3NlcTplLnRyYW5zX3NlcX19KSk7cj17cmVxX2hlYWQ6cix0cmFuc19jaGFubmVsOkxlKGUudHJhbnNfY2hhbm5lbCksZmV0Y2hfYXJyYXk6b30sZT10aGlzLnRyYW5zQnVmKHIpLHRoaXMubG9nZ2VyLmluZm8oVS5MSVZFUk9PTUhBTkRMRVJfRkVUQ0hSRUxJQUJMRU1FU1NBR0UrXCIgXCIrSlNPTi5zdHJpbmdpZnkoZSkpLG89RWUubGl2ZXJvb21fY3MuVHJhbnNGZXRjaFJlcS5jcmVhdGUociksZT1FZS5saXZlcm9vbV9jcy5UcmFuc0ZldGNoUmVxLmVuY29kZShvKS5maW5pc2goKTtyZXR1cm4gdGhpcy5zZW5kTWVzc2FnZShcIi9sci90cmFucy90cmFuc2ZldGNoXCIsZSx0LG4pfSxVZS5wcm90b3R5cGUuc2VuZEN1c3RvbUNvbW1hbmQ9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG89dGhpcyxpPShyPXRoaXMuZ2V0UmVxSGVhZChyKSxlLmRlc3RfaWRfbmFtZS5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybntpZF9uYW1lOkxlKGUpfX0pKSk7cj1IZSh7cmVxX2hlYWQ6cixkc3RfdXNlcmxpc3Q6aSxwdXNoX21lc3NhZ2U6TGUoZS5jdXN0b21fbXNnKX0sZSksaT10aGlzLnRyYW5zQnVmKHIpLHRoaXMubG9nZ2VyLmluZm8oVS5MSVZFUk9PTUhBTkRMRVJfU0VORENVU1RPTUNPTU1BTkQrXCIgXCIrSlNPTi5zdHJpbmdpZnkoaSkpLGU9RWUubGl2ZXJvb21fY3MuU2lnbmFsTGl2ZVJlcS5jcmVhdGUociksaT1FZS5saXZlcm9vbV9jcy5TaWduYWxMaXZlUmVxLmVuY29kZShlKS5maW5pc2goKTtyZXR1cm4gdGhpcy5zZW5kTWVzc2FnZShcIi9sci9zaWduYWwvbGl2ZXNjdXN0b21cIixpLChmdW5jdGlvbihlKXt0JiZ0KG8udHJhbnNSc3AoZSkpfSksKGZ1bmN0aW9uKGUpe24mJm4oby50cmFuc1JzcEhlYWQoZS5yc3BfaGVhZCkpfSkpfSxVZS5wcm90b3R5cGUuc2VuZEJpZ1Jvb21NZXNzYWdlPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiByPXRoaXMuZ2V0UmVxSGVhZChyKSxlPWUubXNncy5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybnttc2dfY2F0ZWdvcnk6ZS5tc2dfY2F0ZWdvcnksbXNnX3R5cGU6ZS5tc2dfdHlwZSxtc2dfdGltZXN0YW1wOkRlLmEuZnJvbU51bWJlcihEYXRlLm5vdygpKSxtc2dfY29udGVudDpMZShlLm1zZ19jb250ZW50KSxiaWdtc2dfY2xpZW50X2lkOkxlKGUuYmlnbXNnX2NsaWVudF9pZCl9fSkpLHI9e3JlcV9oZWFkOnIsbmlja19uYW1lOnRoaXMubmlja05hbWUscm9sZTp0aGlzLnN0YXRlQ2VudGVyLnJvbGUsbXNnczplfSxlPXRoaXMudHJhbnNCdWYociksdGhpcy5sb2dnZXIuaW5mbyhVLkxJVkVST09NSEFORExFUl9TRU5EQklHUk9PTU1FU1NBR0UrXCIgXCIrSlNPTi5zdHJpbmdpZnkoZSkpLGU9RWUubGl2ZXJvb21fY3MuQmlnaW1DaGF0UmVxLmNyZWF0ZShyKSxyPUVlLmxpdmVyb29tX2NzLkJpZ2ltQ2hhdFJlcS5lbmNvZGUoZSkuZmluaXNoKCksdGhpcy5zZW5kTWVzc2FnZShcIi9sci9iaWdpbS9jaGF0XCIscix0LG4pfSxVZS5wcm90b3R5cGUuc2VuZFJlbGF5TWVzc2FnZT1mdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gcj17cmVxX2hlYWQ6dGhpcy5nZXRSZXFIZWFkKHIpLG5pY2tfbmFtZTp0aGlzLm5pY2tOYW1lLHJvbGU6dGhpcy5zdGF0ZUNlbnRlci5yb2xlLHJlbGF5X3R5cGU6TGUoZS5yZWxheV90eXBlKSxyZWxheV9kYXRhOkxlKGUucmVsYXlfZGF0YSl9LGU9RWUubGl2ZXJvb21fY3MuUmVsYXlSZXEuY3JlYXRlKHIpLHI9RWUubGl2ZXJvb21fY3MuUmVsYXlSZXEuZW5jb2RlKGUpLmZpbmlzaCgpLHRoaXMuc2VuZE1lc3NhZ2UoXCIvbHIvcmVsYXlcIixyLHQsbil9LFVlLnByb3RvdHlwZS5zZW5kU2lnbmFsQ21kPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPVwiXCIsaT1cIlwiO3N3aXRjaChlLnN1Yl9jbWQpe2Nhc2UgMTAwMzpvPVwiL2xyL3NpZ25hbC9saXZlaW52aXRlXCIsaT1cIlNpZ25hbExpdmVJbnZpdGVSZXFcIjticmVhaztjYXNlIDEwMDE6bz1cIi9sci9zaWduYWwvbGl2ZXJlcXVlc3RcIixpPVwiU2lnbmFsTGl2ZVJlcVwiO2JyZWFrO2Nhc2UgMTAwMjpvPVwiL2xyL3NpZ25hbC9saXZlcnJlc3VsdFwiLGk9XCJTaWduYWxMaXZlUmVzdWx0UmVxXCI7YnJlYWs7Y2FzZSAxMDA0Om89XCIvbHIvc2lnbmFsL2xpdmVzdG9wXCIsaT1cIlNpZ25hbExpdmVTdG9wUmVxXCJ9cj10aGlzLmdldFJlcUhlYWQocik7dmFyIHM9ZS5kZXN0X2lkX25hbWUubWFwKChmdW5jdGlvbihlKXtyZXR1cm57aWRfbmFtZTpMZShlKX19KSk7cj17cmVxX2hlYWQ6cixwdXNoX21lc3NhZ2U6TGUoZS5zaWduYWxfbXNnKSxkc3RfdXNlcmxpc3Q6c30sZT10aGlzLnRyYW5zQnVmKHIpLHRoaXMubG9nZ2VyLmluZm8oVS5MSVZFUk9PTUhBTkRMRVJfU0VORFNJR05BTENNRCtcIiBcIitKU09OLnN0cmluZ2lmeShlKSkscz1FZS5saXZlcm9vbV9jc1tpXS5jcmVhdGUociksZT1FZS5saXZlcm9vbV9jc1tpXS5lbmNvZGUocykuZmluaXNoKCk7cmV0dXJuIEVlLmxpdmVyb29tX2NzW2ldLmRlY29kZShlKSx0aGlzLnNlbmRNZXNzYWdlKG8sZSx0LG4pfSxVZS5wcm90b3R5cGUuc2VuZFN0cmVhbVVwZGF0ZT1mdW5jdGlvbihlLHQsbixyKXt2YXIgbyxpPXRoaXM7dHJ5e289SlNPTi5wYXJzZShlLnN0cmVhbV9tc2cpfWNhdGNoKGUpe312YXIgcyxhLGM9XCJcIix1PSh0aGlzLmxvZ2dlci5pbmZvKFUuTElWRVJPT01IQU5ETEVSX1NFTkRTVFJFQU1VUERBVEUrXCIgXCIrSlNPTi5zdHJpbmdpZnkoZSkpLHRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0LmZpbmQoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJvb21JRD09ci5yb29tSUR9KSkpO2lmKCF1KXJldHVybiB0aGlzLmxvZ2dlci5lcnJvcihVLkxJVkVST09NSEFORExFUl9TRU5EU1RSRUFNVVBEQVRFK1wiIHJvb20gbm8gZm91bmQgaWdub3JlIFwiKSwtMTtzd2l0Y2goZS5zdWJfY21kKXtjYXNlIDIwMDE6Yz1cIi9sci9zdHJlYW0vYWRkXCIscz1cIlN0cmVhbUFkZFJlcVwiLGE9e3JlcV9oZWFkOnRoaXMuZ2V0UmVxSGVhZCh1KSxzdHJlYW1faWQ6TGUoby5zdHJlYW1faWQpLGV4dHJhX2luZm86TGUoby5leHRyYV9pbmZvKSxjbGllbnRfcmVxX3NlcTp0aGlzLnNlcSsxLGxvZ2luX21vZGU6MSx0aGlyZF90b2tlbjpMZShlLnRoaXJkX3Rva2VufHxcIlwiKX07YnJlYWs7Y2FzZSAyMDAyOmM9XCIvbHIvc3RyZWFtL2RlbGV0ZVwiLHM9XCJTdHJlYW1EZWxldGVSZXFcIixhPXtyZXFfaGVhZDp0aGlzLmdldFJlcUhlYWQodSksc3RyZWFtX2lkOkxlKG8uc3RyZWFtX2lkKSxzdHJlYW1fc2lkOm8uc3RyZWFtX3NpZCxjbGllbnRfcmVxX3NlcTp0aGlzLnNlcSsxfTticmVhaztjYXNlIDIwMDM6Yz1cIi9sci9zdHJlYW0vdXBkYXRlXCIscz1cIlN0cmVhbVVwZGF0ZVJlcVwiLGE9e3JlcV9oZWFkOnRoaXMuZ2V0UmVxSGVhZCh1KSxzdHJlYW1faWQ6TGUoby5zdHJlYW1faWQpLHN0cmVhbV9zaWQ6by5zdHJlYW1fc2lkLGNsaWVudF9yZXFfc2VxOnRoaXMuc2VxKzEsZXh0cmFfaW5mbzpMZShvLmV4dHJhX2luZm8pfX12YXIgbD10aGlzLnRyYW5zQnVmKGEpO3RoaXMubG9nZ2VyLmluZm8oVS5MSVZFUk9PTUhBTkRMRVJfU0VORFNUUkVBTVVQREFURStcIiBcIitKU09OLnN0cmluZ2lmeShsKSksbD1FZS5saXZlcm9vbV9jc1tzXS5jcmVhdGUoYSksbD1FZS5saXZlcm9vbV9jc1tzXS5lbmNvZGUobCkuZmluaXNoKCk7cmV0dXJuIHRoaXMuc2VuZE1lc3NhZ2UoYyxsLChmdW5jdGlvbihlKXtpLmxvZ2dlci5pbmZvKFUuTElWRVJPT01IQU5ETEVSX1NFTkRTVFJFQU1VUERBVEUrXCIgc3VjIFwiK2MrXCIgXCIrSlNPTi5zdHJpbmdpZnkoZSkpLGUuaGVhZGVyLnJvb21faWQ9dS5yb29tSUQsdCYmdChlKX0pLChmdW5jdGlvbihlKXtpLmxvZ2dlci5pbmZvKFUuTElWRVJPT01IQU5ETEVSX1NFTkRTVFJFQU1VUERBVEUrXCIgZmFpbCBcIitjK1wiIFwiK0pTT04uc3RyaW5naWZ5KGUpKSxuJiZuKGUpfSkpfSxVZS5wcm90b3R5cGUuZ2V0U3RyZWFtTGlzdD1mdW5jdGlvbihlLHQsbixyKXt2YXIgbyxpPXRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0LmZpbmQoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJvb21JRD09ci5yb29tSUR9KSk7aT8oaT17cmVxX2hlYWQ6dGhpcy5nZXRSZXFIZWFkKGkpfSxvPXRoaXMudHJhbnNCdWYoaSksdGhpcy5sb2dnZXIuaW5mbyhVLkxJVkVST09NSEFORExFUl9HRVRTVFJFQU1MSVNUK1wiIFwiK0pTT04uc3RyaW5naWZ5KG8pKSxvPUVlLmxpdmVyb29tX2NzLlN0cmVhbUxpc3RSZXEuY3JlYXRlKGkpLGk9RWUubGl2ZXJvb21fY3MuU3RyZWFtTGlzdFJlcS5lbmNvZGUobykuZmluaXNoKCksdGhpcy5zZW5kTWVzc2FnZShcIi9sci9zdHJlYW0vbGlzdFwiLGksKGZ1bmN0aW9uKGUpe3QmJnQoZSl9KSwoZnVuY3Rpb24oZSl7biYmbihlKX0pKSk6dGhpcy5sb2dnZXIuZXJyb3IoVS5MSVZFUk9PTUhBTkRMRVJfR0VUU1RSRUFNTElTVCtcIiByb29tIG5vIGZvdW5kIGlnbm9yZSBcIityLnJvb21JRCl9LFVlLnByb3RvdHlwZS50cmFuc0J1Zj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG49e307cmV0dXJuIE9iamVjdC5rZXlzKGUpLmZvckVhY2goKGZ1bmN0aW9uKHIpe1tcImxvZ291dF9jaGVja1wiLFwiazJfc2lnblwiLFwiazFfc2lnblwiXS5pbmNsdWRlcyhyKT9uW3JdPWVbcl06dC50cmFuc1JlcUJ5dGVzKG4sZSxyKX0pKSxufSxVZS5wcm90b3R5cGUudHJhbnNSZXFCeXRlcz1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcztpZihEZS5hLmlzTG9uZyh0W25dKSllW25dPXRbbl0udG9TdHJpbmcoKTtlbHNlIGlmKFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodFtuXSkpZVtuXT17fSxPYmplY3Qua2V5cyh0W25dKS5mb3JFYWNoKChmdW5jdGlvbihvKXtyZXR1cm4gci50cmFuc1JlcUJ5dGVzKGVbbl0sdFtuXSxvKX0pKTtlbHNlIGlmKFwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0W25dKSYmXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0W25dWzBdKSl7ZVtuXT1bXTtmb3IodmFyIG89MDtvPHRbbl0ubGVuZ3RoO28rKykhZnVuY3Rpb24obyl7dmFyIGk9e307T2JqZWN0LmtleXModFtuXVtvXSkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ci50cmFuc1JlcUJ5dGVzKGksdFtuXVtvXSxlKX0pKSxlW25dLnB1c2goaSl9KG8pfWVsc2VcIltvYmplY3QgVWludDhBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0W25dKT9lW25dPVBlKHRbbl0pOmVbbl09dFtuXX0sVWUucHJvdG90eXBlLnRyYW5zSGVhZGVyPWZ1bmN0aW9uKGUpe3JldHVybiBlLnRpbWVzdGFtcD1EZS5hLmlzTG9uZyhlLnRpbWVzdGFtcCk/ZS50aW1lc3RhbXAudG9TdHJpbmcoKTplLnRpbWVzdGFtcCxlfSxVZS5wcm90b3R5cGUudHJhbnNSc3A9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPWUmJmUucnNwX2hlYWQ/dGhpcy50cmFuc1JzcEhlYWQoZS5yc3BfaGVhZCk6e30scj1IZShIZSh7fSxlKSxuKSxvPShkZWxldGUgci5yc3BfaGVhZCx7fSk7cmV0dXJuIE9iamVjdC5rZXlzKHIpLmZvckVhY2goKGZ1bmN0aW9uKGUpe1wiazJfc2lnblwiPT09ZT9vW2VdPXJbZV06dC50cmFuc0J5dGVzKG8scixlKX0pKSxvfSxVZS5wcm90b3R5cGUudHJhbnNCeXRlcz1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcztpZihEZS5hLmlzTG9uZyh0W25dKSllW25dPXRbbl07ZWxzZSBpZihcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRbbl0pKWVbbl09e30sT2JqZWN0LmtleXModFtuXSkuZm9yRWFjaCgoZnVuY3Rpb24obyl7cmV0dXJuIHIudHJhbnNCeXRlcyhlW25dLHRbbl0sbyl9KSk7ZWxzZSBpZihcIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodFtuXSkmJlwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodFtuXVswXSkpe2Vbbl09W107Zm9yKHZhciBvPTA7bzx0W25dLmxlbmd0aDtvKyspIWZ1bmN0aW9uKG8pe3ZhciBpPXt9O09iamVjdC5rZXlzKHRbbl1bb10pLmZvckVhY2goKGZ1bmN0aW9uKGUpe3IudHJhbnNCeXRlcyhpLHRbbl1bb10sZSl9KSksZVtuXS5wdXNoKGkpfShvKX1lbHNlXCJbb2JqZWN0IFVpbnQ4QXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodFtuXSk/ZVtuXT1QZSh0W25dKTplW25dPXRbbl19LFVlLnByb3RvdHlwZS50cmFuc1JzcEhlYWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGU/e2Vycl9jb2RlOmUuY29kZXx8MCxlcnJfbWVzc2FnZTplLm1lc3NhZ2V9Ont9fSxVZS5wcm90b3R5cGUuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIEhlKHt9LGUuZGVjb2RlKHQpKX0sVWUucHJvdG90eXBlLmhhbmRsZURpc2Nvbm5lY3RlZD1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7dGhpcy5sb2dnZXIuaW5mbyhVLkxJVkVST09NSEFORExFUl9IQU5ETEVESVNDT05ORUNURUQrXCIgY2FsbFwiKSx0aGlzLnN0YXRlPWplLmRpc2Nvbm5lY3RlZCx0aGlzLnJlc2V0V2FpdENtZCgpLHRoaXMuc3RhdGVDZW50ZXIudXNlTmV0QWdlbnQmJmU9PT1TLlRJTUVPVVQmJnRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0LmZvckVhY2goKGZ1bmN0aW9uKGUpe2Uucm9vbVRyeUhhbmRsZXImJihuLnVhLmlzQ29ubmVjdCgpPyhuLmxvZ2dlci5pbmZvKFUuTElWRVJPT01IQU5ETEVSX0hBTkRMRURJU0NPTk5FQ1RFRCtcIiB1YSBpcyBjb25uZWN0XCIpLGUucm9vbVRyeUhhbmRsZXIuYWN0aXZlKCkpOihuLmxvZ2dlci5pbmZvKFUuTElWRVJPT01IQU5ETEVSX0hBTkRMRURJU0NPTk5FQ1RFRCtcIiB1YSBpcyBkaXNjb25uZWN0XCIpLG4udWEuY29ubmVjdFVhKCkpKX0pKX0sVWUucHJvdG90eXBlLmhhbmRsZUJyb2tlbj1mdW5jdGlvbigpe3RoaXMubG9nZ2VyLmluZm8oVS5MSVZFUk9PTUhBTkRMRVJfSEFORExFQlJPS0VOK1wiIGNhbGxcIiksdGhpcy5zdGF0ZT1qZS5icm9rZW4sdGhpcy5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudCYmdGhpcy5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3QuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5yb29tVHJ5SGFuZGxlciYmKGUucm9vbVRyeUhhbmRsZXIuaW52YWxpZCgpLGUucm9vbVRyeUhhbmRsZXIub25hY3RpdmU9ZnVuY3Rpb24odCxuKXtlLnJvb21IYW5kbGVyLmRpc2Nvbm5lY3RlZEhhbmRsZShuKX0sZS5yb29tVHJ5SGFuZGxlci5zdGFydE1heFRpbWUoKSxlLnJvb21IYW5kbGVyLnJvb21TdGF0ZUhhbmRsZShcIkNPTk5FQ1RJTkdcIixrLlJlY29ubmVjdGluZyxNLk5FVFdPUktfQlJPS0VOKSl9KSl9LFVlLnByb3RvdHlwZS5oYW5kbGVDb25uZWN0ZWQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0aGlzLmxvZ2dlci5pbmZvKFUuTElWRVJPT01IQU5ETEVSX0hBTkRMRUNPTk5FQ1RFRCtcIiBjYWxsIFwiK2UpLHRoaXMuc3RhdGU9amUuY29ubmVjdGVkLHRoaXMuaGFzQ3J5cHRTaWduPSExLHRoaXMucmVzZXRXYWl0Q21kKCksdGhpcy5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudCYmKGU9PT1FLkFVVE8/dGhpcy5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3QuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5yb29tVHJ5SGFuZGxlciYmdC51YS5pc0Nvbm5lY3QoKSYmZS5yb29tVHJ5SGFuZGxlci5hY3RpdmUoKX0pKTp0aGlzLnN0YXRlQ2VudGVyLnJvb21Nb2R1bGVzTGlzdC5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnJvb21UcnlIYW5kbGVyJiYoZS5yb29tVHJ5SGFuZGxlci5zdG9wTWF4VGltZSgpLGUucm9vbVRyeUhhbmRsZXIuaW52YWxpZCgpKX0pKSl9LFVlLnByb3RvdHlwZS5yZXNldFdhaXRDbWQ9ZnVuY3Rpb24oKXt0aGlzLndhaXREZWNyeXB0Q21kTGlzdD1bXSxjbGVhclRpbWVvdXQodGhpcy53YWl0RGVjcnlwdFRpbWVyKSx0aGlzLndhaXREZWNyeXB0VGltZXI9bnVsbH0sVWUucHJvdG90eXBlLnJlbmV3VG9rZW49ZnVuY3Rpb24oZSx0LG4scil7dmFyIG89dGhpcztyPXtyZXFfaGVhZDp0aGlzLmdldFJlcUhlYWQociksdG9rZW46ZS50b2tlbn0sZT1FZS5saXZlcm9vbV9jcy5SZW5ld1Rva2VuUmVxLmNyZWF0ZShyKSxlPUVlLmxpdmVyb29tX2NzLlJlbmV3VG9rZW5SZXEuZW5jb2RlKGUpLmZpbmlzaCgpLHI9dGhpcy50cmFuc0J1ZihyKTt0aGlzLmxvZ2dlci5pbmZvKFUuTElWRVJPT01IQU5ETEVSX1JFTkVXX1RPS0VOK1wiIFwiK0pTT04uc3RyaW5naWZ5KHIpKSx0aGlzLnNlbmRNZXNzYWdlKFwiL2xyL3Rva2VuL3JlbmV3X3Rva2VuXCIsZSwoZnVuY3Rpb24oZSxuKXtvLmtleXNFeGlzdChlLmJvZHksW1widG9rZW5fcmVtYWluX3RpbWVcIl0pLHQmJnQoZSxuKX0pLG4pfSxVZS5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmxvZ2dlci5pbmZvKFUuTElWRVJPT01IQU5ETEVSX1JFU0VUK1wiIGNhbGwgXCIpLHRoaXMuc3RhdGU9amUuZGlzY29ubmVjdGVkLHRoaXMuc3dpdGNoU2Vzc2lvbklEPURlLmEuZnJvbUludCgwKSx0aGlzLnNlbmREYXRhQ2hlY2tUaW1lciYmY2xlYXJUaW1lb3V0KHRoaXMuc2VuZERhdGFDaGVja1RpbWVyKX0sVWUucHJvdG90eXBlLmNsb3NlUmVxdWVzdD1mdW5jdGlvbigpe3ZhciBlO251bGwhPShlPXRoaXMubGl2ZXJvb21SZXF1ZXN0KSYmZS5jbG9zZVJlcXVlc3QoKX0sVWUucHJvdG90eXBlLnJlc2V0U2Vzc2lvbkluZm89ZnVuY3Rpb24oKXt0aGlzLnN3aXRjaFNlc3Npb25JRD1EZS5hLmZyb21JbnQoMCl9LFVlKTtmdW5jdGlvbiBVZShlLHQsbixyLG8pe3ZhciBpPXRoaXM7dGhpcy5sb2dnZXI9ZSx0aGlzLnN0YXRlQ2VudGVyPXQsdGhpcy51YT1uLHRoaXMuZGF0YVJlcG9ydD1yLHRoaXMucnRtPW8sdGhpcy5zZXE9MCx0aGlzLmNvbnRyb2xzPW5ldyBVaW50OEFycmF5KDEpLHRoaXMuZmxhZ3M9bmV3IFVpbnQ4QXJyYXkoMSksdGhpcy5zZW5kQ29tbWFuZExpc3Q9bmV3IHYsdGhpcy5zZW5kQ29tbWFuZE1hcD17fSx0aGlzLmlzRW5jcnlwdD0hMSx0aGlzLmhhc0NyeXB0U2lnbj0hMSx0aGlzLndhaXREZWNyeXB0Q21kTGlzdD1bXSx0aGlzLnNlbmREYXRhQ2hlY2tPbmNlQ291bnQ9MTAwLHRoaXMuc2VuZERhdGFEcm9wVGltZW91dD0xZTQsdGhpcy5zZW5kRGF0YUNoZWNrSW50ZXJ2YWw9MmUzLHRoaXMucHJvdG9JbnN0YW5jZT1PZS5hLHRoaXMuc3dQdXNoQ21kTGlzdD1bXCIvc3cvcHVzaFwiLFwiL3N3L21lcmdlX3B1c2hcIixcIi9zdy9wdXNoX2tpY2tvdXRcIixcIi9zdy9wdXNoX3JlZGlyZWN0XCJdLHRoaXMub25Td2l0Y2hDbWRMaXN0PVtcIi9sci9sb2dpbl9yb29tX3JzcFwiLFwiL2xyL2xvZ291dF9yb29tX3JzcFwiLFwiL3N3L3B1c2hfa2lja291dFwiLFwiL3N3L3B1c2hcIixcIi9zdy9tZXJnZV9wdXNoXCJdLHRoaXMudW5FbmNyeXB0Q21kTGlzdD1bXCIvbHIvbG9naW5fcm9vbVwiLFwiL2xyL2xvZ2luX3Jvb21fcnNwXCJdLHRoaXMud2hpdGVib2FyZFB1c2hDbWRMaXN0PVtcIi9lZHUvcHVzaC9zZXRfcm9vbVwiLFwiL2VkdS9wdXNoL3NldF91c2VyXCIsXCIvZWR1L3B1c2gvam9pbmxpdmVcIixcIi9lZHUvcHVzaC9zZXRfbW9kXCIsXCIvZWR1L3B1c2gvZHJhd19ncmFwaGljc1wiLFwiL2VkdS9wdXNoL2NsZWFyX2dyYXBoaWNzXCIsXCIvZWR1L3B1c2gvZHJhd19wYWdlX2dyYXBoaWNzXCIsXCIvZWR1L3B1c2gvY2xlYXJfcGFnZV9ncmFwaGljc1wiLFwiL2VkdS9wdXNoL2NsZWFyX3VzZXJfZ3JhcGhpY19saXN0XCIsXCIvZWR1L3B1c2gvcWFhXCIsXCIvZWR1L3B1c2gvc2V0X3VzZXJfYXV0aFwiLFwiL2VkdS9wdXNoL3NldF9yb29tX2F1dGhcIl0sdGhpcy5zdGF0ZT1qZS5kaXNjb25uZWN0ZWQsdGhpcy51blN0cnVjdENtZExpc3Q9W1wiL2xyL3B1c2gvam9pbmxpdmVfcmVxdWVzdFwiLFwiL2xyL3B1c2gvam9pbmxpdmVfcmVzdWx0XCIsXCIvbHIvcHVzaC9qb2lubGl2ZV9pbnZpdGVcIixcIi9sci9wdXNoL2pvaW5saXZlX3N0b3BcIl0sdGhpcy5qb2luTGl2ZU1hcD17XCIvbHIvcHVzaC9qb2lubGl2ZV9yZXF1ZXN0XCI6MTEwMDEsXCIvbHIvcHVzaC9qb2lubGl2ZV9yZXN1bHRcIjoxMTAwMixcIi9sci9wdXNoL2pvaW5saXZlX2ludml0ZVwiOjExMDAzLFwiL2xyL3B1c2gvam9pbmxpdmVfc3RvcFwiOjExMDA0fSx0aGlzLnJlbG9naW5Ub2tlbj1cIlwiLHRoaXMuY3J5cHRvPW5ldyBJZSx0aGlzLmxpdmVyb29tUmVxdWVzdD10aGlzLnVhLmdldFBDUmVxdWVzdChSLlNFUlZJQ0VfU1dJVENINExJVkVST09NKSx0aGlzLnN3aXRjaFNlc3Npb25JRD1EZS5hLmZyb21JbnQoMCksbnVsbCE9KGU9dGhpcy5saXZlcm9vbVJlcXVlc3QpJiZlLm9uKFwiY29ubmVjdGVkXCIsKGZ1bmN0aW9uKGUpe2kuaGFuZGxlQ29ubmVjdGVkKGUpfSkpLG51bGwhPSh0PXRoaXMubGl2ZXJvb21SZXF1ZXN0KSYmdC5vbihcImJyb2tlblwiLChmdW5jdGlvbigpe2kuaGFuZGxlQnJva2VuKCl9KSksbnVsbCE9KG49dGhpcy5saXZlcm9vbVJlcXVlc3QpJiZuLm9uKFwiZGlzY29ubmVjdGVkXCIsKGZ1bmN0aW9uKGUsdCl7aS5oYW5kbGVEaXNjb25uZWN0ZWQoZSx0KX0pKSxudWxsIT0ocj10aGlzLmxpdmVyb29tUmVxdWVzdCkmJnIub24oXCJkb3duTG9hZE1lc3NhZ2VcIiwoZnVuY3Rpb24oZSl7aS5oYW5kbGVQdXNoKGUpfSkpLG51bGwhPShvPXRoaXMubGl2ZXJvb21SZXF1ZXN0KSYmby5vbihcInBjQ29ubmVjdGVkRXZlbnRcIiwoZnVuY3Rpb24oZSl7dmFyIHQ9ZygpO2kuZGF0YVJlcG9ydC5uZXdSZXBvcnQodCxuZS5rWmVnb1NES1Byb3h5Q29ubmVjdC5ldmVudCksaS5kYXRhUmVwb3J0LmFkZE1zZ0luZm8odCx7cmVjdl90aW1lOihuZXcgRGF0ZSkuZ2V0VGltZSgpLHByb3h5X2xpbmtfc291cmNlczplLnByb3h5X2xpbmtfc291cmNlc30pLGkuZGF0YVJlcG9ydC51cGxvYWRSZXBvcnQodCl9KSl9dmFyIEJlPSh4ZS5wcm90b3R5cGUubGlzdGVuQ2FsbEJhY2s9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMucm9vbVNlcnZpY2VyLmhhbmRsZVB1c2hDdXN0b21Nc2c9ZnVuY3Rpb24odCl7ZS5oYW5kbGVQdXNoQ3VzdG9tTXNnKHQpfSx0aGlzLnJvb21TZXJ2aWNlci5oYW5kbGVQdXNoVG9rZW5FeHBpcmU9ZnVuY3Rpb24odCl7dmFyIG4scj1udWxsPT0ocj1udWxsPT0ocj1udWxsPT10P3ZvaWQgMDp0LmJvZHkpP3ZvaWQgMDpyLnN0b3Bfc3RyZWFtKT92b2lkIDA6ci5zdHJlYW1faWRfbGlzdC5tYXAoUGUpO251bGwhPShuPW51bGw9PShuPW51bGw9PXQ/dm9pZCAwOnQuYm9keSk/dm9pZCAwOm4uc3RvcF9zdHJlYW0pJiYobi5zdHJlYW1faWRfbGlzdD1yKSxlLnN0YXRlQ2VudGVyLmFjdGlvbkxpc3RlbmVyKFwiX3Rva2VuRXhwaXJlZFwiLHQpfSx0aGlzLnJvb21TZXJ2aWNlci5oYW5kbGVQdXNoS2lja291dD1mdW5jdGlvbih0LG4pe3ZhciByO24/ZnVuY3Rpb24oZSx0LG4pe2lmKG58fDI9PT1hcmd1bWVudHMubGVuZ3RoKWZvcih2YXIgcixvPTAsaT10Lmxlbmd0aDtvPGk7bysrKSFyJiZvIGluIHR8fCgocj1yfHxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0LDAsbykpW29dPXRbb10pO3JldHVybiBlLmNvbmNhdChyfHxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0KSl9KFtdLGUuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0LCEwKS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnJvb21IYW5kbGVyLmhhbmRsZVB1c2hLaWNrb3V0KHQsITAsITApfSkpOihyPW51bGw9PShuPW51bGw9PXQ/dm9pZCAwOnQuaGVhZGVyKT92b2lkIDA6bi5yb29tX2lkLG49ZS5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3QuZmluZCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUucm9vbUlEPT1yfSkpLGUucm9vbVNlcnZpY2VyLmxvbmdUb1N0cmluZ051bWJlcih0LmJvZHksW1wic2Vzc2lvbl9pZFwiXSxcInRvU3RyaW5nXCIpLG4/bi5yb29tSGFuZGxlci5oYW5kbGVQdXNoS2lja291dCh0KTplLmxvZ2dlci5lcnJvcihVLkxJVkVST09NSEFORExFUl9QVVNIS0lDS09VVCtcIiByb29tIG5vIGZvdW5kIGlnbm9yZSBcIitKU09OLnN0cmluZ2lmeShudWxsPT0obj10LmhlYWRlcik/dm9pZCAwOm4ucm9vbV9pZCkpKX0sdGhpcy5yb29tU2VydmljZXIuaGFuZGxlUHVzaFN0cmVhbU1zZz1mdW5jdGlvbih0KXtlLmhhbmRsZVB1c2hTdHJlYW1Nc2codCl9LHRoaXMucm9vbVNlcnZpY2VyLmhhbmRsZVB1c2hTaWduYWxNc2c9ZnVuY3Rpb24odCl7ZS5oYW5kbGVQdXNoU2lnbmFsTXNnKHQpfSx0aGlzLnJvb21TZXJ2aWNlci5oYW5kbGVQdXNoTWVyZ2VNc2c9ZnVuY3Rpb24odCl7ZS5oYW5kbGVQdXNoTWVyZ2VNc2codCl9LHRoaXMucm9vbVNlcnZpY2VyLmhhbmRsZVB1c2hSb29tTXNnPWZ1bmN0aW9uKHQpe2UuaGFuZGxlUHVzaFJvb21Nc2codCl9LHRoaXMucm9vbVNlcnZpY2VyLmhhbmRsZVB1c2hUcmFuc01zZz1mdW5jdGlvbih0KXtlLmhhbmRsZVB1c2hUcmFuc01zZyh0KX0sdGhpcy5yb29tU2VydmljZXIub25Td2l0Y2hNZXNzYWdlPWZ1bmN0aW9uKHQsbil7ZS5vblN3aXRjaE1lc3NhZ2UodCxuKX0sdGhpcy5yb29tU2VydmljZXIuaGFuZGxlUHVzaFVzZXJTdGF0ZVVwZGF0ZU1zZz1mdW5jdGlvbih0KXt2YXIgbixyPW51bGw9PShvPW51bGw9PXQ/dm9pZCAwOnQuaGVhZGVyKT92b2lkIDA6by5yb29tX2lkLG89ZS5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3QuZmluZCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUucm9vbUlEPT1yfSkpO28/KG49e2JvZHk6e3VzZXJfYWN0aW9uczp0LmJvZHkudXNlcl9saXN0Lm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJue0FjdGlvbjplLmFjdGlvbixJZE5hbWU6ZS5pZF9uYW1lLE5pY2tOYW1lOmUubmlja19uYW1lLFJvbGU6ZS5yb2xlLExvZ2luVGltZTplLmxvZ2luX3RpbWUudG9TdHJpbmcoKX19KSksdXNlcl9saXN0X3NlcTp0LmJvZHkuc2VydmVyX3VzZXJfc2VxLnRvTnVtYmVyKCkscm9vbV9pZDp0LmJvZHkucm9vbV9pZH19LG8udXNlckhhbmRsZXIuaGFuZGxlUHVzaFVzZXJTdGF0ZVVwZGF0ZU1zZyhuKSk6ZS5sb2dnZXIuZXJyb3IoVS5MSVZFUk9PTUhBTkRMRVJfUFVTSFVTRVJVUERBVEUrXCIgcm9vbSBubyBmb3VuZCBpZ25vcmUgXCIrSlNPTi5zdHJpbmdpZnkodCkpfX0seGUucHJvdG90eXBlLmlzRGlzQ29ubmVjdD1mdW5jdGlvbigpe3JldHVybiEhdGhpcy5yb29tU2VydmljZXImJnRoaXMucm9vbVNlcnZpY2VyLmlzRGlzQ29ubmVjdCgpfSx4ZS5wcm90b3R5cGUuaXNVYUNvbm5lY3Q9ZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4gbnVsbD09KGU9dGhpcy5yb29tU2VydmljZXIpP3ZvaWQgMDplLmlzVWFDb25uZWN0KCl9LHhlLnByb3RvdHlwZS5zZW5kTWVzc2FnZT1mdW5jdGlvbihlLHQsbixyLG8saSl7dmFyIHM7cmV0dXJuIG51bGw9PShzPXRoaXMucm9vbVNlcnZpY2VyKT92b2lkIDA6cy5zZW5kTWVzc2FnZShlLHQsbixyLG8pfSx4ZS5wcm90b3R5cGUuaGFuZGxlUHVzaFRva2VuRXhwaXJlPWZ1bmN0aW9uKGUpe30seGUucHJvdG90eXBlLmhhbmRsZVB1c2hLaWNrb3V0PWZ1bmN0aW9uKGUsdCl7fSx4ZS5wcm90b3R5cGUuaGFuZGxlUHVzaFN0cmVhbU1zZz1mdW5jdGlvbihlKXt9LHhlLnByb3RvdHlwZS5oYW5kbGVQdXNoU2lnbmFsTXNnPWZ1bmN0aW9uKGUpe30seGUucHJvdG90eXBlLmhhbmRsZVB1c2hNZXJnZU1zZz1mdW5jdGlvbihlKXt9LHhlLnByb3RvdHlwZS5oYW5kbGVQdXNoQ3VzdG9tTXNnPWZ1bmN0aW9uKGUpe30seGUucHJvdG90eXBlLmhhbmRsZVB1c2hSb29tTXNnPWZ1bmN0aW9uKGUpe30seGUucHJvdG90eXBlLmhhbmRsZVB1c2hUcmFuc01zZz1mdW5jdGlvbihlKXt9LHhlLnByb3RvdHlwZS5vblN3aXRjaE1lc3NhZ2U9ZnVuY3Rpb24oZSx0KXt9LHhlLnByb3RvdHlwZS5oYW5kbGVQdXNoVXNlclN0YXRlVXBkYXRlTXNnPWZ1bmN0aW9uKGUpe30seGUucHJvdG90eXBlLmxvZ2luPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtudWxsIT0ocj10aGlzLnJvb21TZXJ2aWNlcikmJnIubG9naW4oZSx0LG4pfSx4ZS5wcm90b3R5cGUubG9nb3V0PWZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtyZXR1cm4gbnVsbD09KHI9dGhpcy5yb29tU2VydmljZXIpP3ZvaWQgMDpyLmxvZ291dChlLHQsbil9LHhlLnByb3RvdHlwZS5zdGFydENoZWNrPWZ1bmN0aW9uKCl7dmFyIGU7bnVsbCE9KGU9dGhpcy5yb29tU2VydmljZXIpJiZlLnN0YXJ0Q2hlY2soKX0seGUucHJvdG90eXBlLnN0b3BDaGVjaz1mdW5jdGlvbigpe3ZhciBlO251bGwhPShlPXRoaXMucm9vbVNlcnZpY2VyKSYmZS5zdG9wQ2hlY2soKX0seGUucHJvdG90eXBlLmdldFJlcUhlYWQ9ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIG51bGw9PSh0PXRoaXMucm9vbVNlcnZpY2VyKT92b2lkIDA6dC5nZXRSZXFIZWFkKGUpfSx4ZS5wcm90b3R5cGUuaGVhcnRCZWF0PWZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtudWxsIT0ocj10aGlzLnJvb21TZXJ2aWNlcikmJnIuaGVhcnRCZWF0KGUsdCxuKX0seGUucHJvdG90eXBlLmZldGNoVXNlckxpc3Q9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG87cmV0dXJuIG51bGw9PShvPXRoaXMucm9vbVNlcnZpY2VyKT92b2lkIDA6by5mZXRjaFVzZXJMaXN0KGUsdCxuLHIpfSx4ZS5wcm90b3R5cGUuc2VuZFJvb21Nc2c9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG87cmV0dXJuIG51bGw9PShvPXRoaXMucm9vbVNlcnZpY2VyKT92b2lkIDA6by5zZW5kUm9vbU1zZyhlLHQsbixyKX0seGUucHJvdG90eXBlLnNlbmRSZWxpYWJsZU1lc3NhZ2U9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG87cmV0dXJuIG51bGw9PShvPXRoaXMucm9vbVNlcnZpY2VyKT92b2lkIDA6by5zZW5kUmVsaWFibGVNZXNzYWdlKGUsdCxuLHIpfSx4ZS5wcm90b3R5cGUuZmV0Y2hSZWxpYWJsZU1lc3NhZ2U9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG87cmV0dXJuIG51bGw9PShvPXRoaXMucm9vbVNlcnZpY2VyKT92b2lkIDA6by5mZXRjaFJlbGlhYmxlTWVzc2FnZShlLHQsbixyKX0seGUucHJvdG90eXBlLnNlbmRDdXN0b21Db21tYW5kPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvO3JldHVybiBudWxsPT0obz10aGlzLnJvb21TZXJ2aWNlcik/dm9pZCAwOm8uc2VuZEN1c3RvbUNvbW1hbmQoZSx0LG4scil9LHhlLnByb3RvdHlwZS5zZW5kQmlnUm9vbU1lc3NhZ2U9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG87cmV0dXJuIG51bGw9PShvPXRoaXMucm9vbVNlcnZpY2VyKT92b2lkIDA6by5zZW5kQmlnUm9vbU1lc3NhZ2UoZSx0LG4scil9LHhlLnByb3RvdHlwZS5zZW5kUmVsYXlNZXNzYWdlPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvO3JldHVybiBudWxsPT0obz10aGlzLnJvb21TZXJ2aWNlcik/dm9pZCAwOm8uc2VuZFJlbGF5TWVzc2FnZShlLHQsbixyKX0seGUucHJvdG90eXBlLnNlbmRTaWduYWxDbWQ9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG87cmV0dXJuIG51bGw9PShvPXRoaXMucm9vbVNlcnZpY2VyKT92b2lkIDA6by5zZW5kU2lnbmFsQ21kKGUsdCxuLHIpfSx4ZS5wcm90b3R5cGUuc2VuZFN0cmVhbVVwZGF0ZT1mdW5jdGlvbihlLHQsbixyKXt2YXIgbztyZXR1cm4gbnVsbD09KG89dGhpcy5yb29tU2VydmljZXIpP3ZvaWQgMDpvLnNlbmRTdHJlYW1VcGRhdGUoZSx0LG4scil9LHhlLnByb3RvdHlwZS5nZXRTdHJlYW1MaXN0PWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvO3JldHVybiBudWxsPT0obz10aGlzLnJvb21TZXJ2aWNlcik/dm9pZCAwOm8uZ2V0U3RyZWFtTGlzdChlLHQsbixyKX0seGUucHJvdG90eXBlLnJlbmV3VG9rZW49ZnVuY3Rpb24oZSx0LG4scil7dmFyIG87bnVsbCE9KG89dGhpcy5yb29tU2VydmljZXIpJiZvLnJlbmV3VG9rZW4oZSx0LG4scil9LHhlLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe3ZhciBlO251bGwhPShlPXRoaXMucm9vbVNlcnZpY2VyKSYmZS5yZXNldCgpfSx4ZS5wcm90b3R5cGUuY2xvc2VSZXF1ZXN0PWZ1bmN0aW9uKCl7dmFyIGU7bnVsbCE9KGU9dGhpcy5yb29tU2VydmljZXIpJiZlLmNsb3NlUmVxdWVzdCgpfSx4ZSk7ZnVuY3Rpb24geGUoZSx0LG4scixvKXt0aGlzLmxvZ2dlcj1lLHRoaXMuc3RhdGVDZW50ZXI9dCx0aGlzLnVhPW4sdGhpcy5kYXRhUmVwb3J0PXIsdGhpcy5ydG09byx0aGlzLnJvb21TZXJ2aWNlcj1uZXcgcWUoZSx0LG4scixvKSx0aGlzLmxpc3RlbkNhbGxCYWNrKCl9dmFyIEdlPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBuZXcobj1ufHxQcm9taXNlKSgoZnVuY3Rpb24obyxpKXtmdW5jdGlvbiBzKGUpe3RyeXtjKHIubmV4dChlKSl9Y2F0Y2goZSl7aShlKX19ZnVuY3Rpb24gYShlKXt0cnl7YyhyLnRocm93KGUpKX1jYXRjaChlKXtpKGUpfX1mdW5jdGlvbiBjKGUpe3ZhciB0O2UuZG9uZT9vKGUudmFsdWUpOigodD1lLnZhbHVlKWluc3RhbmNlb2Ygbj90Om5ldyBuKChmdW5jdGlvbihlKXtlKHQpfSkpKS50aGVuKHMsYSl9Yygocj1yLmFwcGx5KGUsdHx8W10pKS5uZXh0KCkpfSkpfSxWZT1mdW5jdGlvbihlLHQpe3ZhciBuLHIsbyxpPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJm9bMF0pdGhyb3cgb1sxXTtyZXR1cm4gb1sxXX0sdHJ5czpbXSxvcHM6W119LHM9e25leHQ6YSgwKSx0aHJvdzphKDEpLHJldHVybjphKDIpfTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJihzW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLHM7ZnVuY3Rpb24gYShzKXtyZXR1cm4gZnVuY3Rpb24oYSl7dmFyIGM9W3MsYV07aWYobil0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtmb3IoO2k7KXRyeXtpZihuPTEsciYmKG89MiZjWzBdP3IucmV0dXJuOmNbMF0/ci50aHJvd3x8KChvPXIucmV0dXJuKSYmby5jYWxsKHIpLDApOnIubmV4dCkmJiEobz1vLmNhbGwocixjWzFdKSkuZG9uZSlyZXR1cm4gbztzd2l0Y2gocj0wLChjPW8/WzImY1swXSxvLnZhbHVlXTpjKVswXSl7Y2FzZSAwOmNhc2UgMTpvPWM7YnJlYWs7Y2FzZSA0OnJldHVybiBpLmxhYmVsKysse3ZhbHVlOmNbMV0sZG9uZTohMX07Y2FzZSA1OmkubGFiZWwrKyxyPWNbMV0sYz1bMF07Y29udGludWU7Y2FzZSA3OmM9aS5vcHMucG9wKCksaS50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoIShvPTA8KG89aS50cnlzKS5sZW5ndGgmJm9bby5sZW5ndGgtMV0pJiYoNj09PWNbMF18fDI9PT1jWzBdKSl7aT0wO2NvbnRpbnVlfWlmKDM9PT1jWzBdJiYoIW98fGNbMV0+b1swXSYmY1sxXTxvWzNdKSl7aS5sYWJlbD1jWzFdO2JyZWFrfWlmKDY9PT1jWzBdJiZpLmxhYmVsPG9bMV0pe2kubGFiZWw9b1sxXSxvPWM7YnJlYWt9aWYobyYmaS5sYWJlbDxvWzJdKXtpLmxhYmVsPW9bMl0saS5vcHMucHVzaChjKTticmVha31vWzJdJiZpLm9wcy5wb3AoKSxpLnRyeXMucG9wKCk7Y29udGludWV9Yz10LmNhbGwoZSxpKX1jYXRjaChhKXtjPVs2LGFdLHI9MH1maW5hbGx5e249bz0wfWlmKDUmY1swXSl0aHJvdyBjWzFdO3JldHVybnt2YWx1ZTpjWzBdP2NbMV06dm9pZCAwLGRvbmU6ITB9fX19LHplPWZ1bmN0aW9uKGUsdCxuKXtpZihufHwyPT09YXJndW1lbnRzLmxlbmd0aClmb3IodmFyIHIsbz0wLGk9dC5sZW5ndGg7bzxpO28rKykhciYmbyBpbiB0fHwoKHI9cnx8QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodCwwLG8pKVtvXT10W29dKTtyZXR1cm4gZS5jb25jYXQocnx8QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodCkpfSxGZT0oT2JqZWN0LmRlZmluZVByb3BlcnR5KFdlLnByb3RvdHlwZSxcIm1vZHVsZXNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJue3NlcnZpY2U6dGhpcy5zZXJ2aWNlfX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxXZS5wcm90b3R5cGUuZ2V0U2V0dGluZ1VuaWZ5PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuc3RhdGVDZW50ZXIuc2V0dGluZ0NvbmZpZy5nZXRTZXR0aW5nKFwidW5pZnlcIixlPXZvaWQgMCE9PWUmJmUpO3JldHVybiB0aGlzLmxvZ2dlci5pbmZvKFUuUlRNX0dFVF9TRVRUSU5HX1VOSUZZK1wiIFwiK2UrXCIgXCIrSlNPTi5zdHJpbmdpZnkodCkpLHQ/KGU9dC5lbmFibGUsdD10LnNka19jb25uX3ZlciwhIShlJiZ0PD1GLmNvbm5lY3RWZXIpKTp0aGlzLnN0YXRlQ2VudGVyLnVzZU5ldEFnZW50fSxXZS5wcm90b3R5cGUuaW5pdENhbGxiYWNrPWZ1bmN0aW9uKCl7dGhpcy5wcm94eVJlcz1qLnByb3h5UmVzLHRoaXMuYWN0aW9uU3VjY2Vzc0NhbGxiYWNrPWouYWN0aW9uU3VjY2Vzc0NhbGxiYWNrLHRoaXMuYWN0aW9uRXJyb3JDYWxsYmFjaz1qLmFjdGlvbkVycm9yQ2FsbGJhY2ssdGhpcy5nZXRTZXJ2ZXJFcnJvcj1qLmdldFNlcnZlckVycm9yLHRoaXMuZ2VuZXJhdGVSYW5kdW1OdW1iZXI9ai5nZW5lcmF0ZVJhbmR1bU51bWJlcix0aGlzLnVucmVnaXN0ZXJDYWxsYmFjaz1qLnVucmVnaXN0ZXJDYWxsYmFjayx0aGlzLmxvZ1JlcG9ydENhbGxiYWNrPWoubG9nUmVwb3J0Q2FsbGJhY2ssdGhpcy5yZWdpc3RlckNhbGxiYWNrPWoucmVnaXN0ZXJDYWxsYmFja30sV2UucHJvdG90eXBlLmdldFN0b3JlQXBwQ29uZmlnPWZ1bmN0aW9uKCl7dGhpcy5sb2dnZXIuaW5mbyhVLlJUTV9HRVRTVE9SRUFQUENPTkZJRytcIiBjYWxsXCIpO3ZhciBlPWxvY2FsU3RvcmFnZS5nZXRJdGVtKHorXCJfXCIrdGhpcy5nZXRBcHBJRCgpK1wiX1wiKyh0aGlzLnN0YXRlQ2VudGVyLm1vZGV8fEYubW9kZU5vKSk7aWYoZSl0cnl7dmFyIHQ9ai5kZWNyeXB0U3RvcmVzKGUsRyk7dD8odGhpcy5zdGF0ZUNlbnRlci5hcHBDb25maWc9SlNPTi5wYXJzZSh0KSx0aGlzLnN0YXRlQ2VudGVyLmFjdGlvbkxpc3RlbmVyKFwiX2FwcENvbmZpZ1JzcFwiKSx0aGlzLmhhbmRsZUxvZ1VwbG9hZCgpKTpsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh6K1wiX1wiK3RoaXMuZ2V0QXBwSUQoKStcIl9cIisodGhpcy5zdGF0ZUNlbnRlci5tb2RlfHxGLm1vZGVObykpfWNhdGNoKGUpe3RoaXMubG9nZ2VyLndhcm4oVS5SVE1fR0VUU1RPUkVBUFBDT05GSUcrXCIgXCIrSlNPTi5zdHJpbmdpZnkoZSkpfWVsc2UgdGhpcy5sb2dnZXIuaW5mbyhVLlJUTV9HRVRTVE9SRUFQUENPTkZJRytcIiBubyBzdG9yZSBjb25maWdcIil9LFdlLnByb3RvdHlwZS5jcmVhdGVOZXRBZ2VudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD0odGhpcy5sb2dnZXIuaW5mbyhVLlJUTV9DUkVBVEVORVRBR0VOVCtcIiBjYWxsXCIpLHRoaXMubmV0QWdlbnQub24oXCJkaXNjb25uZWN0ZWRcIiwoZnVuY3Rpb24odCl7ZS5sb2dnZXIuaW5mbyhcIlwiLmNvbmNhdChVLlJUTV9DUkVBVEVORVRBR0VOVCxcIiBuZXRBZ2VudCBkaXNjb25uZWN0XCIpKX0pKSx0aGlzLm5ldEFnZW50Lm9uKFwiY29ubmVjdGVkXCIsKGZ1bmN0aW9uKCl7ZS5sb2dnZXIuaW5mbyhcIlwiLmNvbmNhdChVLlJUTV9DUkVBVEVORVRBR0VOVCxcIiBuZXRBZ2VudCBjb25uZWN0XCIpKSxlLnN0YXRlQ2VudGVyLnVzZU5ldEFnZW50PyhlLmZldGNoQXBwQ29uZmlnKCksZS5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3QuZm9yRWFjaCgoZnVuY3Rpb24odCl7dC5yb29tVHJ5SGFuZGxlciYmZS5uZXRBZ2VudC5pc0Nvbm5lY3QoKSYmdC5yb29tVHJ5SGFuZGxlci5hY3RpdmUoITApfSkpKTplLmxvZ2dlci5pbmZvKFwiXCIuY29uY2F0KFUuUlRNX0NSRUFURU5FVEFHRU5ULFwiIHVuaWZ5IGZhbHNlXCIpKX0pKSx0aGlzLm5ldEFnZW50Lm9uKFwiYnJva2VuXCIsKGZ1bmN0aW9uKHQpe2UubG9nZ2VyLmluZm8oXCJcIi5jb25jYXQoVS5SVE1fQ1JFQVRFTkVUQUdFTlQsXCIgbmV0QWdlbnQgYnJva2VuXCIpKSx0PT09Ty5DTE9TRSYmZS5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3QuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5yZXNldFNlc3Npb25JbmZvKCl9KSl9KSksdGhpcy5uZXRBZ2VudC5vbihcImRpc3BhdGNoRXZlbnRcIiwoZnVuY3Rpb24odCxuLHIpe3ZhciBvO2UubG9nZ2VyLmluZm8oXCJcIi5jb25jYXQoVS5SVE1fQ1JFQVRFTkVUQUdFTlQsXCIgZGlzcGF0Y2hcIikpLFwic3RhcnRcIj09PW4/KG89ZygpLGUuZGF0YVJlcG9ydC5uZXdSZXBvcnQobyxuZS5rWmVnb0Nvbm5EaXNwYXRjaC5ldmVudCksZS5zdGF0ZUNlbnRlci5yZXF1ZXN0TGlzdFt0XT1vKTpcImVuZFwiPT09biYmKG89ZS5zdGF0ZUNlbnRlci5yZXF1ZXN0TGlzdFt0XSkmJihuPVwiXCIsbj1udWxsIT1yJiZyLnJlYXNvbj9yLnJlYXNvbjplLmRpc3BhdGNoU2VydmVycz9cIlVwZGF0ZURpc3BhdGNoUmVzdWx0XCI6XCJOb0Rpc3BhdGNoUmVzdWx0XCIsZS5kYXRhUmVwb3J0LmFkZE1zZ0luZm8obyx7ZG9tYWluX2xpc3Q6bmUua1plZ29Db25uRGlzcGF0Y2guZG9tYWluX2xpc3Qoci5kb21haW5zKSx0cmlnZ2VyX3JlYXNvbjpuZS5rWmVnb0Nvbm5EaXNwYXRjaC50cmlnZ2VyX3JlYXNvbihuKX0pLGUuZGF0YVJlcG9ydC51cGxvYWRSZXBvcnQobykpfSkpLHRoaXMubmV0QWdlbnQub24oXCJkaXNwYXRjaFJlc3VsdFVwZGF0ZVwiLChmdW5jdGlvbih0KXt0PXQuc2VydmVycyxlLmxvZ2dlci5pbmZvKFwiXCIuY29uY2F0KFUuUlRNX0NSRUFURU5FVEFHRU5ULFwiIGRpc3BhdGNoUmVzdWx0IFwiKS5jb25jYXQoSlNPTi5zdHJpbmdpZnkodCkpKSx0PWouZW5jcnlwdFN0b3JlcyhKU09OLnN0cmluZ2lmeSh0KSxHKSxsb2NhbFN0b3JhZ2Uuc2V0SXRlbShWK1wiX1wiK2Uuc3RhdGVDZW50ZXIuYXBwaWQrXCJfXCIrKGUuc3RhdGVDZW50ZXIubW9kZXx8Ri5tb2RlTm8pLHQpfSkpLHRoaXMubmV0QWdlbnQub24oXCJjb25uZWN0ZWRFdmVudFwiLChmdW5jdGlvbih0LG4scil7dmFyIG87ZS5sb2dnZXIuaW5mbyhcIlwiLmNvbmNhdChVLlJUTV9DUkVBVEVORVRBR0VOVCxcIiBjb25uZWN0XCIpKSxcInN0YXJ0XCI9PT1uPyhvPWcoKSxlLmRhdGFSZXBvcnQubmV3UmVwb3J0KG8sbmUua1plZ29Db25uQ29ubmVjdC5ldmVudCksZS5zdGF0ZUNlbnRlci5yZXF1ZXN0TGlzdFt0XT1vKTpcImVuZFwiPT09biYmKG89ZS5zdGF0ZUNlbnRlci5yZXF1ZXN0TGlzdFt0XSkmJihlLmRhdGFSZXBvcnQuYWRkTXNnSW5mbyhvLHtzZXJ2ZXJfbGlzdDpuZS5rWmVnb0Nvbm5Db25uZWN0LnNlcnZlcl9saXN0KHIuc2VydmVycykscmVxdWVzdF9jb3VudDpyLmNvdW50LGNvbm5lY3RfaWQ6ci5jb25uZWN0aWR9KSxlLmRhdGFSZXBvcnQudXBsb2FkUmVwb3J0KG8pKX0pKSx0aGlzLm5ldEFnZW50Lm9uKFwicmVxdWVzdEV2ZW50XCIsKGZ1bmN0aW9uKHQsbixyKXt2YXIgbztlLmxvZ2dlci5pbmZvKFwiXCIuY29uY2F0KFUuUlRNX0NSRUFURU5FVEFHRU5ULFwiIHJlcXVlc3RcIikpLFwic3RhcnRcIj09PW4/KG89ZygpLGUuZGF0YVJlcG9ydC5uZXdSZXBvcnQobyxuZS5rWmVnb1JlcXVlc3QuZXZlbnQpLGUuc3RhdGVDZW50ZXIucmVxdWVzdExpc3RbdF09byk6XCJlbmRcIj09PW4mJihvPWUuc3RhdGVDZW50ZXIucmVxdWVzdExpc3RbdF0pJiYoZS5kYXRhUmVwb3J0LmFkZE1zZ0luZm8obyx7cmVxX2xvY2F0aW9uOm5lLmtaZWdvUmVxdWVzdC5uYV9yZXFfbG9jYXRpb24oci5uYV9yZXFfbG9jYXRpb24pLGh0dHBfY29kZTpyLnN0YXR1c19jb2RlLGVycm9yOnIuZXJyX2NvZGV9KSxlLmRhdGFSZXBvcnQudXBsb2FkUmVwb3J0KG8pKX0pKSx0aGlzLm5ldEFnZW50Lm9uKFwiZGlzQ29ubmVjdGVkRXZlbnRcIiwoZnVuY3Rpb24odCl7dmFyIG49dC5kdXJhdGlvbixyPXQuc2VydmVyLG89KHQ9dC5jb25uZWN0aWQsZS5sb2dnZXIuaW5mbyhcIlwiLmNvbmNhdChVLlJUTV9DUkVBVEVORVRBR0VOVCxcIiBkaXNjb25uZWN0XCIpKSxnKCkpO2UuZGF0YVJlcG9ydC5uZXdSZXBvcnQobyxuZS5rWmVnb0Nvbm5EaXNDb25uZWN0LmV2ZW50KSxlLmRhdGFSZXBvcnQuYWRkTXNnSW5mbyhvLHtzZXJ2ZXI6bmUua1plZ29Db25uRGlzQ29ubmVjdC5zZXJ2ZXIociksY29ubmVjdF9kdXJhdGlvbjpuLGNvbm5lY3RfaWQ6dH0pLGUuZGF0YVJlcG9ydC51cGxvYWRSZXBvcnQobyl9KSksKG51bGwhPSh0PXRoaXMub3B0aW9ucykmJnQuYWNjZXNzRG9tYWlucyYmMDwobnVsbD09KHQ9dGhpcy5vcHRpb25zKT92b2lkIDA6dC5hY2Nlc3NEb21haW5zLmxlbmd0aCk/bnVsbD09KHQ9dGhpcy5vcHRpb25zKT92b2lkIDA6dC5hY2Nlc3NEb21haW5zOkYuZG9tYWlucykubWFwKChmdW5jdGlvbihlKXtyZXR1cm5cIndzczovL1wiLmNvbmNhdChlLFwiL2FjY2Vzc2h1YlwiKX0pKSk7dGhpcy5uZXRBZ2VudC5zZXRCYWNrdXBEb21haW5zKEYucHJpbWFyeURvbWFpbnMpLHRoaXMubmV0QWdlbnQuc2V0TmV0QWdlbnREZWZhdWx0U2VydmVycyh0KSxudWxsIT0odD10aGlzLm9wdGlvbnMpJiZ0LmN1c3RvbURvbWFpbiYmdGhpcy5uZXRBZ2VudC5zZXROZXRBZ2VudFNwZWNpZmllZFNlcnZlcnMoW1wid3NzOi8vYWNjZXNzaHViLXdzcy5cIit0aGlzLm9wdGlvbnMuY3VzdG9tRG9tYWluK1wiL2FjY2Vzc2h1YlwiXSksdGhpcy5kaXNwYXRjaFNlcnZlcnM9dGhpcy5nZXREaXNwYXRjaFVybCgpLHRoaXMubmV0QWdlbnQuc2V0RGlzcGF0Y2hDb25uZWN0U2VydmVycyh0aGlzLmRpc3BhdGNoU2VydmVycyl9LFdlLnByb3RvdHlwZS5nZXREaXNwYXRjaFVybD1mdW5jdGlvbigpe3ZhciBlPWxvY2FsU3RvcmFnZS5nZXRJdGVtKFYrXCJfXCIrdGhpcy5zdGF0ZUNlbnRlci5hcHBpZCtcIl9cIisodGhpcy5zdGF0ZUNlbnRlci5tb2RlfHxGLm1vZGVObykpO2lmKGUmJihlPWouZGVjcnlwdFN0b3JlcyhlLEcpKSl0cnl7cmV0dXJuIEpTT04ucGFyc2UoZSl9Y2F0Y2goZSl7cmV0dXJuW119cmV0dXJuW119LFdlLnByb3RvdHlwZS5iaW5kV2luZG93TGlzdGVuZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9bmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBhZC9pKXx8bmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBob25lL2kpLG49ai5nZXRCcm93c2VyKCkscj10P1wicGFnZWhpZGVcIjpcIkZpcmVmb3hcIj09PW4/XCJiZWZvcmV1bmxvYWRcIjpcInVubG9hZFwiO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKHIsKGZ1bmN0aW9uKCl7ZS5sb2dnZXIuaW5mbyhVLlJUTV9CSU5EX1dJTkRPV19MSVNURU5FUitcIiBcIityKSxlLmxvZ291dFJvb20oKX0pKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwoZnVuY3Rpb24oKXtlLm5ldE9mZkxpbmVIYW5kbGUoKX0pKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm9ubGluZVwiLChmdW5jdGlvbigpe2UubmV0T25MaW5lSGFuZGxlKCl9KSl9LFdlLnByb3RvdHlwZS5iaW5kV3hMaXN0ZW5lcj1mdW5jdGlvbigpe3ZhciBlPXRoaXM7d3gub25OZXR3b3JrU3RhdHVzQ2hhbmdlKChmdW5jdGlvbih0KXt0LmlzQ29ubmVjdGVkP2UubmV0T25MaW5lSGFuZGxlKCk6ZS5uZXRPZmZMaW5lSGFuZGxlKCl9KSl9LFdlLnByb3RvdHlwZS5yZXRyeVJvb209ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0LmZvckVhY2goKGZ1bmN0aW9uKHQpe3Qucm9vbVRyeUhhbmRsZXImJmUubmV0QWdlbnQuaXNDb25uZWN0KCkmJih0LnJlc2V0U2Vzc2lvbkluZm8oKSx0LnJvb21UcnlIYW5kbGVyLmFjdGl2ZSghMCkpfSkpfSxXZS5wcm90b3R5cGUubmV0T25MaW5lSGFuZGxlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLmxvZ2dlci5pbmZvKFUuUlRNX0JJTkRfV0lORE9XX0xJU1RFTkVSK1wiIG5ldHdvcmsgaXMgb25saW5lXCIpLHRoaXMuc3RhdGVDZW50ZXIubmV0d29ya1N0YXRlPWkub25saW5lLHRoaXMuc3RhdGVDZW50ZXIudXNlTmV0QWdlbnR8fHRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0LmZvckVhY2goKGZ1bmN0aW9uKHQpe3Qucm9vbVRyeUhhbmRsZXImJmUuc2VydmljZS5pc0Rpc0Nvbm5lY3QoKT90LnJvb21UcnlIYW5kbGVyLmFjdGl2ZSgpOnQucm9vbVRyeUhhbmRsZXImJih0LnJvb21UcnlIYW5kbGVyLnN0b3BNYXhUaW1lKCksdC5yb29tSGFuZGxlci5yb29tU3RhdGVIYW5kbGUoXCJDT05ORUNURURcIixrLlJlY29ubmVjdGVkLHtjb2RlOjAsbXNnOlwiXCJ9KSl9KSl9LFdlLnByb3RvdHlwZS5uZXRPZmZMaW5lSGFuZGxlPWZ1bmN0aW9uKCl7dGhpcy5sb2dnZXIuaW5mbyhVLlJUTV9CSU5EX1dJTkRPV19MSVNURU5FUitcIiBuZXR3b3JrIGlzIGJyb2tlblwiKSx0aGlzLnN0YXRlQ2VudGVyLm5ldHdvcmtTdGF0ZT1pLm9mZmxpbmUsdGhpcy5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudHx8dGhpcy5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3QuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5yb29tVHJ5SGFuZGxlciYmKGUucm9vbVRyeUhhbmRsZXIuaW52YWxpZCgpLGUucm9vbVRyeUhhbmRsZXIub25hY3RpdmU9ZnVuY3Rpb24odCxuKXtlLnJvb21IYW5kbGVyLmRpc2Nvbm5lY3RlZEhhbmRsZShuKX0sZS5yb29tVHJ5SGFuZGxlci5zdGFydE1heFRpbWUoKSxlLnJvb21IYW5kbGVyLnJvb21TdGF0ZUhhbmRsZShcIkNPTk5FQ1RJTkdcIixrLlJlY29ubmVjdGluZyxNLk5FVFdPUktfQlJPS0VOKSl9KSl9LFdlLnByb3RvdHlwZS5zZXRMb2dDb25maWc9ZnVuY3Rpb24oZSl7dGhpcy5sb2dnZXIuaW5mbyhVLlJUTV9TRVRfTE9HX0NPTkZJRytcIiBjYWxsXCIpO3ZhciB0PWcoKTtpZih0aGlzLmRhdGFSZXBvcnQubmV3UmVwb3J0KHQpLGUubG9nTGV2ZWwmJltcImRlYnVnXCIsXCJpbmZvXCIsXCJ3YXJuXCIsXCJlcnJvclwiLFwicmVwb3J0XCIsXCJkaXNhYmxlXCJdLmluY2x1ZGVzKGUubG9nTGV2ZWwpJiYodGhpcy5sb2dnZXIuc2V0TG9nTGV2ZWwoZS5sb2dMZXZlbCksdGhpcy5kYXRhUmVwb3J0LmFkZE1zZ0luZm8odCx7bG9nX2xldmVsOm5lLmtaZWdvVGFza1NldExvZy5sb2dfbGV2ZWwoZS5sb2dMZXZlbCl9KSksZS5yZW1vdGVMb2dMZXZlbCYmW1wiZGVidWdcIixcImluZm9cIixcIndhcm5cIixcImVycm9yXCIsXCJyZXBvcnRcIixcImRpc2FibGVcIl0uaW5jbHVkZXMoZS5yZW1vdGVMb2dMZXZlbCkmJnRoaXMuZGF0YVJlcG9ydC5hZGRNc2dJbmZvKHQse3JlbW90ZV9sb2dfbGV2ZWw6bmUua1plZ29UYXNrU2V0TG9nLnJlbW90ZV9sb2dfbGV2ZWwoZS5yZW1vdGVMb2dMZXZlbCl9KSxcInN0cmluZ1wiPT10eXBlb2YgZS5sb2dVUkwmJihlLmxvZ1VSTC5zdGFydHNXaXRoKFwid3NzOi8vXCIpfHxlLmxvZ1VSTC5zdGFydHNXaXRoKFwiaHR0cHM6Ly9cIikpKXRoaXMubG9nZ2VyLnNldExvZ1NlcnZlcihlLmxvZ1VSTCksdGhpcy5kYXRhUmVwb3J0LmFkZE1zZ0luZm8odCx7bG9nX3VybDpuZS5rWmVnb1Rhc2tTZXRMb2cubG9nX3VybChlLmxvZ1VSTCl9KSx0aGlzLmRhdGFSZXBvcnQudXBsb2FkUmVwb3J0KHQsbmUua1plZ29UYXNrU2V0TG9nLmV2ZW50KTtlbHNlIGlmKGUubG9nVVJMKXJldHVybiB0aGlzLmxvZ2dlci5lcnJvcihVLlJUTV9TRVRfTE9HX0NPTkZJRytcImxvZyB1cmwgbXVzdCBiZSBhIHdzcyBvciBodHRwcyB1cmxcIiksdGhpcy5kYXRhUmVwb3J0LmFkZE1zZ0luZm8odCxuZS5rWmVnb1Rhc2tTZXRMb2cuZXJyb3Iua0ludmFsaWRQYXJhbUVycm9yKSx0aGlzLmRhdGFSZXBvcnQudXBsb2FkUmVwb3J0KHQsbmUua1plZ29UYXNrU2V0TG9nLmV2ZW50KSwhMTtyZXR1cm4gdGhpcy5sb2dnZXIuaW5mbyhVLlJUTV9TRVRfTE9HX0NPTkZJRytcIiBjYWxsIHN1Y2Nlc3NcIiksITB9LFdlLnByb3RvdHlwZS5zZXREZWJ1Z1ZlcmJvc2U9ZnVuY3Rpb24oZSl7dmFyIHQ9ZygpO3RoaXMuZGF0YVJlcG9ydC5uZXdSZXBvcnQodCksXCJib29sZWFuXCI9PXR5cGVvZiBlJiYodGhpcy5zdGF0ZUNlbnRlci5kZWJ1Zz1lLHRoaXMuc3RhdGVDZW50ZXIuZGVidWdDdXN0b209ITAsdGhpcy5kYXRhUmVwb3J0LmFkZE1zZ0luZm8odCx7ZGVidWc6bmUua1plZ29UYXNrU2V0RGVidWcuZGVidWcoZT9cInRydWVcIjpcImZhbHNlXCIpfSkpLHRoaXMuZGF0YVJlcG9ydC51cGxvYWRSZXBvcnQodCxuZS5rWmVnb1Rhc2tTZXREZWJ1Zy5ldmVudCksdGhpcy5sb2dnZXIuaW5mbyhVLlJUTV9TRVRfREVCVUdfVkVSQk9TRStcIiBjYWxsIHN1Y2Nlc3NcIil9LFdlLnByb3RvdHlwZS5zZXREZWJ1Zz1mdW5jdGlvbihlKXtcInN0cmluZ1wiPT10eXBlb2YgZSYmLTE8ZS5pbmRleE9mKFwid3NzXCIpP3RoaXMuc3RhdGVDZW50ZXIuZGVidWc9ai5pc1Rlc3RFbnYoZSk6QXJyYXkuaXNBcnJheShlKSYmMDxlLmxlbmd0aCYmZS5ldmVyeSgoZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJi0xPGUuaW5kZXhPZihcIndzc1wiKX0pKT90aGlzLnN0YXRlQ2VudGVyLmRlYnVnPWouaXNUZXN0RW52KGVbMF0pOnRoaXMubG9nZ2VyLmluZm8oVS5SVE1fQ09OU1RSVUNUT1IrXCIgc2VydmVyIHdyb25nXCIpLHRoaXMuc3RhdGVDZW50ZXIudGVzdEVudmlyb25tZW50PXRoaXMuc3RhdGVDZW50ZXIuZGVidWd9LFdlLnByb3RvdHlwZS5yZW5ld1Rva2VuPWZ1bmN0aW9uKGUsdCl7dmFyIG4scj10aGlzLG89ZygpO2lmKHRoaXMuZGF0YVJlcG9ydC5uZXdSZXBvcnQobyksdm9pZCAwIT09dCYmKFwic3RyaW5nXCIhPXR5cGVvZiB0fHxcIlwiPT10KSlyZXR1cm4gdGhpcy5sb2dnZXIuZXJyb3IoVS5SVE1fUkVORVdUT0tFTitcIiByb29tSUQgbXVzdCBiZSBzdHJpbmcgYW5kIG5vIGVtcHR5XCIpLCExO3ZhciBpLHMsYT10aGlzLmdldFJvb21Nb2R1bGVzKHQpfHx0aGlzLnN0YXRlQ2VudGVyLnJvb21Nb2R1bGVzTGlzdFswXTtyZXR1cm4gYT9cInN0cmluZ1wiPT10eXBlb2YgZSYmYS5yb29tVHJ5SGFuZGxlcj8oZT09PWEucm9vbVRyeUhhbmRsZXIudG9rZW4/dGhpcy5sb2dnZXIuaW5mbyhVLlJUTV9SRU5FV1RPS0VOK1wiIHRva2VuIGhhcyBub3QgY2hhbmdlZFwiKTp0aGlzLnN0YXRlQ2VudGVyLmNvbmZpZ1Jvb21BdXRoPyhpPWZ1bmN0aW9uKHQpe3ZhciBuO251bGwhPShuPWEucm9vbVRyeUhhbmRsZXIpJiZuLnJlbmV3TG9jYWxUb2tlbihlLG51bGw9PShuPW51bGw9PXQ/dm9pZCAwOnQuYm9keSk/dm9pZCAwOm4udG9rZW5fcmVtYWluX3RpbWUpLHIuY2xvdWRTZXR0aW5nLnNldFRva2VuKGUpLHIuc3RhdGVDZW50ZXIuY29uZmlnQ2hlY2tUb2tlbj0hMCxyLmxvZ2dlci5pbmZvKFUuUlRNX1JFTkVXVE9LRU4rXCIgXCIrSlNPTi5zdHJpbmdpZnkodCkpfSxzPWZ1bmN0aW9uKHQpe3ZhciBuPW51bGw9PShuPW51bGw9PXQ/dm9pZCAwOnQuYm9keSk/dm9pZCAwOm4uZXJyX2NvZGU7IW58fDEwMDAwMDIwMTQhPT1uJiYyMDE0IT09bj9yLmxvZ2dlci5lcnJvcihVLlJUTV9SRU5FV1RPS0VOK1wiIFwiK0pTT04uc3RyaW5naWZ5KHQpKTooci5zdGF0ZUNlbnRlci5jb25maWdDaGVja1Rva2VuPSExLG51bGwhPShuPWEucm9vbVRyeUhhbmRsZXIpJiZuLnJlbmV3TG9jYWxUb2tlbihlKSxyLmNsb3VkU2V0dGluZy5zZXRUb2tlbihlKSxyLmxvZ2dlci53YXJuKFUuUlRNX1JFTkVXVE9LRU4rXCIgXCIrSlNPTi5zdHJpbmdpZnkodCkpKX0sdGhpcy5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudD9udWxsIT0obj10aGlzLmxpdmVSb29tSGFuZGxlcikmJm4ucmVuZXdUb2tlbih7dG9rZW46ZX0saSxzLGEpOnRoaXMuc2VydmljZS5zZW5kTWVzc2FnZShcInJlbmV3X3Rva2VuXCIse3Rva2VuOmV9LGkscyx2b2lkIDAse3Nlc3Npb25JRDphLnNlc3Npb25JRCxyb29tSUQ6dCxyb29tU2Vzc2lvbklEOmEucm9vbVNlc3Npb25JRH0pKToobnVsbCE9KG49YS5yb29tVHJ5SGFuZGxlcikmJm4ucmVuZXdMb2NhbFRva2VuKGUpLHRoaXMuY2xvdWRTZXR0aW5nLnNldFRva2VuKGUpKSx0aGlzLmRhdGFSZXBvcnQudXBsb2FkUmVwb3J0KG8sbmUua1plZ29UYXNrUmVOZXdUb2tlbi5ldmVudCksITApOihcInN0cmluZ1wiIT10eXBlb2YgZXx8YS5yb29tVHJ5SGFuZGxlcj8odGhpcy5sb2dnZXIuZXJyb3IoVS5SVE1fUkVORVdUT0tFTitcIiB0b2tlbiBtdXN0IGJlIHN0cmluZyBhbmQgbm90IGVtcHR5XCIpLHRoaXMuZGF0YVJlcG9ydC5hZGRNc2dJbmZvKG8se2Vycm9yOm5lLmtaZWdvVGFza1JlTmV3VG9rZW4uZXJyb3IuSU5QVVRfUEFSQU0uY29kZSxtZXNzYWdlOm5lLmtaZWdvVGFza1JlTmV3VG9rZW4uZXJyb3IuSU5QVVRfUEFSQU0ubXNnK1wiIHBhcmFtIHRva2VuIGVycm9yXCJ9KSk6KHRoaXMubG9nZ2VyLmVycm9yKFUuUlRNX1JFTkVXVE9LRU4rXCIgY2FsbGluZyBtdXN0IGFmdGVyIGxvZ2luUm9vbVwiKSx0aGlzLmRhdGFSZXBvcnQuYWRkTXNnSW5mbyhvLHtlcnJvcjpuZS5rWmVnb1Rhc2tSZU5ld1Rva2VuLmVycm9yLk5PVF9MT0dJTi5jb2RlLG1lc3NhZ2U6bmUua1plZ29UYXNrUmVOZXdUb2tlbi5lcnJvci5OT1RfTE9HSU4ubXNnfSkpLHRoaXMuZGF0YVJlcG9ydC51cGxvYWRSZXBvcnQobyxuZS5rWmVnb1Rhc2tSZU5ld1Rva2VuLmV2ZW50KSwhMSk6KHRoaXMubG9nZ2VyLmVycm9yKFUuUlRNX1JFTkVXVE9LRU4rXCIgY2FsbGluZyBtdXN0IGFmdGVyIGxvZ2luUm9vbVwiKSx0aGlzLmRhdGFSZXBvcnQuYWRkTXNnSW5mbyhvLHtlcnJvcjpuZS5rWmVnb1Rhc2tSZU5ld1Rva2VuLmVycm9yLk5PVF9MT0dJTi5jb2RlLG1lc3NhZ2U6bmUua1plZ29UYXNrUmVOZXdUb2tlbi5lcnJvci5OT1RfTE9HSU4ubXNnfSksdGhpcy5kYXRhUmVwb3J0LnVwbG9hZFJlcG9ydChvLG5lLmtaZWdvVGFza1JlTmV3VG9rZW4uZXZlbnQpLCExKX0sV2UucHJvdG90eXBlLnNldENsb3VkU2V0dGluZ1VSTHM9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0aGlzLmxvZ2dlci5pbmZvKFUuUlRNX1NFVF9DTE9VRF9TRVRUSU5HX1VSTFMrXCIgY2FsbCBcIiksQXJyYXkuaXNBcnJheShlKSYmMDxlLmxlbmd0aCYmZS5ldmVyeSgoZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJi0xPGUuaW5kZXhPZihcImh0dHBcIil9KSkmJnRoaXMuY2xvdWRTZXR0aW5nLmluaXQoe3Byb2R1Y3Q6Qi5wcm9kdWN0LGFwcElEOnRoaXMuc3RhdGVDZW50ZXIuYXBwaWQsdXJsczplLGVudjp0aGlzLnN0YXRlQ2VudGVyLkVOVixwb2xsaW5nTm90aWZ5OmZ1bmN0aW9uKGUsbil7dC5sb2dnZXIuaW5mbyhVLlJUTV9TRVRfQ0xPVURfU0VUVElOR19VUkxTLFwiIHNldHRpbmcgZmlsZSBjaGFuZ2VkIFwiK2UrXCIgXCIrSlNPTi5zdHJpbmdpZnkobikpLHQuc3RhdGVDZW50ZXIuYWN0aW9uTGlzdGVuZXIoXCJfY2xvdWRTZXR0aW5nTm90aWZ5XCIsZSxuKX0scmVwb3J0Tm90aWZ5OnRoaXMuY2xvdWRSZXBvcnROb3RpZnkuYmluZCh0aGlzKSxvbmxpbmU6IXRoaXMuc3RhdGVDZW50ZXIudGVzdEVudmlyb25tZW50LHVuaWZ5OnRoaXMuc3RhdGVDZW50ZXIudXNlTmV0QWdlbnQsY29ubmVjdGlvbjp0aGlzLm5ldEFnZW50fSl9LFdlLnByb3RvdHlwZS5sb2dpblJvb209ZnVuY3Rpb24oZSx0LG4scil7dmFyIHM9dGhpcztyZXR1cm4gdGhpcy5sb2dnZXIuaW5mbyhVLlJUTV9MT0dJTl9ST09NK1wiIGNhbGwgYnkgdXNlciBcIisobnVsbD09bj92b2lkIDA6bi51c2VySUQpK1wiIFwiK2UpLG5ldyBQcm9taXNlKChmdW5jdGlvbihhLGMpe3JldHVybiBHZShzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHMsdSxsLGgscD10aGlzO3JldHVybiBWZSh0aGlzLChmdW5jdGlvbihkKXtzd2l0Y2goZC5sYWJlbCl7Y2FzZSAwOnJldHVybiAxIT09dGhpcy5zdGF0ZUNlbnRlci5FTlY/WzMsMl06WzQsbmV3IFByb21pc2UoKGZ1bmN0aW9uKGUpe3d4LmdldE5ldHdvcmtUeXBlKHtzdWNjZXNzOmZ1bmN0aW9uKHQpe3Auc3RhdGVDZW50ZXIubmV0d29ya1N0YXRlPVwibm9uZVwiPT09dC5uZXR3b3JrVHlwZT9pLm9mZmxpbmU6aS5vbmxpbmUsZSgpfSxmYWlsOmZ1bmN0aW9uKHQpe3AubG9nZ2VyLmVycm9yKFUuUlRNX0NPTlNUUlVDVE9SK1wiIG5ldHdvcmsgXCIrSlNPTi5zdHJpbmdpZnkodCkpLHAuc3RhdGVDZW50ZXIubmV0d29ya1N0YXRlPWkub25saW5lLGUoKX19KX0pKV07Y2FzZSAxOmQuc2VudCgpLGQubGFiZWw9MjtjYXNlIDI6cmV0dXJuIHM9dGhpcy5sb2dpblJlcG9ydChhLGMsdCxyKSxsPXMuaW50ZXJSZXNvbHZlLHM9cy5pbnRlclJlamVjdCwocj1yfHx7fSkubWF4TWVtYmVyQ291bnR8fChyLm1heE1lbWJlckNvdW50PTApLHRoaXMubmV0QWdlbnQmJih0aGlzLnN0YXRlQ2VudGVyLmlkTmFtZT1uLnVzZXJJRCx0aGlzLm5ldEFnZW50LnNldFVzZXJJbmZvKG4udXNlcklEKSx0aGlzLnN0YXRlQ2VudGVyLmFjdGlvbkxpc3RlbmVyKFwiX3Jvb21Mb2dpblwiLGUsdCksdGhpcy5uZXRBZ2VudC5pc0Nvbm5lY3QoKSYmdGhpcy5mZXRjaEFwcENvbmZpZyh0KSksdGhpcy5jbG91ZFNldHRpbmcuc2V0VXNlcklEKG4udXNlcklEKSx0aGlzLmNsb3VkU2V0dGluZy5zZXRUb2tlbih0KSx0aGlzLmNsb3VkU2V0dGluZy5hY3RpdmVQb2xsaW5nKCksdGhpcy5zdGF0ZUNlbnRlci5vbkxpc3RlbmVyKFwicm9vbUxvZ2luUmVzcG9uc2VcIiwoZnVuY3Rpb24oZSl7cC5zdGF0ZUNlbnRlci5zZXR0aW5nRmV0Y2hlZHx8KHAuZ2V0Q2xvdWRTZXR0aW5nKCkscC5zdGF0ZUNlbnRlci5hY3Rpb25MaXN0ZW5lcihcIl9zZXR0aW5nQ2FuRmV0Y2hcIikscC5zdGF0ZUNlbnRlci5zZXR0aW5nRmV0Y2hlZD0hMCl9KSksdT10aGlzLmdldFJvb21Nb2R1bGVzKGUpLGg9bmUua1plZ29UYXNrTG9naW5Sb29tLmVycm9yLHU/KHRoaXMubG9nZ2VyLnNldFNlc3Npb25JbmZvKHRoaXMuc3RhdGVDZW50ZXIuYXBwaWQsZSxcIlwiLG4udXNlcklELFwiXCIsdGhpcy5zdGF0ZUNlbnRlci5zZEtWZXJzaW9uKSxzKGguUkVQRUFURURMWV9MT0dJTiksWzJdKTooKHU9bmV3IHBlKGUsdGhpcy5zdGF0ZUNlbnRlcix0aGlzLmxvZ2dlcix0aGlzLmRhdGFSZXBvcnQsdGhpcy5zZXJ2aWNlLHRoaXMsdGhpcy5saXZlUm9vbUhhbmRsZXIpKS5yb29tVHJ5SGFuZGxlcnx8KHUucm9vbVRyeUhhbmRsZXI9bmV3IFgodGhpcy5sb2dnZXIsdGhpcy5zdGF0ZUNlbnRlcix1KSksdS5yb29tVHJ5SGFuZGxlci5pbml0KHRoaXMuc3RhdGVDZW50ZXIucm9vbVJldHJ5VGltZSksdS5yb29tVHJ5SGFuZGxlci5pbml0Um9vbSh1LnJvb21IYW5kbGVyLGUsdCxuLHRoaXMuc3RhdGVDZW50ZXIuc2VydmVyLHRoaXMuc3RhdGVDZW50ZXIuc2VydmVyQmFrLHIpLHUucm9vbVRyeUhhbmRsZXIuc2V0TG9naW5Sb29tQ2FsbGJhY2sobCxzKSx1LnJvb21IYW5kbGVyLnJvb21TdGF0ZUhhbmRsZShcIkNPTk5FQ1RJTkdcIixrLkxvZ2luaW5nLHtjb2RlOjAsbXNnOlwiXCJ9KSwobD1mdW5jdGlvbihlLHQpe3ZhciBuLHIsbz1bXSxpPXt9O2ZvcihuIGluIGUpaVtlW25dLm9yZGVyXT1lW25dLGVbbl0ua2V5PW47Zm9yKHIgaW4gaSlvLnB1c2goaVtyXSk7Zm9yKHZhciBzPTA7czxvLmxlbmd0aDtzKyspZm9yKHZhciBhPW9bc10ucnVsZXMsYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgdT17a2V5Om9bc10ua2V5LHZhbHVlOm9bc10udmFsdWUsYWN0aW9uOnQuYWN0aW9uLGxvZ2dlcjp0LmxvZ2dlcn0sbD11LnZhbHVlLGg9YVtjXS5uYW1lP1wiXCIrYVtjXS5uYW1lOlwiXCI7aWYoKHZvaWQgMD09PWwmJmg9PT1LLk5PVF9FTVBUWXx8dm9pZCAwIT09bCkmJiRbaF0mJihoPSRbaF0odS5rZXksbCx1LmFjdGlvbix1LmxvZ2dlcixhW2NdKSkhPVEpcmV0dXJuIGh9cmV0dXJuIFF9KHtyb29tSUQ6e29yZGVyOjAsdmFsdWU6ZSxydWxlczpbe25hbWU6Sy5OT1RfRU1QVFksZXJyb3I6aC5ST09NX0lEX05VTEx9LHtuYW1lOksuVFlQRV9TVFJJTkcsZXJyb3I6aC5JTlBVVF9QQVJBTSxleHRNc2c6XCJyb29tSUQgbXVzdCBiZSBzdHJpbmdcIn0se25hbWU6Sy5NQVhfTEVOR1RIXzEyOCxlcnJvcjpoLlJPT01fSURfVE9PX0xPTkd9LHtuYW1lOksuSUxMRUdBTF9DSEFSQUNURVJTLGVycm9yOmguUk9PTV9JRF9JTlZBTElEX0NIQVJBQ1RFUn1dfSx0b2tlbjp7b3JkZXI6MSx2YWx1ZTp0LHJ1bGVzOlt7bmFtZTpLLk5PVF9FTVBUWSxlcnJvcjpoLklOUFVUX1BBUkFNfSx7bmFtZTpLLlRZUEVfU1RSSU5HLGVycm9yOmguSU5QVVRfUEFSQU19XX0sdXNlcjp7b3JkZXI6Mix2YWx1ZTpuLHJ1bGVzOlt7bmFtZTpLLk5PVF9FTVBUWSxlcnJvcjpoLklOUFVUX1BBUkFNLGV4dE1zZzpcIiBwYXJhbSB1c2VyIGVycm9yLlwifSx7bmFtZTpLLlRZUEVfT0JKRUNULGVycm9yOmguSU5QVVRfUEFSQU0sZXh0TXNnOlwiIHBhcmFtIHVzZXIgZXJyb3IuXCJ9XX0sXCJ1c2VyLnVzZXJJRFwiOntvcmRlcjozLHZhbHVlOm4udXNlcklELHJ1bGVzOlt7bmFtZTpLLk5PVF9FTVBUWSxlcnJvcjpoLlVTRVJfSURfTlVMTCxleHRNc2c6XCIgcGFyYW0gdXNlciBlcnJvci5cIn0se25hbWU6Sy5UWVBFX1NUUklORyxlcnJvcjpoLklOUFVUX1BBUkFNLGV4dE1zZzpcIiBwYXJhbSB1c2VySUQgZXJyb3IuXCJ9LHtuYW1lOksuTUFYX0xFTkdUSF82NCxlcnJvcjpoLlVTRVJfSURfVE9PX0xPTkd9LHtuYW1lOksuSUxMRUdBTF9DSEFSQUNURVJTLGVycm9yOmguVVNFUl9JRF9JTlZBTElEX0NIQVJBQ1RFUn1dfSxcInVzZXIudXNlck5hbWVcIjp7b3JkZXI6NCx2YWx1ZTpuLnVzZXJOYW1lLHJ1bGVzOlt7bmFtZTpLLlRZUEVfU1RSSU5HLGVycm9yOmguSU5QVVRfUEFSQU0sZXh0TXNnOlwiIHVzZXJOYW1lIG11c3QgYmUgc3RyaW5nLlwifSx7bmFtZTpLLk1BWF9MRU5HVEhfMjU2LGVycm9yOmguVVNFUl9OQU1FX1RPT19MT05HfV19LGNvbmZpZzp7b3JkZXI6NSx2YWx1ZTpyLHJ1bGVzOltdfSxcImNvbmZpZy5tYXhNZW1iZXJDb3VudFwiOntvcmRlcjo2LHZhbHVlOnIubWF4TWVtYmVyQ291bnQscnVsZXM6W3tuYW1lOksuVFlQRV9JTlRFR0VSLGVycm9yOmguSU5QVVRfUEFSQU0sZXh0TXNnOlwiIG1heE1lbWJlckNvdW50IG11c3QgYmUgaW50ZWdlciBudW1iZXIuXCJ9XX19LHthY3Rpb246VS5SVE1fTE9HSU5fUk9PTSxsb2dnZXI6dGhpcy5sb2dnZXJ9KSkhPT1RPyh1LnJvb21IYW5kbGVyLnJvb21TdGF0ZUhhbmRsZShcIkRJU0NPTk5FQ1RFRFwiLGsuTG9naW5GYWlsZWQsbC5lcnJvcixsLmV4dE1zZykscyhsLmVycm9yLGwuZXh0TXNnKSxbMl0pOigwPHRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0Lmxlbmd0aCYmMT09dGhpcy5zdGF0ZUNlbnRlci5pc011bHRpUm9vbT91LmlzTXVsdGk9ITA6emUoW10sdGhpcy5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3QsITApLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJvb21IYW5kbGVyLmxvZ291dCgpfSkpLHImJih1LmNvbmZpZz1yKSx0aGlzLnN0YXRlQ2VudGVyLnJvb21Nb2R1bGVzTGlzdC5wdXNoKHUpLGg9dGhpcy5zdGF0ZUNlbnRlci5zZXR0aW5nQ29uZmlnLmdldFNldHRpbmcoXCJyb29tX3NlcnZlclwiLCEwKSxBcnJheS5pc0FycmF5KGgpJiYwPGgubGVuZ3RoJiYodGhpcy5sb2dnZXIuaW5mbyhVLlJUTV9MT0dJTl9ST09NLFwiIHNldHRpbmcgcm9vbV9zZXJ2ZXIgXCIraCksdGhpcy5zdGF0ZUNlbnRlci5zZXJ2ZXI9aFswXSx0aGlzLnN0YXRlQ2VudGVyLnNlcnZlckJhaz1oWzFdfHxoWzBdKSx0aGlzLnN0YXRlQ2VudGVyLnNldE11bHRpUm9vbT0hMCx1LnJvb21UcnlIYW5kbGVyLnN0YXJ0TWF4VGltZSgpLHRoaXMuc3RhdGVDZW50ZXIudXNlTmV0QWdlbnQmJiF0aGlzLm5ldEFnZW50LmlzQ29ubmVjdCgpPyh0aGlzLmxvZ2dlci5pbmZvKFUuUlRNX0xPR0lOX1JPT00sXCIgdXMgaXMgbm90IGNvbm5lY3RlZFwiKSx1LnJvb21IYW5kbGVyLnNldFJ1blN0YXRlKG8udHJ5bG9naW4pLHRoaXMubmV0QWdlbnQuY29ubmVjdFVhKCkpOnUucm9vbVRyeUhhbmRsZXIuYWN0aXZlKCEwKSxbMl0pKX19KSl9KSl9KSl9LFdlLnByb3RvdHlwZS5oYW5kbGVMb2dVcGxvYWQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnN0YXRlQ2VudGVyLmFwcENvbmZpZy5hcHBfY29uZmlnLmRvbWFpbjtlJiYodGhpcy5zdGF0ZUNlbnRlci5sb2dEb21haW49XCJ3ZWJsb2dnZXJcIi5jb25jYXQodGhpcy5zdGF0ZUNlbnRlci5hcHBpZCxcIi1hcGkuXCIpLmNvbmNhdChlKSxlPVwiXCIsZT0wPT09dGhpcy5zdGF0ZUNlbnRlci5FTlY/XCJ3c3M6Ly9cIi5jb25jYXQodGhpcy5zdGF0ZUNlbnRlci5sb2dEb21haW4sXCIvbG9nXCIpOlwiaHR0cHM6Ly9cIi5jb25jYXQodGhpcy5zdGF0ZUNlbnRlci5sb2dEb21haW4sXCIvaHR0cGxvZ1wiKSx0aGlzLmxvZ2dlci5zZXRMb2dTZXJ2ZXIoZSkpfSxXZS5wcm90b3R5cGUuZmV0Y2hBcHBDb25maWc9ZnVuY3Rpb24oZSl7cmV0dXJuIEdlKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgdCxuLHIsbyxpO3JldHVybiBWZSh0aGlzLChmdW5jdGlvbihzKXtzd2l0Y2gocy5sYWJlbCl7Y2FzZSAwOmlmKHRoaXMuc3RhdGVDZW50ZXIuYXBwQ29uZmlnRmV0Y2hlZClyZXR1cm4gdGhpcy5sb2dnZXIud2FybihVLlJUTV9GRVRDSF9BUFBfQ09ORklHK1wiIGNvbmZpZyBmZXRjaGVkXCIpLFsyXTtpZighdGhpcy5nZXRVc2VySUQoKSlyZXR1cm4gdGhpcy5sb2dnZXIud2FybihVLlJUTV9GRVRDSF9BUFBfQ09ORklHK1wiIHVzZXIgbm90IGV4aXN0XCIpLFsyXTtpZih0PVwiXCIsZSl0PWU7ZWxzZXtpZighKDA8dGhpcy5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3QubGVuZ3RoKSlyZXR1cm4gdGhpcy5sb2dnZXIud2FybihVLlJUTV9GRVRDSF9BUFBfQ09ORklHK1wiIHRva2VuIG5vdCBleGlzdFwiKSxbMl07dD10aGlzLmdldFRva2VuKCl9bj1nKCksdGhpcy5kYXRhUmVwb3J0Lm5ld1JlcG9ydChuLG5lLmtaZWdvU0RLQ29uZmlnSW5pdC5ldmVudCkscy5sYWJlbD0xO2Nhc2UgMTpyZXR1cm4gcy50cnlzLnB1c2goWzEsMywsNF0pLFs0LHRoaXMubmV0QWdlbnQuZ2V0QXBwQ29uZmlnQnlBZ2VudChcImluaXRcIix0LDVlMyldO2Nhc2UgMjpyZXR1cm4gaT1zLnNlbnQoKSxyPWkuY29kZSxpPWkuZGF0YSx0aGlzLmRhdGFSZXBvcnQuYWRkTXNnSW5mbyhuLHt0cmlnZ2VyX3JlYXNvbjpcInJlZnJlc2hcIn0pLHRoaXMuZGF0YVJlcG9ydC51cGxvYWRSZXBvcnQobiksdGhpcy5zdGF0ZUNlbnRlci5hcHBDb25maWdGZXRjaGVkPSEwLHRoaXMubG9nZ2VyLmluZm8oVS5SVE1fTE9HSU5fUk9PTStcIiBpbml0Q29uZmlnIGNvZGU6XCIrcitcIiBkYXRhOiBcIitKU09OLnN0cmluZ2lmeShpKSkscj1pLmFwcF9jb25maWcsaT1pLm1lZGlhX2NvbmZpZyxvPWkucHVibGlzaF9jb25maWcsaT1pLnBsYXlfY29uZmlnLHRoaXMuc3RhdGVDZW50ZXIuYXBwQ29uZmlnPXthcHBfY29uZmlnOnIsbWVkaWFfY29uZmlnOntwdWJsaXNoX2NvbmZpZzpvLHBsYXlfY29uZmlnOml9fSxyPUpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGVDZW50ZXIuYXBwQ29uZmlnKSxvPWouZW5jcnlwdFN0b3JlcyhyLEcpLGxvY2FsU3RvcmFnZS5zZXRJdGVtKHorXCJfXCIrdGhpcy5nZXRBcHBJRCgpK1wiX1wiKyh0aGlzLnN0YXRlQ2VudGVyLm1vZGV8fEYubW9kZU5vKSxvKSx0aGlzLmhhbmRsZUxvZ1VwbG9hZCgpLHRoaXMuc3RhdGVDZW50ZXIuYXBwQ29uZmlnfHx0aGlzLnN0YXRlQ2VudGVyLmFjdGlvbkxpc3RlbmVyKFwiX2FwcENvbmZpZ1JzcFwiKSxbMyw0XTtjYXNlIDM6cmV0dXJuIGk9cy5zZW50KCksdGhpcy5sb2dnZXIuZXJyb3IoVS5SVE1fTE9HSU5fUk9PTStcIiBmYWlsIFwiK0pTT04uc3RyaW5naWZ5KGkpKSx0aGlzLmRhdGFSZXBvcnQuYWRkTXNnSW5mbyhuLHt0cmlnZ2VyX3JlYXNvbjpcInJlZnJlc2hcIn0pLHRoaXMuZGF0YVJlcG9ydC51cGxvYWRSZXBvcnQobiksWzIwMDEyLDIwMDA4XS5pbmNsdWRlcyhudWxsPT1pP3ZvaWQgMDppLmNvZGUpJiZ0aGlzLnN0YXRlQ2VudGVyLnJvb21Nb2R1bGVzTGlzdC5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnJvb21UcnlIYW5kbGVyJiZlLnJvb21UcnlIYW5kbGVyLmxvZ2luRmFpbChNLkFQUElEX0lOVkFMSUQpfSkpLFszLDRdO2Nhc2UgNDpyZXR1cm5bMl19fSkpfSkpfSxXZS5wcm90b3R5cGUuZ2V0Q2xvdWRTZXR0aW5nPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLmNsb3VkU2V0dGluZy5mZXRjaE11bHRpU2V0dGluZyhbeCxcInJvb21cIl0pLnRoZW4oKGZ1bmN0aW9uKHQpe3ZhciBuLHI7ZS5sb2dnZXIuaW5mbyhVLlJUTV9MT0dJTl9ST09NLFwiIHNldHRpbmdDb25maWcgXCIrSlNPTi5zdHJpbmdpZnkodCkpLHQmJihlLnN0YXRlQ2VudGVyLnNldHRpbmdDb25maWcuc2V0U2V0dGluZyhudWxsPT0odD1udWxsPT10P3ZvaWQgMDp0LmluaXQpP3ZvaWQgMDp0LnNldHRpbmcsW1wicmVtb3RlX2xvZ19sZXZlbFwiXSksKHQ9ZS5zdGF0ZUNlbnRlci5zZXR0aW5nQ29uZmlnLmdldFNldHRpbmcoXCJyZW1vdGVfbG9nX2xldmVsXCIsITApKSYmKGUubG9nZ2VyLmluZm8oXCJcIi5jb25jYXQoVS5SVE1fTE9HSU5fUk9PTSxcIiAgc2V0dGluZyByZW1vdGVfbG9nX2xldmVsIFwiKS5jb25jYXQodCkpLGUubG9nZ2VyLnNldFJlbW90ZUxvZ0xldmVsKHQpKSwodD1lLnN0YXRlQ2VudGVyLnNldHRpbmdDb25maWcuZ2V0U2V0dGluZyhcInVuaWZ5XCIsZS5zdGF0ZUNlbnRlci5uZXRIYXNTZXQpKSYmKGUubG9nZ2VyLmluZm8oXCJcIi5jb25jYXQoVS5SVE1fTE9HSU5fUk9PTSxcIiB1bmlmeSBcIikuY29uY2F0KEpTT04uc3RyaW5naWZ5KHQpKSksbj10LmVuYWJsZSx0PXQuc2RrX2Nvbm5fdmVyLCEwLHI9ISEobiYmdDw9Ri5jb25uZWN0VmVyKSwhMD09PWUuc3RhdGVDZW50ZXIudXNlTmV0QWdlbnQmJiExPT09ciYmKGUuY2xvdWRTZXR0aW5nLnNldE9wdGlvbnMoe3VuaWZ5OiExfSksXCJjb25uZWN0aW5nXCIhPT1lLnN0YXRlQ2VudGVyLmNvbm5lY3RTdGF0ZSYmKGUuc3RhdGVDZW50ZXIuY29ubmVjdFN0YXRlPVwiY29ubmVjdGluZ1wiLGUuc3RhdGVDZW50ZXIuYWN0aW9uTGlzdGVuZXIoXCJfY29ubmVjdENoYW5nZWRcIixcImNvbm5lY3RpbmdcIikpLG49emUoW10sZS5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3QsITApLHplKFtdLGUuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0LCEwKS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnJvb21IYW5kbGVyLmxvZ291dCghMCwhMCl9KSksZS5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudD1yLG4uZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIG47ZS5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3QucHVzaCh0KSx0LnJvb21UcnlIYW5kbGVyfHwodC5yb29tVHJ5SGFuZGxlcj1uZXcgWChlLmxvZ2dlcixlLnN0YXRlQ2VudGVyLHQpKSx0LnJvb21UcnlIYW5kbGVyLmluaXQoZS5zdGF0ZUNlbnRlci5yb29tUmV0cnlUaW1lKSx0LnJvb21UcnlIYW5kbGVyLmluaXRSb29tKHQucm9vbUhhbmRsZXIsdC5yb29tSUQsdC50b2tlbix7dXNlcklEOmUuc3RhdGVDZW50ZXIuaWROYW1lLHVzZXJOYW1lOmUuc3RhdGVDZW50ZXIubmlja05hbWV9LGUuc3RhdGVDZW50ZXIuc2VydmVyLGUuc3RhdGVDZW50ZXIuc2VydmVyQmFrLHQuY29uZmlnKSxudWxsIT0obj10LnJvb21UcnlIYW5kbGVyKSYmbi5zdGFydE1heFRpbWUoKSx0LnJvb21UcnlIYW5kbGVyLm9uYWN0aXZlPWZ1bmN0aW9uKG4scil7bj9cImNvbm5lY3RlZFwiIT09ZS5zdGF0ZUNlbnRlci5jb25uZWN0U3RhdGUmJihlLnN0YXRlQ2VudGVyLmNvbm5lY3RTdGF0ZT1cImNvbm5lY3RlZFwiLGUuc3RhdGVDZW50ZXIuYWN0aW9uTGlzdGVuZXIoXCJfY29ubmVjdENoYW5nZWRcIixcImNvbm5lY3RlZFwiLHtyb29tSUQ6dC5yb29tSUR9KSk6dC5yb29tSGFuZGxlci5kaXNjb25uZWN0ZWRIYW5kbGUocil9LG51bGwhPShuPXQucm9vbVRyeUhhbmRsZXIpJiZuLmFjdGl2ZSgpfSkpKSkpfSkpLmNhdGNoKChmdW5jdGlvbih0KXtlLmxvZ2dlci53YXJuKFUuUlRNX0xPR0lOX1JPT00sXCIgc2V0dGluZ0NvbmZpZyBcIitKU09OLnN0cmluZ2lmeSh0KSl9KSksdGhpcy5zdGF0ZUNlbnRlci5vbkxpc3RlbmVyKFwiX2Nsb3VkU2V0dGluZ05vdGlmeVwiLChmdW5jdGlvbih0LG4pe3ZhciByPWcoKSxvPShlLmRhdGFSZXBvcnQubmV3UmVwb3J0KHIsbmUua1plZ29UYXNrQ2xvdWRTZXR0aW5nUmVmcmVzaC5ldmVudCksZS5jbG91ZFNldHRpbmcuZ2V0RW52VmFyaWFibGVzKCkpO2UuZGF0YVJlcG9ydC5hZGRNc2dJbmZvKHIse3BhcmFtczpvLGZpbGVzOlt7bmFtZTp0LGNvbnRlbnQ6bi5zZXR0aW5nLHZlcnNpb25zOm4udmVyc2lvbnN9XX0pLGUuZGF0YVJlcG9ydC51cGxvYWRSZXBvcnQociksdD09PXgmJihlLnN0YXRlQ2VudGVyLnNldHRpbmdDb25maWcuc2V0U2V0dGluZyhudWxsPT1uP3ZvaWQgMDpuLnNldHRpbmcsW1wicmVtb3RlX2xvZ19sZXZlbFwiXSksKG89ZS5zdGF0ZUNlbnRlci5zZXR0aW5nQ29uZmlnLmdldFNldHRpbmcoXCJyZW1vdGVfbG9nX2xldmVsXCIpKSYmKGUubG9nZ2VyLmluZm8oVS5SVE1fTE9HSU5fUk9PTSxcIiBzZXR0aW5nIHJlbW90ZV9sb2dfbGV2ZWwgXCIrbyksZS5sb2dnZXIuc2V0UmVtb3RlTG9nTGV2ZWwobykpKX0pKX0sV2UucHJvdG90eXBlLmNsb3VkUmVwb3J0Tm90aWZ5PWZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtcInJlcXVlc3Rfc3RhcnRcIj09PXQ/KHI9ZygpLHRoaXMuZGF0YVJlcG9ydC5uZXdSZXBvcnQocixuZS5rWmVnb1Rhc2tDbG91ZFNldHRpbmdSZXF1ZXN0LmV2ZW50KSx0aGlzLnN0YXRlQ2VudGVyLnNldHRpbmdDb25maWcucmVxdWVzdExpc3RbZV09cik6XCJyZXF1ZXN0X2VuZFwiPT09dCYmKHI9dGhpcy5zdGF0ZUNlbnRlci5zZXR0aW5nQ29uZmlnLnJlcXVlc3RMaXN0W2VdKSYmKHRoaXMuZGF0YVJlcG9ydC5hZGRNc2dJbmZvKHIse3JlcXVlc3RfZGV0YWlsOm51bGw9PW4/dm9pZCAwOm4ucmVwb3J0RGF0YSxmaWxlczpudWxsPT1uP3ZvaWQgMDpuLmZpbGVzLGVycm9yOm51bGw9PW4/dm9pZCAwOm4uY29kZSxyZXF1ZXN0X3BhcmFtczpudWxsPT1uP3ZvaWQgMDpuLnBhcmFtc30pLHRoaXMuZGF0YVJlcG9ydC51cGxvYWRSZXBvcnQocikpfSxXZS5wcm90b3R5cGUubG9naW5SZXBvcnQ9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG89dGhpcyxpPWcoKSxzPSh0aGlzLnN0YXRlQ2VudGVyLnJlcG9ydFNlcUxpc3QubG9naW49aSxuZS5rWmVnb1Rhc2tMb2dpblJvb20pLGE9KHRoaXMuZGF0YVJlcG9ydC5uZXdSZXBvcnQoaSxzLmV2ZW50KSx0aGlzLmNsb3VkU2V0dGluZy5nZXRFbnZWYXJpYWJsZShcImRldmljZWlkXCIpKTtyZXR1cm4gdGhpcy5kYXRhUmVwb3J0LmFkZE1zZ0luZm8oaSx7ZGV2aWNlaWQ6YSx1c2VfbmE6dGhpcy5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudD8xOjB9KSxcInN0cmluZ1wiPT10eXBlb2YgbiYmdGhpcy5kYXRhUmVwb3J0LmFkZE1zZ0luZm8oaSx7dG9rZW46cy50b2tlbihuKSxpc011bHRpOnRoaXMuc3RhdGVDZW50ZXIuaXNNdWx0aVJvb219KSxyJiYoci51c2VyVXBkYXRlJiZcImJvb2xlYW5cIj09dHlwZW9mIHIudXNlclVwZGF0ZSYmdGhpcy5kYXRhUmVwb3J0LmFkZE1zZ0luZm8oaSx7dXNlcl91cGRhdGU6cy51c2VyX3VwZGF0ZShyLnVzZXJVcGRhdGUrXCJcIil9KSxyLm1heE1lbWJlckNvdW50JiZcIm51bWJlclwiPT10eXBlb2Ygci5tYXhNZW1iZXJDb3VudCYmdGhpcy5kYXRhUmVwb3J0LmFkZE1zZ0luZm8oaSx7bWF4X21lbWJlcl9jb3VudDpzLm1heF9tZW1iZXJfY291bnQoci5tYXhNZW1iZXJDb3VudCtcIlwiKX0pKSxqLmxvZ1JlcG9ydENhbGxiYWNrKHMuZXZlbnQsdGhpcy5kYXRhUmVwb3J0LGksdGhpcy5zdGF0ZUNlbnRlci5yZXBvcnRMaXN0KSx7aW50ZXJSZXNvbHZlOmZ1bmN0aW9uKHQpe28uZGF0YVJlcG9ydC51cGxvYWRSZXBvcnQoaSksby5zdGF0ZUNlbnRlci5yZXBvcnRTZXFMaXN0LmxvZ2luPTAsai51bnJlZ2lzdGVyQ2FsbGJhY2socy5ldmVudCxvLnN0YXRlQ2VudGVyLnJlcG9ydExpc3QpLGUodCl9LGludGVyUmVqZWN0OmZ1bmN0aW9uKGUsbil7dmFyIHIsYTt2b2lkIDA9PT1uJiYobj1cIlwiKSxlLmNvZGU8MmU5JiYxZTk8ZS5jb2RlfHxlLmNvZGU8MWU2PyhyPWouZGVjb2RlU2VydmVyRXJyb3IoZS5jb2RlLGUubXNnKSxhPWouZ2V0TGl2ZVJvb21FcnJvcihlLmNvZGUsby5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudCkpOnI9e2NvZGU6ZS5jb2RlLG1lc3NhZ2U6ZS5tc2d9LHImJm8uZGF0YVJlcG9ydC5hZGRNc2dJbmZvKGkse2Vycm9yOnIuY29kZSxtZXNzYWdlOnIubWVzc2FnZStufSksby5kYXRhUmVwb3J0LnVwbG9hZFJlcG9ydChpKSxvLnN0YXRlQ2VudGVyLnJlcG9ydFNlcUxpc3QubG9naW49MCxqLnVucmVnaXN0ZXJDYWxsYmFjayhzLmV2ZW50LG8uc3RhdGVDZW50ZXIucmVwb3J0TGlzdCksYSYmTVthXSYmKGUuY29kZT1NW2FdLmNvZGUpLGUuY29kZSYmZS5tc2cmJlwiXCIhPT1uP3Qoe2NvZGU6ZS5jb2RlLG1zZzplLm1zZytufSk6dChlKX19fSxXZS5wcm90b3R5cGUubG9nb3V0Um9vbT1mdW5jdGlvbihlKXt0aGlzLmxvZ2dlci5pbmZvKFUuUlRNX0xPR09VVF9ST09NK1wiIGNhbGwgYnkgdXNlciBcIitlKTt2YXIgdD1nKCk7aWYodGhpcy5kYXRhUmVwb3J0Lm5ld1JlcG9ydCh0KSx0aGlzLmRhdGFSZXBvcnQuYWRkTXNnSW5mbyh0LHtyb29taWQ6ZSxpc011bHRpOnRoaXMuc3RhdGVDZW50ZXIuaXNNdWx0aVJvb219KSx2b2lkIDA9PT1lKXplKFtdLHRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0LCEwKS5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gZS5yb29tSGFuZGxlci5sb2dvdXQoITApfSkpLHRoaXMuY2xvdWRTZXR0aW5nLnVuaW5pdCgpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGV8fFwiXCI9PWUpcmV0dXJuIHRoaXMubG9nZ2VyLmVycm9yKFUuUlRNX0xPR09VVF9ST09NK1wiIHJvb21JRCBtdXN0IGJlIHN0cmluZyBhbmQgbm90IGVtcHR5XCIpLHRoaXMuZGF0YVJlcG9ydC5hZGRNc2dJbmZvKHQse2Vycm9yOm5lLmtaZWdvVGFza0xvZ291dFJvb20uZXJyb3IuSU5QVVRfUEFSQU0uY29kZSxtZXNzYWdlOm5lLmtaZWdvVGFza0xvZ291dFJvb20uZXJyb3IuSU5QVVRfUEFSQU0ubXNnK1wiIHBhcmFtIHJvb21JRCBlcnJvclwifSksdm9pZCB0aGlzLmRhdGFSZXBvcnQudXBsb2FkUmVwb3J0KHQsbmUua1plZ29UYXNrTG9nb3V0Um9vbS5ldmVudCk7KGU9dGhpcy5nZXRSb29tTW9kdWxlcyhlKSk/KGUucm9vbUhhbmRsZXIubG9nb3V0KCksMD09PXRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0Lmxlbmd0aCYmdGhpcy5jbG91ZFNldHRpbmcudW5pbml0KCkpOih0aGlzLmxvZ2dlci5lcnJvcihVLlJUTV9MT0dPVVRfUk9PTStcIiByb29tIG5vdCBleGlzdFwiKSx0aGlzLmRhdGFSZXBvcnQuYWRkTXNnSW5mbyh0LHtlcnJvcjpuZS5rWmVnb1Rhc2tMb2dvdXRSb29tLmVycm9yLlJPT01fTk9UX0VYSVNULmNvZGUsbWVzc2FnZTpuZS5rWmVnb1Rhc2tMb2dvdXRSb29tLmVycm9yLlJPT01fTk9UX0VYSVNULm1zZ30pKSx0aGlzLmRhdGFSZXBvcnQudXBsb2FkUmVwb3J0KHQsbmUua1plZ29UYXNrTG9nb3V0Um9vbS5ldmVudCl9fSxXZS5wcm90b3R5cGUubG9naW5IYWxsPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gR2Uocix2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiBWZSh0aGlzLChmdW5jdGlvbihlKXtyZXR1cm5bMl19KSl9KSl9KSl9LFdlLnByb3RvdHlwZS5sb2dpbkhhbGxSZXBvcnQ9ZnVuY3Rpb24oZSx0LG4scil7fSxXZS5wcm90b3R5cGUubG9nb3V0SGFsbD1mdW5jdGlvbigpe30sV2UucHJvdG90eXBlLmVudGVyUm9vbT1mdW5jdGlvbihlLHQpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSx0KXtjb25zb2xlLmVycm9yKEMpLHQoKX0pKX0sV2UucHJvdG90eXBlLmxlYXZlUm9vbT1mdW5jdGlvbigpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSx0KXtjb25zb2xlLmVycm9yKEMpLHQoKX0pKX0sV2UucHJvdG90eXBlLnNlbmRDdXN0b21Db21tYW5kPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKGUsdCl7Y29uc29sZS5lcnJvcihDKSx0KCl9KSl9LFdlLnByb3RvdHlwZS5fc2VuZEN1c3RvbUNvbW1hbmQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSx0KXtjb25zb2xlLmVycm9yKEMpLHQoKX0pKX0sV2UucHJvdG90eXBlLnNlbmRCcm9hZGNhc3RNZXNzYWdlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihlLHQpe2NvbnNvbGUuZXJyb3IoQyksdCgpfSkpfSxXZS5wcm90b3R5cGUuX3NlbmRCcm9hZGNhc3RNZXNzYWdlPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiB2b2lkIDA9PT1uJiYobj0xKSx2b2lkIDA9PT1yJiYocj0xKSxuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSx0KXtjb25zb2xlLmVycm9yKEMpLHQoKX0pKX0sV2UucHJvdG90eXBlLnNldFJvb21FeHRyYUluZm89ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSx0KXtjb25zb2xlLmVycm9yKEMpLHQoKX0pKX0sV2UucHJvdG90eXBlLl9zZXRSb29tRXh0cmFJbmZvPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKGUsdCl7Y29uc29sZS5lcnJvcihDKSx0KCl9KSl9LFdlLnByb3RvdHlwZS5zZW5kQmFycmFnZU1lc3NhZ2U9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKGUsdCl7Y29uc29sZS5lcnJvcihDKSx0KCl9KSl9LFdlLnByb3RvdHlwZS5fc2VuZEJhcnJhZ2VNZXNzYWdlPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiB2b2lkIDA9PT1uJiYobj0xKSx2b2lkIDA9PT1yJiYocj0xKSxuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSx0KXtjb25zb2xlLmVycm9yKEMpLHQoKX0pKX0sV2UucHJvdG90eXBlLnNlbmRSZWxheU1lc3NhZ2U9ZnVuY3Rpb24oZSx0LG4scixvKXtjb25zb2xlLmVycm9yKEMpfSxXZS5wcm90b3R5cGUucmVxdWVzdEpvaW5MaXZlPWZ1bmN0aW9uKGUsdCxuLHIsbyl7cmV0dXJuIGNvbnNvbGUuZXJyb3IoQyksITF9LFdlLnByb3RvdHlwZS5pbnZpdGVKb2luTGl2ZT1mdW5jdGlvbihlLHQsbixyLG8pe3JldHVybiBjb25zb2xlLmVycm9yKEMpLCExfSxXZS5wcm90b3R5cGUuZW5kSm9pbkxpdmU9ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIGNvbnNvbGUuZXJyb3IoQyksITF9LFdlLnByb3RvdHlwZS5yZXNwb25kSm9pbkxpdmU9ZnVuY3Rpb24oZSx0LG4scixvKXtyZXR1cm4gY29uc29sZS5lcnJvcihDKSwhMX0sV2UucHJvdG90eXBlLmdldFZlcnNpb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52ZXJzaW9ufSxXZS5wcm90b3R5cGUuc2V0U2RrQml6VmVyc2lvbj1mdW5jdGlvbihlKXtcInN0cmluZ1wiPT10eXBlb2YgZSYmXCJcIiE9PWUmJih0aGlzLnN0YXRlQ2VudGVyLmJpelZlcnNpb249ZSl9LFdlLnByb3RvdHlwZS5vbj1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLnN0YXRlQ2VudGVyLmxpc3RlbmVyTGlzdFtlXT9cImZ1bmN0aW9uXCIhPXR5cGVvZiB0Pyh0aGlzLmxvZ2dlci5lcnJvcihVLlJUTV9PTitcIiBsaXN0ZW5lciBjYWxsQmFjayBtdXN0IGJlIGZ1bmNpdG9uXCIpLCExKTooLTE9PXRoaXMuc3RhdGVDZW50ZXIubGlzdGVuZXJMaXN0W2VdLmluZGV4T2YodCkmJnRoaXMuc3RhdGVDZW50ZXIubGlzdGVuZXJMaXN0W2VdLnB1c2godCksITApOih0aGlzLmxvZ2dlci5lcnJvcihVLlJUTV9PTitcIiBldmVudCBcIitlK1wiIG5vIGZvdW5kXCIpLCExKX0sV2UucHJvdG90eXBlLm9mZj1mdW5jdGlvbihlLHQpe2lmKCF0aGlzLnN0YXRlQ2VudGVyLmxpc3RlbmVyTGlzdFtlXSlyZXR1cm4gdGhpcy5sb2dnZXIuZXJyb3IoVS5SVE1fT0ZGK1wiIGxpc3RlbmVyIG5vIGZvdW5kXCIpLCExO3ZhciBuPXRoaXMuc3RhdGVDZW50ZXIubGlzdGVuZXJMaXN0W2VdO3JldHVybiB0P24uc3BsaWNlKG4uaW5kZXhPZih0KSwxKTp0aGlzLnN0YXRlQ2VudGVyLmxpc3RlbmVyTGlzdFtlXT1bXSwhMH0sV2UucHJvdG90eXBlLl9vbj1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLnN0YXRlQ2VudGVyLmxpc3RlbmVyTGlzdFtlXT9cImZ1bmN0aW9uXCIhPXR5cGVvZiB0Pyh0aGlzLmxvZ2dlci5lcnJvcihVLlJUTV9PTitcIiBsaXN0ZW5lciBjYWxsQmFjayBtdXN0IGJlIGZ1bmNpdG9uXCIpLCExKTooLTE9PXRoaXMuc3RhdGVDZW50ZXIubGlzdGVuZXJMaXN0W2VdLmluZGV4T2YodCkmJnRoaXMuc3RhdGVDZW50ZXIubGlzdGVuZXJMaXN0W2VdLnB1c2godCksITApOih0aGlzLmxvZ2dlci5lcnJvcihVLlJUTV9PTitcIiBldmVudCBcIitlK1wiIG5vIGZvdW5kXCIpLCExKX0sV2UucHJvdG90eXBlLl9vZmY9ZnVuY3Rpb24oZSx0KXtpZighdGhpcy5zdGF0ZUNlbnRlci5saXN0ZW5lckxpc3RbZV0pcmV0dXJuIHRoaXMubG9nZ2VyLmVycm9yKFUuUlRNX09GRitcIiBsaXN0ZW5lciBubyBmb3VuZFwiKSwhMTt2YXIgbj10aGlzLnN0YXRlQ2VudGVyLmxpc3RlbmVyTGlzdFtlXTtyZXR1cm4gdD9uLnNwbGljZShuLmluZGV4T2YodCksMSk6dGhpcy5zdGF0ZUNlbnRlci5saXN0ZW5lckxpc3RbZV09W10sITB9LFdlLnByb3RvdHlwZS5pc1Rlc3RFbnZpcm9ubWVudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXRlQ2VudGVyLnRlc3RFbnZpcm9ubWVudH0sV2UucHJvdG90eXBlLmlzTG9naW49ZnVuY3Rpb24oZSl7cmV0dXJuISEoZT10aGlzLmdldFJvb21Nb2R1bGVzKGUpfHx0aGlzLnN0YXRlQ2VudGVyLnJvb21Nb2R1bGVzTGlzdFswXSkmJmUuaXNMb2dpbigpfSxXZS5wcm90b3R5cGUuZ2V0TXVsdGlSb29tPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhdGVDZW50ZXIuaXNNdWx0aVJvb219LFdlLnByb3RvdHlwZS5nZXRBcHBJRD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXRlQ2VudGVyLmFwcGlkfSxXZS5wcm90b3R5cGUuZ2V0VXNlcklEPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhdGVDZW50ZXIuaWROYW1lfSxXZS5wcm90b3R5cGUuZ2V0VXNlTmV0QWdlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudH0sV2UucHJvdG90eXBlLmdldFRva2VuPWZ1bmN0aW9uKGUpe3JldHVybih0aGlzLmdldFJvb21Nb2R1bGVzKGUpfHx0aGlzLnN0YXRlQ2VudGVyLnJvb21Nb2R1bGVzTGlzdFswXSkudG9rZW59LFdlLnByb3RvdHlwZS5zZXRSb29tQ3JlYXRlRmxhZz1mdW5jdGlvbihlKXt0aGlzLnN0YXRlQ2VudGVyLnJvb21DcmVhdGVGbGFnPWV9LFdlLnByb3RvdHlwZS5zZXRSb2xlPWZ1bmN0aW9uKGUpe3RoaXMuc3RhdGVDZW50ZXIucm9sZT1lfSxXZS5wcm90b3R5cGUuZ2V0U2Vzc2lvbklkPWZ1bmN0aW9uKGUpe3JldHVybihlPXRoaXMuZ2V0Um9vbU1vZHVsZXMoZSl8fHRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0WzBdKT9lLnNlc3Npb25JRDpcIjBcIn0sV2UucHJvdG90eXBlLmdldFJvb21TZXNzaW9uSUQ9ZnVuY3Rpb24oZSl7cmV0dXJuKGU9dGhpcy5nZXRSb29tTW9kdWxlcyhlKXx8dGhpcy5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3RbMF0pP2Uucm9vbVNlc3Npb25JRDpcIjBcIn0sV2UucHJvdG90eXBlLmdldEFwcENvbmZpZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXRlQ2VudGVyLmFwcENvbmZpZ30sV2UucHJvdG90eXBlLnNldEFjY2Vzcz1mdW5jdGlvbihlKXt0aGlzLnN0YXRlQ2VudGVyLm5ldEhhc1NldD0hMCx0aGlzLnN0YXRlQ2VudGVyLnVzZU5ldEFnZW50PWUsdGhpcy5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudD10aGlzLmdldFNldHRpbmdVbmlmeSghMCksdGhpcy5uZXRBZ2VudC5zZXRBY2Nlc3ModGhpcy5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudCksdGhpcy5jbG91ZFNldHRpbmcuc2V0T3B0aW9ucyh7dW5pZnk6dGhpcy5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudH0pfSxXZS5wcm90b3R5cGUuZW5hYmxlTXVsdGlSb29tPWZ1bmN0aW9uKGUpe3ZhciB0PWcoKTtyZXR1cm4gdGhpcy5kYXRhUmVwb3J0Lm5ld1JlcG9ydCh0LG5lLmtaZWdvRW5hYmxlTXVsdGlSb29tLmV2ZW50KSx0aGlzLmRhdGFSZXBvcnQuYWRkTXNnSW5mbyh0LHtpc011bHRpOmV9KSxcImJvb2xlYW5cIiE9dHlwZW9mIGU/KHRoaXMubG9nZ2VyLmVycm9yKFUuUlRNX0VOQUJMRV9NVUxUSV9ST09NK1wiIHBhcmFtIG11c3QgYmUgYm9vbGVhblwiKSx0aGlzLmRhdGFSZXBvcnQudXBsb2FkUmVwb3J0KHQsdm9pZCAwLG5lLmtaZWdvRW5hYmxlTXVsdGlSb29tLmVycm9yLmtBbHJlYWR5TG9naW5FcnJvciksITEpOjA8dGhpcy5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3QubGVuZ3RofHx0aGlzLnN0YXRlQ2VudGVyLnNldE11bHRpUm9vbT8odGhpcy5sb2dnZXIuZXJyb3IoVS5SVE1fRU5BQkxFX01VTFRJX1JPT00rXCIgbXVsdGkgcm9vbSBjYW4gb25seSBiZSBzZXQgb25jZSBiZWZvcmUgZmlyc3QgbG9naW5cIiksdGhpcy5kYXRhUmVwb3J0LnVwbG9hZFJlcG9ydCh0LHZvaWQgMCxuZS5rWmVnb0VuYWJsZU11bHRpUm9vbS5lcnJvci5rQWxyZWFkeUxvZ2luRXJyb3IpLCExKToodGhpcy5kYXRhUmVwb3J0LnVwbG9hZFJlcG9ydCh0KSx0aGlzLnN0YXRlQ2VudGVyLmlzTXVsdGlSb29tPWUsdGhpcy5zdGF0ZUNlbnRlci5zZXRNdWx0aVJvb209ITApfSxXZS5wcm90b3R5cGUuZ2V0Um9vbU1vZHVsZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0LmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnJvb21JRD09ZX0pKX0sV2UudXNlPWZ1bmN0aW9uKGUpe3N3aXRjaChlLnR5cGUpe2Nhc2VcIm1lc3NhZ2VcIjpjYXNlXCJsaXZlXCI6ZS5pbnN0YWxsKFdlLHBlLG1lLEJlKX19LFdlLnByb3RvdHlwZS5yZXNldFJvb21Ub2tlblRpbWVyPWZ1bmN0aW9uKGUsdCl7KGU9dGhpcy5nZXRSb29tTW9kdWxlcyhlKXx8dGhpcy5zdGF0ZUNlbnRlci5yb29tTW9kdWxlc0xpc3RbMF0pJiZ0JiYwPHQmJmUucm9vbUhhbmRsZXIucmVzZXRUb2tlblRpbWVyKDFlMyp0LXRoaXMuc3RhdGVDZW50ZXIubG9jYWxfdGltZV9kZXZpYXRpb24pfSxXZS5wcm90b3R5cGUuaXNEaXNDb25uZWN0PWZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMuc3RhdGVDZW50ZXIudXNlTmV0QWdlbnQ/dGhpcy5saXZlUm9vbUhhbmRsZXI6dGhpcy5zZXJ2aWNlKS5pc0Rpc0Nvbm5lY3QoKX0sV2UucHJvdG90eXBlLnNlbmRNZXNzYWdlPWZ1bmN0aW9uKGUsdCxuLHIpeyh0aGlzLnN0YXRlQ2VudGVyLnVzZU5ldEFnZW50P3RoaXMubGl2ZVJvb21IYW5kbGVyOnRoaXMuc2VydmljZSkuc2VuZE1lc3NhZ2UoZSx0LG4scil9LFdlLnByb3RvdHlwZS5zZXRQcm90b0Zvcm1hdD1mdW5jdGlvbihlKXtpZighW1wianNvblwiLFwicGJcIl0uaW5jbHVkZXMoZT12b2lkIDA9PT1lP1wianNvblwiOmUpKXRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICdzZXRQcm90b0Zvcm1hdCc6IEFyZ3VtZW50cyAnZm9ybWF0JyBtdXN0IGJlICdqc29uJyBvciAncGInLlwiKTt0aGlzLnN0YXRlQ2VudGVyLnByb3RvRm9ybWF0PWV9LFdlLnByb3RvdHlwZS5zZXRTZGtMb2dpblJlbGF0ZVNlcnZpY2U9ZnVuY3Rpb24oZSl7QXJyYXkuaXNBcnJheShlKSYmZS5ldmVyeSgoZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGV9KSkmJih0aGlzLnN0YXRlQ2VudGVyLnJlbGF0ZVNlcnZpY2U9ZSl9LFdlLnByb3RvdHlwZS5zZW5kTWVzc2FnZUJ5U2VydmljZT1mdW5jdGlvbihlLHQsbixyLG8saSl7cmV0dXJuIHRoaXMuc2VydmljZS5zZW5kTWVzc2FnZShlLHQsbixyLG8saSl9LFdlLnByb3RvdHlwZS5nZXRIZWFkZXI9ZnVuY3Rpb24oZSl7dmFyIHQsbixyPXRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0WzBdO2lmKHImJnIuaXNMb2dpbigpKXJldHVybiB0PXIucm9vbUlELG49ci5zZXNzaW9uSUQscj1yLnJvb21TZXNzaW9uSUQsdGhpcy5zZXJ2aWNlLmdldEhlYWRlcihlLG4sdCxyKTt0aGlzLmxvZ2dlci5lcnJvcihVLlJUTV9HRVRfSEVBREVSK1wiIHJvb20gbm8gZm91bmQgb3Igbm8gbG9naW5cIil9LFdlLnByb3RvdHlwZS5zZW5kUEI9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBVaW50OEFycmF5P3RoaXMuc2VydmljZS5zZW5kUEIoZSk6KHRoaXMubG9nZ2VyLmVycm9yKFUuUlRNX1NFTkRfUEIrXCIgdHlwZSBlcnJvclwiKSwhMSl9LFdlLnByb3RvdHlwZS5vblB1c2hCaXpDaGFubmVsPWZ1bmN0aW9uKGUpe2UmJnRoaXMuc2VydmljZS5vbihcInB1c2hfYml6X2NoYW5uZWxcIixlKX0sV2UucHJvdG90eXBlLmdldFJvb21JRD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXRlQ2VudGVyLnJvb21pZH0sV2UucHJvdG90eXBlLmdldFNlcnZlclRpbWVPZmZzZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGF0ZUNlbnRlci5zZXJ2ZXJUaW1lT2Zmc2V0fSxXZS5wcm90b3R5cGUuaXNVc2VOZXRBZ2VudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXRlQ2VudGVyLnVzZU5ldEFnZW50fSxXZS5wcm90b3R5cGUuZ2V0UmVxSGVhZD1mdW5jdGlvbihlKXtyZXR1cm4gZT1cInN0cmluZ1wiPT10eXBlb2YgZSYmXCJcIiE9PWUmJnRoaXMuZ2V0Um9vbU1vZHVsZXMoZSl8fHRoaXMuc3RhdGVDZW50ZXIucm9vbU1vZHVsZXNMaXN0WzBdLHRoaXMubGl2ZVJvb21IYW5kbGVyLmdldFJlcUhlYWQoZSl9LFdlLnByb3RvdHlwZS5zZW5kU3dpdGNoTWVzc2FnZT1mdW5jdGlvbihlLHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlJiZ0P3RoaXMubGl2ZVJvb21IYW5kbGVyLnNlbmRNZXNzYWdlKGUsdCx2b2lkIDAsdm9pZCAwLHZvaWQgMCwhMSk6LTF9LFdlLnByb3RvdHlwZS5vblN3aXRjaE1lc3NhZ2U9ZnVuY3Rpb24oZSl7ZSYmdGhpcy5saXZlUm9vbUhhbmRsZXImJih0aGlzLmxpdmVSb29tSGFuZGxlci5vblN3aXRjaE1lc3NhZ2U9ZSl9LFdlKTtmdW5jdGlvbiBXZShlLHQsbixyLG8scyxhLGMpe3ZhciB1PXRoaXM7dGhpcy5sb2dnZXI9bix0aGlzLmRhdGFSZXBvcnQ9cix0aGlzLmNsb3VkU2V0dGluZz1vLHRoaXMudmVyc2lvbj1zLHRoaXMub3B0aW9ucz1jLHRoaXMuc3RhdGVDZW50ZXI9bmV3IHJlKHRoaXMubG9nZ2VyLHRoaXMuZGF0YVJlcG9ydCksdGhpcy5zdGF0ZUNlbnRlci5FTlY9YSx0aGlzLmdldFJlcG9ydFNlcT1nLHRoaXMuZ2V0U2VxPWYsdGhpcy5pbml0Q2FsbGJhY2soKSxuPWcoKTtpZih0aGlzLmRhdGFSZXBvcnQubmV3UmVwb3J0KG4pLDAhPWEmJjEhPWF8fHRoaXMuc2V0RGVidWcodCksai5jaGVja0NvbmZpZ1BhcmFtKGUsdCx0aGlzLmxvZ2dlcikpe2lmKHRoaXMuc3RhdGVDZW50ZXIuYXBwaWQ9ZSx0aGlzLnN0YXRlQ2VudGVyLmNvbmZpZ09LPSEwLHRoaXMuc3RhdGVDZW50ZXIuc2RLVmVyc2lvbj10aGlzLnZlcnNpb24sdGhpcy5zdGF0ZUNlbnRlci50ZXN0RW52aXJvbm1lbnQmJih0aGlzLnN0YXRlQ2VudGVyLm1vZGU9VC5NT0RFX1RFU1QpLHRoaXMubmV0QWdlbnQ9bmV3IE4sdGhpcy5sb2dnZXIuc2V0U2Vzc2lvbkluZm8odGhpcy5zdGF0ZUNlbnRlci5hcHBpZCxcIlwiLFwiXCIsXCJcIixcIlwiLHRoaXMudmVyc2lvbiksdGhpcy5uZXRBZ2VudC5pbml0KCksdGhpcy5uZXRBZ2VudC5zZXRMb2dnZXIodGhpcy5sb2dnZXIpLHRoaXMubmV0QWdlbnQuc2V0QXBwSW5mbyh7YXBwSUQ6dGhpcy5zdGF0ZUNlbnRlci5hcHBpZCxlbnY6dGhpcy5zdGF0ZUNlbnRlci5FTlYsbW9kZTp0aGlzLnN0YXRlQ2VudGVyLm1vZGV9KSx0aGlzLmxpdmVSb29tSGFuZGxlcj1uZXcgQmUodGhpcy5sb2dnZXIsdGhpcy5zdGF0ZUNlbnRlcix0aGlzLm5ldEFnZW50LHRoaXMuZGF0YVJlcG9ydCx0aGlzKSx0aGlzLnNlcnZpY2U9bmV3IG1lKHRoaXMuc3RhdGVDZW50ZXIsdGhpcy5sb2dnZXIsdGhpcyksdGhpcy5zdGF0ZUNlbnRlci5kZXZpY2VJRD1qLmdlbmVyYXRlVVVJRChhKSx0aGlzLnN0YXRlQ2VudGVyLnNldHRpbmdDb25maWc9bmV3IHZlLHRoaXMuY2xvdWRTZXR0aW5nLnNldExvZyh0aGlzLmxvZ2dlciksdGhpcy5jbG91ZFNldHRpbmcuaW5pdCh7cHJvZHVjdDpCLnByb2R1Y3QsYXBwSUQ6ZSx1cmxzOkIuVVJMLGVudjphLHBvbGxpbmdOb3RpZnk6ZnVuY3Rpb24oZSx0KXt1LmxvZ2dlci5pbmZvKFUuUlRNX0NPTlNUUlVDVE9SLFwiIHNldHRpbmcgZmlsZSBjaGFuZ2VkIFwiK2UrXCIgXCIrSlNPTi5zdHJpbmdpZnkodCkpLHUuc3RhdGVDZW50ZXIuYWN0aW9uTGlzdGVuZXIoXCJfY2xvdWRTZXR0aW5nTm90aWZ5XCIsZSx0KX0scmVwb3J0Tm90aWZ5OnRoaXMuY2xvdWRSZXBvcnROb3RpZnkuYmluZCh0aGlzKSxvbmxpbmU6IXRoaXMuc3RhdGVDZW50ZXIudGVzdEVudmlyb25tZW50LHVuaWZ5OnRoaXMuc3RhdGVDZW50ZXIudXNlTmV0QWdlbnQsY29ubmVjdGlvbjp0aGlzLm5ldEFnZW50fSksKHI9dGhpcy5zdGF0ZUNlbnRlci5zZXR0aW5nQ29uZmlnLmdldFNldHRpbmcoXCJyZW1vdGVfbG9nX2xldmVsXCIpKSYmKHRoaXMubG9nZ2VyLmluZm8oXCJcIi5jb25jYXQoVS5SVE1fQ09OU1RSVUNUT1IsXCIgc2V0dGluZyByZW1vdGVfbG9nX2xldmVsIGRlZmF1bHQgXCIpLmNvbmNhdChyKSksdGhpcy5sb2dnZXIuc2V0UmVtb3RlTG9nTGV2ZWwocikpLG89XCJcIiwwPT09YT9vPVwicnRjXCI6MT09PWEmJihvPVwieGN4XCIpLHRoaXMuY2xvdWRTZXR0aW5nLnNldEVudlZhcmlhYmxlKFwiZW52aXJvbm1lbnRcIixvKSxzPXRoaXMuY2xvdWRTZXR0aW5nLmdldFNldHRpbmdDYWNoZSh4KSxjPXRoaXMuY2xvdWRTZXR0aW5nLmdldFNldHRpbmdDYWNoZShcInJvb21cIiksUHJvbWlzZS5hbGwoW3MsY10pLnRoZW4oKGZ1bmN0aW9uKGUpe3ZhciB0PW51bGw9PWU/dm9pZCAwOmVbMF0sbj0oKG49KHUuc3RhdGVDZW50ZXIuc2V0dGluZ0NvbmZpZy5zZXRTZXR0aW5nKG51bGw9PXQ/dm9pZCAwOnQuc2V0dGluZyksdS5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudD11LmdldFNldHRpbmdVbmlmeSh1LnN0YXRlQ2VudGVyLm5ldEhhc1NldCksdS5jbG91ZFNldHRpbmcuc2V0T3B0aW9ucyh7dW5pZnk6dS5zdGF0ZUNlbnRlci51c2VOZXRBZ2VudH0pLHUuc3RhdGVDZW50ZXIudXNlTmV0QWdlbnQmJih1LmNyZWF0ZU5ldEFnZW50KCksdS5nZXRTdG9yZUFwcENvbmZpZygpKSx1LnN0YXRlQ2VudGVyLnNldHRpbmdDb25maWcuZ2V0U2V0dGluZyhcInJlbW90ZV9sb2dfbGV2ZWxcIiwhMCkpKSYmKHUubG9nZ2VyLmluZm8oXCJcIi5jb25jYXQoVS5SVE1fQ09OU1RSVUNUT1IsXCIgIHNldHRpbmcgcmVtb3RlX2xvZ19sZXZlbCBcIikuY29uY2F0KG4pKSx1LmxvZ2dlci5zZXRSZW1vdGVMb2dMZXZlbChuKSksbnVsbD09ZT92b2lkIDA6ZVsxXSk7dS5zdGF0ZUNlbnRlci5zZXR0aW5nQ29uZmlnLnNldFNldHRpbmcobnVsbD09bj92b2lkIDA6bi5zZXR0aW5nKSxlPWcoKTt1LmRhdGFSZXBvcnQubmV3UmVwb3J0KGUsbmUua1plZ29UYXNrQ2xvdWRTZXR0aW5nQ2FjaGUuZXZlbnQpLHUuZGF0YVJlcG9ydC5hZGRNc2dJbmZvKGUse2ZpbGVzOlt7bmFtZTp4LGNvbnRlbnQ6bnVsbD09dD92b2lkIDA6dC5zZXR0aW5nLHZlcnNpb25zOm51bGw9PXQ/dm9pZCAwOnQudmVyc2lvbnN9LHtuYW1lOlwicm9vbVwiLGNvbnRlbnQ6bnVsbD09bj92b2lkIDA6bi5zZXR0aW5nLHZlcnNpb25zOm51bGw9PW4/dm9pZCAwOm4udmVyc2lvbnN9XX0pLHUuZGF0YVJlcG9ydC51cGxvYWRSZXBvcnQoZSl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe3UubG9nZ2VyLndhcm4oXCJcIi5jb25jYXQoVS5SVE1fQ09OU1RSVUNUT1IsXCIgIGluaXRDb25maWcgXCIpLmNvbmNhdChKU09OLnN0cmluZ2lmeShlKSkpfSkpLFwic3RyaW5nXCI9PXR5cGVvZiB0Pyh0aGlzLnN0YXRlQ2VudGVyLnNlcnZlcj10LHRoaXMuc3RhdGVDZW50ZXIuc2VydmVyQmFrPXQpOkFycmF5LmlzQXJyYXkodCkmJjA8dC5sZW5ndGgmJih0aGlzLnN0YXRlQ2VudGVyLnNlcnZlcj10WzBdLHRoaXMuc3RhdGVDZW50ZXIuc2VydmVyQmFrPXRbMV18fHRbMF0pLDA9PWF8fDI9PWEpdGhpcy5iaW5kV2luZG93TGlzdGVuZXIoKSx0aGlzLmxvZ2dlci5pbmZvKFwiXCIuY29uY2F0KFUuUlRNX0NPTlNUUlVDVE9SLFwiICBcIikuY29uY2F0KG5hdmlnYXRvci5hcHBWZXJzaW9uKSksdGhpcy5zdGF0ZUNlbnRlci5uZXR3b3JrU3RhdGU9IW5hdmlnYXRvcnx8bmF2aWdhdG9yLm9uTGluZT9pLm9ubGluZTppLm9mZmxpbmUsdGhpcy5kYXRhUmVwb3J0LmFkZE1zZ0luZm8obix7c3lzdGVtX2luZm86bmUua1plZ29UYXNrSW5pdFNldHRpbmcuc3lzdGVtX2luZm99KTtlbHNlIGlmKDE9PWF8fDM9PWEpe3RoaXMuYmluZFd4TGlzdGVuZXIoKTt0cnl7dmFyIGw9d3guZ2V0U3lzdGVtSW5mb1N5bmMoKSxoPXticmFuZDpsLmJyYW5kLG1vZGVsOmwubW9kZWwsc3lzdGVtOmwuc3lzdGVtLHBsYXRmb3JtOmwucGxhdGZvcm0sdmVyc2lvbjpsLnZlcnNpb24sU0RLVmVyc2lvbjpsLlNES1ZlcnNpb259O3RoaXMuZGF0YVJlcG9ydC5hZGRNc2dJbmZvKG4se3N5c3RlbV9pbmZvOmh9KSx0aGlzLmxvZ2dlci53YXJuKFUuUlRNX0NPTlNUUlVDVE9SK1wiIFwiK0pTT04uc3RyaW5naWZ5KGgpKX1jYXRjaChlKXt0aGlzLmxvZ2dlci53YXJuKFUuUlRNX0NPTlNUUlVDVE9SK1wiIGdldCBzeXN0ZW0gaW5mbyBlcnJvclwiKX19fWVsc2UgdGhpcy5sb2dnZXIuZXJyb3IoXCJcIi5jb25jYXQoVS5SVE1fQ09OU1RSVUNUT1IsXCIgaW5pdCBzZGsgZXJyb3JcIikpLHRoaXMuZGF0YVJlcG9ydC5hZGRNc2dJbmZvKG4sbmUua1plZ29UYXNrSW5pdFNldHRpbmcuZXJyb3Iua0ludmFsaWRQYXJhbUVycm9yKTt0aGlzLmRhdGFSZXBvcnQudXBsb2FkUmVwb3J0KG4sbmUua1plZ29UYXNrSW5pdFNldHRpbmcuZXZlbnQpfXZhciBaZT1uKDEyKSxZZT0oS2UucHJvdG90eXBlLnNldExvZz1mdW5jdGlvbihlKXt0aGlzLnplZ29TZXR0aW5nLnNldExvZyhlKX0sS2UucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oZSl7dGhpcy56ZWdvU2V0dGluZy5pbml0KGUpfSxLZS5wcm90b3R5cGUuc2V0RW52VmFyaWFibGU9ZnVuY3Rpb24oZSx0KXt0aGlzLnplZ29TZXR0aW5nLnNldEVudlZhcmlhYmxlKGUsdCl9LEtlLnByb3RvdHlwZS5nZXRFbnZWYXJpYWJsZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy56ZWdvU2V0dGluZy5nZXRFbnZWYXJpYWJsZXMoKX0sS2UucHJvdG90eXBlLmZldGNoU2V0dGluZz1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHRoaXMuemVnb1NldHRpbmcuZmV0Y2hTZXR0aW5nKGUsdCxuKX0sS2UucHJvdG90eXBlLmZldGNoTXVsdGlTZXR0aW5nPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdGhpcy56ZWdvU2V0dGluZy5mZXRjaE11bHRpU2V0dGluZyhlLHQsbil9LEtlLnByb3RvdHlwZS5zZXRPcHRpb25zPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnplZ29TZXR0aW5nLnNldE9wdGlvbnMoZSl9LEtlLnByb3RvdHlwZS5nZXRTZXR0aW5nQ2FjaGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuemVnb1NldHRpbmcuZ2V0U2V0dGluZ0NhY2hlKGUpfSxLZS5wcm90b3R5cGUuc2V0VG9rZW49ZnVuY3Rpb24oZSl7dGhpcy56ZWdvU2V0dGluZy5zZXRUb2tlbihlKX0sS2UucHJvdG90eXBlLnNldFVzZXJJRD1mdW5jdGlvbihlKXt0aGlzLnplZ29TZXR0aW5nLnNldFVzZXJJRChlKX0sS2UucHJvdG90eXBlLmFjdGl2ZVBvbGxpbmc9ZnVuY3Rpb24oKXt0aGlzLnplZ29TZXR0aW5nLmFjdGl2ZVBvbGxpbmcoKX0sS2UucHJvdG90eXBlLnVuaW5pdD1mdW5jdGlvbigpe3ZhciBlO251bGwhPShlPXRoaXMuemVnb1NldHRpbmcpJiZlLnVuaW5pdCgpfSxLZS5wcm90b3R5cGUuZ2V0RW52VmFyaWFibGU9ZnVuY3Rpb24oZSl7dGhpcy56ZWdvU2V0dGluZy5nZXRFbnZWYXJpYWJsZShlKX0sS2UpO2Z1bmN0aW9uIEtlKCl7dGhpcy5pc0xvYWQ9ITEsdGhpcy5jYWxsQmFja0xpc3Q9W10sdGhpcy56ZWdvU2V0dGluZz1uZXcgWmUuWmVnb1NldHRpbmd9SmUucHJvdG90eXBlLmVuYWJsZU11bHRpUm9vbT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy56ZWdvV2ViUlRNLmVuYWJsZU11bHRpUm9vbShlKX0sSmUucHJvdG90eXBlLmxvZ2luUm9vbT1mdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy56ZWdvV2ViUlRNLmxvZ2luUm9vbShlLHQsbixyKX0sSmUucHJvdG90eXBlLmxvZ291dFJvb209ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuemVnb1dlYlJUTS5sb2dvdXRSb29tKGUpfSxKZS5wcm90b3R5cGUucmVuZXdUb2tlbj1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLnplZ29XZWJSVE0ucmVuZXdUb2tlbihlLHQpfSxKZS5wcm90b3R5cGUuc2VuZEJhcnJhZ2VNZXNzYWdlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuemVnb1dlYlJUTS5zZW5kQmFycmFnZU1lc3NhZ2UoZSx0KX0sSmUucHJvdG90eXBlLnNlbmRCcm9hZGNhc3RNZXNzYWdlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuemVnb1dlYlJUTS5zZW5kQnJvYWRjYXN0TWVzc2FnZShlLHQpfSxKZS5wcm90b3R5cGUuc2VuZEN1c3RvbUNvbW1hbmQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0aGlzLnplZ29XZWJSVE0uc2VuZEN1c3RvbUNvbW1hbmQoZSx0LG4pfSxKZS5wcm90b3R5cGUuc2V0Um9vbUV4dHJhSW5mbz1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHRoaXMuemVnb1dlYlJUTS5zZXRSb29tRXh0cmFJbmZvKGUsdCxuKX0sSmUucHJvdG90eXBlLnNldExvZ0NvbmZpZz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy56ZWdvV2ViUlRNLnNldExvZ0NvbmZpZyhlKX0sSmUucHJvdG90eXBlLnNldERlYnVnVmVyYm9zZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy56ZWdvV2ViUlRNLnNldERlYnVnVmVyYm9zZShlKX0sSmUucHJvdG90eXBlLm9uPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuemVnb1dlYlJUTS5vbihlLHQpfSxKZS5wcm90b3R5cGUuZ2V0VmVyc2lvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnplZ29XZWJSVE0uZ2V0VmVyc2lvbigpfSxKZS5wcm90b3R5cGUub2ZmPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuemVnb1dlYlJUTS5vZmYoZSx0KX0sSmUucHJvdG90eXBlLmxvZ2luSGFsbD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHRoaXMuemVnb1dlYlJUTS5sb2dpbkhhbGwoZSx0LG4pfSxKZS5wcm90b3R5cGUubG9nb3V0SGFsbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnplZ29XZWJSVE0ubG9nb3V0SGFsbCgpfSxKZS5wcm90b3R5cGUuZW50ZXJSb29tPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuemVnb1dlYlJUTS5lbnRlclJvb20oZSx0KX0sSmUucHJvdG90eXBlLmxlYXZlUm9vbT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnplZ29XZWJSVE0ubGVhdmVSb29tKCl9LEplLnVzZT1mdW5jdGlvbihlKXtGZS51c2UoZSl9LEplLnZlcnNpb249XCIxLjE4LjBcIjt2YXIgWGU9SmU7ZnVuY3Rpb24gSmUoZSx0LG4scil7dGhpcy5sb2dnZXI9bmV3IGMuWmVnb0xvZ2dlcihuPXZvaWQgMD09PW4/MDpuKSx0aGlzLmRhdGFSZXBvcnQ9bmV3IGMuWmVnb0RhdGFSZXBvcnQodGhpcy5sb2dnZXIpLHRoaXMuY2xvdWRTZXR0aW5nPW5ldyBZZSx0aGlzLnplZ29XZWJSVE09bmV3IEZlKGUsdCx0aGlzLmxvZ2dlcix0aGlzLmRhdGFSZXBvcnQsdGhpcy5jbG91ZFNldHRpbmcsSmUudmVyc2lvbixuLHIpfX1dLHI9e30sdC5tPW4sdC5jPXIsdC5kPWZ1bmN0aW9uKGUsbixyKXt0Lm8oZSxuKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7ZW51bWVyYWJsZTohMCxnZXQ6cn0pfSx0LnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sdC50PWZ1bmN0aW9uKGUsbil7aWYoMSZuJiYoZT10KGUpKSw4Jm4pcmV0dXJuIGU7aWYoNCZuJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciByPU9iamVjdC5jcmVhdGUobnVsbCk7aWYodC5yKHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJm4mJlwic3RyaW5nXCIhPXR5cGVvZiBlKWZvcih2YXIgbyBpbiBlKXQuZChyLG8sZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19LmJpbmQobnVsbCxvKSk7cmV0dXJuIHJ9LHQubj1mdW5jdGlvbihlKXt2YXIgbj1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gdC5kKG4sXCJhXCIsbiksbn0sdC5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSx0LnA9XCJcIix0KHQucz0yMSk7ZnVuY3Rpb24gdChlKXtpZihyW2VdKXJldHVybiByW2VdLmV4cG9ydHM7dmFyIG89cltlXT17aTplLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIG5bZV0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsdCksby5sPSEwLG8uZXhwb3J0c312YXIgbixyfSkpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/zego-express-engine-webrtm/ZegoExpressWebRTM.js\n");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["css/app","/js/vendor"], () => (__webpack_exec__("./resources/js/app.js"), __webpack_exec__("./resources/sass/app.scss")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);